/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
        var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
        var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack2) {
          {
            currentExtraStackFrame = stack2;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack2) {
            {
              currentExtraStackFrame = stack2;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack2 = "";
            if (currentExtraStackFrame) {
              stack2 += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack2 += impl() || "";
            }
            return stack2;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack2 !== "") {
              format += "%s";
              args = args.concat([stack2]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign2 = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign2(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE2:
              return "Fragment";
            case REACT_PORTAL_TYPE2:
              return "Portal";
            case REACT_PROFILER_TYPE2:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE2:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE2:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE2:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE2:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE2:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE2:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE2:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE2,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement35(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement3(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign2({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement2(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE2;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index2.toString(36);
        }
        function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE2:
                  case REACT_PORTAL_TYPE2:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement2(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array2.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement2(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext14(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE2,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE2,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE2,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE2,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef10(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE2) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE2,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE2 || type === REACT_PROFILER_TYPE2 || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE2 || type === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_PROVIDER_TYPE2 || type.$$typeof === REACT_CONTEXT_TYPE2 || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo38(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE2,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext14(Context2) {
          var dispatcher = resolveDispatcher();
          {
            if (Context2._context !== void 0) {
              var realContext = Context2._context;
              if (realContext.Consumer === Context2) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context2) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context2);
        }
        function useState40(initialState2) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState2);
        }
        function useReducer2(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef46(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect46(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect16(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback35(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo26(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle2(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue2(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId2() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore5(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE2:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE2:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE2:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE2:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack2);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement35.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE2) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement3.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel2 = new MessageChannel();
                channel2.port1.onmessage = callback;
                channel2.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component2;
        exports.Fragment = REACT_FRAGMENT_TYPE2;
        exports.Profiler = REACT_PROFILER_TYPE2;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE2;
        exports.Suspense = REACT_SUSPENSE_TYPE2;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext14;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef10;
        exports.isValidElement = isValidElement2;
        exports.lazy = lazy;
        exports.memo = memo38;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback35;
        exports.useContext = useContext14;
        exports.useDebugValue = useDebugValue2;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect46;
        exports.useId = useId2;
        exports.useImperativeHandle = useImperativeHandle2;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect16;
        exports.useMemo = useMemo26;
        exports.useReducer = useReducer2;
        exports.useRef = useRef46;
        exports.useState = useState40;
        exports.useSyncExternalStore = useSyncExternalStore5;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index2 = heap.length;
          heap.push(node);
          siftUp(heap, node, index2);
        }
        function peek2(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last3 = heap.pop();
          if (last3 !== first) {
            heap[0] = last3;
            siftDown(heap, last3, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index2 = i;
          while (index2 > 0) {
            var parentIndex = index2 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index2] = parent;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index2 = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index2 < halfLength) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                heap[index2] = left;
                heap[leftIndex] = node;
                index2 = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek2(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek2(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek2(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek2(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek2(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek2(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler2) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler2();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler2) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler2();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek2(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel2 = new MessageChannel();
          var port = channel2.port2;
          channel2.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React81 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React81.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack2 !== "") {
              format += "%s";
              args = args.concat([stack2]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment72 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef2 = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
        var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
        var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE2:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE2:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE2:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE2:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef2:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE2:
              return "Fragment";
            case REACT_PORTAL_TYPE2:
              return "Portal";
            case REACT_PROFILER_TYPE2:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE2:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE2:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE2:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE2:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE2:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE2:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE2:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef2:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment72:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE2) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current2 = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current2 === null) {
              return null;
            }
            var owner = current2._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current2 === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current2);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current2 = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current2 = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current2;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set3.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track2(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign2({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React81.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign2({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign2({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string2) {
            return string2.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign2({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames2 = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames2.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames2[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst3, registrationName) {
          var stateNode = inst3.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener2 = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst3.type, props)) {
            return null;
          }
          if (listener2 && typeof listener2 !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
          }
          return listener2;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM3) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has2(key) {
          return key._reactInternals !== void 0;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref2 = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref2 | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref2 | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref2 | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current3 = fiber.alternate;
              if (current3 !== null) {
                suspenseState = current3.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign2({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index3 = 0; index3 < TotalLanes; index3++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              nextLanes |= entanglements[index3];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var eventTime = eventTimes[index3];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var expirationTime = expirationTimes[index3];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index3] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set3, subset) {
          return (set3 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set3, subset) {
          return set3 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index3 = laneToIndex(updateLane);
          eventTimes[index3] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            entanglements[index3] = NoLanes;
            eventTimes[index3] = NoTimestamp;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            if (lane & entangledLanes | entanglements[index3] & entangledLanes) {
              entanglements[index3] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index3 = laneToIndex(lanes);
            var lane = 1 << index3;
            var updaters = pendingUpdatersLaneMap[index3];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index3 = laneToIndex(lanes);
            var lane = 1 << index3;
            var updaters = pendingUpdatersLaneMap[index3];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener2) {
          target.addEventListener(eventType, listener2, false);
          return listener2;
        }
        function addEventCaptureListener(target, eventType, listener2) {
          target.addEventListener(eventType, listener2, true);
          return listener2;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
          target.addEventListener(eventType, listener2, {
            capture: true,
            passive
          });
          return listener2;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
          target.addEventListener(eventType, listener2, {
            passive
          });
          return listener2;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign2(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign2({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign2({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign2({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign2({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign2({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign2({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign2({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign2({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign2({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign2({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign2({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign2({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM3 && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM3) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst3, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst3, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM3) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst3 = getTargetInstFunc(domEventName, targetInst);
            if (inst3) {
              createAndAccumulateChangeEvent(dispatchQueue, inst3, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset4) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset4 && nodeEnd >= offset4) {
                return {
                  node,
                  offset: offset4 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM3) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener2, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener2, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener2, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener2, currentTarget) {
          return {
            instance,
            listener: listener2,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener2 = getListener(instance, reactEventName);
                if (listener2 != null) {
                  listeners.push(createDispatchListener(instance, listener2, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst3) {
          if (inst3 === null) {
            return null;
          }
          do {
            inst3 = inst3.return;
          } while (inst3 && inst3.tag !== HostComponent);
          if (inst3) {
            return inst3;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener2) {
            if (listener2 === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop5() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop5;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement35(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track2(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track2(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames2.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames2[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track2(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track2(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string2 = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string2, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement35(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string2 = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string2, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack2;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack2 = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack: stack2
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst3 = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst3) {
            if (inst3.tag === HostComponent || inst3.tag === HostText || inst3.tag === SuspenseComponent || inst3.tag === HostRoot) {
              return inst3;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst3) {
          if (inst3.tag === HostComponent || inst3.tag === HostText) {
            return inst3.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has3 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has3(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index2 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index2 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index2]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index2];
          valueStack[index2] = null;
          {
            fiberStack[index2] = null;
          }
          index2--;
        }
        function push(cursor, value, fiber) {
          index2++;
          valueStack[index2] = cursor.current;
          {
            fiberStack[index2] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign2({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component2 = node.type;
                  if (isContextProvider(Component2)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index3) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index3 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number2) {
          return 32 - clz32(number2);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array2 = [];
            set3.forEach(function(value) {
              array2.push(value);
            });
            return array2.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign2({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current3, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current3.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current3 = workInProgress2.alternate;
          if (current3 !== null) {
            var currentQueue = current3.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign2({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current3 = workInProgress2.alternate;
            if (current3 !== null) {
              var currentQueue = current3.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React81.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst3, payload, callback) {
            var fiber = get(inst3);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst3, payload, callback) {
            var fiber = get(inst3);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst3, callback) {
            var fiber = get(inst3);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE2 && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE2) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current3, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current3, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current3, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst3;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst3 = ownerFiber.stateNode;
              }
              if (!inst3) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst3;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current3 !== null && current3.ref !== null && typeof current3.ref === "function" && current3.ref._stringRef === stringRef) {
                return current3.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current3 = newFiber.alternate;
            if (current3 !== null) {
              var oldIndex = current3.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current3, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE2) {
              return updateFragment2(returnFiber, current3, element.props.children, lanes, element.key);
            }
            if (current3 !== null) {
              if (current3.elementType === elementType || isCompatibleFamilyForHotReloading(current3, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType) === current3.type) {
                var existing = useFiber(current3, element.props);
                existing.ref = coerceRef(returnFiber, current3, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment72) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE2: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE2: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE2: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE2: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE2: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE2: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE2: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE2: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE2:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE2:
                case REACT_PORTAL_TYPE2:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE2:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE2) {
                  if (child.tag === Fragment72) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE2) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE2 && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE2:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE2:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE2:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current3, workInProgress2) {
          if (current3 !== null && workInProgress2.child !== current3.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout2 = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version2 = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version2];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current3, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current3 !== null && current3.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component2(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component2(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current3 !== null && (current3.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current3.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current3, workInProgress2, lanes) {
          workInProgress2.updateQueue = current3.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current3.lanes = removeLanes(current3.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) {
              nextCurrentHook = current3.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState2;
          if (init !== void 0) {
            initialState2 = init(initialArg);
          } else {
            initialState2 = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState2;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState2
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current3 = currentHook;
          var baseQueue = current3.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current3.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current3.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current3.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch2 = queue.dispatch;
          return [hook.memoizedState, dispatch2];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch2 = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch2];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst3 = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst3;
          mountEffect(subscribeToStore.bind(null, fiber, inst3, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst3, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst3 = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst3, subscribe), [subscribe]);
          if (inst3.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst3, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst3, nextSnapshot, getSnapshot) {
          inst3.value = nextSnapshot;
          inst3.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst3)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst3, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst3)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst3) {
          var latestGetSnapshot = inst3.getSnapshot;
          var prevValue = inst3.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState2) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState2 === "function") {
            initialState2 = initialState2();
          }
          hook.memoizedState = hook.baseState = initialState2;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState2
          };
          hook.queue = queue;
          var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch2];
        }
        function updateState(initialState2) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState2) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout2, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout2, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState2) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState2);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack2) {
          return {
            value,
            source: null,
            stack: stack2 != null ? stack2 : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack2 = errorInfo.stack;
              var componentStack = stack2 !== null ? stack2 : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst3 = fiber.stateNode;
          if (inst3 !== null && typeof inst3.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack2 = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack2 !== null ? stack2 : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
          if (current3 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current3, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
              }
            }
          }
          var render2 = Component2.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current3 !== null && !didReceiveUpdate) {
            bailoutHooks(current3, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current3, workInProgress2, Component2, nextProps, renderLanes2) {
          if (current3 === null) {
            var type = Component2.type;
            if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current3, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component2.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current3.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component2.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current3.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current3, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE2) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current3 !== null) {
            var prevProps = current3.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current3.ref === workInProgress2.ref && workInProgress2.type === current3.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current3, renderLanes2)) {
                workInProgress2.lanes = current3.lanes;
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              } else if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current3, workInProgress2, Component2, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current3 !== null ? current3.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current3, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current3, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current3, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current3, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current3 === null && ref !== null || current3 !== null && current3.ref !== ref) {
            workInProgress2.flags |= Ref2;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current3, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current3, workInProgress2, Component2, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current3, workInProgress2, Component2, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current3 !== null && !didReceiveUpdate) {
            bailoutHooks(current3, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current3, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current3 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current3, workInProgress2, Component2, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current3, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
          {
            var inst3 = workInProgress2.stateNode;
            if (shouldUpdate && inst3.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current3, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
          markRef(current3, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, false);
            }
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current3 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current3, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current3 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current3, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current3, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current3 !== null ? current3.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current3, workInProgress2);
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current3, workInProgress2) {
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          workInProgress2.type = Component2;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
          var resolvedProps = resolveDefaultProps(Component2, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
                workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
              }
              child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
              }
              child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef2: {
              {
                workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
              }
              child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE2) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component2, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current3, workInProgress2, renderLanes2) {
          if (current3 !== null) {
            var suspenseState = current3.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current3, renderLanes2) {
          return removeLanes(current3.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current3)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current3 === null || current3.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current3.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current3.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current3, offscreenProps) {
          return createWorkInProgress(current3, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current3, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current3.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current3.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack2;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack2 = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack2);
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current3.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current3, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current3, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current3.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current3);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current3.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index3) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current3 !== null && (current3.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current3, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current3 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current3, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current3, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current3 !== null) {
              current3.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
          if (current3 !== null) {
            workInProgress2.dependencies = current3.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current3, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current3, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current3.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current3];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current3);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current3, renderLanes2) {
          var updateLanes = current3.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current3.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
        }
        function beginWork(current3, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current3 !== null) {
              return remountFiber(current3, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current3 !== null) {
            var oldProps = current3.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current3.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2);
              }
              if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current3, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current3, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component2 = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
              return updateFunctionComponent(current3, workInProgress2, Component2, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current3, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current3, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current3, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current3, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current3, workInProgress2, renderLanes2);
            case ForwardRef2: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current3, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment72:
              return updateFragment(current3, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current3, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current3, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current3, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current3, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current3, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current3, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref2;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current3, workInProgress2) {
          };
          updateHostComponent$1 = function(current3, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current3.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current3, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current3 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current3, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef2:
            case Fragment72:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current3 === null || current3.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current3 !== null) {
                    var prevState = current3.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current3, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current3 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current3, workInProgress2, type, newProps, rootContainerInstance);
                if (current3.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current3 && workInProgress2.stateNode != null) {
                var oldText = current3.memoizedProps;
                updateHostText$1(current3, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current3 === null || current3.memoizedState !== null && current3.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current3 !== null && current3.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current3 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current3, workInProgress2);
              if (current3 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current3 === null || (current3.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current3 !== null) {
                var _prevState = current3.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current3, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current3, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current3, instance) {
          instance.props = current3.memoizedProps;
          instance.state = current3.memoizedState;
          if (current3.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current3);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current3, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout2, current3);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current3, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current3, instance);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current3, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current3, nearestMountedAncestor) {
          try {
            commitAttachRef(current3);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current3, nearestMountedAncestor) {
          var ref = current3.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current3.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current3);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current3, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current3));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current3, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current3 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current3 !== null) {
                  var prevProps = current3.memoizedProps;
                  var prevState = current3.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout2) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout2) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout2) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current3, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current3 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current3.memoizedProps : resolveDefaultProps(finishedWork.type, current3.memoizedProps);
                      var prevState = current3.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current3 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current3 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref2) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout2) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current3 = finishedWork.alternate;
            if (current3 !== null) {
              var prevState = current3.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current3 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref2) {
                if (current3 !== null) {
                  safelyDetachRef(current3, current3.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref2) {
                if (current3 !== null) {
                  safelyDetachRef(current3, current3.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current3 !== null ? current3.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current3 !== null ? current3.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current3 !== null) {
                    var prevRootState = current3.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current3 !== null && current3.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current3 = fiber.alternate;
                var wasHidden = current3 !== null && current3.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root2, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current3 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current3, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current3, nearestMountedAncestor) {
          switch (current3.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (current3.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                recordPassiveEffectDuration(current3);
              } else {
                commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout2 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current3 = root2.current;
          current3.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors2) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors2;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync3(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current3 = interruptedWork.alternate;
              unwindInterruptedWork(current3, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current3 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current3 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current3, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current3, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current3, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current3 = firstChild;
            var subtreeRoot = null;
            while (current3 !== null) {
              var primarySubtreeFlag = current3.subtreeFlags & fiberFlags;
              if (current3 !== subtreeRoot && current3.child !== null && primarySubtreeFlag !== NoFlags) {
                current3 = current3.child;
              } else {
                if ((current3.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current3);
                }
                if (current3.sibling !== null) {
                  current3 = current3.sibling;
                } else {
                  current3 = subtreeRoot = current3.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current2;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current3, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current3, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current3, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current3, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current2;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE2,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef2: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE2) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE2) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE2) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync3(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync3(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component2) {
          if (typeof Component2 === "function") {
            return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
          } else if (Component2 !== void 0 && Component2 !== null) {
            var $$typeof = Component2.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE2) {
              return ForwardRef2;
            }
            if ($$typeof === REACT_MEMO_TYPE2) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current3, pendingProps) {
          var workInProgress2 = current3.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode);
            workInProgress2.elementType = current3.elementType;
            workInProgress2.type = current3.type;
            workInProgress2.stateNode = current3.stateNode;
            {
              workInProgress2._debugSource = current3._debugSource;
              workInProgress2._debugOwner = current3._debugOwner;
              workInProgress2._debugHookTypes = current3._debugHookTypes;
            }
            workInProgress2.alternate = current3;
            current3.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current3.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current3.flags & StaticMask;
          workInProgress2.childLanes = current3.childLanes;
          workInProgress2.lanes = current3.lanes;
          workInProgress2.child = current3.child;
          workInProgress2.memoizedProps = current3.memoizedProps;
          workInProgress2.memoizedState = current3.memoizedState;
          workInProgress2.updateQueue = current3.updateQueue;
          var currentDependencies = current3.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current3.sibling;
          workInProgress2.index = current3.index;
          workInProgress2.ref = current3.ref;
          {
            workInProgress2.selfBaseDuration = current3.selfBaseDuration;
            workInProgress2.treeBaseDuration = current3.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current3.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current3.type);
                break;
              case ForwardRef2:
                workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current3 = workInProgress2.alternate;
          if (current3 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current3.childLanes;
            workInProgress2.lanes = current3.lanes;
            workInProgress2.child = current3.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current3.memoizedProps;
            workInProgress2.memoizedState = current3.memoizedState;
            workInProgress2.updateQueue = current3.updateQueue;
            workInProgress2.type = current3.type;
            var currentDependencies = current3.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current3.selfBaseDuration;
              workInProgress2.treeBaseDuration = current3.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE2:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE2:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE2:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE2:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE2:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE2:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE2:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE2:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE2:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE2:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE2:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment72, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE2;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE2;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE2;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE2;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE2,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component2 = fiber.type;
            if (isContextProvider(Component2)) {
              return processChildContext(fiber, Component2, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current2;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current3 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current3);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current3, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current2 !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current2) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync3(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index3) {
            var key = path[index3];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            if (index3 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
            var oldKey = oldPath[index3];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            if (index3 + 1 === oldPath.length) {
              var newKey = newPath[index3];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index3, value) {
            if (index3 >= path.length) {
              return value;
            }
            var key = path[index3];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current2;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync3(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot6(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE2) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync3();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync3(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has2(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync3(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot6(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync3(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM3 && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports.createRoot = m.createRoot;
      exports.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// manifest.json
var require_manifest = __commonJS({
  "manifest.json"(exports, module2) {
    module2.exports = {
      id: "ink",
      name: "Ink",
      author: "Dale de Silva",
      description: "Hand write or draw directly between paragraphs in your notes using a digital pen, stylus, or Apple pencil. Useful for handwriting, sketches, scribbles, or even math equations and scientific notation. Runs on the tldraw framework and drawing provides an infinite canvas.",
      version: "0.2.6",
      minAppVersion: "1.00.0",
      authorUrl: "https://designdebt.club",
      fundingUrl: "https://ko-fi.com/daledesilva",
      isDesktopOnly: false
    };
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array2[index2];
        if (predicate(value, index2, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array2, values) {
      var index2 = -1, length = values.length, offset4 = array2.length;
      while (++index2 < length) {
        array2[offset4 + index2] = values[index2];
      }
      return array2;
    }
    function arraySome(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object2, key) {
      return object2 == null ? void 0 : object2[key];
    }
    function mapToArray(map) {
      var index2 = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size4 = data.size;
      data.set(key, value);
      this.size += data.size == size4 ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index2 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
      var result = keysFunc(object2);
      return isArray(object2) ? result : arrayPush(result, symbolsFunc(object2));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack2) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack2);
    }
    function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack2) {
      var objIsArr = isArray(object2), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object2)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack2 || (stack2 = new Stack());
        return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack2) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack2);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
          stack2 || (stack2 = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack2);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack2 || (stack2 = new Stack());
      return equalObjects(object2, other, bitmask, customizer, equalFunc, stack2);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object2) {
      if (!isPrototype(object2)) {
        return nativeKeys(object2);
      }
      var result = [];
      for (var key in Object(object2)) {
        if (hasOwnProperty2.call(object2, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack2) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack2.get(array2);
      if (stacked && stack2.get(other)) {
        return stacked == other;
      }
      var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack2.set(array2, other);
      stack2.set(other, array2);
      while (++index2 < arrLength) {
        var arrValue = array2[index2], othValue = other[index2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack2) : customizer(arrValue, othValue, index2, array2, other, stack2);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack2))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack2))) {
          result = false;
          break;
        }
      }
      stack2["delete"](array2);
      stack2["delete"](other);
      return result;
    }
    function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack2) {
      switch (tag) {
        case dataViewTag:
          if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
            return false;
          }
          object2 = object2.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object2, +other);
        case errorTag:
          return object2.name == other.name && object2.message == other.message;
        case regexpTag:
        case stringTag:
          return object2 == other + "";
        case mapTag:
          var convert2 = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert2 || (convert2 = setToArray);
          if (object2.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack2.get(object2);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack2.set(object2, other);
          var result = equalArrays(convert2(object2), convert2(other), bitmask, customizer, equalFunc, stack2);
          stack2["delete"](object2);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object2) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object2, other, bitmask, customizer, equalFunc, stack2) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index2 = objLength;
      while (index2--) {
        var key = objProps[index2];
        if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
          return false;
        }
      }
      var stacked = stack2.get(object2);
      if (stacked && stack2.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack2.set(object2, other);
      stack2.set(other, object2);
      var skipCtor = isPartial;
      while (++index2 < objLength) {
        key = objProps[index2];
        var objValue = object2[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack2) : customizer(objValue, othValue, key, object2, other, stack2);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack2) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object2.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack2["delete"](object2);
      stack2["delete"](other);
      return result;
    }
    function getAllKeys(object2) {
      return baseGetAllKeys(object2, keys, getSymbols);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object2, key) {
      var value = getValue(object2, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
      if (object2 == null) {
        return [];
      }
      object2 = Object(object2);
      return arrayFilter(nativeGetSymbols(object2), function(symbol) {
        return propertyIsEnumerable.call(object2, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto2;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object2) {
      return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = isEqual2;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React81 = require_react();
        var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
        var REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE2 = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE2 = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
        var REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE2 = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React81.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack2 !== "") {
              format += "%s";
              args = args.concat([stack2]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE2 || type === REACT_PROFILER_TYPE2 || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE2 || type === REACT_SUSPENSE_LIST_TYPE2 || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE2 || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_PROVIDER_TYPE2 || type.$$typeof === REACT_CONTEXT_TYPE2 || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE2:
              return "Fragment";
            case REACT_PORTAL_TYPE2:
              return "Portal";
            case REACT_PROFILER_TYPE2:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE2:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE2:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE2:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE2:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE2:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE2:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE2:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE2:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE2:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE2:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE2:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE2: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack2);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE2,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement2(object2) {
          {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE2;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MEMO_TYPE2)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE2) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx146 = jsxWithValidationDynamic;
        var jsxs84 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE2;
        exports.jsx = jsx146;
        exports.jsxs = jsxs84;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module2) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames31() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames31.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module2 !== "undefined" && module2.exports) {
        classNames31.default = classNames31;
        module2.exports = classNames31;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames31;
        });
      } else {
        window.classNames = classNames31;
      }
    })();
  }
});

// node_modules/@use-gesture/core/dist/maths-267f0992.cjs.dev.js
var require_maths_267f0992_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/maths-267f0992.cjs.dev.js"(exports) {
    "use strict";
    function clamp3(v, min3, max2) {
      return Math.max(min3, Math.min(v, max2));
    }
    var V = {
      toVector(v, fallback) {
        if (v === void 0)
          v = fallback;
        return Array.isArray(v) ? v : [v, v];
      },
      add(v1, v2) {
        return [v1[0] + v2[0], v1[1] + v2[1]];
      },
      sub(v1, v2) {
        return [v1[0] - v2[0], v1[1] - v2[1]];
      },
      addTo(v1, v2) {
        v1[0] += v2[0];
        v1[1] += v2[1];
      },
      subTo(v1, v2) {
        v1[0] -= v2[0];
        v1[1] -= v2[1];
      }
    };
    function rubberband(distance, dimension, constant) {
      if (dimension === 0 || Math.abs(dimension) === Infinity)
        return Math.pow(distance, constant * 5);
      return distance * dimension * constant / (dimension + constant * distance);
    }
    function rubberbandIfOutOfBounds(position, min3, max2, constant = 0.15) {
      if (constant === 0)
        return clamp3(position, min3, max2);
      if (position < min3)
        return -rubberband(min3 - position, max2 - min3, constant) + min3;
      if (position > max2)
        return +rubberband(position - max2, max2 - min3, constant) + max2;
      return position;
    }
    function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
      const [[X0, X1], [Y0, Y1]] = bounds;
      return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
    }
    exports.V = V;
    exports.computeRubberband = computeRubberband;
    exports.rubberbandIfOutOfBounds = rubberbandIfOutOfBounds;
  }
});

// node_modules/@use-gesture/core/dist/actions-6579bdef.cjs.dev.js
var require_actions_6579bdef_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/actions-6579bdef.cjs.dev.js"(exports) {
    "use strict";
    var maths = require_maths_267f0992_cjs_dev();
    function _toPrimitive2(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey2(arg) {
      var key = _toPrimitive2(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _defineProperty2(obj, key, value) {
      key = _toPropertyKey2(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ownKeys2(e, r) {
      var t2 = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r2) {
          return Object.getOwnPropertyDescriptor(e, r2).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread22(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t2 = arguments[r] != null ? arguments[r] : {};
        r % 2 ? ownKeys2(Object(t2), true).forEach(function(r2) {
          _defineProperty2(e, r2, t2[r2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t2)) : ownKeys2(Object(t2)).forEach(function(r2) {
          Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t2, r2));
        });
      }
      return e;
    }
    var EVENT_TYPE_MAP = {
      pointer: {
        start: "down",
        change: "move",
        end: "up"
      },
      mouse: {
        start: "down",
        change: "move",
        end: "up"
      },
      touch: {
        start: "start",
        change: "move",
        end: "end"
      },
      gesture: {
        start: "start",
        change: "change",
        end: "end"
      }
    };
    function capitalize(string2) {
      if (!string2)
        return "";
      return string2[0].toUpperCase() + string2.slice(1);
    }
    var actionsWithoutCaptureSupported = ["enter", "leave"];
    function hasCapture(capture = false, actionKey) {
      return capture && !actionsWithoutCaptureSupported.includes(actionKey);
    }
    function toHandlerProp(device, action = "", capture = false) {
      const deviceProps = EVENT_TYPE_MAP[device];
      const actionKey = deviceProps ? deviceProps[action] || action : action;
      return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
    }
    var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
    function parseProp(prop) {
      let eventKey = prop.substring(2).toLowerCase();
      const passive = !!~eventKey.indexOf("passive");
      if (passive)
        eventKey = eventKey.replace("passive", "");
      const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
      const capture = !!~eventKey.indexOf(captureKey);
      if (capture)
        eventKey = eventKey.replace("capture", "");
      return {
        device: eventKey,
        capture,
        passive
      };
    }
    function toDomEventType(device, action = "") {
      const deviceProps = EVENT_TYPE_MAP[device];
      const actionKey = deviceProps ? deviceProps[action] || action : action;
      return device + actionKey;
    }
    function isTouch(event) {
      return "touches" in event;
    }
    function getPointerType(event) {
      if (isTouch(event))
        return "touch";
      if ("pointerType" in event)
        return event.pointerType;
      return "mouse";
    }
    function getCurrentTargetTouchList(event) {
      return Array.from(event.touches).filter((e) => {
        var _event$currentTarget, _event$currentTarget$;
        return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));
      });
    }
    function getTouchList(event) {
      return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
    }
    function getValueEvent(event) {
      return isTouch(event) ? getTouchList(event)[0] : event;
    }
    function distanceAngle(P1, P2) {
      try {
        const dx = P2.clientX - P1.clientX;
        const dy = P2.clientY - P1.clientY;
        const cx = (P2.clientX + P1.clientX) / 2;
        const cy = (P2.clientY + P1.clientY) / 2;
        const distance = Math.hypot(dx, dy);
        const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
        const origin = [cx, cy];
        return {
          angle,
          distance,
          origin
        };
      } catch (_unused) {
      }
      return null;
    }
    function touchIds(event) {
      return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
    }
    function touchDistanceAngle(event, ids) {
      const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
      return distanceAngle(P1, P2);
    }
    function pointerId(event) {
      const valueEvent = getValueEvent(event);
      return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
    }
    function pointerValues(event) {
      const valueEvent = getValueEvent(event);
      return [valueEvent.clientX, valueEvent.clientY];
    }
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;
    function wheelValues(event) {
      let {
        deltaX,
        deltaY,
        deltaMode
      } = event;
      if (deltaMode === 1) {
        deltaX *= LINE_HEIGHT;
        deltaY *= LINE_HEIGHT;
      } else if (deltaMode === 2) {
        deltaX *= PAGE_HEIGHT;
        deltaY *= PAGE_HEIGHT;
      }
      return [deltaX, deltaY];
    }
    function scrollValues(event) {
      var _ref, _ref2;
      const {
        scrollX,
        scrollY,
        scrollLeft,
        scrollTop
      } = event.currentTarget;
      return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
    }
    function getEventDetails(event) {
      const payload = {};
      if ("buttons" in event)
        payload.buttons = event.buttons;
      if ("shiftKey" in event) {
        const {
          shiftKey,
          altKey: altKey2,
          metaKey,
          ctrlKey
        } = event;
        Object.assign(payload, {
          shiftKey,
          altKey: altKey2,
          metaKey,
          ctrlKey
        });
      }
      return payload;
    }
    function call(v, ...args) {
      if (typeof v === "function") {
        return v(...args);
      } else {
        return v;
      }
    }
    function noop5() {
    }
    function chain(...fns) {
      if (fns.length === 0)
        return noop5;
      if (fns.length === 1)
        return fns[0];
      return function() {
        let result;
        for (const fn of fns) {
          result = fn.apply(this, arguments) || result;
        }
        return result;
      };
    }
    function assignDefault(value, fallback) {
      return Object.assign({}, fallback, value || {});
    }
    var BEFORE_LAST_KINEMATICS_DELAY = 32;
    var Engine = class {
      constructor(ctrl, args, key) {
        this.ctrl = ctrl;
        this.args = args;
        this.key = key;
        if (!this.state) {
          this.state = {};
          this.computeValues([0, 0]);
          this.computeInitial();
          if (this.init)
            this.init();
          this.reset();
        }
      }
      get state() {
        return this.ctrl.state[this.key];
      }
      set state(state) {
        this.ctrl.state[this.key] = state;
      }
      get shared() {
        return this.ctrl.state.shared;
      }
      get eventStore() {
        return this.ctrl.gestureEventStores[this.key];
      }
      get timeoutStore() {
        return this.ctrl.gestureTimeoutStores[this.key];
      }
      get config() {
        return this.ctrl.config[this.key];
      }
      get sharedConfig() {
        return this.ctrl.config.shared;
      }
      get handler() {
        return this.ctrl.handlers[this.key];
      }
      reset() {
        const {
          state,
          shared,
          ingKey,
          args
        } = this;
        shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
        state._step = [false, false];
        state.intentional = false;
        state._movement = [0, 0];
        state._distance = [0, 0];
        state._direction = [0, 0];
        state._delta = [0, 0];
        state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
        state.args = args;
        state.axis = void 0;
        state.memo = void 0;
        state.elapsedTime = state.timeDelta = 0;
        state.direction = [0, 0];
        state.distance = [0, 0];
        state.overflow = [0, 0];
        state._movementBound = [false, false];
        state.velocity = [0, 0];
        state.movement = [0, 0];
        state.delta = [0, 0];
        state.timeStamp = 0;
      }
      start(event) {
        const state = this.state;
        const config = this.config;
        if (!state._active) {
          this.reset();
          this.computeInitial();
          state._active = true;
          state.target = event.target;
          state.currentTarget = event.currentTarget;
          state.lastOffset = config.from ? call(config.from, state) : state.offset;
          state.offset = state.lastOffset;
          state.startTime = state.timeStamp = event.timeStamp;
        }
      }
      computeValues(values) {
        const state = this.state;
        state._values = values;
        state.values = this.config.transform(values);
      }
      computeInitial() {
        const state = this.state;
        state._initial = state._values;
        state.initial = state.values;
      }
      compute(event) {
        const {
          state,
          config,
          shared
        } = this;
        state.args = this.args;
        let dt = 0;
        if (event) {
          state.event = event;
          if (config.preventDefault && event.cancelable)
            state.event.preventDefault();
          state.type = event.type;
          shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
          shared.locked = !!document.pointerLockElement;
          Object.assign(shared, getEventDetails(event));
          shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
          dt = event.timeStamp - state.timeStamp;
          state.timeStamp = event.timeStamp;
          state.elapsedTime = state.timeStamp - state.startTime;
        }
        if (state._active) {
          const _absoluteDelta = state._delta.map(Math.abs);
          maths.V.addTo(state._distance, _absoluteDelta);
        }
        if (this.axisIntent)
          this.axisIntent(event);
        const [_m0, _m1] = state._movement;
        const [t0, t1] = config.threshold;
        const {
          _step,
          values
        } = state;
        if (config.hasCustomTransform) {
          if (_step[0] === false)
            _step[0] = Math.abs(_m0) >= t0 && values[0];
          if (_step[1] === false)
            _step[1] = Math.abs(_m1) >= t1 && values[1];
        } else {
          if (_step[0] === false)
            _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
          if (_step[1] === false)
            _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
        }
        state.intentional = _step[0] !== false || _step[1] !== false;
        if (!state.intentional)
          return;
        const movement = [0, 0];
        if (config.hasCustomTransform) {
          const [v0, v1] = values;
          movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
          movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
        } else {
          movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
          movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
        }
        if (this.restrictToAxis && !state._blocked)
          this.restrictToAxis(movement);
        const previousOffset = state.offset;
        const gestureIsActive = state._active && !state._blocked || state.active;
        if (gestureIsActive) {
          state.first = state._active && !state.active;
          state.last = !state._active && state.active;
          state.active = shared[this.ingKey] = state._active;
          if (event) {
            if (state.first) {
              if ("bounds" in config)
                state._bounds = call(config.bounds, state);
              if (this.setup)
                this.setup();
            }
            state.movement = movement;
            this.computeOffset();
          }
        }
        const [ox, oy] = state.offset;
        const [[x0, x1], [y0, y1]] = state._bounds;
        state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
        state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
        state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
        const rubberband = state._active ? config.rubberband || [0, 0] : [0, 0];
        state.offset = maths.computeRubberband(state._bounds, state.offset, rubberband);
        state.delta = maths.V.sub(state.offset, previousOffset);
        this.computeMovement();
        if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
          state.delta = maths.V.sub(state.offset, previousOffset);
          const absoluteDelta = state.delta.map(Math.abs);
          maths.V.addTo(state.distance, absoluteDelta);
          state.direction = state.delta.map(Math.sign);
          state._direction = state._delta.map(Math.sign);
          if (!state.first && dt > 0) {
            state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
            state.timeDelta = dt;
          }
        }
      }
      emit() {
        const state = this.state;
        const shared = this.shared;
        const config = this.config;
        if (!state._active)
          this.clean();
        if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
          return;
        const memo38 = this.handler(_objectSpread22(_objectSpread22(_objectSpread22({}, shared), state), {}, {
          [this.aliasKey]: state.values
        }));
        if (memo38 !== void 0)
          state.memo = memo38;
      }
      clean() {
        this.eventStore.clean();
        this.timeoutStore.clean();
      }
    };
    function selectAxis([dx, dy], threshold) {
      const absDx = Math.abs(dx);
      const absDy = Math.abs(dy);
      if (absDx > absDy && absDx > threshold) {
        return "x";
      }
      if (absDy > absDx && absDy > threshold) {
        return "y";
      }
      return void 0;
    }
    var CoordinatesEngine = class extends Engine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "aliasKey", "xy");
      }
      reset() {
        super.reset();
        this.state.axis = void 0;
      }
      init() {
        this.state.offset = [0, 0];
        this.state.lastOffset = [0, 0];
      }
      computeOffset() {
        this.state.offset = maths.V.add(this.state.lastOffset, this.state.movement);
      }
      computeMovement() {
        this.state.movement = maths.V.sub(this.state.offset, this.state.lastOffset);
      }
      axisIntent(event) {
        const state = this.state;
        const config = this.config;
        if (!state.axis && event) {
          const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
          state.axis = selectAxis(state._movement, threshold);
        }
        state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
      }
      restrictToAxis(v) {
        if (this.config.axis || this.config.lockDirection) {
          switch (this.state.axis) {
            case "x":
              v[1] = 0;
              break;
            case "y":
              v[0] = 0;
              break;
          }
        }
      }
    };
    var identity = (v) => v;
    var DEFAULT_RUBBERBAND = 0.15;
    var commonConfigResolver = {
      enabled(value = true) {
        return value;
      },
      eventOptions(value, _k, config) {
        return _objectSpread22(_objectSpread22({}, config.shared.eventOptions), value);
      },
      preventDefault(value = false) {
        return value;
      },
      triggerAllEvents(value = false) {
        return value;
      },
      rubberband(value = 0) {
        switch (value) {
          case true:
            return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
          case false:
            return [0, 0];
          default:
            return maths.V.toVector(value);
        }
      },
      from(value) {
        if (typeof value === "function")
          return value;
        if (value != null)
          return maths.V.toVector(value);
      },
      transform(value, _k, config) {
        const transform = value || config.shared.transform;
        this.hasCustomTransform = !!transform;
        if (true) {
          const originalTransform = transform || identity;
          return (v) => {
            const r = originalTransform(v);
            if (!isFinite(r[0]) || !isFinite(r[1])) {
              console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[1]}]`);
            }
            return r;
          };
        }
        return transform || identity;
      },
      threshold(value) {
        return maths.V.toVector(value, 0);
      }
    };
    if (true) {
      Object.assign(commonConfigResolver, {
        domTarget(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          return NaN;
        },
        lockDirection(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
          }
          return NaN;
        },
        initial(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
          }
          return NaN;
        }
      });
    }
    var DEFAULT_AXIS_THRESHOLD = 0;
    var coordinatesConfigResolver = _objectSpread22(_objectSpread22({}, commonConfigResolver), {}, {
      axis(_v, _k, {
        axis
      }) {
        this.lockDirection = axis === "lock";
        if (!this.lockDirection)
          return axis;
      },
      axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
        return value;
      },
      bounds(value = {}) {
        if (typeof value === "function") {
          return (state) => coordinatesConfigResolver.bounds(value(state));
        }
        if ("current" in value) {
          return () => value.current;
        }
        if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
          return value;
        }
        const {
          left = -Infinity,
          right = Infinity,
          top = -Infinity,
          bottom = Infinity
        } = value;
        return [[left, right], [top, bottom]];
      }
    });
    var KEYS_DELTA_MAP = {
      ArrowRight: (displacement, factor = 1) => [displacement * factor, 0],
      ArrowLeft: (displacement, factor = 1) => [-1 * displacement * factor, 0],
      ArrowUp: (displacement, factor = 1) => [0, -1 * displacement * factor],
      ArrowDown: (displacement, factor = 1) => [0, displacement * factor]
    };
    var DragEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "dragging");
      }
      reset() {
        super.reset();
        const state = this.state;
        state._pointerId = void 0;
        state._pointerActive = false;
        state._keyboardActive = false;
        state._preventScroll = false;
        state._delayed = false;
        state.swipe = [0, 0];
        state.tap = false;
        state.canceled = false;
        state.cancel = this.cancel.bind(this);
      }
      setup() {
        const state = this.state;
        if (state._bounds instanceof HTMLElement) {
          const boundRect = state._bounds.getBoundingClientRect();
          const targetRect = state.currentTarget.getBoundingClientRect();
          const _bounds = {
            left: boundRect.left - targetRect.left + state.offset[0],
            right: boundRect.right - targetRect.right + state.offset[0],
            top: boundRect.top - targetRect.top + state.offset[1],
            bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
          };
          state._bounds = coordinatesConfigResolver.bounds(_bounds);
        }
      }
      cancel() {
        const state = this.state;
        if (state.canceled)
          return;
        state.canceled = true;
        state._active = false;
        setTimeout(() => {
          this.compute();
          this.emit();
        }, 0);
      }
      setActive() {
        this.state._active = this.state._pointerActive || this.state._keyboardActive;
      }
      clean() {
        this.pointerClean();
        this.state._pointerActive = false;
        this.state._keyboardActive = false;
        super.clean();
      }
      pointerDown(event) {
        const config = this.config;
        const state = this.state;
        if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons))
          return;
        const ctrlIds = this.ctrl.setEventIds(event);
        if (config.pointerCapture) {
          event.target.setPointerCapture(event.pointerId);
        }
        if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
          return;
        this.start(event);
        this.setupPointer(event);
        state._pointerId = pointerId(event);
        state._pointerActive = true;
        this.computeValues(pointerValues(event));
        this.computeInitial();
        if (config.preventScrollAxis && getPointerType(event) !== "mouse") {
          state._active = false;
          this.setupScrollPrevention(event);
        } else if (config.delay > 0) {
          this.setupDelayTrigger(event);
          if (config.triggerAllEvents) {
            this.compute(event);
            this.emit();
          }
        } else {
          this.startPointerDrag(event);
        }
      }
      startPointerDrag(event) {
        const state = this.state;
        state._active = true;
        state._preventScroll = true;
        state._delayed = false;
        this.compute(event);
        this.emit();
      }
      pointerMove(event) {
        const state = this.state;
        const config = this.config;
        if (!state._pointerActive)
          return;
        const id = pointerId(event);
        if (state._pointerId !== void 0 && id !== state._pointerId)
          return;
        const _values = pointerValues(event);
        if (document.pointerLockElement === event.target) {
          state._delta = [event.movementX, event.movementY];
        } else {
          state._delta = maths.V.sub(_values, state._values);
          this.computeValues(_values);
        }
        maths.V.addTo(state._movement, state._delta);
        this.compute(event);
        if (state._delayed && state.intentional) {
          this.timeoutStore.remove("dragDelay");
          state.active = false;
          this.startPointerDrag(event);
          return;
        }
        if (config.preventScrollAxis && !state._preventScroll) {
          if (state.axis) {
            if (state.axis === config.preventScrollAxis || config.preventScrollAxis === "xy") {
              state._active = false;
              this.clean();
              return;
            } else {
              this.timeoutStore.remove("startPointerDrag");
              this.startPointerDrag(event);
              return;
            }
          } else {
            return;
          }
        }
        this.emit();
      }
      pointerUp(event) {
        this.ctrl.setEventIds(event);
        try {
          if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
            ;
            event.target.releasePointerCapture(event.pointerId);
          }
        } catch (_unused) {
          if (true) {
            console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
          }
        }
        const state = this.state;
        const config = this.config;
        if (!state._active || !state._pointerActive)
          return;
        const id = pointerId(event);
        if (state._pointerId !== void 0 && id !== state._pointerId)
          return;
        this.state._pointerActive = false;
        this.setActive();
        this.compute(event);
        const [dx, dy] = state._distance;
        state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;
        if (state.tap && config.filterTaps) {
          state._force = true;
        } else {
          const [_dx, _dy] = state._delta;
          const [_mx, _my] = state._movement;
          const [svx, svy] = config.swipe.velocity;
          const [sx, sy] = config.swipe.distance;
          const sdt = config.swipe.duration;
          if (state.elapsedTime < sdt) {
            const _vx = Math.abs(_dx / state.timeDelta);
            const _vy = Math.abs(_dy / state.timeDelta);
            if (_vx > svx && Math.abs(_mx) > sx)
              state.swipe[0] = Math.sign(_dx);
            if (_vy > svy && Math.abs(_my) > sy)
              state.swipe[1] = Math.sign(_dy);
          }
        }
        this.emit();
      }
      pointerClick(event) {
        if (!this.state.tap && event.detail > 0) {
          event.preventDefault();
          event.stopPropagation();
        }
      }
      setupPointer(event) {
        const config = this.config;
        const device = config.device;
        if (true) {
          try {
            if (device === "pointer" && config.preventScrollDelay === void 0) {
              const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
              const style = window.getComputedStyle(currentTarget);
              if (style.touchAction === "auto") {
                console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
              }
            }
          } catch (_unused2) {
          }
        }
        if (config.pointerLock) {
          event.currentTarget.requestPointerLock();
        }
        if (!config.pointerCapture) {
          this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
          this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
          this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
        }
      }
      pointerClean() {
        if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
          document.exitPointerLock();
        }
      }
      preventScroll(event) {
        if (this.state._preventScroll && event.cancelable) {
          event.preventDefault();
        }
      }
      setupScrollPrevention(event) {
        this.state._preventScroll = false;
        persistEvent(event);
        const remove2 = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
          passive: false
        });
        this.eventStore.add(this.sharedConfig.window, "touch", "end", remove2);
        this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove2);
        this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
      }
      setupDelayTrigger(event) {
        this.state._delayed = true;
        this.timeoutStore.add("dragDelay", () => {
          this.state._step = [0, 0];
          this.startPointerDrag(event);
        }, this.config.delay);
      }
      keyDown(event) {
        const deltaFn = KEYS_DELTA_MAP[event.key];
        if (deltaFn) {
          const state = this.state;
          const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
          this.start(event);
          state._delta = deltaFn(this.config.keyboardDisplacement, factor);
          state._keyboardActive = true;
          maths.V.addTo(state._movement, state._delta);
          this.compute(event);
          this.emit();
        }
      }
      keyUp(event) {
        if (!(event.key in KEYS_DELTA_MAP))
          return;
        this.state._keyboardActive = false;
        this.setActive();
        this.compute(event);
        this.emit();
      }
      bind(bindFunction) {
        const device = this.config.device;
        bindFunction(device, "start", this.pointerDown.bind(this));
        if (this.config.pointerCapture) {
          bindFunction(device, "change", this.pointerMove.bind(this));
          bindFunction(device, "end", this.pointerUp.bind(this));
          bindFunction(device, "cancel", this.pointerUp.bind(this));
          bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
        }
        if (this.config.keys) {
          bindFunction("key", "down", this.keyDown.bind(this));
          bindFunction("key", "up", this.keyUp.bind(this));
        }
        if (this.config.filterTaps) {
          bindFunction("click", "", this.pointerClick.bind(this), {
            capture: true,
            passive: false
          });
        }
      }
    };
    function persistEvent(event) {
      "persist" in event && typeof event.persist === "function" && event.persist();
    }
    var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
    function supportsTouchEvents() {
      return isBrowser && "ontouchstart" in window;
    }
    function isTouchScreen() {
      return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
    }
    function supportsPointerEvents() {
      return isBrowser && "onpointerdown" in window;
    }
    function supportsPointerLock() {
      return isBrowser && "exitPointerLock" in window.document;
    }
    function supportsGestureEvents() {
      try {
        return "constructor" in GestureEvent;
      } catch (e) {
        return false;
      }
    }
    var SUPPORT = {
      isBrowser,
      gesture: supportsGestureEvents(),
      touch: supportsTouchEvents(),
      touchscreen: isTouchScreen(),
      pointer: supportsPointerEvents(),
      pointerLock: supportsPointerLock()
    };
    var DEFAULT_PREVENT_SCROLL_DELAY = 250;
    var DEFAULT_DRAG_DELAY = 180;
    var DEFAULT_SWIPE_VELOCITY = 0.5;
    var DEFAULT_SWIPE_DISTANCE = 50;
    var DEFAULT_SWIPE_DURATION = 250;
    var DEFAULT_KEYBOARD_DISPLACEMENT = 10;
    var DEFAULT_DRAG_AXIS_THRESHOLD = {
      mouse: 0,
      touch: 0,
      pen: 8
    };
    var dragConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
      device(_v, _k, {
        pointer: {
          touch = false,
          lock = false,
          mouse = false
        } = {}
      }) {
        this.pointerLock = lock && SUPPORT.pointerLock;
        if (SUPPORT.touch && touch)
          return "touch";
        if (this.pointerLock)
          return "mouse";
        if (SUPPORT.pointer && !mouse)
          return "pointer";
        if (SUPPORT.touch)
          return "touch";
        return "mouse";
      },
      preventScrollAxis(value, _k, {
        preventScroll
      }) {
        this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
        if (!SUPPORT.touchscreen || preventScroll === false)
          return void 0;
        return value ? value : preventScroll !== void 0 ? "y" : void 0;
      },
      pointerCapture(_v, _k, {
        pointer: {
          capture = true,
          buttons = 1,
          keys = true
        } = {}
      }) {
        this.pointerButtons = buttons;
        this.keys = keys;
        return !this.pointerLock && this.device === "pointer" && capture;
      },
      threshold(value, _k, {
        filterTaps = false,
        tapsThreshold = 3,
        axis = void 0
      }) {
        const threshold = maths.V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
        this.filterTaps = filterTaps;
        this.tapsThreshold = tapsThreshold;
        return threshold;
      },
      swipe({
        velocity = DEFAULT_SWIPE_VELOCITY,
        distance = DEFAULT_SWIPE_DISTANCE,
        duration = DEFAULT_SWIPE_DURATION
      } = {}) {
        return {
          velocity: this.transform(maths.V.toVector(velocity)),
          distance: this.transform(maths.V.toVector(distance)),
          duration
        };
      },
      delay(value = 0) {
        switch (value) {
          case true:
            return DEFAULT_DRAG_DELAY;
          case false:
            return 0;
          default:
            return value;
        }
      },
      axisThreshold(value) {
        if (!value)
          return DEFAULT_DRAG_AXIS_THRESHOLD;
        return _objectSpread22(_objectSpread22({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
      },
      keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {
        return value;
      }
    });
    if (true) {
      Object.assign(dragConfigResolver, {
        useTouch(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
          }
          return NaN;
        },
        experimental_preventWindowScrollY(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
          }
          return NaN;
        },
        swipeVelocity(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
          }
          return NaN;
        },
        swipeDistance(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
          }
          return NaN;
        },
        swipeDuration(value) {
          if (value !== void 0) {
            throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
          }
          return NaN;
        }
      });
    }
    function clampStateInternalMovementToBounds(state) {
      const [ox, oy] = state.overflow;
      const [dx, dy] = state._delta;
      const [dirx, diry] = state._direction;
      if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
        state._movement[0] = state._movementBound[0];
      }
      if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
        state._movement[1] = state._movementBound[1];
      }
    }
    var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
    var PINCH_WHEEL_RATIO = 100;
    var PinchEngine = class extends Engine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "pinching");
        _defineProperty2(this, "aliasKey", "da");
      }
      init() {
        this.state.offset = [1, 0];
        this.state.lastOffset = [1, 0];
        this.state._pointerEvents = /* @__PURE__ */ new Map();
      }
      reset() {
        super.reset();
        const state = this.state;
        state._touchIds = [];
        state.canceled = false;
        state.cancel = this.cancel.bind(this);
        state.turns = 0;
      }
      computeOffset() {
        const {
          type,
          movement,
          lastOffset
        } = this.state;
        if (type === "wheel") {
          this.state.offset = maths.V.add(movement, lastOffset);
        } else {
          this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
        }
      }
      computeMovement() {
        const {
          offset: offset4,
          lastOffset
        } = this.state;
        this.state.movement = [offset4[0] / lastOffset[0], offset4[1] - lastOffset[1]];
      }
      axisIntent() {
        const state = this.state;
        const [_m0, _m1] = state._movement;
        if (!state.axis) {
          const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
          if (axisMovementDifference < 0)
            state.axis = "angle";
          else if (axisMovementDifference > 0)
            state.axis = "scale";
        }
      }
      restrictToAxis(v) {
        if (this.config.lockDirection) {
          if (this.state.axis === "scale")
            v[1] = 0;
          else if (this.state.axis === "angle")
            v[0] = 0;
        }
      }
      cancel() {
        const state = this.state;
        if (state.canceled)
          return;
        setTimeout(() => {
          state.canceled = true;
          state._active = false;
          this.compute();
          this.emit();
        }, 0);
      }
      touchStart(event) {
        this.ctrl.setEventIds(event);
        const state = this.state;
        const ctrlTouchIds = this.ctrl.touchIds;
        if (state._active) {
          if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
            return;
        }
        if (ctrlTouchIds.size < 2)
          return;
        this.start(event);
        state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
        const payload = touchDistanceAngle(event, state._touchIds);
        if (!payload)
          return;
        this.pinchStart(event, payload);
      }
      pointerStart(event) {
        if (event.buttons != null && event.buttons % 2 !== 1)
          return;
        this.ctrl.setEventIds(event);
        event.target.setPointerCapture(event.pointerId);
        const state = this.state;
        const _pointerEvents = state._pointerEvents;
        const ctrlPointerIds = this.ctrl.pointerIds;
        if (state._active) {
          if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
            return;
        }
        if (_pointerEvents.size < 2) {
          _pointerEvents.set(event.pointerId, event);
        }
        if (state._pointerEvents.size < 2)
          return;
        this.start(event);
        const payload = distanceAngle(...Array.from(_pointerEvents.values()));
        if (!payload)
          return;
        this.pinchStart(event, payload);
      }
      pinchStart(event, payload) {
        const state = this.state;
        state.origin = payload.origin;
        this.computeValues([payload.distance, payload.angle]);
        this.computeInitial();
        this.compute(event);
        this.emit();
      }
      touchMove(event) {
        if (!this.state._active)
          return;
        const payload = touchDistanceAngle(event, this.state._touchIds);
        if (!payload)
          return;
        this.pinchMove(event, payload);
      }
      pointerMove(event) {
        const _pointerEvents = this.state._pointerEvents;
        if (_pointerEvents.has(event.pointerId)) {
          _pointerEvents.set(event.pointerId, event);
        }
        if (!this.state._active)
          return;
        const payload = distanceAngle(...Array.from(_pointerEvents.values()));
        if (!payload)
          return;
        this.pinchMove(event, payload);
      }
      pinchMove(event, payload) {
        const state = this.state;
        const prev_a = state._values[1];
        const delta_a = payload.angle - prev_a;
        let delta_turns = 0;
        if (Math.abs(delta_a) > 270)
          delta_turns += Math.sign(delta_a);
        this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
        state.origin = payload.origin;
        state.turns = delta_turns;
        state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
        this.compute(event);
        this.emit();
      }
      touchEnd(event) {
        this.ctrl.setEventIds(event);
        if (!this.state._active)
          return;
        if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
          this.state._active = false;
          this.compute(event);
          this.emit();
        }
      }
      pointerEnd(event) {
        const state = this.state;
        this.ctrl.setEventIds(event);
        try {
          event.target.releasePointerCapture(event.pointerId);
        } catch (_unused) {
        }
        if (state._pointerEvents.has(event.pointerId)) {
          state._pointerEvents.delete(event.pointerId);
        }
        if (!state._active)
          return;
        if (state._pointerEvents.size < 2) {
          state._active = false;
          this.compute(event);
          this.emit();
        }
      }
      gestureStart(event) {
        if (event.cancelable)
          event.preventDefault();
        const state = this.state;
        if (state._active)
          return;
        this.start(event);
        this.computeValues([event.scale, event.rotation]);
        state.origin = [event.clientX, event.clientY];
        this.compute(event);
        this.emit();
      }
      gestureMove(event) {
        if (event.cancelable)
          event.preventDefault();
        if (!this.state._active)
          return;
        const state = this.state;
        this.computeValues([event.scale, event.rotation]);
        state.origin = [event.clientX, event.clientY];
        const _previousMovement = state._movement;
        state._movement = [event.scale - 1, event.rotation];
        state._delta = maths.V.sub(state._movement, _previousMovement);
        this.compute(event);
        this.emit();
      }
      gestureEnd(event) {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
      wheel(event) {
        const modifierKey = this.config.modifierKey;
        if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find((k) => event[k]) : !event[modifierKey]))
          return;
        if (!this.state._active)
          this.wheelStart(event);
        else
          this.wheelChange(event);
        this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
      }
      wheelStart(event) {
        this.start(event);
        this.wheelChange(event);
      }
      wheelChange(event) {
        const isR3f = "uv" in event;
        if (!isR3f) {
          if (event.cancelable) {
            event.preventDefault();
          }
          if (!event.defaultPrevented) {
            console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
          }
        }
        const state = this.state;
        state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
        maths.V.addTo(state._movement, state._delta);
        clampStateInternalMovementToBounds(state);
        this.state.origin = [event.clientX, event.clientY];
        this.compute(event);
        this.emit();
      }
      wheelEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        const device = this.config.device;
        if (!!device) {
          bindFunction(device, "start", this[device + "Start"].bind(this));
          bindFunction(device, "change", this[device + "Move"].bind(this));
          bindFunction(device, "end", this[device + "End"].bind(this));
          bindFunction(device, "cancel", this[device + "End"].bind(this));
          bindFunction("lostPointerCapture", "", this[device + "End"].bind(this));
        }
        if (this.config.pinchOnWheel) {
          bindFunction("wheel", "", this.wheel.bind(this), {
            passive: false
          });
        }
      }
    };
    var pinchConfigResolver = _objectSpread22(_objectSpread22({}, commonConfigResolver), {}, {
      device(_v, _k, {
        shared,
        pointer: {
          touch = false
        } = {}
      }) {
        const sharedConfig = shared;
        if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
          return "gesture";
        if (SUPPORT.touch && touch)
          return "touch";
        if (SUPPORT.touchscreen) {
          if (SUPPORT.pointer)
            return "pointer";
          if (SUPPORT.touch)
            return "touch";
        }
      },
      bounds(_v, _k, {
        scaleBounds = {},
        angleBounds = {}
      }) {
        const _scaleBounds = (state) => {
          const D = assignDefault(call(scaleBounds, state), {
            min: -Infinity,
            max: Infinity
          });
          return [D.min, D.max];
        };
        const _angleBounds = (state) => {
          const A = assignDefault(call(angleBounds, state), {
            min: -Infinity,
            max: Infinity
          });
          return [A.min, A.max];
        };
        if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
          return [_scaleBounds(), _angleBounds()];
        return (state) => [_scaleBounds(state), _angleBounds(state)];
      },
      threshold(value, _k, config) {
        this.lockDirection = config.axis === "lock";
        const threshold = maths.V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
        return threshold;
      },
      modifierKey(value) {
        if (value === void 0)
          return "ctrlKey";
        return value;
      },
      pinchOnWheel(value = true) {
        return value;
      }
    });
    var MoveEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "moving");
      }
      move(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        if (!this.state._active)
          this.moveStart(event);
        else
          this.moveChange(event);
        this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
      }
      moveStart(event) {
        this.start(event);
        this.computeValues(pointerValues(event));
        this.compute(event);
        this.computeInitial();
        this.emit();
      }
      moveChange(event) {
        if (!this.state._active)
          return;
        const values = pointerValues(event);
        const state = this.state;
        state._delta = maths.V.sub(values, state._values);
        maths.V.addTo(state._movement, state._delta);
        this.computeValues(values);
        this.compute(event);
        this.emit();
      }
      moveEnd(event) {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("pointer", "change", this.move.bind(this));
        bindFunction("pointer", "leave", this.moveEnd.bind(this));
      }
    };
    var moveConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
      mouseOnly: (value = true) => value
    });
    var ScrollEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "scrolling");
      }
      scroll(event) {
        if (!this.state._active)
          this.start(event);
        this.scrollChange(event);
        this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
      }
      scrollChange(event) {
        if (event.cancelable)
          event.preventDefault();
        const state = this.state;
        const values = scrollValues(event);
        state._delta = maths.V.sub(values, state._values);
        maths.V.addTo(state._movement, state._delta);
        this.computeValues(values);
        this.compute(event);
        this.emit();
      }
      scrollEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("scroll", "", this.scroll.bind(this));
      }
    };
    var scrollConfigResolver = coordinatesConfigResolver;
    var WheelEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "wheeling");
      }
      wheel(event) {
        if (!this.state._active)
          this.start(event);
        this.wheelChange(event);
        this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
      }
      wheelChange(event) {
        const state = this.state;
        state._delta = wheelValues(event);
        maths.V.addTo(state._movement, state._delta);
        clampStateInternalMovementToBounds(state);
        this.compute(event);
        this.emit();
      }
      wheelEnd() {
        if (!this.state._active)
          return;
        this.state._active = false;
        this.compute();
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("wheel", "", this.wheel.bind(this));
      }
    };
    var wheelConfigResolver = coordinatesConfigResolver;
    var HoverEngine = class extends CoordinatesEngine {
      constructor(...args) {
        super(...args);
        _defineProperty2(this, "ingKey", "hovering");
      }
      enter(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        this.start(event);
        this.computeValues(pointerValues(event));
        this.compute(event);
        this.emit();
      }
      leave(event) {
        if (this.config.mouseOnly && event.pointerType !== "mouse")
          return;
        const state = this.state;
        if (!state._active)
          return;
        state._active = false;
        const values = pointerValues(event);
        state._movement = state._delta = maths.V.sub(values, state._values);
        this.computeValues(values);
        this.compute(event);
        state.delta = state.movement;
        this.emit();
      }
      bind(bindFunction) {
        bindFunction("pointer", "enter", this.enter.bind(this));
        bindFunction("pointer", "leave", this.leave.bind(this));
      }
    };
    var hoverConfigResolver = _objectSpread22(_objectSpread22({}, coordinatesConfigResolver), {}, {
      mouseOnly: (value = true) => value
    });
    var EngineMap = /* @__PURE__ */ new Map();
    var ConfigResolverMap = /* @__PURE__ */ new Map();
    function registerAction2(action) {
      EngineMap.set(action.key, action.engine);
      ConfigResolverMap.set(action.key, action.resolver);
    }
    var dragAction2 = {
      key: "drag",
      engine: DragEngine,
      resolver: dragConfigResolver
    };
    var hoverAction2 = {
      key: "hover",
      engine: HoverEngine,
      resolver: hoverConfigResolver
    };
    var moveAction2 = {
      key: "move",
      engine: MoveEngine,
      resolver: moveConfigResolver
    };
    var pinchAction3 = {
      key: "pinch",
      engine: PinchEngine,
      resolver: pinchConfigResolver
    };
    var scrollAction2 = {
      key: "scroll",
      engine: ScrollEngine,
      resolver: scrollConfigResolver
    };
    var wheelAction3 = {
      key: "wheel",
      engine: WheelEngine,
      resolver: wheelConfigResolver
    };
    exports.ConfigResolverMap = ConfigResolverMap;
    exports.EngineMap = EngineMap;
    exports.SUPPORT = SUPPORT;
    exports._defineProperty = _defineProperty2;
    exports._objectSpread2 = _objectSpread22;
    exports.chain = chain;
    exports.dragAction = dragAction2;
    exports.hoverAction = hoverAction2;
    exports.isTouch = isTouch;
    exports.moveAction = moveAction2;
    exports.parseProp = parseProp;
    exports.pinchAction = pinchAction3;
    exports.registerAction = registerAction2;
    exports.scrollAction = scrollAction2;
    exports.toDomEventType = toDomEventType;
    exports.toHandlerProp = toHandlerProp;
    exports.touchIds = touchIds;
    exports.wheelAction = wheelAction3;
  }
});

// node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.dev.js
var require_use_gesture_core_actions_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var actions_dist_useGestureCoreActions = require_actions_6579bdef_cjs_dev();
    require_maths_267f0992_cjs_dev();
    exports.ConfigResolverMap = actions_dist_useGestureCoreActions.ConfigResolverMap;
    exports.EngineMap = actions_dist_useGestureCoreActions.EngineMap;
    exports.dragAction = actions_dist_useGestureCoreActions.dragAction;
    exports.hoverAction = actions_dist_useGestureCoreActions.hoverAction;
    exports.moveAction = actions_dist_useGestureCoreActions.moveAction;
    exports.pinchAction = actions_dist_useGestureCoreActions.pinchAction;
    exports.registerAction = actions_dist_useGestureCoreActions.registerAction;
    exports.scrollAction = actions_dist_useGestureCoreActions.scrollAction;
    exports.wheelAction = actions_dist_useGestureCoreActions.wheelAction;
  }
});

// node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.js
var require_use_gesture_core_actions_cjs = __commonJS({
  "node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_actions_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/dist/use-gesture-core.cjs.dev.js
var require_use_gesture_core_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/dist/use-gesture-core.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var actions_dist_useGestureCoreActions = require_actions_6579bdef_cjs_dev();
    require_maths_267f0992_cjs_dev();
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _objectWithoutProperties2(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var sharedConfigResolver = {
      target(value) {
        if (value) {
          return () => "current" in value ? value.current : value;
        }
        return void 0;
      },
      enabled(value = true) {
        return value;
      },
      window(value = actions_dist_useGestureCoreActions.SUPPORT.isBrowser ? window : void 0) {
        return value;
      },
      eventOptions({
        passive = true,
        capture = false
      } = {}) {
        return {
          passive,
          capture
        };
      },
      transform(value) {
        return value;
      }
    };
    var _excluded2 = ["target", "eventOptions", "window", "enabled", "transform"];
    function resolveWith(config = {}, resolvers) {
      const result = {};
      for (const [key, resolver] of Object.entries(resolvers)) {
        switch (typeof resolver) {
          case "function":
            if (true) {
              const r = resolver.call(result, config[key], key, config);
              if (!Number.isNaN(r))
                result[key] = r;
            } else {
              result[key] = resolver.call(result, config[key], key, config);
            }
            break;
          case "object":
            result[key] = resolveWith(config[key], resolver);
            break;
          case "boolean":
            if (resolver)
              result[key] = config[key];
            break;
        }
      }
      return result;
    }
    function parse2(newConfig, gestureKey, _config = {}) {
      const _ref = newConfig, {
        target,
        eventOptions,
        window: window3,
        enabled,
        transform
      } = _ref, rest = _objectWithoutProperties2(_ref, _excluded2);
      _config.shared = resolveWith({
        target,
        eventOptions,
        window: window3,
        enabled,
        transform
      }, sharedConfigResolver);
      if (gestureKey) {
        const resolver = actions_dist_useGestureCoreActions.ConfigResolverMap.get(gestureKey);
        _config[gestureKey] = resolveWith(actions_dist_useGestureCoreActions._objectSpread2({
          shared: _config.shared
        }, rest), resolver);
      } else {
        for (const key in rest) {
          const resolver = actions_dist_useGestureCoreActions.ConfigResolverMap.get(key);
          if (resolver) {
            _config[key] = resolveWith(actions_dist_useGestureCoreActions._objectSpread2({
              shared: _config.shared
            }, rest[key]), resolver);
          } else if (true) {
            if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
              if (key === "domTarget") {
                throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
              }
              console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
            }
          }
        }
      }
      return _config;
    }
    var EventStore = class {
      constructor(ctrl, gestureKey) {
        actions_dist_useGestureCoreActions._defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
        this._ctrl = ctrl;
        this._gestureKey = gestureKey;
      }
      add(element, device, action, handler, options) {
        const listeners = this._listeners;
        const type = actions_dist_useGestureCoreActions.toDomEventType(device, action);
        const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
        const eventOptions = actions_dist_useGestureCoreActions._objectSpread2(actions_dist_useGestureCoreActions._objectSpread2({}, _options), options);
        element.addEventListener(type, handler, eventOptions);
        const remove2 = () => {
          element.removeEventListener(type, handler, eventOptions);
          listeners.delete(remove2);
        };
        listeners.add(remove2);
        return remove2;
      }
      clean() {
        this._listeners.forEach((remove2) => remove2());
        this._listeners.clear();
      }
    };
    var TimeoutStore = class {
      constructor() {
        actions_dist_useGestureCoreActions._defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
      }
      add(key, callback, ms = 140, ...args) {
        this.remove(key);
        this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
      }
      remove(key) {
        const timeout = this._timeouts.get(key);
        if (timeout)
          window.clearTimeout(timeout);
      }
      clean() {
        this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
        this._timeouts.clear();
      }
    };
    var Controller2 = class {
      constructor(handlers) {
        actions_dist_useGestureCoreActions._defineProperty(this, "gestures", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "_targetEventStore", new EventStore(this));
        actions_dist_useGestureCoreActions._defineProperty(this, "gestureEventStores", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "gestureTimeoutStores", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "handlers", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "config", {});
        actions_dist_useGestureCoreActions._defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
        actions_dist_useGestureCoreActions._defineProperty(this, "state", {
          shared: {
            shiftKey: false,
            metaKey: false,
            ctrlKey: false,
            altKey: false
          }
        });
        resolveGestures(this, handlers);
      }
      setEventIds(event) {
        if (actions_dist_useGestureCoreActions.isTouch(event)) {
          this.touchIds = new Set(actions_dist_useGestureCoreActions.touchIds(event));
          return this.touchIds;
        } else if ("pointerId" in event) {
          if (event.type === "pointerup" || event.type === "pointercancel")
            this.pointerIds.delete(event.pointerId);
          else if (event.type === "pointerdown")
            this.pointerIds.add(event.pointerId);
          return this.pointerIds;
        }
      }
      applyHandlers(handlers, nativeHandlers) {
        this.handlers = handlers;
        this.nativeHandlers = nativeHandlers;
      }
      applyConfig(config, gestureKey) {
        this.config = parse2(config, gestureKey, this.config);
      }
      clean() {
        this._targetEventStore.clean();
        for (const key of this.gestures) {
          this.gestureEventStores[key].clean();
          this.gestureTimeoutStores[key].clean();
        }
      }
      effect() {
        if (this.config.shared.target)
          this.bind();
        return () => this._targetEventStore.clean();
      }
      bind(...args) {
        const sharedConfig = this.config.shared;
        const props = {};
        let target;
        if (sharedConfig.target) {
          target = sharedConfig.target();
          if (!target)
            return;
        }
        if (sharedConfig.enabled) {
          for (const gestureKey of this.gestures) {
            const gestureConfig = this.config[gestureKey];
            const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
            if (gestureConfig.enabled) {
              const Engine = actions_dist_useGestureCoreActions.EngineMap.get(gestureKey);
              new Engine(this, args, gestureKey).bind(bindFunction);
            }
          }
          const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
          for (const eventKey in this.nativeHandlers) {
            nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](actions_dist_useGestureCoreActions._objectSpread2(actions_dist_useGestureCoreActions._objectSpread2({}, this.state.shared), {}, {
              event,
              args
            })), void 0, true);
          }
        }
        for (const handlerProp in props) {
          props[handlerProp] = actions_dist_useGestureCoreActions.chain(...props[handlerProp]);
        }
        if (!target)
          return props;
        for (const handlerProp in props) {
          const {
            device,
            capture,
            passive
          } = actions_dist_useGestureCoreActions.parseProp(handlerProp);
          this._targetEventStore.add(target, device, "", props[handlerProp], {
            capture,
            passive
          });
        }
      }
    };
    function setupGesture(ctrl, gestureKey) {
      ctrl.gestures.add(gestureKey);
      ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
      ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
    }
    function resolveGestures(ctrl, internalHandlers) {
      if (internalHandlers.drag)
        setupGesture(ctrl, "drag");
      if (internalHandlers.wheel)
        setupGesture(ctrl, "wheel");
      if (internalHandlers.scroll)
        setupGesture(ctrl, "scroll");
      if (internalHandlers.move)
        setupGesture(ctrl, "move");
      if (internalHandlers.pinch)
        setupGesture(ctrl, "pinch");
      if (internalHandlers.hover)
        setupGesture(ctrl, "hover");
    }
    var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
      var _options$capture, _options$passive;
      const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
      const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
      let handlerProp = isNative ? device : actions_dist_useGestureCoreActions.toHandlerProp(device, action, capture);
      if (withPassiveOption && passive)
        handlerProp += "Passive";
      props[handlerProp] = props[handlerProp] || [];
      props[handlerProp].push(handler);
    };
    var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
    function sortHandlers(_handlers2) {
      const native = {};
      const handlers = {};
      const actions = /* @__PURE__ */ new Set();
      for (let key in _handlers2) {
        if (RE_NOT_NATIVE.test(key)) {
          actions.add(RegExp.lastMatch);
          handlers[key] = _handlers2[key];
        } else {
          native[key] = _handlers2[key];
        }
      }
      return [handlers, native, actions];
    }
    function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
      if (!actions.has(handlerKey))
        return;
      if (!actions_dist_useGestureCoreActions.EngineMap.has(key)) {
        if (true) {
          console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
        }
        return;
      }
      const startKey = handlerKey + "Start";
      const endKey = handlerKey + "End";
      const fn = (state) => {
        let memo38 = void 0;
        if (state.first && startKey in handlers)
          handlers[startKey](state);
        if (handlerKey in handlers)
          memo38 = handlers[handlerKey](state);
        if (state.last && endKey in handlers)
          handlers[endKey](state);
        return memo38;
      };
      internalHandlers[key] = fn;
      config[key] = config[key] || {};
    }
    function parseMergedHandlers2(mergedHandlers, mergedConfig) {
      const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
      const internalHandlers = {};
      registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
      registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
      return {
        handlers: internalHandlers,
        config: mergedConfig,
        nativeHandlers
      };
    }
    exports.Controller = Controller2;
    exports.parseMergedHandlers = parseMergedHandlers2;
  }
});

// node_modules/@use-gesture/core/dist/use-gesture-core.cjs.js
var require_use_gesture_core_cjs = __commonJS({
  "node_modules/@use-gesture/core/dist/use-gesture-core.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.dev.js
var require_use_gesture_core_utils_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var maths = require_maths_267f0992_cjs_dev();
    exports.rubberbandIfOutOfBounds = maths.rubberbandIfOutOfBounds;
  }
});

// node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.js
var require_use_gesture_core_utils_cjs = __commonJS({
  "node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_utils_cjs_dev();
    }
  }
});

// node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.dev.js
var require_use_gesture_core_types_cjs_dev = __commonJS({
  "node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.dev.js"() {
    "use strict";
  }
});

// node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.js
var require_use_gesture_core_types_cjs = __commonJS({
  "node_modules/@use-gesture/core/types/dist/use-gesture-core-types.cjs.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_gesture_core_types_cjs_dev();
    }
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce2(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time2) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time2;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time2) {
        lastInvokeTime = time2;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time2) : result;
      }
      function remainingWait(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time2 = now();
        if (shouldInvoke(time2)) {
          return trailingEdge(time2);
        }
        timerId = setTimeout(timerExpired, remainingWait(time2));
      }
      function trailingEdge(time2) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time2);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush2() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time2 = now(), isInvoking = shouldInvoke(time2);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time2;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush2;
      return debounced;
    }
    function throttle3(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce2(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = throttle3;
  }
});

// node_modules/lodash.uniq/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.uniq/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayIncludes(array2, value) {
      var length = array2 ? array2.length : 0;
      return !!length && baseIndexOf(array2, value, 0) > -1;
    }
    function arrayIncludesWith(array2, value, comparator) {
      var index2 = -1, length = array2 ? array2.length : 0;
      while (++index2 < length) {
        if (comparator(value, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array2, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object2, key) {
      return object2 == null ? void 0 : object2[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var Set2 = getNative(root, "Set");
    var nativeCreate = getNative(Object, "create");
    function Hash(entries) {
      var index2 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index2 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index2 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index2 = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseUniq(array2, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet(array2);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed2 = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed2 === computed2) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed2) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed2);
            }
            result.push(value);
          } else if (!includes(seen, computed2, comparator)) {
            if (seen !== result) {
              seen.push(computed2);
            }
            result.push(value);
          }
        }
      return result;
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop5 : function(values) {
      return new Set2(values);
    };
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object2, key) {
      var value = getValue(object2, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function uniq2(array2) {
      return array2 && array2.length ? baseUniq(array2) : [];
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function noop5() {
    }
    module2.exports = uniq2;
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module2) {
    "use strict";
    var has2 = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener2(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener2 = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener2, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener2);
      else
        emitter._events[evt] = [emitter._events[evt], listener2];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has2.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener2(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener2(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener2(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if (typeof module2 !== "undefined") {
      module2.exports = EventEmitter2;
    }
  }
});

// node_modules/core-js/internals/global.js
var require_global = __commonJS({
  "node_modules/core-js/internals/global.js"(exports, module2) {
    "use strict";
    var check = function(it) {
      return it && it.Math === Math && it;
    };
    module2.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof exports == "object" && exports) || function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/core-js/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js/internals/fails.js"(exports, module2) {
    "use strict";
    module2.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js/internals/descriptors.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] !== 7;
    });
  }
});

// node_modules/core-js/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js/internals/function-bind-native.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      var test2 = function() {
      }.bind();
      return typeof test2 != "function" || test2.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js/internals/function-call.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module2.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js/internals/create-property-descriptor.js"(exports, module2) {
    "use strict";
    module2.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js/internals/function-uncurry-this.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var call = FunctionPrototype.call;
    var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
    module2.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
      return function() {
        return call.apply(fn, arguments);
      };
    };
  }
});

// node_modules/core-js/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js/internals/classof-raw.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toString = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module2.exports = function(it) {
      return stringSlice(toString(it), 8, -1);
    };
  }
});

// node_modules/core-js/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js/internals/indexed-object.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var $Object = Object;
    var split = uncurryThis("".split);
    module2.exports = fails(function() {
      return !$Object("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) === "String" ? split(it, "") : $Object(it);
    } : $Object;
  }
});

// node_modules/core-js/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS({
  "node_modules/core-js/internals/is-null-or-undefined.js"(exports, module2) {
    "use strict";
    module2.exports = function(it) {
      return it === null || it === void 0;
    };
  }
});

// node_modules/core-js/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js/internals/require-object-coercible.js"(exports, module2) {
    "use strict";
    var isNullOrUndefined = require_is_null_or_undefined();
    var $TypeError = TypeError;
    module2.exports = function(it) {
      if (isNullOrUndefined(it))
        throw new $TypeError("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js/internals/to-indexed-object.js"(exports, module2) {
    "use strict";
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module2.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js/internals/is-callable.js"(exports, module2) {
    "use strict";
    var documentAll = typeof document == "object" && document.all;
    module2.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
      return typeof argument == "function" || argument === documentAll;
    } : function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js/internals/is-object.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    module2.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js/internals/get-built-in.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var isCallable = require_is_callable();
    var aFunction = function(argument) {
      return isCallable(argument) ? argument : void 0;
    };
    module2.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
    };
  }
});

// node_modules/core-js/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js/internals/object-is-prototype-of.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module2.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS({
  "node_modules/core-js/internals/engine-user-agent.js"(exports, module2) {
    "use strict";
    module2.exports = typeof navigator != "undefined" && String(navigator.userAgent) || "";
  }
});

// node_modules/core-js/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS({
  "node_modules/core-js/internals/engine-v8-version.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var userAgent = require_engine_user_agent();
    var process2 = global2.process;
    var Deno = global2.Deno;
    var versions = process2 && process2.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match;
    var version2;
    if (v8) {
      match = v8.split(".");
      version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version2 && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match)
          version2 = +match[1];
      }
    }
    module2.exports = version2;
  }
});

// node_modules/core-js/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS({
  "node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module2) {
    "use strict";
    var V8_VERSION = require_engine_v8_version();
    var fails = require_fails();
    var global2 = require_global();
    var $String = global2.String;
    module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol("symbol detection");
      return !$String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module2) {
    "use strict";
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js/internals/is-symbol.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var $Object = Object;
    module2.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
    };
  }
});

// node_modules/core-js/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js/internals/try-to-string.js"(exports, module2) {
    "use strict";
    var $String = String;
    module2.exports = function(argument) {
      try {
        return $String(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js/internals/a-callable.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isCallable(argument))
        return argument;
      throw new $TypeError(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js/internals/get-method.js"(exports, module2) {
    "use strict";
    var aCallable = require_a_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    module2.exports = function(V, P) {
      var func = V[P];
      return isNullOrUndefined(func) ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var $TypeError = TypeError;
    module2.exports = function(input, pref) {
      var fn, val;
      if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
        return val;
      if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
        return val;
      if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
        return val;
      throw new $TypeError("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js/internals/is-pure.js"(exports, module2) {
    "use strict";
    module2.exports = false;
  }
});

// node_modules/core-js/internals/define-global-property.js
var require_define_global_property = __commonJS({
  "node_modules/core-js/internals/define-global-property.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var defineProperty = Object.defineProperty;
    module2.exports = function(key, value) {
      try {
        defineProperty(global2, key, { value, configurable: true, writable: true });
      } catch (error) {
        global2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js/internals/shared-store.js"(exports, module2) {
    "use strict";
    var IS_PURE = require_is_pure();
    var globalThis2 = require_global();
    var defineGlobalProperty = require_define_global_property();
    var SHARED = "__core-js_shared__";
    var store2 = module2.exports = globalThis2[SHARED] || defineGlobalProperty(SHARED, {});
    (store2.versions || (store2.versions = [])).push({
      version: "3.37.1",
      mode: IS_PURE ? "pure" : "global",
      copyright: "\xA9 2014-2024 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.37.1/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js/internals/shared.js"(exports, module2) {
    "use strict";
    var store2 = require_shared_store();
    module2.exports = function(key, value) {
      return store2[key] || (store2[key] = value || {});
    };
  }
});

// node_modules/core-js/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js/internals/to-object.js"(exports, module2) {
    "use strict";
    var requireObjectCoercible = require_require_object_coercible();
    var $Object = Object;
    module2.exports = function(argument) {
      return $Object(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js/internals/has-own-property.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
    module2.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty2(toObject(it), key);
    };
  }
});

// node_modules/core-js/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js/internals/uid.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var id = 0;
    var postfix = Math.random();
    var toString = uncurryThis(1 .toString);
    module2.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
    };
  }
});

// node_modules/core-js/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js/internals/well-known-symbol.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Symbol2 = global2.Symbol;
    var WellKnownSymbolsStore = shared("wks");
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module2.exports = function(name) {
      if (!hasOwn(WellKnownSymbolsStore, name)) {
        WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
      }
      return WellKnownSymbolsStore[name];
    };
  }
});

// node_modules/core-js/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js/internals/to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod2 = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var $TypeError = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module2.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input))
        return input;
      var exoticToPrim = getMethod2(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0)
          pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result))
          return result;
        throw new $TypeError("Can't convert object to primitive value");
      }
      if (pref === void 0)
        pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js/internals/to-property-key.js"(exports, module2) {
    "use strict";
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module2.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/core-js/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js/internals/document-create-element.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var isObject = require_is_object();
    var document2 = global2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module2.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js/internals/ie8-dom-define.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement35 = require_document_create_element();
    module2.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement35("div"), "a", {
        get: function() {
          return 7;
        }
      }).a !== 7;
    });
  }
});

// node_modules/core-js/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject(O);
      P = toPropertyKey(P);
      if (IE8_DOM_DEFINE)
        try {
          return $getOwnPropertyDescriptor(O, P);
        } catch (error) {
        }
      if (hasOwn(O, P))
        return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
    };
  }
});

// node_modules/core-js/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module2.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype !== 42;
    });
  }
});

// node_modules/core-js/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js/internals/an-object.js"(exports, module2) {
    "use strict";
    var isObject = require_is_object();
    var $String = String;
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isObject(argument))
        return argument;
      throw new $TypeError($String(argument) + " is not an object");
    };
  }
});

// node_modules/core-js/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js/internals/object-define-property.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var $TypeError = TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current2 = $getOwnPropertyDescriptor(O, P);
        if (current2 && current2[WRITABLE]) {
          O[P] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current2[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current2[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O, P, Attributes);
    } : $defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (IE8_DOM_DEFINE)
        try {
          return $defineProperty(O, P, Attributes);
        } catch (error) {
        }
      if ("get" in Attributes || "set" in Attributes)
        throw new $TypeError("Accessors not supported");
      if ("value" in Attributes)
        O[P] = Attributes.value;
      return O;
    };
  }
});

// node_modules/core-js/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module2.exports = DESCRIPTORS ? function(object2, key, value) {
      return definePropertyModule.f(object2, key, createPropertyDescriptor(1, value));
    } : function(object2, key, value) {
      object2[key] = value;
      return object2;
    };
  }
});

// node_modules/core-js/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js/internals/function-name.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module2.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js/internals/inspect-source.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store2 = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store2.inspectSource)) {
      store2.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module2.exports = store2.inspectSource;
  }
});

// node_modules/core-js/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS({
  "node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var isCallable = require_is_callable();
    var WeakMap2 = global2.WeakMap;
    module2.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
  }
});

// node_modules/core-js/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js/internals/shared-key.js"(exports, module2) {
    "use strict";
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module2.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/core-js/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js/internals/hidden-keys.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/core-js/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js/internals/internal-state.js"(exports, module2) {
    "use strict";
    var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
    var global2 = require_global();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = global2.TypeError;
    var WeakMap2 = global2.WeakMap;
    var set2;
    var get;
    var has2;
    var enforce = function(it) {
      return has2(it) ? get(it) : set2(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw new TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store2 = shared.state || (shared.state = new WeakMap2());
      store2.get = store2.get;
      store2.has = store2.has;
      store2.set = store2.set;
      set2 = function(it, metadata) {
        if (store2.has(it))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        store2.set(it, metadata);
        return metadata;
      };
      get = function(it) {
        return store2.get(it) || {};
      };
      has2 = function(it) {
        return store2.has(it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set2 = function(it, metadata) {
        if (hasOwn(it, STATE))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has2 = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store2;
    var STATE;
    module2.exports = {
      set: set2,
      get,
      has: has2,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js/internals/make-built-in.js
var require_make_built_in = __commonJS({
  "node_modules/core-js/internals/make-built-in.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var DESCRIPTORS = require_descriptors();
    var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
    var inspectSource = require_inspect_source();
    var InternalStateModule = require_internal_state();
    var enforceInternalState = InternalStateModule.enforce;
    var getInternalState = InternalStateModule.get;
    var $String = String;
    var defineProperty = Object.defineProperty;
    var stringSlice = uncurryThis("".slice);
    var replace = uncurryThis("".replace);
    var join = uncurryThis([].join);
    var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
      return defineProperty(function() {
      }, "length", { value: 8 }).length !== 8;
    });
    var TEMPLATE = String(String).split("String");
    var makeBuiltIn = module2.exports = function(value, name, options) {
      if (stringSlice($String(name), 0, 7) === "Symbol(") {
        name = "[" + replace($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
      }
      if (options && options.getter)
        name = "get " + name;
      if (options && options.setter)
        name = "set " + name;
      if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
        if (DESCRIPTORS)
          defineProperty(value, "name", { value: name, configurable: true });
        else
          value.name = name;
      }
      if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
        defineProperty(value, "length", { value: options.arity });
      }
      try {
        if (options && hasOwn(options, "constructor") && options.constructor) {
          if (DESCRIPTORS)
            defineProperty(value, "prototype", { writable: false });
        } else if (value.prototype)
          value.prototype = void 0;
      } catch (error) {
      }
      var state = enforceInternalState(value);
      if (!hasOwn(state, "source")) {
        state.source = join(TEMPLATE, typeof name == "string" ? name : "");
      }
      return value;
    };
    Function.prototype.toString = makeBuiltIn(function toString() {
      return isCallable(this) && getInternalState(this).source || inspectSource(this);
    }, "toString");
  }
});

// node_modules/core-js/internals/define-built-in.js
var require_define_built_in = __commonJS({
  "node_modules/core-js/internals/define-built-in.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var definePropertyModule = require_object_define_property();
    var makeBuiltIn = require_make_built_in();
    var defineGlobalProperty = require_define_global_property();
    module2.exports = function(O, key, value, options) {
      if (!options)
        options = {};
      var simple = options.enumerable;
      var name = options.name !== void 0 ? options.name : key;
      if (isCallable(value))
        makeBuiltIn(value, name, options);
      if (options.global) {
        if (simple)
          O[key] = value;
        else
          defineGlobalProperty(key, value);
      } else {
        try {
          if (!options.unsafe)
            delete O[key];
          else if (O[key])
            simple = true;
        } catch (error) {
        }
        if (simple)
          O[key] = value;
        else
          definePropertyModule.f(O, key, {
            value,
            enumerable: false,
            configurable: !options.nonConfigurable,
            writable: !options.nonWritable
          });
      }
      return O;
    };
  }
});

// node_modules/core-js/internals/math-trunc.js
var require_math_trunc = __commonJS({
  "node_modules/core-js/internals/math-trunc.js"(exports, module2) {
    "use strict";
    var ceil = Math.ceil;
    var floor2 = Math.floor;
    module2.exports = Math.trunc || function trunc(x) {
      var n = +x;
      return (n > 0 ? floor2 : ceil)(n);
    };
  }
});

// node_modules/core-js/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module2) {
    "use strict";
    var trunc = require_math_trunc();
    module2.exports = function(argument) {
      var number2 = +argument;
      return number2 !== number2 || number2 === 0 ? 0 : trunc(number2);
    };
  }
});

// node_modules/core-js/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js/internals/to-absolute-index.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max2 = Math.max;
    var min3 = Math.min;
    module2.exports = function(index2, length) {
      var integer2 = toIntegerOrInfinity(index2);
      return integer2 < 0 ? max2(integer2 + length, 0) : min3(integer2, length);
    };
  }
});

// node_modules/core-js/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js/internals/to-length.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min3 = Math.min;
    module2.exports = function(argument) {
      var len = toIntegerOrInfinity(argument);
      return len > 0 ? min3(len, 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js/internals/length-of-array-like.js"(exports, module2) {
    "use strict";
    var toLength = require_to_length();
    module2.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js/internals/array-includes.js"(exports, module2) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        if (length === 0)
          return !IS_INCLUDES && -1;
        var index2 = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el !== el)
          while (length > index2) {
            value = O[index2++];
            if (value !== value)
              return true;
          }
        else
          for (; length > index2; index2++) {
            if ((IS_INCLUDES || index2 in O) && O[index2] === el)
              return IS_INCLUDES || index2 || 0;
          }
        return !IS_INCLUDES && -1;
      };
    };
    module2.exports = {
      includes: createMethod(true),
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js/internals/object-keys-internal.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module2.exports = function(object2, names) {
      var O = toIndexedObject(object2);
      var i = 0;
      var result = [];
      var key;
      for (key in O)
        !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
      while (names.length > i)
        if (hasOwn(O, key = names[i++])) {
          ~indexOf(result, key) || push(result, key);
        }
      return result;
    };
  }
});

// node_modules/core-js/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js/internals/enum-bug-keys.js"(exports, module2) {
    "use strict";
    module2.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys(O, hiddenKeys);
    };
  }
});

// node_modules/core-js/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
    "use strict";
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/core-js/internals/own-keys.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat = uncurryThis([].concat);
    module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys2(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/core-js/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/core-js/internals/copy-constructor-properties.js"(exports, module2) {
    "use strict";
    var hasOwn = require_has_own_property();
    var ownKeys2 = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module2.exports = function(target, source, exceptions) {
      var keys = ownKeys2(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
  }
});

// node_modules/core-js/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js/internals/is-forced.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string2) {
      return String(string2).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module2.exports = isForced;
  }
});

// node_modules/core-js/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js/internals/export.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var defineGlobalProperty = require_define_global_property();
    var copyConstructorProperties = require_copy_constructor_properties();
    var isForced = require_is_forced();
    module2.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var FORCED, target, key, targetProperty, sourceProperty, descriptor;
      if (GLOBAL) {
        target = global2;
      } else if (STATIC) {
        target = global2[TARGET] || defineGlobalProperty(TARGET, {});
      } else {
        target = global2[TARGET] && global2[TARGET].prototype;
      }
      if (target)
        for (key in source) {
          sourceProperty = source[key];
          if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else
            targetProperty = target[key];
          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
          if (!FORCED && targetProperty !== void 0) {
            if (typeof sourceProperty == typeof targetProperty)
              continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          }
          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, "sham", true);
          }
          defineBuiltIn(target, key, sourceProperty, options);
        }
    };
  }
});

// node_modules/core-js/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js/internals/object-keys.js"(exports, module2) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module2.exports = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys);
    };
  }
});

// node_modules/core-js/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js/internals/object-define-properties.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index2 = 0;
      var key;
      while (length > index2)
        definePropertyModule.f(O, key = keys[index2++], props[key]);
      return O;
    };
  }
});

// node_modules/core-js/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js/internals/html.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    module2.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js/internals/object-create.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--)
        delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module2.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O;
      } else
        result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js/internals/add-to-unscopables.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var create = require_object_create();
    var defineProperty = require_object_define_property().f;
    var UNSCOPABLES = wellKnownSymbol("unscopables");
    var ArrayPrototype = Array.prototype;
    if (ArrayPrototype[UNSCOPABLES] === void 0) {
      defineProperty(ArrayPrototype, UNSCOPABLES, {
        configurable: true,
        value: create(null)
      });
    }
    module2.exports = function(key) {
      ArrayPrototype[UNSCOPABLES][key] = true;
    };
  }
});

// node_modules/core-js/modules/es.array.at.js
var require_es_array_at = __commonJS({
  "node_modules/core-js/modules/es.array.at.js"() {
    "use strict";
    var $ = require_export();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var addToUnscopables = require_add_to_unscopables();
    $({ target: "Array", proto: true }, {
      at: function at(index2) {
        var O = toObject(this);
        var len = lengthOfArrayLike(O);
        var relativeIndex = toIntegerOrInfinity(index2);
        var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
        return k < 0 || k >= len ? void 0 : O[k];
      }
    });
    addToUnscopables("at");
  }
});

// node_modules/core-js/internals/entry-unbind.js
var require_entry_unbind = __commonJS({
  "node_modules/core-js/internals/entry-unbind.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    module2.exports = function(CONSTRUCTOR, METHOD) {
      return uncurryThis(global2[CONSTRUCTOR].prototype[METHOD]);
    };
  }
});

// node_modules/core-js/es/array/at.js
var require_at = __commonJS({
  "node_modules/core-js/es/array/at.js"(exports, module2) {
    "use strict";
    require_es_array_at();
    var entryUnbind = require_entry_unbind();
    module2.exports = entryUnbind("Array", "at");
  }
});

// node_modules/core-js/stable/array/at.js
var require_at2 = __commonJS({
  "node_modules/core-js/stable/array/at.js"(exports, module2) {
    "use strict";
    var parent = require_at();
    module2.exports = parent;
  }
});

// node_modules/core-js/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js/internals/is-array.js"(exports, module2) {
    "use strict";
    var classof = require_classof_raw();
    module2.exports = Array.isArray || function isArray(argument) {
      return classof(argument) === "Array";
    };
  }
});

// node_modules/core-js/internals/does-not-exceed-safe-integer.js
var require_does_not_exceed_safe_integer = __commonJS({
  "node_modules/core-js/internals/does-not-exceed-safe-integer.js"(exports, module2) {
    "use strict";
    var $TypeError = TypeError;
    var MAX_SAFE_INTEGER = 9007199254740991;
    module2.exports = function(it) {
      if (it > MAX_SAFE_INTEGER)
        throw $TypeError("Maximum allowed index exceeded");
      return it;
    };
  }
});

// node_modules/core-js/internals/function-uncurry-this-clause.js
var require_function_uncurry_this_clause = __commonJS({
  "node_modules/core-js/internals/function-uncurry-this-clause.js"(exports, module2) {
    "use strict";
    var classofRaw = require_classof_raw();
    var uncurryThis = require_function_uncurry_this();
    module2.exports = function(fn) {
      if (classofRaw(fn) === "Function")
        return uncurryThis(fn);
    };
  }
});

// node_modules/core-js/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js/internals/function-bind-context.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this_clause();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module2.exports = function(fn, that) {
      aCallable(fn);
      return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js/internals/flatten-into-array.js
var require_flatten_into_array = __commonJS({
  "node_modules/core-js/internals/flatten-into-array.js"(exports, module2) {
    "use strict";
    var isArray = require_is_array();
    var lengthOfArrayLike = require_length_of_array_like();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var bind = require_function_bind_context();
    var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
      var targetIndex = start;
      var sourceIndex = 0;
      var mapFn = mapper ? bind(mapper, thisArg) : false;
      var element, elementLen;
      while (sourceIndex < sourceLen) {
        if (sourceIndex in source) {
          element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
          if (depth > 0 && isArray(element)) {
            elementLen = lengthOfArrayLike(element);
            targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
          } else {
            doesNotExceedSafeInteger(targetIndex + 1);
            target[targetIndex] = element;
          }
          targetIndex++;
        }
        sourceIndex++;
      }
      return targetIndex;
    };
    module2.exports = flattenIntoArray;
  }
});

// node_modules/core-js/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js/internals/to-string-tag-support.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test2 = {};
    test2[TO_STRING_TAG] = "z";
    module2.exports = String(test2) === "[object z]";
  }
});

// node_modules/core-js/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js/internals/classof.js"(exports, module2) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Object = Object;
    var CORRECT_ARGUMENTS = classofRaw(function() {
      return arguments;
    }()) === "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js/internals/is-constructor.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop5 = function() {
    };
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.test(noop5);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      try {
        construct(noop5, [], argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module2.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js/internals/array-species-constructor.js"(exports, module2) {
    "use strict";
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    module2.exports = function(originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
          C = void 0;
        else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null)
            C = void 0;
        }
      }
      return C === void 0 ? $Array : C;
    };
  }
});

// node_modules/core-js/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js/internals/array-species-create.js"(exports, module2) {
    "use strict";
    var arraySpeciesConstructor = require_array_species_constructor();
    module2.exports = function(originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
  }
});

// node_modules/core-js/modules/es.array.flat-map.js
var require_es_array_flat_map = __commonJS({
  "node_modules/core-js/modules/es.array.flat-map.js"() {
    "use strict";
    var $ = require_export();
    var flattenIntoArray = require_flatten_into_array();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    $({ target: "Array", proto: true }, {
      flatMap: function flatMap(callbackfn) {
        var O = toObject(this);
        var sourceLen = lengthOfArrayLike(O);
        var A;
        aCallable(callbackfn);
        A = arraySpeciesCreate(O, 0);
        A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return A;
      }
    });
  }
});

// node_modules/core-js/modules/es.array.unscopables.flat-map.js
var require_es_array_unscopables_flat_map = __commonJS({
  "node_modules/core-js/modules/es.array.unscopables.flat-map.js"() {
    "use strict";
    var addToUnscopables = require_add_to_unscopables();
    addToUnscopables("flatMap");
  }
});

// node_modules/core-js/es/array/flat-map.js
var require_flat_map = __commonJS({
  "node_modules/core-js/es/array/flat-map.js"(exports, module2) {
    "use strict";
    require_es_array_flat_map();
    require_es_array_unscopables_flat_map();
    var entryUnbind = require_entry_unbind();
    module2.exports = entryUnbind("Array", "flatMap");
  }
});

// node_modules/core-js/stable/array/flat-map.js
var require_flat_map2 = __commonJS({
  "node_modules/core-js/stable/array/flat-map.js"(exports, module2) {
    "use strict";
    var parent = require_flat_map();
    module2.exports = parent;
  }
});

// node_modules/core-js/modules/es.array.flat.js
var require_es_array_flat = __commonJS({
  "node_modules/core-js/modules/es.array.flat.js"() {
    "use strict";
    var $ = require_export();
    var flattenIntoArray = require_flatten_into_array();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var arraySpeciesCreate = require_array_species_create();
    $({ target: "Array", proto: true }, {
      flat: function flat() {
        var depthArg = arguments.length ? arguments[0] : void 0;
        var O = toObject(this);
        var sourceLen = lengthOfArrayLike(O);
        var A = arraySpeciesCreate(O, 0);
        A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === void 0 ? 1 : toIntegerOrInfinity(depthArg));
        return A;
      }
    });
  }
});

// node_modules/core-js/modules/es.array.unscopables.flat.js
var require_es_array_unscopables_flat = __commonJS({
  "node_modules/core-js/modules/es.array.unscopables.flat.js"() {
    "use strict";
    var addToUnscopables = require_add_to_unscopables();
    addToUnscopables("flat");
  }
});

// node_modules/core-js/es/array/flat.js
var require_flat = __commonJS({
  "node_modules/core-js/es/array/flat.js"(exports, module2) {
    "use strict";
    require_es_array_flat();
    require_es_array_unscopables_flat();
    var entryUnbind = require_entry_unbind();
    module2.exports = entryUnbind("Array", "flat");
  }
});

// node_modules/core-js/stable/array/flat.js
var require_flat2 = __commonJS({
  "node_modules/core-js/stable/array/flat.js"(exports, module2) {
    "use strict";
    var parent = require_flat();
    module2.exports = parent;
  }
});

// node_modules/core-js/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js/internals/to-string.js"(exports, module2) {
    "use strict";
    var classof = require_classof();
    var $String = String;
    module2.exports = function(argument) {
      if (classof(argument) === "Symbol")
        throw new TypeError("Cannot convert a Symbol value to a string");
      return $String(argument);
    };
  }
});

// node_modules/core-js/modules/es.string.at-alternative.js
var require_es_string_at_alternative = __commonJS({
  "node_modules/core-js/modules/es.string.at-alternative.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString = require_to_string();
    var fails = require_fails();
    var charAt = uncurryThis("".charAt);
    var FORCED = fails(function() {
      return "\u{20BB7}".at(-2) !== "\uD842";
    });
    $({ target: "String", proto: true, forced: FORCED }, {
      at: function at(index2) {
        var S = toString(requireObjectCoercible(this));
        var len = S.length;
        var relativeIndex = toIntegerOrInfinity(index2);
        var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
        return k < 0 || k >= len ? void 0 : charAt(S, k);
      }
    });
  }
});

// node_modules/core-js/es/string/at.js
var require_at3 = __commonJS({
  "node_modules/core-js/es/string/at.js"(exports, module2) {
    "use strict";
    require_es_string_at_alternative();
    var entryUnbind = require_entry_unbind();
    module2.exports = entryUnbind("String", "at");
  }
});

// node_modules/core-js/stable/string/at.js
var require_at4 = __commonJS({
  "node_modules/core-js/stable/string/at.js"(exports, module2) {
    "use strict";
    var parent = require_at3();
    module2.exports = parent;
  }
});

// node_modules/core-js/internals/regexp-flags.js
var require_regexp_flags = __commonJS({
  "node_modules/core-js/internals/regexp-flags.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    module2.exports = function() {
      var that = anObject(this);
      var result = "";
      if (that.hasIndices)
        result += "d";
      if (that.global)
        result += "g";
      if (that.ignoreCase)
        result += "i";
      if (that.multiline)
        result += "m";
      if (that.dotAll)
        result += "s";
      if (that.unicode)
        result += "u";
      if (that.unicodeSets)
        result += "v";
      if (that.sticky)
        result += "y";
      return result;
    };
  }
});

// node_modules/core-js/internals/regexp-sticky-helpers.js
var require_regexp_sticky_helpers = __commonJS({
  "node_modules/core-js/internals/regexp-sticky-helpers.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var global2 = require_global();
    var $RegExp = global2.RegExp;
    var UNSUPPORTED_Y = fails(function() {
      var re = $RegExp("a", "y");
      re.lastIndex = 2;
      return re.exec("abcd") !== null;
    });
    var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
      return !$RegExp("a", "y").sticky;
    });
    var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
      var re = $RegExp("^r", "gy");
      re.lastIndex = 2;
      return re.exec("str") !== null;
    });
    module2.exports = {
      BROKEN_CARET,
      MISSED_STICKY,
      UNSUPPORTED_Y
    };
  }
});

// node_modules/core-js/internals/regexp-unsupported-dot-all.js
var require_regexp_unsupported_dot_all = __commonJS({
  "node_modules/core-js/internals/regexp-unsupported-dot-all.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var global2 = require_global();
    var $RegExp = global2.RegExp;
    module2.exports = fails(function() {
      var re = $RegExp(".", "s");
      return !(re.dotAll && re.test("\n") && re.flags === "s");
    });
  }
});

// node_modules/core-js/internals/regexp-unsupported-ncg.js
var require_regexp_unsupported_ncg = __commonJS({
  "node_modules/core-js/internals/regexp-unsupported-ncg.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var global2 = require_global();
    var $RegExp = global2.RegExp;
    module2.exports = fails(function() {
      var re = $RegExp("(?<a>b)", "g");
      return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
    });
  }
});

// node_modules/core-js/internals/regexp-exec.js
var require_regexp_exec = __commonJS({
  "node_modules/core-js/internals/regexp-exec.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var toString = require_to_string();
    var regexpFlags = require_regexp_flags();
    var stickyHelpers = require_regexp_sticky_helpers();
    var shared = require_shared();
    var create = require_object_create();
    var getInternalState = require_internal_state().get;
    var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
    var UNSUPPORTED_NCG = require_regexp_unsupported_ncg();
    var nativeReplace = shared("native-string-replace", String.prototype.replace);
    var nativeExec = RegExp.prototype.exec;
    var patchedExec = nativeExec;
    var charAt = uncurryThis("".charAt);
    var indexOf = uncurryThis("".indexOf);
    var replace = uncurryThis("".replace);
    var stringSlice = uncurryThis("".slice);
    var UPDATES_LAST_INDEX_WRONG = function() {
      var re1 = /a/;
      var re2 = /b*/g;
      call(nativeExec, re1, "a");
      call(nativeExec, re2, "a");
      return re1.lastIndex !== 0 || re2.lastIndex !== 0;
    }();
    var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;
    var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
    if (PATCH) {
      patchedExec = function exec(string2) {
        var re = this;
        var state = getInternalState(re);
        var str = toString(string2);
        var raw = state.raw;
        var result, reCopy, lastIndex, match, i, object2, group;
        if (raw) {
          raw.lastIndex = re.lastIndex;
          result = call(patchedExec, raw, str);
          re.lastIndex = raw.lastIndex;
          return result;
        }
        var groups = state.groups;
        var sticky = UNSUPPORTED_Y && re.sticky;
        var flags = call(regexpFlags, re);
        var source = re.source;
        var charsAdded = 0;
        var strCopy = str;
        if (sticky) {
          flags = replace(flags, "y", "");
          if (indexOf(flags, "g") === -1) {
            flags += "g";
          }
          strCopy = stringSlice(str, re.lastIndex);
          if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== "\n")) {
            source = "(?: " + source + ")";
            strCopy = " " + strCopy;
            charsAdded++;
          }
          reCopy = new RegExp("^(?:" + source + ")", flags);
        }
        if (NPCG_INCLUDED) {
          reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
        }
        if (UPDATES_LAST_INDEX_WRONG)
          lastIndex = re.lastIndex;
        match = call(nativeExec, sticky ? reCopy : re, strCopy);
        if (sticky) {
          if (match) {
            match.input = stringSlice(match.input, charsAdded);
            match[0] = stringSlice(match[0], charsAdded);
            match.index = re.lastIndex;
            re.lastIndex += match[0].length;
          } else
            re.lastIndex = 0;
        } else if (UPDATES_LAST_INDEX_WRONG && match) {
          re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
        }
        if (NPCG_INCLUDED && match && match.length > 1) {
          call(nativeReplace, match[0], reCopy, function() {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === void 0)
                match[i] = void 0;
            }
          });
        }
        if (match && groups) {
          match.groups = object2 = create(null);
          for (i = 0; i < groups.length; i++) {
            group = groups[i];
            object2[group[0]] = match[group[1]];
          }
        }
        return match;
      };
    }
    module2.exports = patchedExec;
  }
});

// node_modules/core-js/modules/es.regexp.exec.js
var require_es_regexp_exec = __commonJS({
  "node_modules/core-js/modules/es.regexp.exec.js"() {
    "use strict";
    var $ = require_export();
    var exec = require_regexp_exec();
    $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
      exec
    });
  }
});

// node_modules/core-js/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js/internals/function-apply.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module2.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js
var require_fix_regexp_well_known_symbol_logic = __commonJS({
  "node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"(exports, module2) {
    "use strict";
    require_es_regexp_exec();
    var call = require_function_call();
    var defineBuiltIn = require_define_built_in();
    var regexpExec = require_regexp_exec();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var SPECIES = wellKnownSymbol("species");
    var RegExpPrototype = RegExp.prototype;
    module2.exports = function(KEY, exec, FORCED, SHAM) {
      var SYMBOL = wellKnownSymbol(KEY);
      var DELEGATES_TO_SYMBOL = !fails(function() {
        var O = {};
        O[SYMBOL] = function() {
          return 7;
        };
        return ""[KEY](O) !== 7;
      });
      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
        var execCalled = false;
        var re = /a/;
        if (KEY === "split") {
          re = {};
          re.constructor = {};
          re.constructor[SPECIES] = function() {
            return re;
          };
          re.flags = "";
          re[SYMBOL] = /./[SYMBOL];
        }
        re.exec = function() {
          execCalled = true;
          return null;
        };
        re[SYMBOL]("");
        return !execCalled;
      });
      if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
        var nativeRegExpMethod = /./[SYMBOL];
        var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
          var $exec = regexp.exec;
          if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              return { done: true, value: call(nativeRegExpMethod, regexp, str, arg2) };
            }
            return { done: true, value: call(nativeMethod, str, regexp, arg2) };
          }
          return { done: false };
        });
        defineBuiltIn(String.prototype, KEY, methods[0]);
        defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
      }
      if (SHAM)
        createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
    };
  }
});

// node_modules/core-js/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js/internals/string-multibyte.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S = toString(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size4 = S.length;
        var first, second;
        if (position < 0 || position >= size4)
          return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S, position);
        return first < 55296 || first > 56319 || position + 1 === size4 || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module2.exports = {
      codeAt: createMethod(false),
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js/internals/advance-string-index.js
var require_advance_string_index = __commonJS({
  "node_modules/core-js/internals/advance-string-index.js"(exports, module2) {
    "use strict";
    var charAt = require_string_multibyte().charAt;
    module2.exports = function(S, index2, unicode) {
      return index2 + (unicode ? charAt(S, index2).length : 1);
    };
  }
});

// node_modules/core-js/internals/get-substitution.js
var require_get_substitution = __commonJS({
  "node_modules/core-js/internals/get-substitution.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var floor2 = Math.floor;
    var charAt = uncurryThis("".charAt);
    var replace = uncurryThis("".replace);
    var stringSlice = uncurryThis("".slice);
    var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
    module2.exports = function(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== void 0) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return replace(replacement, symbols, function(match, ch) {
        var capture;
        switch (charAt(ch, 0)) {
          case "$":
            return "$";
          case "&":
            return matched;
          case "`":
            return stringSlice(str, 0, position);
          case "'":
            return stringSlice(str, tailPos);
          case "<":
            capture = namedCaptures[stringSlice(ch, 1, -1)];
            break;
          default:
            var n = +ch;
            if (n === 0)
              return match;
            if (n > m) {
              var f = floor2(n / 10);
              if (f === 0)
                return match;
              if (f <= m)
                return captures[f - 1] === void 0 ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === void 0 ? "" : capture;
      });
    };
  }
});

// node_modules/core-js/internals/regexp-exec-abstract.js
var require_regexp_exec_abstract = __commonJS({
  "node_modules/core-js/internals/regexp-exec-abstract.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var isCallable = require_is_callable();
    var classof = require_classof_raw();
    var regexpExec = require_regexp_exec();
    var $TypeError = TypeError;
    module2.exports = function(R, S) {
      var exec = R.exec;
      if (isCallable(exec)) {
        var result = call(exec, R, S);
        if (result !== null)
          anObject(result);
        return result;
      }
      if (classof(R) === "RegExp")
        return call(regexpExec, R, S);
      throw new $TypeError("RegExp#exec called on incompatible receiver");
    };
  }
});

// node_modules/core-js/modules/es.string.replace.js
var require_es_string_replace = __commonJS({
  "node_modules/core-js/modules/es.string.replace.js"() {
    "use strict";
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
    var fails = require_fails();
    var anObject = require_an_object();
    var isCallable = require_is_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toLength = require_to_length();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var advanceStringIndex = require_advance_string_index();
    var getMethod2 = require_get_method();
    var getSubstitution = require_get_substitution();
    var regExpExec = require_regexp_exec_abstract();
    var wellKnownSymbol = require_well_known_symbol();
    var REPLACE = wellKnownSymbol("replace");
    var max2 = Math.max;
    var min3 = Math.min;
    var concat = uncurryThis([].concat);
    var push = uncurryThis([].push);
    var stringIndexOf = uncurryThis("".indexOf);
    var stringSlice = uncurryThis("".slice);
    var maybeToString = function(it) {
      return it === void 0 ? it : String(it);
    };
    var REPLACE_KEEPS_$0 = function() {
      return "a".replace(/./, "$0") === "$0";
    }();
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
      if (/./[REPLACE]) {
        return /./[REPLACE]("a", "$0") === "";
      }
      return false;
    }();
    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
      var re = /./;
      re.exec = function() {
        var result = [];
        result.groups = { a: "7" };
        return result;
      };
      return "".replace(re, "$<a>") !== "7";
    });
    fixRegExpWellKnownSymbolLogic("replace", function(_, nativeReplace, maybeCallNative) {
      var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
      return [
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = isNullOrUndefined(searchValue) ? void 0 : getMethod2(searchValue, REPLACE);
          return replacer ? call(replacer, searchValue, O, replaceValue) : call(nativeReplace, toString(O), searchValue, replaceValue);
        },
        function(string2, replaceValue) {
          var rx = anObject(this);
          var S = toString(string2);
          if (typeof replaceValue == "string" && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, "$<") === -1) {
            var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
            if (res.done)
              return res.value;
          }
          var functionalReplace = isCallable(replaceValue);
          if (!functionalReplace)
            replaceValue = toString(replaceValue);
          var global2 = rx.global;
          var fullUnicode;
          if (global2) {
            fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          var result;
          while (true) {
            result = regExpExec(rx, S);
            if (result === null)
              break;
            push(results, result);
            if (!global2)
              break;
            var matchStr = toString(result[0]);
            if (matchStr === "")
              rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }
          var accumulatedResult = "";
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = toString(result[0]);
            var position = max2(min3(toIntegerOrInfinity(result.index), S.length), 0);
            var captures = [];
            var replacement;
            for (var j = 1; j < result.length; j++)
              push(captures, maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = concat([matched], captures, position, S);
              if (namedCaptures !== void 0)
                push(replacerArgs, namedCaptures);
              replacement = toString(apply(replaceValue, void 0, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + stringSlice(S, nextSourcePosition);
        }
      ];
    }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
  }
});

// node_modules/core-js/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "node_modules/core-js/internals/is-regexp.js"(exports, module2) {
    "use strict";
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module2.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) === "RegExp");
    };
  }
});

// node_modules/core-js/internals/regexp-get-flags.js
var require_regexp_get_flags = __commonJS({
  "node_modules/core-js/internals/regexp-get-flags.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var regExpFlags = require_regexp_flags();
    var RegExpPrototype = RegExp.prototype;
    module2.exports = function(R) {
      var flags = R.flags;
      return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
    };
  }
});

// node_modules/core-js/modules/es.string.replace-all.js
var require_es_string_replace_all = __commonJS({
  "node_modules/core-js/modules/es.string.replace-all.js"() {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var isCallable = require_is_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    var isRegExp = require_is_regexp();
    var toString = require_to_string();
    var getMethod2 = require_get_method();
    var getRegExpFlags = require_regexp_get_flags();
    var getSubstitution = require_get_substitution();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var REPLACE = wellKnownSymbol("replace");
    var $TypeError = TypeError;
    var indexOf = uncurryThis("".indexOf);
    var replace = uncurryThis("".replace);
    var stringSlice = uncurryThis("".slice);
    var max2 = Math.max;
    $({ target: "String", proto: true }, {
      replaceAll: function replaceAll(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var IS_REG_EXP, flags, replacer, string2, searchString, functionalReplace, searchLength, advanceBy, replacement;
        var position = 0;
        var endOfLastMatch = 0;
        var result = "";
        if (!isNullOrUndefined(searchValue)) {
          IS_REG_EXP = isRegExp(searchValue);
          if (IS_REG_EXP) {
            flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
            if (!~indexOf(flags, "g"))
              throw new $TypeError("`.replaceAll` does not allow non-global regexes");
          }
          replacer = getMethod2(searchValue, REPLACE);
          if (replacer) {
            return call(replacer, searchValue, O, replaceValue);
          } else if (IS_PURE && IS_REG_EXP) {
            return replace(toString(O), searchValue, replaceValue);
          }
        }
        string2 = toString(O);
        searchString = toString(searchValue);
        functionalReplace = isCallable(replaceValue);
        if (!functionalReplace)
          replaceValue = toString(replaceValue);
        searchLength = searchString.length;
        advanceBy = max2(1, searchLength);
        position = indexOf(string2, searchString);
        while (position !== -1) {
          replacement = functionalReplace ? toString(replaceValue(searchString, position, string2)) : getSubstitution(searchString, string2, position, [], void 0, replaceValue);
          result += stringSlice(string2, endOfLastMatch, position) + replacement;
          endOfLastMatch = position + searchLength;
          position = position + advanceBy > string2.length ? -1 : indexOf(string2, searchString, position + advanceBy);
        }
        if (endOfLastMatch < string2.length) {
          result += stringSlice(string2, endOfLastMatch);
        }
        return result;
      }
    });
  }
});

// node_modules/core-js/es/string/replace-all.js
var require_replace_all = __commonJS({
  "node_modules/core-js/es/string/replace-all.js"(exports, module2) {
    "use strict";
    require_es_regexp_exec();
    require_es_string_replace();
    require_es_string_replace_all();
    var entryUnbind = require_entry_unbind();
    module2.exports = entryUnbind("String", "replaceAll");
  }
});

// node_modules/core-js/stable/string/replace-all.js
var require_replace_all2 = __commonJS({
  "node_modules/core-js/stable/string/replace-all.js"(exports, module2) {
    "use strict";
    var parent = require_replace_all();
    module2.exports = parent;
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends2 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t2) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t2[p] = s[p];
        }
        return t2;
      };
      __rest2 = function(s, e) {
        var t2 = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t2[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t2[p[i]] = s[p[i]];
          }
        return t2;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f, y, t2, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
                return t2;
              if (y = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t2[1]) {
                    _.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _.label < t2[2]) {
                    _.label = t2[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding2(o, m, p);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/lz-string/libs/lz-string.js
var require_lz_string = __commonJS({
  "node_modules/lz-string/libs/lz-string.js"(exports, module2) {
    var LZString = function() {
      var f = String.fromCharCode;
      var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
      var baseReverseDic = {};
      function getBaseValue(alphabet, character) {
        if (!baseReverseDic[alphabet]) {
          baseReverseDic[alphabet] = {};
          for (var i = 0; i < alphabet.length; i++) {
            baseReverseDic[alphabet][alphabet.charAt(i)] = i;
          }
        }
        return baseReverseDic[alphabet][character];
      }
      var LZString2 = {
        compressToBase64: function(input) {
          if (input == null)
            return "";
          var res = LZString2._compress(input, 6, function(a) {
            return keyStrBase64.charAt(a);
          });
          switch (res.length % 4) {
            default:
            case 0:
              return res;
            case 1:
              return res + "===";
            case 2:
              return res + "==";
            case 3:
              return res + "=";
          }
        },
        decompressFromBase64: function(input) {
          if (input == null)
            return "";
          if (input == "")
            return null;
          return LZString2._decompress(input.length, 32, function(index2) {
            return getBaseValue(keyStrBase64, input.charAt(index2));
          });
        },
        compressToUTF16: function(input) {
          if (input == null)
            return "";
          return LZString2._compress(input, 15, function(a) {
            return f(a + 32);
          }) + " ";
        },
        decompressFromUTF16: function(compressed) {
          if (compressed == null)
            return "";
          if (compressed == "")
            return null;
          return LZString2._decompress(compressed.length, 16384, function(index2) {
            return compressed.charCodeAt(index2) - 32;
          });
        },
        compressToUint8Array: function(uncompressed) {
          var compressed = LZString2.compress(uncompressed);
          var buf = new Uint8Array(compressed.length * 2);
          for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
            var current_value = compressed.charCodeAt(i);
            buf[i * 2] = current_value >>> 8;
            buf[i * 2 + 1] = current_value % 256;
          }
          return buf;
        },
        decompressFromUint8Array: function(compressed) {
          if (compressed === null || compressed === void 0) {
            return LZString2.decompress(compressed);
          } else {
            var buf = new Array(compressed.length / 2);
            for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
              buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
            }
            var result = [];
            buf.forEach(function(c) {
              result.push(f(c));
            });
            return LZString2.decompress(result.join(""));
          }
        },
        compressToEncodedURIComponent: function(input) {
          if (input == null)
            return "";
          return LZString2._compress(input, 6, function(a) {
            return keyStrUriSafe.charAt(a);
          });
        },
        decompressFromEncodedURIComponent: function(input) {
          if (input == null)
            return "";
          if (input == "")
            return null;
          input = input.replace(/ /g, "+");
          return LZString2._decompress(input.length, 32, function(index2) {
            return getBaseValue(keyStrUriSafe, input.charAt(index2));
          });
        },
        compress: function(uncompressed) {
          return LZString2._compress(uncompressed, 16, function(a) {
            return f(a);
          });
        },
        _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
          if (uncompressed == null)
            return "";
          var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
          for (ii = 0; ii < uncompressed.length; ii += 1) {
            context_c = uncompressed.charAt(ii);
            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
              context_dictionary[context_c] = context_dictSize++;
              context_dictionaryToCreate[context_c] = true;
            }
            context_wc = context_w + context_c;
            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
              context_w = context_wc;
            } else {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              context_dictionary[context_wc] = context_dictSize++;
              context_w = String(context_c);
            }
          }
          if (context_w !== "") {
            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
              if (context_w.charCodeAt(0) < 256) {
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 8; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              } else {
                value = 1;
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = 0;
                }
                value = context_w.charCodeAt(0);
                for (i = 0; i < 16; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
              delete context_dictionaryToCreate[context_w];
            } else {
              value = context_dictionary[context_w];
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
          }
          value = 2;
          for (i = 0; i < context_numBits; i++) {
            context_data_val = context_data_val << 1 | value & 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          while (true) {
            context_data_val = context_data_val << 1;
            if (context_data_position == bitsPerChar - 1) {
              context_data.push(getCharFromInt(context_data_val));
              break;
            } else
              context_data_position++;
          }
          return context_data.join("");
        },
        decompress: function(compressed) {
          if (compressed == null)
            return "";
          if (compressed == "")
            return null;
          return LZString2._decompress(compressed.length, 32768, function(index2) {
            return compressed.charCodeAt(index2);
          });
        },
        _decompress: function(length, resetValue, getNextValue) {
          var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
          for (i = 0; i < 3; i += 1) {
            dictionary[i] = i;
          }
          bits = 0;
          maxpower = Math.pow(2, 2);
          power = 1;
          while (power != maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          switch (next = bits) {
            case 0:
              bits = 0;
              maxpower = Math.pow(2, 8);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 1:
              bits = 0;
              maxpower = Math.pow(2, 16);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              c = f(bits);
              break;
            case 2:
              return "";
          }
          dictionary[3] = c;
          w = c;
          result.push(c);
          while (true) {
            if (data.index > length) {
              return "";
            }
            bits = 0;
            maxpower = Math.pow(2, numBits);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (c = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                dictionary[dictSize++] = f(bits);
                c = dictSize - 1;
                enlargeIn--;
                break;
              case 2:
                return result.join("");
            }
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
            if (dictionary[c]) {
              entry = dictionary[c];
            } else {
              if (c === dictSize) {
                entry = w + w.charAt(0);
              } else {
                return null;
              }
            }
            result.push(entry);
            dictionary[dictSize++] = w + entry.charAt(0);
            enlargeIn--;
            w = entry;
            if (enlargeIn == 0) {
              enlargeIn = Math.pow(2, numBits);
              numBits++;
            }
          }
        }
      };
      return LZString2;
    }();
    if (typeof define === "function" && define.amd) {
      define(function() {
        return LZString;
      });
    } else if (typeof module2 !== "undefined" && module2 != null) {
      module2.exports = LZString;
    } else if (typeof angular !== "undefined" && angular != null) {
      angular.module("LZString", []).factory("LZString", function() {
        return LZString;
      });
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js
var require_use_sync_external_store_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React81 = require_react();
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useSyncExternalStore5 = React81.useSyncExternalStore;
        var useRef46 = React81.useRef, useEffect46 = React81.useEffect, useMemo26 = React81.useMemo, useDebugValue2 = React81.useDebugValue;
        function useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
          var instRef = useRef46(null);
          var inst3;
          if (instRef.current === null) {
            inst3 = {
              hasValue: false,
              value: null
            };
            instRef.current = inst3;
          } else {
            inst3 = instRef.current;
          }
          var _useMemo = useMemo26(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual2 !== void 0) {
                  if (inst3.hasValue) {
                    var currentSelection = inst3.value;
                    if (isEqual2(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual2 !== void 0 && isEqual2(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual2]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore5(subscribe, getSelection, getServerSelection);
          useEffect46(function() {
            inst3.hasValue = true;
            inst3.value = value;
          }, [value]);
          useDebugValue2(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector3;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/with-selector.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_use_sync_external_store_with_selector_development();
    }
  }
});

// src/placeholders/empty-writing-embed.svg
var require_empty_writing_embed = __commonJS({
  "src/placeholders/empty-writing-embed.svg"(exports, module2) {
    module2.exports = '<svg xmlns="http://www.w3.org/2000/svg" direction="ltr" width="2064" height="289" viewBox="-32 -32 2064 289" stroke-linecap="round" stroke-linejoin="round" style="background-color: transparent;">\n    <defs/>\n    <g transform="matrix(1, 0, 0, 1, 0, 0)" opacity="1">\n        <line x1="100" y1="150" x2="1900" y2="150"/>\n    </g>\n    <g transform="matrix(1, 0, 0, 1, 0, 0)" opacity="1">\n        <rect width="2000" height="225" opacity="0"/>\n    </g>\n</svg>';
  }
});

// src/placeholders/empty-drawing-embed.svg
var require_empty_drawing_embed = __commonJS({
  "src/placeholders/empty-drawing-embed.svg"(exports, module2) {
    module2.exports = '<svg\n    xmlns="http://www.w3.org/2000/svg"\n    version="1.1"\n    viewBox="0 0 395 130" \n    width="395"\n    height="130"\n    fill="none"\n    class="ddc_ink_drawing-placeholder"\n>\n    <g>\n        <rect rx="10" ry="10" x="1" y="1" width="393" height="128" style="fill: none; stroke-width: 1; stroke: rgb(255, 255, 255); stroke-opacity: 0.1;"/>\n    </g>\n    <g>\n        <rect rx="2" ry="2" x="189" y="56" width="18" height="18" style="fill: none; stroke-width: 2; stroke: rgb(255, 255, 255); stroke-opacity: 1;" class="stroke-shape"/>\n        <circle cx="195" cy="62" style="fill: none; stroke-width: 2; stroke: rgb(255, 255, 255); stroke-opacity: 1;" r="2" class="stroke-shape"/>\n        <path d="m207 68-3.086-3.086a2 2 0 0 0-2.828 0L192 74" style="fill: none; stroke-width: 2; stroke: rgb(255, 255, 255); stroke-opacity: 1;" class="stroke-shape"/>\n    </g>\n</svg>';
  }
});

// src/graphics/social-icons/bluesky.svg
var require_bluesky = __commonJS({
  "src/graphics/social-icons/bluesky.svg"(exports, module2) {
    module2.exports = '<svg width="100" height="100" viewBox="0 0 15 13" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M7.173 5.80097C6.54015 4.57089 4.81761 2.27767 3.21592 1.14748C1.68129 0.0647798 1.09663 0.251283 0.713148 0.425911C0.268894 0.624988 0.187866 1.30743 0.187866 1.70768C0.187866 2.10933 0.407898 4.99698 0.551093 5.47965C1.02608 7.07227 2.71229 7.61012 4.26718 7.43759C1.99003 7.77497 -0.0335624 8.6041 2.61869 11.5574C5.53708 14.5785 6.61838 10.9099 7.173 9.04976C7.72762 10.9099 8.36606 14.4465 11.6742 11.5574C14.1581 9.04976 12.3567 7.77497 10.0795 7.43759C11.6337 7.61012 13.3206 7.07227 13.7949 5.47965C13.9381 4.99768 14.1581 2.10933 14.1581 1.70838C14.1581 1.30674 14.0771 0.625686 13.6328 0.424514C13.2494 0.251283 12.6647 0.0633829 11.1301 1.14608C9.52839 2.27837 7.80515 4.57159 7.173 5.80097Z" fill="white"/>\n</svg>\n';
  }
});

// src/graphics/social-icons/mastodon.svg
var require_mastodon = __commonJS({
  "src/graphics/social-icons/mastodon.svg"(exports, module2) {
    module2.exports = '<svg width="100" height="100" viewBox="0 0 13 13" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M12.0997 7.77207C11.9245 8.67344 10.5296 9.66111 8.92761 9.85226C8.09272 9.95198 7.26998 10.044 6.39291 10.0031C4.95903 9.93728 3.82688 9.66111 3.82688 9.66111C3.82688 9.80048 3.83583 9.93344 3.85245 10.0575C4.03912 11.4734 5.25629 11.5578 6.40953 11.5981C7.573 11.6377 8.60861 11.3104 8.60861 11.3104L8.6572 12.3627C8.6572 12.3627 7.84277 12.7999 6.39291 12.8805C5.59382 12.9239 4.60104 12.86 3.4446 12.5544C0.936746 11.8902 0.505239 9.21746 0.439395 6.5044C0.419577 5.69893 0.431723 4.94011 0.431723 4.30532C0.431723 1.53089 2.24917 0.71838 2.24917 0.71838C3.16524 0.297741 4.7372 0.120663 6.37245 0.107239H6.41209C8.0467 0.120024 9.61994 0.297741 10.536 0.71838C10.536 0.71838 12.3535 1.53153 12.3535 4.30468C12.3535 4.30468 12.3765 6.35098 12.0997 7.77207ZM10.21 4.52011C10.21 3.83354 10.0355 3.28824 9.6845 2.88486C9.32204 2.48148 8.84834 2.27436 8.25957 2.27436C7.57875 2.27436 7.0635 2.53646 6.72213 3.05938L6.39099 3.61555L6.05921 3.05938C5.71848 2.53646 5.20323 2.27436 4.52241 2.27436C3.93364 2.27436 3.4593 2.48148 3.09748 2.88486C2.74652 3.28824 2.572 3.83354 2.572 4.52011V7.87819H3.90232V4.61856C3.90232 3.93135 4.19126 3.58294 4.7698 3.58294C5.40907 3.58294 5.72935 3.99655 5.72935 4.81482V6.59838H7.05263V4.81482C7.05263 3.99655 7.37227 3.58294 8.01154 3.58294C8.59007 3.58294 8.87966 3.93135 8.87966 4.61856V7.87883H10.2093V4.51947L10.21 4.52011Z" fill="white"/>\n</svg>\n';
  }
});

// src/graphics/social-icons/threads.svg
var require_threads = __commonJS({
  "src/graphics/social-icons/threads.svg"(exports, module2) {
    module2.exports = '<svg width="100" height="100" viewBox="0 0 13 15" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M6.53736 3.69841C5.31389 3.69841 4.42969 4.07195 3.75944 5.02945C3.75944 5.02945 4.55499 5.58148 4.79377 5.74106L4.82214 5.70915C5.16495 5.31197 5.45929 4.97152 6.53618 4.97152C7.74427 4.97152 8.22184 5.93847 8.22184 6.50351C7.8944 6.43732 7.26789 6.40185 6.74777 6.40185C5.35881 6.40185 3.59986 7.07328 3.59986 8.9268C3.59986 10.2247 4.83751 11.2153 6.27139 11.2153C8.7325 11.2153 9.29281 9.37481 9.50204 8.28138C9.5576 8.28138 10.6286 8.89134 10.6286 10.1668C10.6286 12.0404 8.79279 13.3194 6.33049 13.3194C3.33744 13.3194 1.3397 11.369 1.3397 7.69624C1.3397 3.6003 3.12703 1.67585 6.28912 1.67585C8.20056 1.67585 10.2869 2.15815 11.2823 5.1843L12.488 4.87223C11.2019 0.622612 7.77974 0.407471 6.32104 0.407471C3.16249 0.407471 0.0760498 2.21134 0.0760498 7.49529C0.0760498 12.8076 3.26297 14.5926 6.33049 14.5926C9.90277 14.5926 11.8769 12.5014 11.8769 10.0935C11.8769 8.96108 11.3355 7.97285 10.352 7.31206C10.1077 7.14736 9.84051 7.00433 9.55051 6.88296C9.48195 5.877 9.18288 5.08973 8.65921 4.53888C8.13436 3.98921 7.40028 3.69841 6.53736 3.69841ZM4.87534 8.92325C4.87534 8.43859 5.10821 7.66787 6.91681 7.66787C7.47121 7.66787 7.81283 7.70806 8.27148 7.8109C8.12491 9.70934 7.19578 9.95995 6.29266 9.95995C5.79855 9.95995 4.87534 9.70225 4.87534 8.92325Z" fill="white"/>\n</svg>\n';
  }
});

// src/graphics/social-icons/twitter.svg
var require_twitter = __commonJS({
  "src/graphics/social-icons/twitter.svg"(exports, module2) {
    module2.exports = '<svg width="100" height="100" viewBox="0 0 15 13" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M14.6288 2.14845C14.094 2.38083 13.5281 2.53393 12.9491 2.60291C13.5576 2.24658 14.0153 1.68049 14.2362 1.01081C13.6608 1.34722 13.0324 1.58327 12.3779 1.70883C12.1023 1.41998 11.7708 1.19019 11.4036 1.03342C11.0364 0.876661 10.6412 0.796203 10.2419 0.796941C8.62549 0.796941 7.31735 2.08607 7.31735 3.6752C7.31621 3.89624 7.34154 4.11663 7.3928 4.33164C6.23368 4.2773 5.09867 3.98161 4.06037 3.46349C3.02208 2.94537 2.10336 2.21622 1.36301 1.32269C1.10328 1.76055 0.965917 2.26014 0.965284 2.76925C0.965284 3.76728 1.48598 4.64947 2.27223 5.16631C1.8064 5.15525 1.35012 5.03196 0.942115 4.8069V4.84254C0.942115 6.2386 1.95203 7.4 3.28868 7.66436C3.03733 7.73137 2.77831 7.76532 2.51818 7.76536C2.33359 7.76568 2.14943 7.74777 1.96837 7.71189C2.33996 8.85547 3.42146 9.68717 4.70256 9.71093C3.66157 10.5132 2.38351 10.9468 1.06925 10.9436C0.83596 10.9433 0.602892 10.9294 0.371216 10.902C1.70822 11.7558 3.26238 12.2074 4.8487 12.203C10.2357 12.203 13.1787 7.81585 13.1787 4.01085C13.1787 3.88609 13.1755 3.76134 13.1695 3.63955C13.7407 3.23323 14.2349 2.72829 14.6288 2.14845Z" fill="white"/>\n</svg>\n';
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module2) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t2 = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max2] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max2}}`).split(`${token}+`).join(`${token}{1,${max2}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index2 = R++;
      debug(name, index2, value);
      t2[name] = index2;
      src[index2] = value;
      re[index2] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index2] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`);
    createToken("FULL", `^${src[t2.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`);
    createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t2.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t2.COERCEPLAIN] + `(?:${src[t2.PRERELEASE]})?(?:${src[t2.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t2.COERCE], true);
    createToken("COERCERTLFULL", src[t2.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module2) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t: t2 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t2.LOOSE] : re[t2.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("build compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse2;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module2) {
    var parse2 = require_parse();
    var valid2 = (version2, options) => {
      const v = parse2(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid2;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module2) {
    var parse2 = require_parse();
    var clean = (version2, options) => {
      const s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module2) {
    var SemVer = require_semver();
    var inc = (version2, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(version2 instanceof SemVer ? version2.version : version2, options).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module2) {
    var parse2 = require_parse();
    var diff = (version1, version2) => {
      const v1 = parse2(version1, null, true);
      const v2 = parse2(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module2) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module2) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module2) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module2) {
    var parse2 = require_parse();
    var prerelease = (version2, options) => {
      const parsed = parse2(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module2) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module2) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module2) {
    var compare = require_compare();
    var gt2 = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt2;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt2 = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt2(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module2) {
    var SemVer = require_semver();
    var parse2 = require_parse();
    var { safeRe: re, t: t2 } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(options.includePrerelease ? re[t2.COERCEFULL] : re[t2.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t2.COERCERTLFULL] : re[t2.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse2(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports, module2) {
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module2) {
    var Range2 = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range2) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range2(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().split(/\s+/).join(" ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t2.HYPHENRANGELOOSE] : re[t2.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t2.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t2.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t2.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t2.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range2)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range2;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t: t2,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t2.TILDELOOSE] : re[t2.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t2.CARETLOOSE] : re[t2.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t2.XRANGELOOSE] : re[t2.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t2.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set2, version2, options) => {
      for (let i = 0; i < set2.length; i++) {
        if (!set2[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set2.length; i++) {
          debug(set2[i].semver);
          if (set2[i].semver === Comparator.ANY) {
            continue;
          }
          if (set2[i].semver.prerelease.length > 0) {
            const allowed = set2[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t2.COMPARATORLOOSE] : re[t2.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range2(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range2(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t: t2 } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range2 = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module2) {
    var Range2 = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range2(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    var Range2 = require_range();
    var toComparators = (range, options) => new Range2(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range2 = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max2 = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range2(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max2 || maxSV.compare(v) === -1) {
            max2 = v;
            maxSV = new SemVer(max2, options);
          }
        }
      });
      return max2;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range2 = require_range();
    var minSatisfying = (versions, range, options) => {
      let min3 = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range2(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min3 || minSV.compare(v) === 1) {
            min3 = v;
            minSV = new SemVer(min3, options);
          }
        }
      });
      return min3;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module2) {
    var SemVer = require_semver();
    var Range2 = require_range();
    var gt2 = require_gt();
    var minVersion = (range, loose) => {
      range = new Range2(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt2(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt2(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module2) {
    var Range2 = require_range();
    var validRange = (range, options) => {
      try {
        return new Range2(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module2) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range2 = require_range();
    var satisfies = require_satisfies();
    var gt2 = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range2(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt2;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt2;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module2) {
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module2) {
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module2) {
    var Range2 = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range2(r1, options);
      r2 = new Range2(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set2 = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set2.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set2.push([first, null]);
      }
      const ranges = [];
      for (const [min3, max2] of set2) {
        if (min3 === max2) {
          ranges.push(min3);
        } else if (!max2 && min3 === v[0]) {
          ranges.push("*");
        } else if (!max2) {
          ranges.push(`>=${min3}`);
        } else if (min3 === v[0]) {
          ranges.push(`<=${max2}`);
        } else {
          ranges.push(`${min3} - ${max2}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module2) {
    var Range2 = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range2(sub, options);
      dom = new Range2(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt2, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt2 = higherGT(gt2, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt2 && lt) {
        gtltComp = compare(gt2.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt2.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt2 && !satisfies(eq, String(gt2), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt2 && !options.includePrerelease && gt2.semver.prerelease.length ? gt2.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt2) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt2, c, options);
            if (higher === c && higher !== gt2) {
              return false;
            }
          } else if (gt2.operator === ">=" && !satisfies(gt2.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt2) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt2 && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt2 && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse();
    var valid2 = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt2 = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range2 = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse: parse2,
      valid: valid2,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt: gt2,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range: Range2,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/types/plugin-settings.ts
var DEFAULT_SETTINGS = {
  onboardingTips: {
    welcomeTipRead: false,
    strokeLimitTipRead: false,
    lastVersionTipRead: ""
  },
  customAttachmentFolders: false,
  noteAttachmentFolderLocation: "obsidian",
  notelessAttachmentFolderLocation: "obsidian",
  writingSubfolder: "Ink/Writing",
  drawingSubfolder: "Ink/Drawing",
  writingEnabled: true,
  writingStrokeLimit: 200,
  writingDynamicStrokeThickness: true,
  writingSmoothing: false,
  writingLinesWhenLocked: true,
  writingBackgroundWhenLocked: true,
  drawingEnabled: true,
  drawingFrameWhenLocked: false,
  drawingBackgroundWhenLocked: false
};

// src/components/dom-components/support-button-set.ts
var import_obsidian = require("obsidian");
function createSupportButtonSet(containerEl) {
  const supportBarEl = containerEl.createDiv("ddc_ink_support-btn-set");
  const settingEl = new import_obsidian.Setting(supportBarEl);
  settingEl.infoEl.createEl("p").setText("Like Ink?");
  settingEl.addButton((btn) => {
    btn.setClass("ddc_ink_secondary-button");
    btn.setTooltip("Bluesky");
    btn.setIcon("bluesky");
    btn.onClick((e) => {
      window.open("https://bsky.app/profile/daledesilva.bsky.social", "_blank");
    });
  });
  settingEl.addButton((btn) => {
    btn.setClass("ddc_ink_secondary-button");
    btn.setTooltip("Mastodon");
    btn.setIcon("mastodon");
    btn.onClick((e) => {
      window.open("https://indieweb.social/@daledesilva", "_blank");
    });
  });
  settingEl.addButton((btn) => {
    btn.setClass("ddc_ink_secondary-button");
    btn.setTooltip("X (Twitter)");
    btn.setIcon("twitter");
    btn.onClick((e) => {
      window.open("https://twitter.com/daledesilva", "_blank");
    });
  });
  settingEl.addButton((btn) => {
    btn.setClass("ddc_ink_primary-button");
    btn.setTooltip("Threads");
    btn.setIcon("threads");
    btn.onClick((e) => {
      window.open("https://www.threads.net/@daledesilva", "_blank");
    });
  });
  settingEl.addButton((btn) => {
    btn.setClass("ddc_ink_primary-button");
    btn.setTooltip("Support developer");
    btn.setIcon("heart");
    btn.onClick((e) => {
      window.open("https://ko-fi.com/N4N3JLUCW", "_blank");
    });
  });
}

// src/tabs/settings-tab/settings-tab.ts
var import_obsidian5 = require("obsidian");

// src/modals/confirmation-modal/confirmation-modal.ts
var import_obsidian2 = require("obsidian");
var ConfirmationModal = class extends import_obsidian2.Modal {
  constructor(options) {
    super(options.plugin.app);
    this.title = "Confirmation";
    this.message = "Are you sure?";
    this.cancelLabel = "Cancel";
    this.cancelAction = () => {
    };
    this.confirmLabel = "Yes";
    this.title = options.title || this.title;
    this.message = options.message || this.message;
    this.cancelLabel = options.cancelLabel || this.cancelLabel;
    this.confirmLabel = options.confirmLabel || this.confirmLabel;
    this.cancelAction = options.cancelAction || this.cancelAction;
    this.confirmAction = options.confirmAction;
  }
  onOpen() {
    const { titleEl, contentEl } = this;
    titleEl.setText(this.title);
    contentEl.createEl("p", { text: this.message });
    new import_obsidian2.Setting(contentEl).addButton((cancelBtn) => {
      cancelBtn.setClass("uo_button");
      cancelBtn.setButtonText(this.cancelLabel);
      cancelBtn.onClick(() => {
        this.close();
        this.cancelAction();
      });
    }).addButton((confirmBtn) => {
      confirmBtn.setClass("uo_button");
      confirmBtn.setWarning();
      confirmBtn.setButtonText(this.confirmLabel);
      confirmBtn.onClick(() => {
        this.close();
        this.confirmAction();
      });
    });
  }
  onClose() {
    const { titleEl, contentEl } = this;
    titleEl.empty();
    contentEl.empty();
  }
};

// src/components/dom-components/notice-components.ts
var import_obsidian3 = require("obsidian");
function createInkNoticeTemplate(noticeNumber, noticeTotal) {
  const noticeBody = document.createDocumentFragment();
  createNoticeLabel(noticeBody, noticeNumber, noticeTotal);
  return noticeBody;
}
function launchPersistentInkNotice(noticeBody) {
  const notice = new import_obsidian3.Notice(noticeBody, 0);
  notice.noticeEl.classList.add("ddc_ink_notice");
  notice.noticeEl.style.pointerEvents = "none";
  return notice;
}
function createNoticeLabel(noticeBody, noticeNumber, noticeTotal) {
  const labelEl = noticeBody.createEl("p");
  let labelText = `Ink plugin`;
  labelEl.setText(labelText);
  labelEl.classList.add("ddc_ink_notice-label");
  return labelEl;
}
function createNoticeCtaBar(noticeBody, props) {
  let primaryBtnEl = null;
  let tertiaryBtnEl = null;
  const ctaBarEl = noticeBody.createDiv("ddc_ink_notice-cta-bar");
  if (props.primaryLabel) {
    primaryBtnEl = ctaBarEl.createEl("button");
    primaryBtnEl.setText(props.primaryLabel);
    primaryBtnEl.classList.add("ddc_ink_primary-btn");
    primaryBtnEl.style.pointerEvents = "all";
  }
  if (props.tertiaryLabel) {
    tertiaryBtnEl = ctaBarEl.createEl("button");
    tertiaryBtnEl.setText(props.tertiaryLabel);
    tertiaryBtnEl.classList.add("ddc_ink_tertiary-btn");
    tertiaryBtnEl.style.pointerEvents = "all";
  }
  return {
    ctaBarEl,
    primaryBtnEl,
    tertiaryBtnEl
  };
}

// src/notices/welcome-notice.ts
function showWelcomeTips_maybe(plugin) {
  if (plugin.settings.onboardingTips.welcomeTipRead)
    return false;
  showWelcomeTips(plugin);
  return true;
}
var tipsShowingOrDismissed = false;
async function showWelcomeTips(plugin) {
  if (tipsShowingOrDismissed)
    return;
  tipsShowingOrDismissed = true;
  const noticeBody = createInkNoticeTemplate(1, 3);
  noticeBody.createEl("h1").setText(`Welcome to Ink`);
  noticeBody.createEl("p").setText(`Ink is all about enabling stylus use directly in your markdown notes.`);
  noticeBody.createEl("p").setText(`Here's a quick rundown to help you get started...`);
  const {
    primaryBtnEl,
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    primaryLabel: `Let's go!`,
    tertiaryLabel: "Dismiss for now"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (tertiaryBtnEl) {
    tertiaryBtnEl.addEventListener("click", () => {
      notice.hide();
    });
  }
  if (primaryBtnEl) {
    primaryBtnEl.addEventListener("click", () => {
      notice.hide();
      showHandwritingWelcomeTip(plugin);
    });
  }
}
function showHandwritingWelcomeTip(plugin) {
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`Inserting handwriting sections...`);
  noticeBody.createEl("p").setText(`In any markdown note, run the following command to begin writing where your cursor is.`);
  noticeBody.createEl("blockquote").setText(`"Insert new handwriting section"`);
  noticeBody.createEl("p").setText(`( Cmd+P or swipe down )`);
  const {
    primaryBtnEl,
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    primaryLabel: "Continue",
    tertiaryLabel: "Dismiss for now"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (primaryBtnEl) {
    primaryBtnEl.addEventListener("click", () => {
      notice.hide();
      showDrawingWelcomeTip(plugin);
    });
  }
}
function showDrawingWelcomeTip(plugin) {
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`Drawing sections...`);
  noticeBody.createEl("p").setText(`Drawing sections are in early development.`);
  noticeBody.createEl("p").setText(`You can turn them on in the settings (and restart Obsidian) if you'd like to begin using them.`);
  const {
    primaryBtnEl,
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    primaryLabel: "Continue",
    tertiaryLabel: "Dismiss for now"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (primaryBtnEl) {
    primaryBtnEl.addEventListener("click", () => {
      notice.hide();
      showSyncingWelcomeTip(plugin);
    });
  }
}
function showSyncingWelcomeTip(plugin) {
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`Syncing with your vault...`);
  noticeBody.createEl("p").setText(`Ink files live in your vault and can sync with it to other devices.`);
  noticeBody.createEl("p").setText(`If using Obsidian Sync, turn on "Sync all other types" in the Obsidian Sync settings.`);
  const {
    primaryBtnEl,
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    primaryLabel: "Continue",
    tertiaryLabel: "Dismiss for now"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (primaryBtnEl) {
    primaryBtnEl.addEventListener("click", () => {
      notice.hide();
      showDevelopmentWelcomeTip(plugin);
    });
  }
}
function showDevelopmentWelcomeTip(plugin) {
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`Help improve Ink...`);
  noticeBody.createEl("p").setText(`Ink is under construction. This means it has features missing and sometimes has bugs.`);
  noticeBody.createEl("p").setText(`If you notice any, please report them through the link in the settings.`);
  const {
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    tertiaryLabel: "Dismiss"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (tertiaryBtnEl) {
    tertiaryBtnEl.addEventListener("click", () => {
      notice.hide();
      tipsShowingOrDismissed = false;
      plugin.settings.onboardingTips.welcomeTipRead = true;
      plugin.settings.onboardingTips.lastVersionTipRead = plugin.manifest.version;
      plugin.saveSettings();
    });
  }
}

// src/components/dom-components/toggle-accordion-setting.ts
var import_obsidian4 = require("obsidian");
var ToggleAccordionSetting = class {
  constructor(containerEl) {
    this.containerEl = containerEl;
    this.sectionEl = this.containerEl.createDiv("ddc_ink_toggle-accordion");
    this.sectionHeaderEl = this.sectionEl.createDiv("ddc_ink_toggle-accordion-header");
    this.sectionContentEl = this.sectionEl.createDiv("ddc_ink_toggle-accordion-content");
    this.toggleSetting = new import_obsidian4.Setting(this.sectionHeaderEl).setClass("ddc_ink_setting").addToggle((toggle) => this.toggle = toggle);
    return this;
  }
  setName(name) {
    this.toggleSetting.setName(name);
    return this;
  }
  setDesc(desc) {
    this.toggleSetting.setDesc(desc);
    return this;
  }
  setExpanded(expanded) {
    this.toggle.setValue(expanded);
    if (expanded) {
      this.sectionEl.classList.add("ddc_ink_expanded");
    } else {
      this.sectionEl.classList.remove("ddc_ink_expanded");
    }
    return this;
  }
  onToggle(toggleHandler) {
    this.toggle.onChange(toggleHandler);
    return this;
  }
  setContent(contentHandler) {
    contentHandler(this.sectionContentEl);
    return this;
  }
};

// src/tabs/settings-tab/settings-tab.ts
function registerSettingsTab(plugin) {
  plugin.addSettingTab(new MySettingsTab(plugin.app, plugin));
}
var MySettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1").setText("Ink");
    containerEl.createEl("p").setText("Hand write or draw directly between paragraphs in your notes.");
    containerEl.createEl("hr");
    insertMoreInfoLinks(containerEl);
    insertPrereleaseWarning(containerEl);
    insertSetupGuide(this.plugin, containerEl);
    insertHighLevelSettings(containerEl, this.plugin, () => this.display());
    insertSubfolderSettings(containerEl, this.plugin, () => this.display());
    containerEl.createEl("hr");
    if (this.plugin.settings.writingEnabled)
      insertWritingSettings(containerEl, this.plugin, () => this.display());
    if (this.plugin.settings.drawingEnabled)
      insertDrawingSettings(containerEl, this.plugin, () => this.display());
    new import_obsidian5.Setting(containerEl).addButton((button) => {
      button.setButtonText("Reset settings");
      button.onClick(() => {
        new ConfirmationModal({
          plugin: this.plugin,
          title: "Please confirm",
          message: "Revert to default settings for Ink plugin?",
          confirmLabel: "Reset settings",
          confirmAction: async () => {
            await this.plugin.resetSettings();
            this.display();
          }
        }).open();
      });
    });
    createSupportButtonSet(containerEl);
  }
};
function insertSetupGuide(plugin, containerEl) {
  const sectionEl = containerEl.createDiv("ddc_ink_section ddc_ink_setup-guide-section");
  const accordionEl = sectionEl.createEl("details");
  accordionEl.createEl("summary", { text: `Expand setup tips` });
  new import_obsidian5.Setting(accordionEl).setClass("ddc_ink_setting").setName("Slash Commands").setDesc(`For a more intuitive experience, turn on "Slash commands" in "Obsidian Settings" / "Core Plugins" or install and set up the community plugin "Slash Commander".`);
  new import_obsidian5.Setting(accordionEl).setClass("ddc_ink_setting").setName("Pen Scribble").setDesc(`If using an iPad, the Apple pencil "Scribble" setting can interfere with input in Ink sections. Disable it in iPadOS settings for a better experience.`);
  new import_obsidian5.Setting(accordionEl).setClass("ddc_ink_setting").setName("Obsidian Sync").setDesc(`If using "Obsidian Sync", turn on "Sync all other types" in the Obsidian sync settings.`);
  new import_obsidian5.Setting(accordionEl).addButton((btn) => {
    btn.setButtonText("Rewatch welcome tips");
    btn.onClick(() => showWelcomeTips(plugin));
    btn.setCta();
  });
}
function insertMoreInfoLinks(containerEl) {
  const sectionEl = containerEl.createDiv("ddc_ink_section");
  sectionEl.createEl("p", { text: `For information on this plugin's development, visit the links below. Feel free to leave comments in the development diaries on YouTube.` });
  const list = sectionEl.createEl("ul");
  list.createEl("li").createEl("a", {
    href: "https://github.com/daledesilva/obsidian_ink/releases",
    text: "Latest Changes"
  });
  list.createEl("li").createEl("a", {
    href: "https://github.com/daledesilva/obsidian_ink",
    text: "Roadmap"
  });
  list.createEl("li").createEl("a", {
    href: "https://www.youtube.com/playlist?list=PLAiv7XV4xFx2NMRSCxdGiVombKO-TiMAL",
    text: "Development Diaries."
  });
  list.createEl("li").createEl("a", {
    href: "https://github.com/daledesilva/obsidian_ink/issues",
    text: "Request feature / Report bug."
  });
}
function insertHighLevelSettings(containerEl, plugin, refresh) {
  new import_obsidian5.Setting(containerEl).setClass("ddc_ink_setting").setName("Enable writing").setDesc("If disabled, you will not be able to add new writing embeds and those already embedded will appear as raw code. Existing writing files will be hidden in Obsidian but still exist on disk. Changing this setting will require a restart of Obsidian to take effect.").addToggle((toggle) => {
    toggle.setValue(plugin.settings.writingEnabled);
    toggle.onChange(async (value) => {
      plugin.settings.writingEnabled = value;
      await plugin.saveSettings();
      refresh();
    });
  });
  new import_obsidian5.Setting(containerEl).setClass("ddc_ink_setting").setName("Enable drawing").setDesc("If disabled, you will not be able to add new drawing embeds and those already embedded will appear as raw code. Existing drawing files will be hidden in Obsidian but still exist on disk. Changing this setting will require a restart of Obsidian to take effect.").addToggle((toggle) => {
    toggle.setValue(plugin.settings.drawingEnabled);
    toggle.onChange(async (value) => {
      plugin.settings.drawingEnabled = value;
      await plugin.saveSettings();
      refresh();
    });
  });
}
function insertSubfolderSettings(containerEl, plugin, refresh) {
  const saveWritingFolder = async (enteredValue) => {
    const value = enteredValue || DEFAULT_SETTINGS.writingSubfolder;
    plugin.settings.writingSubfolder = value.trim();
    await plugin.saveSettings();
    refresh();
  };
  const saveDrawingFolder = async (enteredValue) => {
    const value = enteredValue || DEFAULT_SETTINGS.drawingSubfolder;
    plugin.settings.drawingSubfolder = value.trim();
    await plugin.saveSettings();
    refresh();
  };
  const accordionSection = new ToggleAccordionSetting(containerEl).setName("Customise file organisation").setExpanded(plugin.settings.customAttachmentFolders).onToggle(async (value) => {
    plugin.settings.customAttachmentFolders = value;
    await plugin.saveSettings();
    refresh();
  }).setContent((container) => {
    new import_obsidian5.Setting(container).setClass("ddc_ink_button-set").setName(`Where should Ink files be saved when created in a note?`).addButton((button) => {
      button.setButtonText("Obsidian attachment folder");
      button.setClass("ddc_ink_left-most");
      if (plugin.settings.noteAttachmentFolderLocation === "obsidian") {
        button.setCta();
        button.setDisabled(true);
      }
      button.onClick(async (e) => {
        plugin.settings.noteAttachmentFolderLocation = "obsidian";
        await plugin.saveSettings();
        refresh();
      });
    }).addButton((button) => {
      button.setButtonText("Vault root");
      button.setClass("ddc_ink_middle");
      if (plugin.settings.noteAttachmentFolderLocation === "root") {
        button.setCta();
        button.setDisabled(true);
      }
      button.onClick(async (e) => {
        plugin.settings.noteAttachmentFolderLocation = "root";
        await plugin.saveSettings();
        refresh();
      });
    }).addButton((button) => {
      button.setButtonText("Next to the note");
      button.setClass("ddc_ink_right-most");
      if (plugin.settings.noteAttachmentFolderLocation === "note") {
        button.setCta();
        button.setDisabled(true);
      }
      button.onClick(async (e) => {
        plugin.settings.noteAttachmentFolderLocation = "note";
        await plugin.saveSettings();
        refresh();
      });
    });
    let inputSettingEl = new import_obsidian5.Setting(container).setClass("ddc_ink_setting").setName("Writing files subfolder").addText((textItem) => {
      textItem.setValue(plugin.settings.writingSubfolder.toString());
      textItem.setPlaceholder(DEFAULT_SETTINGS.writingSubfolder.toString());
      textItem.inputEl.addEventListener("blur", async (ev) => {
        saveWritingFolder(textItem.getValue());
      });
      textItem.inputEl.addEventListener("keypress", async (ev) => {
        if (ev.key === "Enter")
          saveWritingFolder(textItem.getValue());
      });
    });
    inputSettingEl.settingEl.classList.add("ddc_ink_input-medium");
    inputSettingEl = new import_obsidian5.Setting(container).setClass("ddc_ink_setting").setName("Drawing files subfolder").addText((textItem) => {
      textItem.setValue(plugin.settings.drawingSubfolder.toString());
      textItem.setPlaceholder(DEFAULT_SETTINGS.drawingSubfolder.toString());
      textItem.inputEl.addEventListener("blur", async (ev) => {
        saveDrawingFolder(textItem.getValue());
      });
      textItem.inputEl.addEventListener("keypress", async (ev) => {
        if (ev.key === "Enter")
          saveDrawingFolder(textItem.getValue());
      });
    });
    inputSettingEl.settingEl.classList.add("ddc_ink_input-medium");
  });
}
function insertDrawingSettings(containerEl, plugin, refresh) {
  const sectionEl = containerEl.createDiv("ddc_ink_section ddc_ink_controls-section");
  sectionEl.createEl("h2", { text: "Drawing" });
  sectionEl.createEl("p", { text: `While editing a Markdown file, run the action 'Insert new hand drawn section' to embed a drawing canvas.` });
  new import_obsidian5.Setting(sectionEl).setClass("ddc_ink_setting").setName("Show frame around drawing when not editing").addToggle((toggle) => {
    toggle.setValue(plugin.settings.drawingFrameWhenLocked);
    toggle.onChange(async (value) => {
      plugin.settings.drawingFrameWhenLocked = value;
      await plugin.saveSettings();
      refresh();
    });
  });
  new import_obsidian5.Setting(sectionEl).setClass("ddc_ink_setting").setName("Show background when not editing").addToggle((toggle) => {
    toggle.setValue(plugin.settings.drawingBackgroundWhenLocked);
    toggle.onChange(async (value) => {
      plugin.settings.drawingBackgroundWhenLocked = value;
      await plugin.saveSettings();
      refresh();
    });
  });
}
function insertWritingSettings(containerEl, plugin, refresh) {
  const saveWritingStrokeLimit = async (enteredValue) => {
    const value = parseInt(enteredValue) || DEFAULT_SETTINGS.writingStrokeLimit;
    plugin.settings.writingStrokeLimit = value;
    await plugin.saveSettings();
    refresh();
  };
  const sectionEl = containerEl.createDiv("ddc_ink_section ddc_ink_controls-section");
  sectionEl.createEl("h2", { text: "Writing" });
  sectionEl.createEl("p", { text: `While editing a Markdown file, run the action 'Insert new handwriting section' to embed a section for writing with a stylus.` });
  new import_obsidian5.Setting(sectionEl).setClass("ddc_ink_setting").setName("Show ruled lines when not editing").addToggle((toggle) => {
    toggle.setValue(plugin.settings.writingLinesWhenLocked);
    toggle.onChange(async (value) => {
      plugin.settings.writingLinesWhenLocked = value;
      await plugin.saveSettings();
      refresh();
    });
  });
  new import_obsidian5.Setting(sectionEl).setClass("ddc_ink_setting").setName("Show background when not editing").addToggle((toggle) => {
    toggle.setValue(plugin.settings.writingBackgroundWhenLocked);
    toggle.onChange(async (value) => {
      plugin.settings.writingBackgroundWhenLocked = value;
      await plugin.saveSettings();
      refresh();
    });
  });
  new import_obsidian5.Setting(sectionEl).setClass("ddc_ink_setting").setName("Writing stroke limit").setDesc(`Too much writing in one embed can create a lag between your physical pen movement and the line appearing on screen. The stroke limit defines the maximum pen strokes before old strokes start becoming invisible until the embed is locked. Set this to a lower number if you're experiencing lag or jagged writing.`).addText((textItem) => {
    textItem.setValue(plugin.settings.writingStrokeLimit.toString());
    textItem.setPlaceholder(DEFAULT_SETTINGS.writingStrokeLimit.toString());
    textItem.inputEl.addEventListener("blur", async (ev) => {
      saveWritingStrokeLimit(textItem.getValue());
    });
    textItem.inputEl.addEventListener("keypress", async (ev) => {
      if (ev.key === "Enter")
        saveWritingStrokeLimit(textItem.getValue());
    });
  });
  insertWritingLimitations(sectionEl);
}
function insertWritingLimitations(containerEl) {
}
function insertPrereleaseWarning(containerEl) {
  const sectionEl = containerEl.createDiv("ddc_ink_section ddc_ink_prerelease-warning-section");
  const accordion = sectionEl.createEl("details", { cls: "warning" });
  accordion.createEl("summary", { text: `This plugin is in an Alpha state (Expand for details)` });
  accordion.createEl("p", { text: `What does Alpha mean? Development of products like this plugin often involve moving through multiple different stages (e.g. Alpha, Beta, then Standard Release).` });
  accordion.createEl("p", { text: `Alpha, the current stage, means that this plugin is in early development and may undergo large changes that break or change previous functionality.` });
  accordion.createEl("p", { text: `While in Alpha, please exercise caution while using the plugin, however, note that I (The developer of this plugin) am proceeding with caution to help ensure any files created in this version will be compatible or converted to work with future versions (My own vaults depend on it as well).` });
}

// src/extensions/widgets/writing-embed-widget.tsx
var import_obsidian10 = require("obsidian");
var React71 = __toESM(require_react());
var import_client2 = __toESM(require_client());

// src/constants.ts
var manifest = require_manifest();
var PLUGIN_VERSION = manifest.version;
var TLDRAW_VERSION = "2.1.0";
var PLUGIN_KEY = "ddc_ink";
var WRITE_FILE_EXT = "writing";
var DRAW_FILE_EXT = "drawing";
var WRITE_EMBED_KEY = "handwritten-ink";
var DRAW_EMBED_KEY = "handdrawn-ink";
var MENUBAR_HEIGHT_PX = 100;
var WRITE_SHORT_DELAY_MS = 500;
var WRITE_LONG_DELAY_MS = 2e3;
var DRAW_SHORT_DELAY_MS = 500;
var DRAW_LONG_DELAY_MS = 2e3;
var WRITING_PAGE_WIDTH = 2e3;
var WRITING_LINE_HEIGHT = 150;
var WRITING_MIN_PAGE_HEIGHT = WRITING_LINE_HEIGHT * 1.5;

// src/utils/page-file.ts
var buildWritingFileData = (props) => {
  return buildFileData(props);
};
var buildDrawingFileData = (props) => {
  return buildFileData(props);
};
var buildFileData = (props) => {
  const {
    tldrawData,
    previewUri,
    previewIsOutdated = false
  } = props;
  let pageData = {
    meta: {
      pluginVersion: PLUGIN_VERSION,
      tldrawVersion: TLDRAW_VERSION
    },
    tldraw: tldrawData
  };
  if (previewIsOutdated)
    pageData.meta.previewIsOutdated = previewIsOutdated;
  if (previewUri)
    pageData.previewUri = previewUri;
  return pageData;
};
var stringifyPageData = (pageData) => {
  return JSON.stringify(pageData, null, "	");
};

// src/utils/embed.ts
var buildWritingEmbed = (filepath, transcript) => {
  let embedContent = {
    versionAtEmbed: PLUGIN_VERSION,
    filepath
  };
  let embedStr = "";
  embedStr += "\n```" + WRITE_EMBED_KEY;
  embedStr += "\n" + JSON.stringify(embedContent, null, "	");
  embedStr += "\n```";
  embedStr += "\n";
  return embedStr;
};
var buildDrawingEmbed = (filepath) => {
  let embedContent = {
    versionAtEmbed: PLUGIN_VERSION,
    filepath
  };
  let embedStr = "";
  embedStr += "\n```" + DRAW_EMBED_KEY;
  embedStr += "\n" + JSON.stringify(embedContent, null, "	");
  embedStr += "\n```";
  embedStr += "\n";
  return embedStr;
};
function applyCommonAncestorStyling(embedEl) {
  var _a2, _b2;
  const parentEmbedBlockEl = embedEl.closest(".cm-embed-block");
  if (!parentEmbedBlockEl)
    return;
  parentEmbedBlockEl.classList.add("ddc_ink_embed-block");
  const parentPageScrollerEl = embedEl.closest(".cm-scroller");
  const scrollerStyle = window.getComputedStyle(parentPageScrollerEl);
  const scrollerInlineStartMargin = scrollerStyle.paddingInlineStart;
  const scrollerInlineEndMargin = scrollerStyle.paddingInlineEnd;
  const scrollerMarginLeft = scrollerStyle.paddingLeft;
  const scrollerMarginRight = scrollerStyle.paddingRight;
  const pageHasScrollerInlineStartMargin = scrollerInlineStartMargin && scrollerInlineStartMargin !== "0" && scrollerInlineStartMargin !== "0px";
  if (pageHasScrollerInlineStartMargin) {
    let style = (_a2 = parentEmbedBlockEl.getAttribute("style")) != null ? _a2 : "";
    style += `; margin-inline-start: calc(-1 * ${scrollerInlineStartMargin} + 4px) !important`;
    parentEmbedBlockEl.setAttribute("style", style);
  } else {
  }
  const pageHasScrollerInlineEndMargin = scrollerInlineEndMargin && scrollerInlineEndMargin !== "0" && scrollerInlineEndMargin !== "0px";
  if (pageHasScrollerInlineEndMargin) {
    let style = (_b2 = parentEmbedBlockEl.getAttribute("style")) != null ? _b2 : "";
    style += `; margin-inline-end: calc(-1 * ${scrollerInlineEndMargin} + 4px) !important`;
    parentEmbedBlockEl.setAttribute("style", style);
  } else {
  }
}
function removeEmbed(plugin, ctx, el) {
  var _a2;
  const cmEditor = (_a2 = plugin.app.workspace.activeEditor) == null ? void 0 : _a2.editor;
  if (!cmEditor)
    return;
  const sectionInfo = ctx.getSectionInfo(el);
  if ((sectionInfo == null ? void 0 : sectionInfo.lineStart) === void 0 || sectionInfo.lineEnd === void 0)
    return;
  const editorStart = {
    line: sectionInfo.lineStart,
    ch: 0
  };
  const editorEnd = {
    line: sectionInfo.lineEnd + 1,
    ch: 0
  };
  cmEditor.replaceRange("", editorStart, editorEnd);
}

// src/tldraw/writing/writing-embed.tsx
var React70 = __toESM(require_react());
var import_react139 = __toESM(require_react());

// node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
async function preloadFont(id, font) {
  const {
    url,
    style = "normal",
    weight = "500",
    display,
    featureSettings,
    stretch,
    unicodeRange,
    variant,
    format
  } = font;
  const descriptors = {
    style,
    weight,
    display,
    featureSettings,
    stretch,
    unicodeRange,
    variant
  };
  const fontInstance = new FontFace(id, `url(${url})`, descriptors);
  await fontInstance.load();
  document.fonts.add(fontInstance);
  fontInstance.$$_url = url;
  fontInstance.$$_fontface = `
@font-face {
	font-family: ${fontInstance.family};
	font-stretch: ${fontInstance.stretch};
	font-weight: ${fontInstance.weight};
	font-style: ${fontInstance.style};
	src: url("${url}") format("${format}")
}`;
  return fontInstance;
}

// node_modules/@tldraw/state/dist-esm/lib/core/helpers.mjs
function isChild(x) {
  return x && typeof x === "object" && "parents" in x;
}
function haveParentsChanged(child) {
  for (let i = 0, n = child.parents.length; i < n; i++) {
    child.parents[i].__unsafe__getWithoutCapture(true);
    if (child.parents[i].lastChangedEpoch !== child.parentEpochs[i]) {
      return true;
    }
  }
  return false;
}
var detach = (parent, child) => {
  if (!parent.children.remove(child)) {
    return;
  }
  if (parent.children.isEmpty && isChild(parent)) {
    for (let i = 0, n = parent.parents.length; i < n; i++) {
      detach(parent.parents[i], parent);
    }
  }
};
var attach = (parent, child) => {
  if (!parent.children.add(child)) {
    return;
  }
  if (isChild(parent)) {
    for (let i = 0, n = parent.parents.length; i < n; i++) {
      attach(parent.parents[i], parent);
    }
  }
};
function equals(a, b) {
  const shallowEquals = a === b || Object.is(a, b) || Boolean(a && b && typeof a.equals === "function" && a.equals(b));
  return shallowEquals;
}
function singleton(key, init) {
  var _a2;
  const symbol = Symbol.for(`com.tldraw.state/${key}`);
  const global2 = globalThis;
  (_a2 = global2[symbol]) != null ? _a2 : global2[symbol] = init();
  return global2[symbol];
}
var EMPTY_ARRAY = singleton("empty_array", () => Object.freeze([]));

// node_modules/@tldraw/state/dist-esm/lib/core/ArraySet.mjs
var ARRAY_SIZE_THRESHOLD = 8;
var ArraySet = class {
  constructor() {
    __publicField(this, "arraySize", 0);
    __publicField(this, "array", Array(ARRAY_SIZE_THRESHOLD));
    __publicField(this, "set", null);
  }
  get isEmpty() {
    if (this.array) {
      return this.arraySize === 0;
    }
    if (this.set) {
      return this.set.size === 0;
    }
    throw new Error("no set or array");
  }
  add(elem) {
    if (this.array) {
      const idx = this.array.indexOf(elem);
      if (idx !== -1) {
        return false;
      }
      if (this.arraySize < ARRAY_SIZE_THRESHOLD) {
        this.array[this.arraySize] = elem;
        this.arraySize++;
        return true;
      } else {
        this.set = new Set(this.array);
        this.array = null;
        this.set.add(elem);
        return true;
      }
    }
    if (this.set) {
      if (this.set.has(elem)) {
        return false;
      }
      this.set.add(elem);
      return true;
    }
    throw new Error("no set or array");
  }
  remove(elem) {
    if (this.array) {
      const idx = this.array.indexOf(elem);
      if (idx === -1) {
        return false;
      }
      this.array[idx] = void 0;
      this.arraySize--;
      if (idx !== this.arraySize) {
        this.array[idx] = this.array[this.arraySize];
        this.array[this.arraySize] = void 0;
      }
      return true;
    }
    if (this.set) {
      if (!this.set.has(elem)) {
        return false;
      }
      this.set.delete(elem);
      return true;
    }
    throw new Error("no set or array");
  }
  visit(visitor) {
    if (this.array) {
      for (let i = 0; i < this.arraySize; i++) {
        const elem = this.array[i];
        if (typeof elem !== "undefined") {
          visitor(elem);
        }
      }
      return;
    }
    if (this.set) {
      this.set.forEach(visitor);
      return;
    }
    throw new Error("no set or array");
  }
  has(elem) {
    if (this.array) {
      return this.array.indexOf(elem) !== -1;
    } else {
      return this.set.has(elem);
    }
  }
  clear() {
    if (this.set) {
      this.set.clear();
    } else {
      this.arraySize = 0;
      this.array = [];
    }
  }
  size() {
    if (this.set) {
      return this.set.size;
    } else {
      return this.arraySize;
    }
  }
};

// node_modules/@tldraw/state/dist-esm/lib/core/types.mjs
var RESET_VALUE = Symbol.for("com.tldraw.state/RESET_VALUE");

// node_modules/@tldraw/state/dist-esm/lib/core/HistoryBuffer.mjs
var HistoryBuffer = class {
  constructor(capacity) {
    __publicField(this, "index", 0);
    __publicField(this, "buffer");
    this.capacity = capacity;
    this.buffer = new Array(capacity);
  }
  pushEntry(lastComputedEpoch, currentEpoch, diff) {
    if (diff === void 0) {
      return;
    }
    if (diff === RESET_VALUE) {
      this.clear();
      return;
    }
    this.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff];
    this.index = (this.index + 1) % this.capacity;
  }
  clear() {
    this.index = 0;
    this.buffer.fill(void 0);
  }
  getChangesSince(sinceEpoch) {
    const { index: index2, capacity, buffer } = this;
    for (let i = 0; i < capacity; i++) {
      const offset4 = (index2 - 1 + capacity - i) % capacity;
      const elem = buffer[offset4];
      if (!elem) {
        return RESET_VALUE;
      }
      const [fromEpoch, toEpoch] = elem;
      if (i === 0 && sinceEpoch >= toEpoch) {
        return [];
      }
      if (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {
        const len = i + 1;
        const result = new Array(len);
        for (let j = 0; j < len; j++) {
          result[j] = buffer[(offset4 + j) % capacity][2];
        }
        return result;
      }
    }
    return RESET_VALUE;
  }
};

// node_modules/@tldraw/state/dist-esm/lib/core/capture.mjs
var CaptureStackFrame = class {
  constructor(below, child) {
    __publicField(this, "offset", 0);
    __publicField(this, "maybeRemoved");
    this.below = below;
    this.child = child;
  }
};
var inst = singleton("capture", () => ({ stack: null }));
function startCapturingParents(child) {
  inst.stack = new CaptureStackFrame(inst.stack, child);
  child.parentSet.clear();
}
function stopCapturingParents() {
  const frame2 = inst.stack;
  inst.stack = frame2.below;
  if (frame2.offset < frame2.child.parents.length) {
    for (let i = frame2.offset; i < frame2.child.parents.length; i++) {
      const maybeRemovedParent = frame2.child.parents[i];
      if (!frame2.child.parentSet.has(maybeRemovedParent)) {
        detach(maybeRemovedParent, frame2.child);
      }
    }
    frame2.child.parents.length = frame2.offset;
    frame2.child.parentEpochs.length = frame2.offset;
  }
  if (frame2.maybeRemoved) {
    for (let i = 0; i < frame2.maybeRemoved.length; i++) {
      const maybeRemovedParent = frame2.maybeRemoved[i];
      if (!frame2.child.parentSet.has(maybeRemovedParent)) {
        detach(maybeRemovedParent, frame2.child);
      }
    }
  }
}
function maybeCaptureParent(p) {
  if (inst.stack) {
    const wasCapturedAlready = inst.stack.child.parentSet.has(p);
    if (wasCapturedAlready) {
      return;
    }
    inst.stack.child.parentSet.add(p);
    if (inst.stack.child.isActivelyListening) {
      attach(p, inst.stack.child);
    }
    if (inst.stack.offset < inst.stack.child.parents.length) {
      const maybeRemovedParent = inst.stack.child.parents[inst.stack.offset];
      if (maybeRemovedParent !== p) {
        if (!inst.stack.maybeRemoved) {
          inst.stack.maybeRemoved = [maybeRemovedParent];
        } else {
          inst.stack.maybeRemoved.push(maybeRemovedParent);
        }
      }
    }
    inst.stack.child.parents[inst.stack.offset] = p;
    inst.stack.child.parentEpochs[inst.stack.offset] = p.lastChangedEpoch;
    inst.stack.offset++;
  }
}

// node_modules/@tldraw/state/dist-esm/lib/core/constants.mjs
var GLOBAL_START_EPOCH = -1;

// node_modules/@tldraw/state/dist-esm/lib/core/EffectScheduler.mjs
var __EffectScheduler__ = class {
  constructor(name, runEffect, options) {
    __publicField(this, "_isActivelyListening", false);
    __publicField(this, "lastTraversedEpoch", GLOBAL_START_EPOCH);
    __publicField(this, "lastReactedEpoch", GLOBAL_START_EPOCH);
    __publicField(this, "_scheduleCount", 0);
    __publicField(this, "parentSet", new ArraySet());
    __publicField(this, "parentEpochs", []);
    __publicField(this, "parents", []);
    __publicField(this, "_scheduleEffect");
    __publicField(this, "maybeExecute", () => {
      if (!this._isActivelyListening)
        return;
      this.execute();
    });
    this.name = name;
    this.runEffect = runEffect;
    this._scheduleEffect = options == null ? void 0 : options.scheduleEffect;
  }
  get isActivelyListening() {
    return this._isActivelyListening;
  }
  get scheduleCount() {
    return this._scheduleCount;
  }
  maybeScheduleEffect() {
    if (!this._isActivelyListening)
      return;
    if (this.lastReactedEpoch === getGlobalEpoch())
      return;
    if (this.parents.length && !haveParentsChanged(this)) {
      this.lastReactedEpoch = getGlobalEpoch();
      return;
    }
    this.scheduleEffect();
  }
  scheduleEffect() {
    this._scheduleCount++;
    if (this._scheduleEffect) {
      this._scheduleEffect(this.maybeExecute);
    } else {
      this.execute();
    }
  }
  attach() {
    this._isActivelyListening = true;
    for (let i = 0, n = this.parents.length; i < n; i++) {
      attach(this.parents[i], this);
    }
  }
  detach() {
    this._isActivelyListening = false;
    for (let i = 0, n = this.parents.length; i < n; i++) {
      detach(this.parents[i], this);
    }
  }
  execute() {
    try {
      startCapturingParents(this);
      const result = this.runEffect(this.lastReactedEpoch);
      this.lastReactedEpoch = getGlobalEpoch();
      return result;
    } finally {
      stopCapturingParents();
    }
  }
};
var EffectScheduler = singleton("EffectScheduler", () => __EffectScheduler__);
function react(name, fn, options) {
  const scheduler = new EffectScheduler(name, fn, options);
  scheduler.attach();
  scheduler.scheduleEffect();
  return () => {
    scheduler.detach();
  };
}
function reactor(name, fn, options) {
  const scheduler = new EffectScheduler(name, fn, options);
  return {
    scheduler,
    start: (options2) => {
      var _a2;
      const force = (_a2 = options2 == null ? void 0 : options2.force) != null ? _a2 : false;
      scheduler.attach();
      if (force) {
        scheduler.scheduleEffect();
      } else {
        scheduler.maybeScheduleEffect();
      }
    },
    stop: () => {
      scheduler.detach();
    }
  };
}

// node_modules/@tldraw/state/dist-esm/lib/core/transactions.mjs
var Transaction = class {
  constructor(parent) {
    __publicField(this, "initialAtomValues", /* @__PURE__ */ new Map());
    this.parent = parent;
  }
  get isRoot() {
    return this.parent === null;
  }
  commit() {
    if (this.isRoot) {
      const atoms = this.initialAtomValues;
      this.initialAtomValues = /* @__PURE__ */ new Map();
      flushChanges(atoms.keys());
    } else {
      this.initialAtomValues.forEach((value, atom2) => {
        if (!this.parent.initialAtomValues.has(atom2)) {
          this.parent.initialAtomValues.set(atom2, value);
        }
      });
    }
  }
  abort() {
    inst2.globalEpoch++;
    this.initialAtomValues.forEach((value, atom2) => {
      var _a2;
      atom2.set(value);
      (_a2 = atom2.historyBuffer) == null ? void 0 : _a2.clear();
    });
    this.commit();
  }
};
var inst2 = singleton("transactions", () => ({
  globalEpoch: GLOBAL_START_EPOCH + 1,
  globalIsReacting: false,
  currentTransaction: null
}));
function getGlobalEpoch() {
  return inst2.globalEpoch;
}
function flushChanges(atoms) {
  if (inst2.globalIsReacting) {
    throw new Error("cannot change atoms during reaction cycle");
  }
  try {
    inst2.globalIsReacting = true;
    const reactors = /* @__PURE__ */ new Set();
    const traverse = (node) => {
      if (node.lastTraversedEpoch === inst2.globalEpoch) {
        return;
      }
      node.lastTraversedEpoch = inst2.globalEpoch;
      if (node instanceof EffectScheduler) {
        reactors.add(node);
      } else {
        ;
        node.children.visit(traverse);
      }
    };
    for (const atom2 of atoms) {
      atom2.children.visit(traverse);
    }
    for (const r of reactors) {
      r.maybeScheduleEffect();
    }
  } finally {
    inst2.globalIsReacting = false;
  }
}
function atomDidChange(atom2, previousValue) {
  if (!inst2.currentTransaction) {
    flushChanges([atom2]);
  } else if (!inst2.currentTransaction.initialAtomValues.has(atom2)) {
    inst2.currentTransaction.initialAtomValues.set(atom2, previousValue);
  }
}
function advanceGlobalEpoch() {
  inst2.globalEpoch++;
}
function transaction(fn) {
  const txn = new Transaction(inst2.currentTransaction);
  inst2.currentTransaction = txn;
  try {
    let rollback = false;
    const result = fn(() => rollback = true);
    if (rollback) {
      txn.abort();
    } else {
      txn.commit();
    }
    return result;
  } catch (e) {
    txn.abort();
    throw e;
  } finally {
    inst2.currentTransaction = inst2.currentTransaction.parent;
  }
}
function transact(fn) {
  if (inst2.currentTransaction) {
    return fn();
  }
  return transaction(fn);
}

// node_modules/@tldraw/state/dist-esm/lib/core/Atom.mjs
var __Atom__ = class {
  constructor(name, current2, options) {
    __publicField(this, "isEqual");
    __publicField(this, "computeDiff");
    __publicField(this, "lastChangedEpoch", getGlobalEpoch());
    __publicField(this, "children", new ArraySet());
    __publicField(this, "historyBuffer");
    var _a2;
    this.name = name;
    this.current = current2;
    this.isEqual = (_a2 = options == null ? void 0 : options.isEqual) != null ? _a2 : null;
    if (!options)
      return;
    if (options.historyLength) {
      this.historyBuffer = new HistoryBuffer(options.historyLength);
    }
    this.computeDiff = options.computeDiff;
  }
  __unsafe__getWithoutCapture(_ignoreErrors) {
    return this.current;
  }
  get() {
    maybeCaptureParent(this);
    return this.current;
  }
  set(value, diff) {
    var _a2, _b2, _c, _d;
    if ((_b2 = (_a2 = this.isEqual) == null ? void 0 : _a2.call(this, this.current, value)) != null ? _b2 : equals(this.current, value)) {
      return this.current;
    }
    advanceGlobalEpoch();
    if (this.historyBuffer) {
      this.historyBuffer.pushEntry(this.lastChangedEpoch, getGlobalEpoch(), (_d = diff != null ? diff : (_c = this.computeDiff) == null ? void 0 : _c.call(this, this.current, value, this.lastChangedEpoch, getGlobalEpoch())) != null ? _d : RESET_VALUE);
    }
    this.lastChangedEpoch = getGlobalEpoch();
    const oldValue = this.current;
    this.current = value;
    atomDidChange(this, oldValue);
    return value;
  }
  update(updater) {
    return this.set(updater(this.current));
  }
  getDiffSince(epoch) {
    var _a2, _b2;
    maybeCaptureParent(this);
    if (epoch >= this.lastChangedEpoch) {
      return EMPTY_ARRAY;
    }
    return (_b2 = (_a2 = this.historyBuffer) == null ? void 0 : _a2.getChangesSince(epoch)) != null ? _b2 : RESET_VALUE;
  }
};
var _Atom = singleton("Atom", () => __Atom__);
function atom(name, initialValue, options) {
  return new _Atom(name, initialValue, options);
}

// node_modules/@tldraw/state/dist-esm/lib/core/warnings.mjs
var didWarnComputedGetter = false;
function logComputedGetterWarning() {
  if (didWarnComputedGetter)
    return;
  didWarnComputedGetter = true;
  console.warn(`Using \`@computed\` as a decorator for getters is deprecated and will be removed in the near future. Please refactor to use \`@computed\` as a decorator for methods.

// Before
@computed
get foo() {
	return 'foo'
}

// After
@computed
getFoo() {
	return 'foo'
}
`);
}

// node_modules/@tldraw/state/dist-esm/lib/core/Computed.mjs
var UNINITIALIZED = Symbol.for("com.tldraw.state/UNINITIALIZED");
var isUninitialized = (value) => {
  return value === UNINITIALIZED;
};
var WithDiff = singleton("WithDiff", () => class WithDiff {
  constructor(value, diff) {
    this.value = value;
    this.diff = diff;
  }
});
function withDiff(value, diff) {
  return new WithDiff(value, diff);
}
var __UNSAFE__Computed = class {
  constructor(name, derive, options) {
    __publicField(this, "lastChangedEpoch", GLOBAL_START_EPOCH);
    __publicField(this, "lastTraversedEpoch", GLOBAL_START_EPOCH);
    __publicField(this, "lastCheckedEpoch", GLOBAL_START_EPOCH);
    __publicField(this, "parentSet", new ArraySet());
    __publicField(this, "parents", []);
    __publicField(this, "parentEpochs", []);
    __publicField(this, "children", new ArraySet());
    __publicField(this, "historyBuffer");
    __publicField(this, "state", UNINITIALIZED);
    __publicField(this, "error", null);
    __publicField(this, "computeDiff");
    __publicField(this, "isEqual");
    var _a2;
    this.name = name;
    this.derive = derive;
    if (options == null ? void 0 : options.historyLength) {
      this.historyBuffer = new HistoryBuffer(options.historyLength);
    }
    this.computeDiff = options == null ? void 0 : options.computeDiff;
    this.isEqual = (_a2 = options == null ? void 0 : options.isEqual) != null ? _a2 : equals;
  }
  get isActivelyListening() {
    return !this.children.isEmpty;
  }
  __unsafe__getWithoutCapture(ignoreErrors) {
    var _a2, _b2;
    const isNew = this.lastChangedEpoch === GLOBAL_START_EPOCH;
    if (!isNew && (this.lastCheckedEpoch === getGlobalEpoch() || !haveParentsChanged(this))) {
      this.lastCheckedEpoch = getGlobalEpoch();
      if (this.error) {
        if (!ignoreErrors) {
          throw this.error.thrownValue;
        } else {
          return this.state;
        }
      } else {
        return this.state;
      }
    }
    try {
      startCapturingParents(this);
      const result = this.derive(this.state, this.lastCheckedEpoch);
      const newState = result instanceof WithDiff ? result.value : result;
      const isUninitialized2 = this.state === UNINITIALIZED;
      if (isUninitialized2 || !this.isEqual(newState, this.state)) {
        if (this.historyBuffer && !isUninitialized2) {
          const diff = result instanceof WithDiff ? result.diff : void 0;
          this.historyBuffer.pushEntry(this.lastChangedEpoch, getGlobalEpoch(), (_b2 = diff != null ? diff : (_a2 = this.computeDiff) == null ? void 0 : _a2.call(this, this.state, newState, this.lastCheckedEpoch, getGlobalEpoch())) != null ? _b2 : RESET_VALUE);
        }
        this.lastChangedEpoch = getGlobalEpoch();
        this.state = newState;
      }
      this.error = null;
      this.lastCheckedEpoch = getGlobalEpoch();
      return this.state;
    } catch (e) {
      if (this.state !== UNINITIALIZED) {
        this.state = UNINITIALIZED;
        this.lastChangedEpoch = getGlobalEpoch();
      }
      this.lastCheckedEpoch = getGlobalEpoch();
      if (this.historyBuffer) {
        this.historyBuffer.clear();
      }
      this.error = { thrownValue: e };
      if (!ignoreErrors)
        throw e;
      return this.state;
    } finally {
      stopCapturingParents();
    }
  }
  get() {
    try {
      return this.__unsafe__getWithoutCapture();
    } finally {
      maybeCaptureParent(this);
    }
  }
  getDiffSince(epoch) {
    var _a2, _b2;
    this.__unsafe__getWithoutCapture(true);
    maybeCaptureParent(this);
    if (epoch >= this.lastChangedEpoch) {
      return EMPTY_ARRAY;
    }
    return (_b2 = (_a2 = this.historyBuffer) == null ? void 0 : _a2.getChangesSince(epoch)) != null ? _b2 : RESET_VALUE;
  }
};
var _Computed = singleton("Computed", () => __UNSAFE__Computed);
function computedMethodAnnotation(options = {}, _target, key, descriptor) {
  const originalMethod = descriptor.value;
  const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
  descriptor.value = function() {
    let d = this[derivationKey];
    if (!d) {
      d = new _Computed(key, originalMethod.bind(this), options);
      Object.defineProperty(this, derivationKey, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: d
      });
    }
    return d.get();
  };
  descriptor.value[isComputedMethodKey] = true;
  return descriptor;
}
function computedAnnotation(options = {}, _target, key, descriptor) {
  if (descriptor.get) {
    logComputedGetterWarning();
    return computedGetterAnnotation(options, _target, key, descriptor);
  } else {
    return computedMethodAnnotation(options, _target, key, descriptor);
  }
}
function computedGetterAnnotation(options = {}, _target, key, descriptor) {
  const originalMethod = descriptor.get;
  const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
  descriptor.get = function() {
    let d = this[derivationKey];
    if (!d) {
      d = new _Computed(key, originalMethod.bind(this), options);
      Object.defineProperty(this, derivationKey, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: d
      });
    }
    return d.get();
  };
  return descriptor;
}
var isComputedMethodKey = "@@__isComputedMethod__@@";
function computed() {
  if (arguments.length === 1) {
    const options = arguments[0];
    return (target, key, descriptor) => computedAnnotation(options, target, key, descriptor);
  } else if (typeof arguments[0] === "string") {
    return new _Computed(arguments[0], arguments[1], arguments[2]);
  } else {
    return computedAnnotation(void 0, arguments[0], arguments[1], arguments[2]);
  }
}

// node_modules/@tldraw/state/dist-esm/lib/core/index.mjs
var currentApiVersion = 1;
var actualApiVersion = singleton("apiVersion", () => currentApiVersion);
if (actualApiVersion !== currentApiVersion) {
  throw new Error(`You have multiple incompatible versions of @tldraw/state in your app. Please deduplicate the package.`);
}

// node_modules/@tldraw/state/dist-esm/lib/react/track.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/@tldraw/state/dist-esm/lib/react/useStateTracking.mjs
var import_react = __toESM(require_react(), 1);
function useStateTracking(name, render) {
  const renderRef = import_react.default.useRef(render);
  renderRef.current = render;
  const [scheduler, subscribe, getSnapshot] = import_react.default.useMemo(() => {
    let scheduleUpdate = null;
    const subscribe2 = (cb) => {
      scheduleUpdate = cb;
      return () => {
        scheduleUpdate = null;
      };
    };
    const scheduler2 = new EffectScheduler(`useStateTracking(${name})`, () => {
      var _a2;
      return (_a2 = renderRef.current) == null ? void 0 : _a2.call(renderRef);
    }, {
      scheduleEffect() {
        scheduleUpdate == null ? void 0 : scheduleUpdate();
      }
    });
    const getSnapshot2 = () => scheduler2.scheduleCount;
    return [scheduler2, subscribe2, getSnapshot2];
  }, [name]);
  import_react.default.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
  import_react.default.useEffect(() => {
    scheduler.attach();
    scheduler.maybeScheduleEffect();
    return () => {
      scheduler.detach();
    };
  }, [scheduler]);
  return scheduler.execute();
}

// node_modules/@tldraw/state/dist-esm/lib/react/track.mjs
var ProxyHandlers = {
  apply(Component2, thisArg, argumentsList) {
    var _a2, _b2;
    return useStateTracking((_b2 = (_a2 = Component2.displayName) != null ? _a2 : Component2.name) != null ? _b2 : "tracked(???)", () => Component2.apply(thisArg, argumentsList));
  }
};
var ReactMemoSymbol = Symbol.for("react.memo");
var ReactForwardRefSymbol = Symbol.for("react.forward_ref");
function track(baseComponent) {
  let compare = null;
  const $$typeof = baseComponent["$$typeof"];
  if ($$typeof === ReactMemoSymbol) {
    baseComponent = baseComponent.type;
    compare = baseComponent.compare;
  }
  if ($$typeof === ReactForwardRefSymbol) {
    return (0, import_react2.memo)((0, import_react2.forwardRef)(new Proxy(baseComponent.render, ProxyHandlers)));
  }
  return (0, import_react2.memo)(new Proxy(baseComponent, ProxyHandlers), compare);
}

// node_modules/@tldraw/state/dist-esm/lib/react/useAtom.mjs
var import_react3 = __toESM(require_react(), 1);

// node_modules/@tldraw/state/dist-esm/lib/react/useComputed.mjs
var import_react4 = __toESM(require_react(), 1);
function useComputed() {
  const name = arguments[0];
  const compute = arguments[1];
  const opts = arguments.length === 3 ? void 0 : arguments[2];
  const deps = arguments.length === 3 ? arguments[2] : arguments[3];
  return (0, import_react4.useMemo)(() => computed(`useComputed(${name})`, compute, opts), deps);
}

// node_modules/@tldraw/state/dist-esm/lib/react/useQuickReactor.mjs
var import_react5 = __toESM(require_react(), 1);
function useQuickReactor(name, reactFn, deps = EMPTY_ARRAY) {
  (0, import_react5.useEffect)(() => {
    const scheduler = new EffectScheduler(name, reactFn);
    scheduler.attach();
    scheduler.execute();
    return () => {
      scheduler.detach();
    };
  }, deps);
}

// node_modules/@tldraw/state/dist-esm/lib/react/useReactor.mjs
var import_react6 = __toESM(require_react(), 1);

// node_modules/@tldraw/state/dist-esm/lib/react/useValue.mjs
var import_react7 = __toESM(require_react(), 1);
function useValue() {
  const args = arguments;
  const deps = args.length === 3 ? args[2] : [args[0]];
  const name = args.length === 3 ? args[0] : `useValue(${args[0].name})`;
  const isInRender = (0, import_react7.useRef)(true);
  isInRender.current = true;
  const $val = (0, import_react7.useMemo)(() => {
    if (args.length === 1) {
      return args[0];
    }
    return computed(name, () => {
      if (isInRender.current) {
        return args[1]();
      } else {
        try {
          return args[1]();
        } catch (e) {
          return {};
        }
      }
    });
  }, deps);
  try {
    const { subscribe, getSnapshot } = (0, import_react7.useMemo)(() => {
      return {
        subscribe: (listen) => {
          return react(`useValue(${name})`, () => {
            $val.get();
            listen();
          });
        },
        getSnapshot: () => $val.get()
      };
    }, [$val]);
    return (0, import_react7.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);
  } finally {
    isInRender.current = false;
  }
}

// node_modules/@tldraw/store/dist-esm/lib/IncrementalSetConstructor.mjs
var IncrementalSetConstructor = class {
  constructor(previousValue) {
    __publicField(this, "nextValue");
    __publicField(this, "diff");
    this.previousValue = previousValue;
  }
  get() {
    var _a2, _b2, _c, _d, _e, _f;
    const numRemoved = (_c = (_b2 = (_a2 = this.diff) == null ? void 0 : _a2.removed) == null ? void 0 : _b2.size) != null ? _c : 0;
    const numAdded = (_f = (_e = (_d = this.diff) == null ? void 0 : _d.added) == null ? void 0 : _e.size) != null ? _f : 0;
    if (numRemoved === 0 && numAdded === 0) {
      return void 0;
    }
    return { value: this.nextValue, diff: this.diff };
  }
  _add(item, wasAlreadyPresent) {
    var _a2, _b2, _c, _d, _e;
    (_a2 = this.nextValue) != null ? _a2 : this.nextValue = new Set(this.previousValue);
    this.nextValue.add(item);
    (_b2 = this.diff) != null ? _b2 : this.diff = {};
    if (wasAlreadyPresent) {
      (_c = this.diff.removed) == null ? void 0 : _c.delete(item);
    } else {
      (_e = (_d = this.diff).added) != null ? _e : _d.added = /* @__PURE__ */ new Set();
      this.diff.added.add(item);
    }
  }
  add(item) {
    var _a2, _b2, _c;
    const wasAlreadyPresent = this.previousValue.has(item);
    if (wasAlreadyPresent) {
      const wasRemoved = (_b2 = (_a2 = this.diff) == null ? void 0 : _a2.removed) == null ? void 0 : _b2.has(item);
      if (!wasRemoved)
        return;
      return this._add(item, wasAlreadyPresent);
    }
    const isCurrentlyPresent = (_c = this.nextValue) == null ? void 0 : _c.has(item);
    if (isCurrentlyPresent)
      return;
    this._add(item, wasAlreadyPresent);
  }
  _remove(item, wasAlreadyPresent) {
    var _a2, _b2, _c, _d, _e;
    (_a2 = this.nextValue) != null ? _a2 : this.nextValue = new Set(this.previousValue);
    this.nextValue.delete(item);
    (_b2 = this.diff) != null ? _b2 : this.diff = {};
    if (wasAlreadyPresent) {
      (_d = (_c = this.diff).removed) != null ? _d : _c.removed = /* @__PURE__ */ new Set();
      this.diff.removed.add(item);
    } else {
      (_e = this.diff.added) == null ? void 0 : _e.delete(item);
    }
  }
  remove(item) {
    var _a2, _b2, _c, _d;
    const wasAlreadyPresent = this.previousValue.has(item);
    if (!wasAlreadyPresent) {
      const wasAdded = (_b2 = (_a2 = this.diff) == null ? void 0 : _a2.added) == null ? void 0 : _b2.has(item);
      if (!wasAdded)
        return;
      return this._remove(item, wasAlreadyPresent);
    }
    const hasAlreadyBeenRemoved = (_d = (_c = this.diff) == null ? void 0 : _c.removed) == null ? void 0 : _d.has(item);
    if (hasAlreadyBeenRemoved)
      return;
    this._remove(item, wasAlreadyPresent);
  }
};

// node_modules/@tldraw/utils/dist-esm/lib/array.mjs
function dedupe(input, equals2) {
  const result = [];
  mainLoop:
    for (const item of input) {
      for (const existing of result) {
        if (equals2 ? equals2(item, existing) : item === existing) {
          continue mainLoop;
        }
      }
      result.push(item);
    }
  return result;
}
function compact(arr) {
  return arr.filter((i) => i !== void 0 && i !== null);
}
function last(arr) {
  return arr[arr.length - 1];
}
function minBy(arr, fn) {
  let min3;
  let minVal = Infinity;
  for (const item of arr) {
    const val = fn(item);
    if (val < minVal) {
      min3 = item;
      minVal = val;
    }
  }
  return min3;
}
function areArraysShallowEqual(arr1, arr2) {
  if (arr1 === arr2)
    return true;
  if (arr1.length !== arr2.length)
    return false;
  for (let i = 0; i < arr1.length; i++) {
    if (!Object.is(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
}

// node_modules/@tldraw/utils/dist-esm/lib/function.mjs
function throttle(func, limit) {
  let inThrottle;
  let lastResult;
  return function(...args) {
    if (!inThrottle) {
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
      lastResult = func(...args);
    }
    return lastResult;
  };
}
function omitFromStackTrace(fn) {
  const wrappedFn = (...args) => {
    try {
      return fn(...args);
    } catch (error) {
      if (error instanceof Error && Error.captureStackTrace) {
        Error.captureStackTrace(error, wrappedFn);
      }
      throw error;
    }
  };
  return wrappedFn;
}

// node_modules/@tldraw/utils/dist-esm/lib/control.mjs
var Result = {
  ok(value) {
    return { ok: true, value };
  },
  err(error) {
    return { ok: false, error };
  }
};
function exhaustiveSwitchError(value, property) {
  const debugValue = property && value && typeof value === "object" && property in value ? value[property] : value;
  throw new Error(`Unknown switch case ${debugValue}`);
}
var assert = omitFromStackTrace((value, message) => {
  if (!value) {
    throw new Error(message || "Assertion Error");
  }
});
var assertExists = omitFromStackTrace((value, message) => {
  if (value == null) {
    throw new Error(message != null ? message : "value must be defined");
  }
  return value;
});

// node_modules/@tldraw/utils/dist-esm/lib/debounce.mjs
function debounce(callback, wait) {
  let state = void 0;
  const fn = (...args) => {
    if (!state) {
      state = {};
      state.promise = new Promise((resolve, reject) => {
        state.resolve = resolve;
        state.reject = reject;
      });
    }
    clearTimeout(state.timeout);
    state.latestArgs = args;
    state.timeout = setTimeout(() => {
      const s = state;
      state = void 0;
      try {
        s.resolve(callback(...s.latestArgs));
      } catch (e) {
        s.reject(e);
      }
    }, wait);
    return state.promise;
  };
  fn.cancel = () => {
    if (!state)
      return;
    clearTimeout(state.timeout);
  };
  return fn;
}

// node_modules/@tldraw/utils/dist-esm/lib/error.mjs
var annotationsByError = /* @__PURE__ */ new WeakMap();
function annotateError(error, annotations) {
  if (typeof error !== "object" || error === null)
    return;
  let currentAnnotations = annotationsByError.get(error);
  if (!currentAnnotations) {
    currentAnnotations = { tags: {}, extras: {} };
    annotationsByError.set(error, currentAnnotations);
  }
  if (annotations.tags) {
    currentAnnotations.tags = {
      ...currentAnnotations.tags,
      ...annotations.tags
    };
  }
  if (annotations.extras) {
    currentAnnotations.extras = {
      ...currentAnnotations.extras,
      ...annotations.extras
    };
  }
}

// node_modules/@tldraw/utils/dist-esm/lib/file.mjs
var FileHelpers = class {
  static async dataUrlToArrayBuffer(dataURL) {
    return fetch(dataURL).then(function(result) {
      return result.arrayBuffer();
    });
  }
  static async blobToDataUrl(file) {
    return await new Promise((resolve, reject) => {
      if (file) {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = (error) => reject(error);
        reader.onabort = (error) => reject(error);
        reader.readAsDataURL(file);
      }
    });
  }
  static async blobToText(file) {
    return await new Promise((resolve, reject) => {
      if (file) {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = (error) => reject(error);
        reader.onabort = (error) => reject(error);
        reader.readAsText(file);
      }
    });
  }
};

// node_modules/@tldraw/utils/dist-esm/lib/hash.mjs
function getHashForString(string2) {
  let hash = 0;
  for (let i = 0; i < string2.length; i++) {
    hash = (hash << 5) - hash + string2.charCodeAt(i);
    hash |= 0;
  }
  return hash + "";
}
function getHashForBuffer(buffer) {
  const view = new DataView(buffer);
  let hash = 0;
  for (let i = 0; i < view.byteLength; i++) {
    hash = (hash << 5) - hash + view.getUint8(i);
    hash |= 0;
  }
  return hash + "";
}

// node_modules/@tldraw/utils/dist-esm/lib/png.mjs
var TABLE = [
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
];
if (typeof Int32Array !== "undefined") {
  TABLE = new Int32Array(TABLE);
}
var crc = (current2, previous) => {
  let crc2 = previous === 0 ? 0 : ~~previous ^ -1;
  for (let index2 = 0; index2 < current2.length; index2++) {
    crc2 = TABLE[(crc2 ^ current2[index2]) & 255] ^ crc2 >>> 8;
  }
  return crc2 ^ -1;
};
var LEN_SIZE = 4;
var CRC_SIZE = 4;
var PngHelpers = class {
  static isPng(view, offset4) {
    if (view.getUint8(offset4 + 0) === 137 && view.getUint8(offset4 + 1) === 80 && view.getUint8(offset4 + 2) === 78 && view.getUint8(offset4 + 3) === 71 && view.getUint8(offset4 + 4) === 13 && view.getUint8(offset4 + 5) === 10 && view.getUint8(offset4 + 6) === 26 && view.getUint8(offset4 + 7) === 10) {
      return true;
    }
    return false;
  }
  static getChunkType(view, offset4) {
    return [
      String.fromCharCode(view.getUint8(offset4)),
      String.fromCharCode(view.getUint8(offset4 + 1)),
      String.fromCharCode(view.getUint8(offset4 + 2)),
      String.fromCharCode(view.getUint8(offset4 + 3))
    ].join("");
  }
  static readChunks(view, offset4 = 0) {
    const chunks = {};
    if (!PngHelpers.isPng(view, offset4)) {
      throw new Error("Not a PNG");
    }
    offset4 += 8;
    while (offset4 <= view.buffer.byteLength) {
      const start = offset4;
      const len = view.getInt32(offset4);
      offset4 += 4;
      const chunkType = PngHelpers.getChunkType(view, offset4);
      if (chunkType === "IDAT" && chunks[chunkType]) {
        offset4 += len + LEN_SIZE + CRC_SIZE;
        continue;
      }
      if (chunkType === "IEND") {
        break;
      }
      chunks[chunkType] = {
        start,
        dataOffset: offset4 + 4,
        size: len
      };
      offset4 += len + LEN_SIZE + CRC_SIZE;
    }
    return chunks;
  }
  static parsePhys(view, offset4) {
    return {
      ppux: view.getUint32(offset4),
      ppuy: view.getUint32(offset4 + 4),
      unit: view.getUint8(offset4 + 4)
    };
  }
  static findChunk(view, type) {
    const chunks = PngHelpers.readChunks(view);
    return chunks[type];
  }
  static setPhysChunk(view, dpr = 1, options) {
    let offset4 = 46;
    let size4 = 0;
    const res1 = PngHelpers.findChunk(view, "pHYs");
    if (res1) {
      offset4 = res1.start;
      size4 = res1.size;
    }
    const res2 = PngHelpers.findChunk(view, "IDAT");
    if (res2) {
      offset4 = res2.start;
      size4 = 0;
    }
    const pHYsData = new ArrayBuffer(21);
    const pHYsDataView = new DataView(pHYsData);
    pHYsDataView.setUint32(0, 9);
    pHYsDataView.setUint8(4, "p".charCodeAt(0));
    pHYsDataView.setUint8(5, "H".charCodeAt(0));
    pHYsDataView.setUint8(6, "Y".charCodeAt(0));
    pHYsDataView.setUint8(7, "s".charCodeAt(0));
    const DPI_96 = 2835.5;
    pHYsDataView.setInt32(8, DPI_96 * dpr);
    pHYsDataView.setInt32(12, DPI_96 * dpr);
    pHYsDataView.setInt8(16, 1);
    const crcBit = new Uint8Array(pHYsData.slice(4, 17));
    pHYsDataView.setInt32(17, crc(crcBit));
    const startBuf = view.buffer.slice(0, offset4);
    const endBuf = view.buffer.slice(offset4 + size4);
    return new Blob([startBuf, pHYsData, endBuf], options);
  }
};

// node_modules/@tldraw/utils/dist-esm/lib/media.mjs
var MediaHelpers = class {
  static loadVideo(src) {
    return new Promise((resolve, reject) => {
      const video = document.createElement("video");
      video.onloadeddata = () => resolve(video);
      video.onerror = (e) => {
        console.error(e);
        reject(new Error("Could not load video"));
      };
      video.crossOrigin = "anonymous";
      video.src = src;
    });
  }
  static loadImage(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = (e) => {
        console.error(e);
        reject(new Error("Could not load image"));
      };
      img.crossOrigin = "anonymous";
      img.src = src;
    });
  }
  static async getVideoSize(blob) {
    return MediaHelpers.usingObjectURL(blob, async (url) => {
      const video = await MediaHelpers.loadVideo(url);
      return { w: video.videoWidth, h: video.videoHeight };
    });
  }
  static async getImageSize(blob) {
    const image = await MediaHelpers.usingObjectURL(blob, MediaHelpers.loadImage);
    try {
      if (blob.type === "image/png") {
        const view = new DataView(await blob.arrayBuffer());
        if (PngHelpers.isPng(view, 0)) {
          const physChunk = PngHelpers.findChunk(view, "pHYs");
          if (physChunk) {
            const physData = PngHelpers.parsePhys(view, physChunk.dataOffset);
            if (physData.unit === 0 && physData.ppux === physData.ppuy) {
              const pixelRatio = Math.max(physData.ppux / 2834.5, 1);
              return {
                w: Math.round(image.naturalWidth / pixelRatio),
                h: Math.round(image.naturalHeight / pixelRatio)
              };
            }
          }
        }
      }
    } catch (err) {
      console.error(err);
      return { w: image.naturalWidth, h: image.naturalHeight };
    }
    return { w: image.naturalWidth, h: image.naturalHeight };
  }
  static async usingObjectURL(blob, fn) {
    const url = URL.createObjectURL(blob);
    try {
      return await fn(url);
    } finally {
      URL.revokeObjectURL(url);
    }
  }
};

// node_modules/@tldraw/utils/dist-esm/lib/number.mjs
function rng(seed = "") {
  let x = 0;
  let y = 0;
  let z = 0;
  let w = 0;
  function next() {
    const t2 = x ^ x << 11;
    x = y;
    y = z;
    z = w;
    w ^= (w >>> 19 ^ t2 ^ t2 >>> 8) >>> 0;
    return w / 4294967296 * 2;
  }
  for (let k = 0; k < seed.length + 64; k++) {
    x ^= seed.charCodeAt(k) | 0;
    next();
  }
  return next;
}
function modulate(value, rangeA, rangeB, clamp3 = false) {
  const [fromLow, fromHigh] = rangeA;
  const [v0, v1] = rangeB;
  const result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
  return clamp3 ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
}

// node_modules/@tldraw/utils/dist-esm/lib/object.mjs
function hasOwnProperty(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function getOwnProperty(obj, key) {
  if (!hasOwnProperty(obj, key)) {
    return void 0;
  }
  return obj[key];
}
function objectMapKeys(object2) {
  return Object.keys(object2);
}
function objectMapValues(object2) {
  return Object.values(object2);
}
function objectMapEntries(object2) {
  return Object.entries(object2);
}
function objectMapFromEntries(entries) {
  return Object.fromEntries(entries);
}
function filterEntries(object2, predicate) {
  const result = {};
  let didChange = false;
  for (const [key, value] of objectMapEntries(object2)) {
    if (predicate(key, value)) {
      result[key] = value;
    } else {
      didChange = true;
    }
  }
  return didChange ? result : object2;
}
function mapObjectMapValues(object2, mapper) {
  const result = {};
  for (const [key, value] of objectMapEntries(object2)) {
    const newValue = mapper(key, value);
    result[key] = newValue;
  }
  return result;
}
function areObjectsShallowEqual(obj1, obj2) {
  if (obj1 === obj2)
    return true;
  const keys1 = new Set(Object.keys(obj1));
  const keys2 = new Set(Object.keys(obj2));
  if (keys1.size !== keys2.size)
    return false;
  for (const key of keys1) {
    if (!keys2.has(key))
      return false;
    if (!Object.is(obj1[key], obj2[key]))
      return false;
  }
  return true;
}

// node_modules/@tldraw/utils/dist-esm/lib/reordering/dgreensp/dgreensp.mjs
var DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
var INTEGER_ZERO = "a0";
var SMALLEST_INTEGER = "A00000000000000000000000000";
function getIntegerLength(head) {
  if (head >= "a" && head <= "z") {
    return head.charCodeAt(0) - "a".charCodeAt(0) + 2;
  } else if (head >= "A" && head <= "Z") {
    return "Z".charCodeAt(0) - head.charCodeAt(0) + 2;
  } else {
    throw new Error("Invalid index key head: " + head);
  }
}
function validateInteger(int) {
  if (int.length !== getIntegerLength(int.charAt(0))) {
    throw new Error("invalid integer part of index key: " + int);
  }
}
function isNotUndefined(n) {
  if (n === void 0)
    throw Error("n is undefined");
}
function incrementInteger(x) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let carry = true;
  for (let i = digs.length - 1; carry && i >= 0; i--) {
    const d = DIGITS.indexOf(digs[i]) + 1;
    if (d === DIGITS.length) {
      digs[i] = "0";
    } else {
      digs[i] = DIGITS.charAt(d);
      carry = false;
    }
  }
  if (carry) {
    if (head === "Z")
      return "a0";
    if (head === "z")
      return void 0;
    const h = String.fromCharCode(head.charCodeAt(0) + 1);
    if (h > "a") {
      digs.push("0");
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function decrementInteger(x) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let borrow = true;
  for (let i = digs.length - 1; borrow && i >= 0; i--) {
    const d = DIGITS.indexOf(digs[i]) - 1;
    if (d === -1) {
      digs[i] = DIGITS.slice(-1);
    } else {
      digs[i] = DIGITS.charAt(d);
      borrow = false;
    }
  }
  if (borrow) {
    if (head === "a")
      return "Z" + DIGITS.slice(-1);
    if (head === "A")
      return void 0;
    const h = String.fromCharCode(head.charCodeAt(0) - 1);
    if (h < "Z") {
      digs.push(DIGITS.slice(-1));
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function midpoint(a, b) {
  if (b !== void 0 && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a.slice(-1) === "0" || b && b.slice(-1) === "0") {
    throw new Error("trailing zero");
  }
  if (b) {
    let n = 0;
    while ((a.charAt(n) || "0") === b.charAt(n)) {
      n++;
    }
    if (n > 0) {
      return b.slice(0, n) + midpoint(a.slice(n), b.slice(n));
    }
  }
  const digitA = a ? DIGITS.indexOf(a.charAt(0)) : 0;
  const digitB = b !== void 0 ? DIGITS.indexOf(b.charAt(0)) : DIGITS.length;
  if (digitB - digitA > 1) {
    const midDigit = Math.round(0.5 * (digitA + digitB));
    return DIGITS.charAt(midDigit);
  } else {
    if (b && b.length > 1) {
      return b.slice(0, 1);
    } else {
      return DIGITS.charAt(digitA) + midpoint(a.slice(1), void 0);
    }
  }
}
function getIntegerPart(index2) {
  const integerPartLength = getIntegerLength(index2.charAt(0));
  if (integerPartLength > index2.length) {
    throw new Error("invalid index: " + index2);
  }
  return index2.slice(0, integerPartLength);
}
function validateOrder(index2) {
  if (index2 === SMALLEST_INTEGER) {
    throw new Error("invalid index: " + index2);
  }
  const i = getIntegerPart(index2);
  const f = index2.slice(i.length);
  if (f.slice(-1) === "0") {
    throw new Error("invalid index: " + index2);
  }
}
function generateKeyBetween(a, b) {
  if (a !== void 0)
    validateOrder(a);
  if (b !== void 0)
    validateOrder(b);
  if (a !== void 0 && b !== void 0 && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a === void 0 && b === void 0) {
    return INTEGER_ZERO;
  }
  if (a === void 0) {
    if (b === void 0)
      throw Error("b is undefined");
    const ib2 = getIntegerPart(b);
    const fb2 = b.slice(ib2.length);
    if (ib2 === SMALLEST_INTEGER) {
      return ib2 + midpoint("", fb2);
    }
    if (ib2 < b) {
      return ib2;
    }
    const ibl = decrementInteger(ib2);
    isNotUndefined(ibl);
    return ibl;
  }
  if (b === void 0) {
    const ia2 = getIntegerPart(a);
    const fa2 = a.slice(ia2.length);
    const i2 = incrementInteger(ia2);
    return i2 === void 0 ? ia2 + midpoint(fa2, void 0) : i2;
  }
  const ia = getIntegerPart(a);
  const fa = a.slice(ia.length);
  const ib = getIntegerPart(b);
  const fb = b.slice(ib.length);
  if (ia === ib) {
    return ia + midpoint(fa, fb);
  }
  const i = incrementInteger(ia);
  isNotUndefined(i);
  return i < b ? i : ia + midpoint(fa, void 0);
}
function generateNKeysBetween(a, b, n) {
  if (n === 0)
    return [];
  if (n === 1)
    return [generateKeyBetween(a, b)];
  if (b === void 0) {
    let c2 = generateKeyBetween(a, b);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(c2, b);
      result.push(c2);
    }
    return result;
  }
  if (a === void 0) {
    let c2 = generateKeyBetween(a, b);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(a, c2);
      result.push(c2);
    }
    result.reverse();
    return result;
  }
  const mid = Math.floor(n / 2);
  const c = generateKeyBetween(a, b);
  return [...generateNKeysBetween(a, c, mid), c, ...generateNKeysBetween(c, b, n - mid - 1)];
}

// node_modules/@tldraw/utils/dist-esm/lib/reordering/reordering.mjs
var ZERO_INDEX_KEY = INTEGER_ZERO;
function validateIndexKey(key) {
  validateOrder(key);
}
function getIndicesBetween(below, above, n) {
  return generateNKeysBetween(below, above, n);
}
function getIndicesAbove(below, n) {
  return generateNKeysBetween(below, void 0, n);
}
function getIndexBetween(below, above) {
  return generateNKeysBetween(below, above, 1)[0];
}
function getIndexAbove(below) {
  return generateNKeysBetween(below, void 0, 1)[0];
}
function getIndexBelow(above) {
  return generateNKeysBetween(void 0, above, 1)[0];
}
function getIndices(n, start = "a1") {
  return [start, ...generateNKeysBetween(start, void 0, n)];
}
function sortByIndex(a, b) {
  if (a.index < b.index) {
    return -1;
  } else if (a.index > b.index) {
    return 1;
  }
  return 0;
}

// node_modules/@tldraw/utils/dist-esm/lib/sort.mjs
function sortById(a, b) {
  return a.id > b.id ? 1 : -1;
}

// node_modules/@tldraw/utils/dist-esm/lib/storage.mjs
function getFromLocalStorage(key) {
  try {
    return localStorage.getItem(key);
  } catch (e) {
    return null;
  }
}
function setInLocalStorage(key, value) {
  try {
    localStorage.setItem(key, value);
  } catch (e) {
  }
}
function clearLocalStorage() {
  try {
    localStorage.clear();
  } catch (e) {
  }
}
function getFromSessionStorage(key) {
  try {
    return sessionStorage.getItem(key);
  } catch (e) {
    return null;
  }
}
function setInSessionStorage(key, value) {
  try {
    sessionStorage.setItem(key, value);
  } catch (e) {
  }
}
function deleteFromSessionStorage(key) {
  try {
    sessionStorage.removeItem(key);
  } catch (e) {
  }
}
function clearSessionStorage() {
  try {
    sessionStorage.clear();
  } catch (e) {
  }
}

// node_modules/@tldraw/utils/dist-esm/lib/throttle.mjs
var isTest = () => typeof process !== "undefined" && false;
var fpsQueue = [];
var targetFps = 60;
var targetTimePerFrame = Math.ceil(1e3 / targetFps);
var frame;
var time = 0;
var last2 = 0;
var flush = () => {
  const queue = fpsQueue.splice(0, fpsQueue.length);
  for (const fn of queue) {
    fn();
  }
};
function tick() {
  if (frame) {
    return;
  }
  const now = Date.now();
  const elapsed = now - last2;
  if (time + elapsed < targetTimePerFrame) {
    frame = requestAnimationFrame(() => {
      frame = void 0;
      tick();
    });
    return;
  }
  frame = requestAnimationFrame(() => {
    frame = void 0;
    last2 = now;
    time = Math.min(time + elapsed - targetTimePerFrame, targetTimePerFrame * 10);
    flush();
  });
}
var started = false;
function throttleToNextFrame(fn) {
  if (isTest()) {
    fn();
    return () => {
    };
  }
  if (!fpsQueue.includes(fn)) {
    fpsQueue.push(fn);
    if (!started) {
      started = true;
      last2 = Date.now() - targetTimePerFrame - 1;
    }
    tick();
  }
  return () => {
    const index2 = fpsQueue.indexOf(fn);
    if (index2 > -1) {
      fpsQueue.splice(index2, 1);
    }
  };
}

// node_modules/@tldraw/utils/dist-esm/lib/value.mjs
function isNonNull(value) {
  return value !== null;
}
function getStructuredClone() {
  if (typeof globalThis !== "undefined" && globalThis.structuredClone) {
    return [globalThis.structuredClone, true];
  }
  if (typeof global !== "undefined" && global.structuredClone) {
    return [global.structuredClone, true];
  }
  if (typeof window !== "undefined" && window.structuredClone) {
    return [window.structuredClone, true];
  }
  return [(i) => i ? JSON.parse(JSON.stringify(i)) : i, false];
}
var _structuredClone = getStructuredClone();
var structuredClone = _structuredClone[0];
var isNativeStructuredClone = _structuredClone[1];
var STRUCTURED_CLONE_OBJECT_PROTOTYPE = Object.getPrototypeOf(structuredClone({}));

// node_modules/@tldraw/store/node_modules/nanoid/index.browser.js
var nanoid = (size4 = 21) => crypto.getRandomValues(new Uint8Array(size4)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/@tldraw/store/dist-esm/lib/RecordType.mjs
var RecordType = class {
  constructor(typeName, config) {
    __publicField(this, "createDefaultProperties");
    __publicField(this, "validator");
    __publicField(this, "scope");
    __publicField(this, "isInstance", (record) => {
      return (record == null ? void 0 : record.typeName) === this.typeName;
    });
    var _a2, _b2;
    this.typeName = typeName;
    this.createDefaultProperties = config.createDefaultProperties;
    this.validator = (_a2 = config.validator) != null ? _a2 : { validate: (r) => r };
    this.scope = (_b2 = config.scope) != null ? _b2 : "document";
  }
  create(properties) {
    const result = { ...this.createDefaultProperties(), id: this.createId() };
    for (const [k, v] of Object.entries(properties)) {
      if (v !== void 0) {
        result[k] = v;
      }
    }
    result.typeName = this.typeName;
    return result;
  }
  clone(record) {
    return { ...structuredClone(record), id: this.createId() };
  }
  createId(customUniquePart) {
    return this.typeName + ":" + (customUniquePart != null ? customUniquePart : nanoid());
  }
  createCustomId(id) {
    return this.typeName + ":" + id;
  }
  parseId(id) {
    if (!this.isId(id)) {
      throw new Error(`ID "${id}" is not a valid ID for type "${this.typeName}"`);
    }
    return id.slice(this.typeName.length + 1);
  }
  isId(id) {
    if (!id)
      return false;
    for (let i = 0; i < this.typeName.length; i++) {
      if (id[i] !== this.typeName[i])
        return false;
    }
    return id[this.typeName.length] === ":";
  }
  withDefaultProperties(createDefaultProperties) {
    return new RecordType(this.typeName, {
      createDefaultProperties,
      validator: this.validator,
      scope: this.scope
    });
  }
  validate(record, recordBefore) {
    if (recordBefore && this.validator.validateUsingKnownGoodVersion) {
      return this.validator.validateUsingKnownGoodVersion(recordBefore, record);
    }
    return this.validator.validate(record);
  }
};
function createRecordType(typeName, config) {
  return new RecordType(typeName, {
    createDefaultProperties: () => ({}),
    validator: config.validator,
    scope: config.scope
  });
}

// node_modules/@tldraw/store/dist-esm/lib/Cache.mjs
var Cache = class {
  constructor() {
    __publicField(this, "items", /* @__PURE__ */ new WeakMap());
  }
  get(item, cb) {
    if (!this.items.has(item)) {
      this.items.set(item, cb(item));
    }
    return this.items.get(item);
  }
};

// node_modules/@tldraw/store/dist-esm/lib/StoreQueries.mjs
var import_lodash = __toESM(require_lodash(), 1);

// node_modules/@tldraw/store/dist-esm/lib/setUtils.mjs
function intersectSets(sets) {
  if (sets.length === 0)
    return /* @__PURE__ */ new Set();
  const first = sets[0];
  const rest = sets.slice(1);
  const result = /* @__PURE__ */ new Set();
  for (const val of first) {
    if (rest.every((set2) => set2.has(val))) {
      result.add(val);
    }
  }
  return result;
}
function diffSets(prev, next) {
  var _a2, _b2;
  const result = {};
  for (const val of next) {
    if (!prev.has(val)) {
      (_a2 = result.added) != null ? _a2 : result.added = /* @__PURE__ */ new Set();
      result.added.add(val);
    }
  }
  for (const val of prev) {
    if (!next.has(val)) {
      (_b2 = result.removed) != null ? _b2 : result.removed = /* @__PURE__ */ new Set();
      result.removed.add(val);
    }
  }
  return result.added || result.removed ? result : void 0;
}

// node_modules/@tldraw/store/dist-esm/lib/executeQuery.mjs
function objectMatchesQuery(query, object2) {
  for (const [key, _matcher] of Object.entries(query)) {
    const matcher = _matcher;
    const value = object2[key];
    if ("eq" in matcher && value !== matcher.eq)
      return false;
    if ("neq" in matcher && value === matcher.neq)
      return false;
    if ("gt" in matcher && (typeof value !== "number" || value <= matcher.gt))
      return false;
  }
  return true;
}
function executeQuery(store2, typeName, query) {
  const matchIds = Object.fromEntries(Object.keys(query).map((key) => [key, /* @__PURE__ */ new Set()]));
  for (const [k, matcher] of Object.entries(query)) {
    if ("eq" in matcher) {
      const index2 = store2.index(typeName, k);
      const ids = index2.get().get(matcher.eq);
      if (ids) {
        for (const id of ids) {
          matchIds[k].add(id);
        }
      }
    } else if ("neq" in matcher) {
      const index2 = store2.index(typeName, k);
      for (const [value, ids] of index2.get()) {
        if (value !== matcher.neq) {
          for (const id of ids) {
            matchIds[k].add(id);
          }
        }
      }
    } else if ("gt" in matcher) {
      const index2 = store2.index(typeName, k);
      for (const [value, ids] of index2.get()) {
        if (value > matcher.gt) {
          for (const id of ids) {
            matchIds[k].add(id);
          }
        }
      }
    }
  }
  return intersectSets(Object.values(matchIds));
}

// node_modules/@tldraw/store/dist-esm/lib/StoreQueries.mjs
var StoreQueries = class {
  constructor(atoms, history) {
    __publicField(this, "indexCache", /* @__PURE__ */ new Map());
    __publicField(this, "historyCache", /* @__PURE__ */ new Map());
    this.atoms = atoms;
    this.history = history;
  }
  filterHistory(typeName) {
    if (this.historyCache.has(typeName)) {
      return this.historyCache.get(typeName);
    }
    const filtered = computed("filterHistory:" + typeName, (lastValue, lastComputedEpoch) => {
      if (isUninitialized(lastValue)) {
        return this.history.get();
      }
      const diff = this.history.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE)
        return this.history.get();
      const res = { added: {}, removed: {}, updated: {} };
      let numAdded = 0;
      let numRemoved = 0;
      let numUpdated = 0;
      for (const changes of diff) {
        for (const added of objectMapValues(changes.added)) {
          if (added.typeName === typeName) {
            if (res.removed[added.id]) {
              const original = res.removed[added.id];
              delete res.removed[added.id];
              numRemoved--;
              if (original !== added) {
                res.updated[added.id] = [original, added];
                numUpdated++;
              }
            } else {
              res.added[added.id] = added;
              numAdded++;
            }
          }
        }
        for (const [from, to] of objectMapValues(changes.updated)) {
          if (to.typeName === typeName) {
            if (res.added[to.id]) {
              res.added[to.id] = to;
            } else if (res.updated[to.id]) {
              res.updated[to.id] = [res.updated[to.id][0], to];
            } else {
              res.updated[to.id] = [from, to];
              numUpdated++;
            }
          }
        }
        for (const removed of objectMapValues(changes.removed)) {
          if (removed.typeName === typeName) {
            if (res.added[removed.id]) {
              delete res.added[removed.id];
              numAdded--;
            } else if (res.updated[removed.id]) {
              res.removed[removed.id] = res.updated[removed.id][0];
              delete res.updated[removed.id];
              numUpdated--;
              numRemoved++;
            } else {
              res.removed[removed.id] = removed;
              numRemoved++;
            }
          }
        }
      }
      if (numAdded || numRemoved || numUpdated) {
        return withDiff(this.history.get(), res);
      } else {
        return lastValue;
      }
    }, { historyLength: 100 });
    this.historyCache.set(typeName, filtered);
    return filtered;
  }
  index(typeName, property) {
    const cacheKey = typeName + ":" + property;
    if (this.indexCache.has(cacheKey)) {
      return this.indexCache.get(cacheKey);
    }
    const index2 = this.__uncached_createIndex(typeName, property);
    this.indexCache.set(cacheKey, index2);
    return index2;
  }
  __uncached_createIndex(typeName, property) {
    const typeHistory = this.filterHistory(typeName);
    const fromScratch = () => {
      typeHistory.get();
      const res = /* @__PURE__ */ new Map();
      for (const atom2 of objectMapValues(this.atoms.get())) {
        const record = atom2.get();
        if (record.typeName === typeName) {
          const value = record[property];
          if (!res.has(value)) {
            res.set(value, /* @__PURE__ */ new Set());
          }
          res.get(value).add(record.id);
        }
      }
      return res;
    };
    return computed("index:" + typeName + ":" + property, (prevValue, lastComputedEpoch) => {
      if (isUninitialized(prevValue))
        return fromScratch();
      const history = typeHistory.getDiffSince(lastComputedEpoch);
      if (history === RESET_VALUE) {
        return fromScratch();
      }
      const setConstructors = /* @__PURE__ */ new Map();
      const add = (value, id) => {
        var _a2;
        let setConstructor = setConstructors.get(value);
        if (!setConstructor)
          setConstructor = new IncrementalSetConstructor((_a2 = prevValue.get(value)) != null ? _a2 : /* @__PURE__ */ new Set());
        setConstructor.add(id);
        setConstructors.set(value, setConstructor);
      };
      const remove2 = (value, id) => {
        var _a2;
        let set2 = setConstructors.get(value);
        if (!set2)
          set2 = new IncrementalSetConstructor((_a2 = prevValue.get(value)) != null ? _a2 : /* @__PURE__ */ new Set());
        set2.remove(id);
        setConstructors.set(value, set2);
      };
      for (const changes of history) {
        for (const record of objectMapValues(changes.added)) {
          if (record.typeName === typeName) {
            const value = record[property];
            add(value, record.id);
          }
        }
        for (const [from, to] of objectMapValues(changes.updated)) {
          if (to.typeName === typeName) {
            const prev = from[property];
            const next = to[property];
            if (prev !== next) {
              remove2(prev, to.id);
              add(next, to.id);
            }
          }
        }
        for (const record of objectMapValues(changes.removed)) {
          if (record.typeName === typeName) {
            const value = record[property];
            remove2(value, record.id);
          }
        }
      }
      let nextValue = void 0;
      let nextDiff = void 0;
      for (const [value, setConstructor] of setConstructors) {
        const result = setConstructor.get();
        if (!result)
          continue;
        if (!nextValue)
          nextValue = new Map(prevValue);
        if (!nextDiff)
          nextDiff = /* @__PURE__ */ new Map();
        if (result.value.size === 0) {
          nextValue.delete(value);
        } else {
          nextValue.set(value, result.value);
        }
        nextDiff.set(value, result.diff);
      }
      if (nextValue && nextDiff) {
        return withDiff(nextValue, nextDiff);
      }
      return prevValue;
    }, { historyLength: 100 });
  }
  record(typeName, queryCreator = () => ({}), name = "record:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const ids = this.ids(typeName, queryCreator, name);
    return computed(name, () => {
      var _a2;
      for (const id of ids.get()) {
        return (_a2 = this.atoms.get()[id]) == null ? void 0 : _a2.get();
      }
      return void 0;
    });
  }
  records(typeName, queryCreator = () => ({}), name = "records:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const ids = this.ids(typeName, queryCreator, "ids:" + name);
    return computed(name, () => {
      return [...ids.get()].map((id) => {
        const atom2 = this.atoms.get()[id];
        if (!atom2) {
          throw new Error("no atom found for record id: " + id);
        }
        return atom2.get();
      });
    });
  }
  ids(typeName, queryCreator = () => ({}), name = "ids:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const typeHistory = this.filterHistory(typeName);
    const fromScratch = () => {
      typeHistory.get();
      const query = queryCreator();
      if (Object.keys(query).length === 0) {
        return new Set(objectMapValues(this.atoms.get()).flatMap((v) => {
          const r = v.get();
          if (r.typeName === typeName) {
            return r.id;
          } else {
            return [];
          }
        }));
      }
      return executeQuery(this, typeName, query);
    };
    const fromScratchWithDiff = (prevValue) => {
      const nextValue = fromScratch();
      const diff = diffSets(prevValue, nextValue);
      if (diff) {
        return withDiff(nextValue, diff);
      } else {
        return prevValue;
      }
    };
    const cachedQuery = computed("ids_query:" + name, queryCreator, {
      isEqual: import_lodash.default
    });
    return computed("query:" + name, (prevValue, lastComputedEpoch) => {
      const query = cachedQuery.get();
      if (isUninitialized(prevValue)) {
        return fromScratch();
      }
      if (lastComputedEpoch < cachedQuery.lastChangedEpoch) {
        return fromScratchWithDiff(prevValue);
      }
      const history = typeHistory.getDiffSince(lastComputedEpoch);
      if (history === RESET_VALUE) {
        return fromScratchWithDiff(prevValue);
      }
      const setConstructor = new IncrementalSetConstructor(prevValue);
      for (const changes of history) {
        for (const added of objectMapValues(changes.added)) {
          if (added.typeName === typeName && objectMatchesQuery(query, added)) {
            setConstructor.add(added.id);
          }
        }
        for (const [_, updated] of objectMapValues(changes.updated)) {
          if (updated.typeName === typeName) {
            if (objectMatchesQuery(query, updated)) {
              setConstructor.add(updated.id);
            } else {
              setConstructor.remove(updated.id);
            }
          }
        }
        for (const removed of objectMapValues(changes.removed)) {
          if (removed.typeName === typeName) {
            setConstructor.remove(removed.id);
          }
        }
      }
      const result = setConstructor.get();
      if (!result) {
        return prevValue;
      }
      return withDiff(result.value, result.diff);
    }, { historyLength: 50 });
  }
  exec(typeName, query) {
    const ids = executeQuery(this, typeName, query);
    if (ids.size === 0) {
      return EMPTY_ARRAY;
    }
    const atoms = this.atoms.get();
    return [...ids].map((id) => atoms[id].get());
  }
};

// node_modules/@tldraw/store/dist-esm/lib/devFreeze.mjs
function devFreeze(object2) {
  if (false) {
    return object2;
  }
  const proto2 = Object.getPrototypeOf(object2);
  if (proto2 && !(Array.isArray(object2) || proto2 === Object.prototype || proto2 === null || proto2 === STRUCTURED_CLONE_OBJECT_PROTOTYPE)) {
    console.error("cannot include non-js data in a record", object2);
    throw new Error("cannot include non-js data in a record");
  }
  const propNames = Object.getOwnPropertyNames(object2);
  for (const name of propNames) {
    const value = object2[name];
    if (value && typeof value === "object") {
      devFreeze(value);
    }
  }
  return Object.freeze(object2);
}

// node_modules/@tldraw/store/dist-esm/lib/Store.mjs
var Store = class {
  constructor(config) {
    __publicField(this, "id", nanoid());
    __publicField(this, "atoms", atom("store_atoms", {}));
    __publicField(this, "history", atom("history", 0, {
      historyLength: 1e3
    }));
    __publicField(this, "query", new StoreQueries(this.atoms, this.history));
    __publicField(this, "listeners", /* @__PURE__ */ new Set());
    __publicField(this, "historyAccumulator", new HistoryAccumulator());
    __publicField(this, "historyReactor");
    __publicField(this, "schema");
    __publicField(this, "props");
    __publicField(this, "scopedTypes");
    __publicField(this, "onBeforeCreate");
    __publicField(this, "onAfterCreate");
    __publicField(this, "onBeforeChange");
    __publicField(this, "onAfterChange");
    __publicField(this, "onBeforeDelete");
    __publicField(this, "onAfterDelete");
    __publicField(this, "_runCallbacks", true);
    __publicField(this, "put", (records, phaseOverride) => {
      transact(() => {
        const updates = {};
        const additions = {};
        const currentMap = this.atoms.__unsafe__getWithoutCapture();
        let map = null;
        let record;
        let didChange = false;
        const beforeCreate = this.onBeforeCreate && this._runCallbacks ? this.onBeforeCreate : null;
        const beforeUpdate = this.onBeforeChange && this._runCallbacks ? this.onBeforeChange : null;
        const source = this.isMergingRemoteChanges ? "remote" : "user";
        for (let i = 0, n = records.length; i < n; i++) {
          record = records[i];
          const recordAtom = (map != null ? map : currentMap)[record.id];
          if (recordAtom) {
            const initialValue = recordAtom.__unsafe__getWithoutCapture();
            if (beforeUpdate)
              record = beforeUpdate(initialValue, record, source);
            const validated = this.schema.validateRecord(this, record, phaseOverride != null ? phaseOverride : "updateRecord", initialValue);
            if (validated === initialValue)
              continue;
            recordAtom.set(devFreeze(record));
            didChange = true;
            updates[record.id] = [initialValue, recordAtom.__unsafe__getWithoutCapture()];
          } else {
            if (beforeCreate)
              record = beforeCreate(record, source);
            didChange = true;
            record = this.schema.validateRecord(this, record, phaseOverride != null ? phaseOverride : "createRecord", null);
            additions[record.id] = record;
            if (!map) {
              map = { ...currentMap };
            }
            map[record.id] = atom("atom:" + record.id, record);
          }
        }
        if (map) {
          this.atoms.set(map);
        }
        if (!didChange)
          return;
        this.updateHistory({
          added: additions,
          updated: updates,
          removed: {}
        });
        if (this._runCallbacks) {
          const { onAfterCreate, onAfterChange } = this;
          if (onAfterCreate) {
            Object.values(additions).forEach((record2) => {
              onAfterCreate(record2, source);
            });
          }
          if (onAfterChange) {
            Object.values(updates).forEach(([from, to]) => {
              onAfterChange(from, to, source);
            });
          }
        }
      });
    });
    __publicField(this, "remove", (ids) => {
      transact(() => {
        const cancelled2 = [];
        const source = this.isMergingRemoteChanges ? "remote" : "user";
        if (this.onBeforeDelete && this._runCallbacks) {
          for (const id of ids) {
            const atom2 = this.atoms.__unsafe__getWithoutCapture()[id];
            if (!atom2)
              continue;
            if (this.onBeforeDelete(atom2.get(), source) === false) {
              cancelled2.push(id);
            }
          }
        }
        let removed = void 0;
        this.atoms.update((atoms) => {
          let result = void 0;
          for (const id of ids) {
            if (cancelled2.includes(id))
              continue;
            if (!(id in atoms))
              continue;
            if (!result)
              result = { ...atoms };
            if (!removed)
              removed = {};
            delete result[id];
            removed[id] = atoms[id].get();
          }
          return result != null ? result : atoms;
        });
        if (!removed)
          return;
        this.updateHistory({ added: {}, updated: {}, removed });
        if (this.onAfterDelete && this._runCallbacks) {
          let record;
          for (let i = 0, n = ids.length; i < n; i++) {
            record = removed[ids[i]];
            if (record) {
              this.onAfterDelete(record, source);
            }
          }
        }
      });
    });
    __publicField(this, "get", (id) => {
      var _a2;
      return (_a2 = this.atoms.get()[id]) == null ? void 0 : _a2.get();
    });
    __publicField(this, "unsafeGetWithoutCapture", (id) => {
      var _a2;
      return (_a2 = this.atoms.get()[id]) == null ? void 0 : _a2.__unsafe__getWithoutCapture();
    });
    __publicField(this, "serialize", (scope = "document") => {
      const result = {};
      for (const [id, atom2] of objectMapEntries(this.atoms.get())) {
        const record = atom2.get();
        if (scope === "all" || this.scopedTypes[scope].has(record.typeName)) {
          result[id] = record;
        }
      }
      return result;
    });
    __publicField(this, "allRecords", () => {
      return objectMapValues(this.atoms.get()).map((atom2) => atom2.get());
    });
    __publicField(this, "clear", () => {
      this.remove(objectMapKeys(this.atoms.get()));
    });
    __publicField(this, "update", (id, updater) => {
      const atom2 = this.atoms.get()[id];
      if (!atom2) {
        console.error(`Record ${id} not found. This is probably an error`);
        return;
      }
      this.put([updater(atom2.__unsafe__getWithoutCapture())]);
    });
    __publicField(this, "has", (id) => {
      return !!this.atoms.get()[id];
    });
    __publicField(this, "listen", (onHistory, filters) => {
      var _a2, _b2;
      this._flushHistory();
      const listener2 = {
        onHistory,
        filters: {
          source: (_a2 = filters == null ? void 0 : filters.source) != null ? _a2 : "all",
          scope: (_b2 = filters == null ? void 0 : filters.scope) != null ? _b2 : "all"
        }
      };
      this.listeners.add(listener2);
      if (!this.historyReactor.scheduler.isActivelyListening) {
        this.historyReactor.start();
      }
      return () => {
        this.listeners.delete(listener2);
        if (this.listeners.size === 0) {
          this.historyReactor.stop();
        }
      };
    });
    __publicField(this, "isMergingRemoteChanges", false);
    __publicField(this, "mergeRemoteChanges", (fn) => {
      if (this.isMergingRemoteChanges) {
        return fn();
      }
      try {
        this.isMergingRemoteChanges = true;
        transact(fn);
      } finally {
        this.isMergingRemoteChanges = false;
      }
    });
    __publicField(this, "createComputedCache", (name, derive, isEqual2) => {
      const cache = new Cache();
      return {
        get: (id) => {
          const atom2 = this.atoms.get()[id];
          if (!atom2) {
            return void 0;
          }
          return cache.get(atom2, () => {
            const recordSignal = isEqual2 ? computed(atom2.name + ":equals", () => atom2.get(), { isEqual: isEqual2 }) : atom2;
            return computed(name + ":" + id, () => {
              return derive(recordSignal.get());
            });
          }).get();
        }
      };
    });
    __publicField(this, "createSelectedComputedCache", (name, selector, derive) => {
      const cache = new Cache();
      return {
        get: (id) => {
          const atom2 = this.atoms.get()[id];
          if (!atom2) {
            return void 0;
          }
          const d = computed(name + ":" + id + ":selector", () => selector(atom2.get()));
          return cache.get(atom2, () => computed(name + ":" + id, () => derive(d.get()))).get();
        }
      };
    });
    __publicField(this, "getRecordType", (record) => {
      const type = this.schema.types[record.typeName];
      if (!type) {
        throw new Error(`Record type ${record.typeName} not found`);
      }
      return type;
    });
    __publicField(this, "_integrityChecker");
    __publicField(this, "_isPossiblyCorrupted", false);
    const { initialData, schema } = config;
    this.schema = schema;
    this.props = config.props;
    if (initialData) {
      this.atoms.set(objectMapFromEntries(objectMapEntries(initialData).map(([id, record]) => [
        id,
        atom("atom:" + id, devFreeze(this.schema.validateRecord(this, record, "initialize", null)))
      ])));
    }
    this.historyReactor = reactor("Store.historyReactor", () => {
      this.history.get();
      this._flushHistory();
    }, { scheduleEffect: (cb) => throttleToNextFrame(cb) });
    this.scopedTypes = {
      document: new Set(objectMapValues(this.schema.types).filter((t2) => t2.scope === "document").map((t2) => t2.typeName)),
      session: new Set(objectMapValues(this.schema.types).filter((t2) => t2.scope === "session").map((t2) => t2.typeName)),
      presence: new Set(objectMapValues(this.schema.types).filter((t2) => t2.scope === "presence").map((t2) => t2.typeName))
    };
  }
  _flushHistory() {
    if (this.historyAccumulator.hasChanges()) {
      const entries = this.historyAccumulator.flush();
      for (const { changes, source } of entries) {
        let instanceChanges = null;
        let documentChanges = null;
        let presenceChanges = null;
        for (const { onHistory, filters } of this.listeners) {
          if (filters.source !== "all" && filters.source !== source) {
            continue;
          }
          if (filters.scope !== "all") {
            if (filters.scope === "document") {
              documentChanges != null ? documentChanges : documentChanges = this.filterChangesByScope(changes, "document");
              if (!documentChanges)
                continue;
              onHistory({ changes: documentChanges, source });
            } else if (filters.scope === "session") {
              instanceChanges != null ? instanceChanges : instanceChanges = this.filterChangesByScope(changes, "session");
              if (!instanceChanges)
                continue;
              onHistory({ changes: instanceChanges, source });
            } else {
              presenceChanges != null ? presenceChanges : presenceChanges = this.filterChangesByScope(changes, "presence");
              if (!presenceChanges)
                continue;
              onHistory({ changes: presenceChanges, source });
            }
          } else {
            onHistory({ changes, source });
          }
        }
      }
    }
  }
  filterChangesByScope(change, scope) {
    const result = {
      added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
      updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
      removed: filterEntries(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName))
    };
    if (Object.keys(result.added).length === 0 && Object.keys(result.updated).length === 0 && Object.keys(result.removed).length === 0) {
      return null;
    }
    return result;
  }
  updateHistory(changes) {
    this.historyAccumulator.add({
      changes,
      source: this.isMergingRemoteChanges ? "remote" : "user"
    });
    if (this.listeners.size === 0) {
      this.historyAccumulator.clear();
    }
    this.history.set(this.history.get() + 1, changes);
  }
  validate(phase) {
    this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null));
  }
  getSnapshot(scope = "document") {
    return {
      store: this.serialize(scope),
      schema: this.schema.serialize()
    };
  }
  migrateSnapshot(snapshot) {
    const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
    if (migrationResult.type === "error") {
      throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
    }
    return {
      store: migrationResult.value,
      schema: this.schema.serialize()
    };
  }
  loadSnapshot(snapshot) {
    const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
    if (migrationResult.type === "error") {
      throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
    }
    const prevRunCallbacks = this._runCallbacks;
    try {
      this._runCallbacks = false;
      transact(() => {
        this.clear();
        this.put(Object.values(migrationResult.value));
        this.ensureStoreIsUsable();
      });
    } finally {
      this._runCallbacks = prevRunCallbacks;
    }
  }
  extractingChanges(fn) {
    const changes = [];
    const dispose = this.historyAccumulator.intercepting((entry) => changes.push(entry.changes));
    try {
      transact(fn);
      return squashRecordDiffs(changes);
    } finally {
      dispose();
    }
  }
  applyDiff(diff, runCallbacks = true) {
    const prevRunCallbacks = this._runCallbacks;
    try {
      this._runCallbacks = runCallbacks;
      transact(() => {
        const toPut = objectMapValues(diff.added).concat(objectMapValues(diff.updated).map(([_from, to]) => to));
        const toRemove = objectMapKeys(diff.removed);
        if (toPut.length) {
          this.put(toPut);
        }
        if (toRemove.length) {
          this.remove(toRemove);
        }
      });
    } finally {
      this._runCallbacks = prevRunCallbacks;
    }
  }
  ensureStoreIsUsable() {
    var _a2, _b2;
    (_a2 = this._integrityChecker) != null ? _a2 : this._integrityChecker = this.schema.createIntegrityChecker(this);
    (_b2 = this._integrityChecker) == null ? void 0 : _b2.call(this);
  }
  markAsPossiblyCorrupted() {
    this._isPossiblyCorrupted = true;
  }
  isPossiblyCorrupted() {
    return this._isPossiblyCorrupted;
  }
};
function squashRecordDiffs(diffs) {
  const result = { added: {}, removed: {}, updated: {} };
  for (const diff of diffs) {
    for (const [id, value] of objectMapEntries(diff.added)) {
      if (result.removed[id]) {
        const original = result.removed[id];
        delete result.removed[id];
        if (original !== value) {
          result.updated[id] = [original, value];
        }
      } else {
        result.added[id] = value;
      }
    }
    for (const [id, [_from, to]] of objectMapEntries(diff.updated)) {
      if (result.added[id]) {
        result.added[id] = to;
        delete result.updated[id];
        delete result.removed[id];
        continue;
      }
      if (result.updated[id]) {
        result.updated[id] = [result.updated[id][0], to];
        delete result.removed[id];
        continue;
      }
      result.updated[id] = diff.updated[id];
      delete result.removed[id];
    }
    for (const [id, value] of objectMapEntries(diff.removed)) {
      if (result.added[id]) {
        delete result.added[id];
      } else if (result.updated[id]) {
        result.removed[id] = result.updated[id][0];
        delete result.updated[id];
      } else {
        result.removed[id] = value;
      }
    }
  }
  return result;
}
function squashHistoryEntries(entries) {
  if (entries.length === 0)
    return [];
  const chunked = [];
  let chunk = [entries[0]];
  let entry;
  for (let i = 1, n = entries.length; i < n; i++) {
    entry = entries[i];
    if (chunk[0].source !== entry.source) {
      chunked.push(chunk);
      chunk = [];
    }
    chunk.push(entry);
  }
  chunked.push(chunk);
  return devFreeze(chunked.map((chunk2) => ({
    source: chunk2[0].source,
    changes: squashRecordDiffs(chunk2.map((e) => e.changes))
  })));
}
var HistoryAccumulator = class {
  constructor() {
    __publicField(this, "_history", []);
    __publicField(this, "_interceptors", /* @__PURE__ */ new Set());
  }
  intercepting(fn) {
    this._interceptors.add(fn);
    return () => {
      this._interceptors.delete(fn);
    };
  }
  add(entry) {
    this._history.push(entry);
    for (const interceptor of this._interceptors) {
      interceptor(entry);
    }
  }
  flush() {
    const history = squashHistoryEntries(this._history);
    this._history = [];
    return history;
  }
  clear() {
    this._history = [];
  }
  hasChanges() {
    return this._history.length > 0;
  }
};

// node_modules/@tldraw/store/dist-esm/lib/migrate.mjs
function squashDependsOn(sequence) {
  var _a2;
  const result = [];
  for (let i = sequence.length - 1; i >= 0; i--) {
    const elem = sequence[i];
    if (!("id" in elem)) {
      const dependsOn = elem.dependsOn;
      const prev = result[0];
      if (prev) {
        result[0] = {
          ...prev,
          dependsOn: dependsOn.concat((_a2 = prev.dependsOn) != null ? _a2 : [])
        };
      }
    } else {
      result.unshift(elem);
    }
  }
  return result;
}
function createMigrationSequence({
  sequence,
  sequenceId,
  retroactive = true
}) {
  const migrations = {
    sequenceId,
    retroactive,
    sequence: squashDependsOn(sequence)
  };
  validateMigrations(migrations);
  return migrations;
}
function createMigrationIds(sequenceId, versions) {
  return Object.fromEntries(objectMapEntries(versions).map(([key, version2]) => [key, `${sequenceId}/${version2}`]));
}
function createRecordMigrationSequence(opts) {
  var _a2;
  const sequenceId = opts.sequenceId;
  return createMigrationSequence({
    sequenceId,
    retroactive: (_a2 = opts.retroactive) != null ? _a2 : true,
    sequence: opts.sequence.map((m) => "id" in m ? {
      ...m,
      scope: "record",
      filter: (r) => {
        var _a3, _b2, _c, _d;
        return r.typeName === opts.recordType && ((_b2 = (_a3 = m.filter) == null ? void 0 : _a3.call(m, r)) != null ? _b2 : true) && ((_d = (_c = opts.filter) == null ? void 0 : _c.call(opts, r)) != null ? _d : true);
      }
    } : m)
  });
}
function sortMigrations(migrations) {
  const byId = new Map(migrations.map((m) => [m.id, m]));
  const isProcessing = /* @__PURE__ */ new Set();
  const result = [];
  function process2(m) {
    assert(!isProcessing.has(m.id), `Circular dependency in migrations: ${m.id}`);
    isProcessing.add(m.id);
    const { version: version2, sequenceId } = parseMigrationId(m.id);
    const parent = byId.get(`${sequenceId}/${version2 - 1}`);
    if (parent) {
      process2(parent);
    }
    if (m.dependsOn) {
      for (const dep of m.dependsOn) {
        const depMigration = byId.get(dep);
        if (depMigration) {
          process2(depMigration);
        }
      }
    }
    byId.delete(m.id);
    result.push(m);
  }
  for (const m of byId.values()) {
    process2(m);
  }
  return result;
}
function parseMigrationId(id) {
  const [sequenceId, version2] = id.split("/");
  return { sequenceId, version: parseInt(version2) };
}
function validateMigrationId(id, expectedSequenceId) {
  if (expectedSequenceId) {
    assert(id.startsWith(expectedSequenceId + "/"), `Every migration in sequence '${expectedSequenceId}' must have an id starting with '${expectedSequenceId}/'. Got invalid id: '${id}'`);
  }
  assert(id.match(/^(.*?)\/(0|[1-9]\d*)$/), `Invalid migration id: '${id}'`);
}
function validateMigrations(migrations) {
  assert(!migrations.sequenceId.includes("/"), `sequenceId cannot contain a '/', got ${migrations.sequenceId}`);
  assert(migrations.sequenceId.length, "sequenceId must be a non-empty string");
  if (migrations.sequence.length === 0) {
    return;
  }
  validateMigrationId(migrations.sequence[0].id, migrations.sequenceId);
  let n = parseMigrationId(migrations.sequence[0].id).version;
  assert(n === 1, `Expected the first migrationId to be '${migrations.sequenceId}/1' but got '${migrations.sequence[0].id}'`);
  for (let i = 1; i < migrations.sequence.length; i++) {
    const id = migrations.sequence[i].id;
    validateMigrationId(id, migrations.sequenceId);
    const m = parseMigrationId(id).version;
    assert(m === n + 1, `Migration id numbers must increase in increments of 1, expected ${migrations.sequenceId}/${n + 1} but got '${migrations.sequence[i].id}'`);
    n = m;
  }
}
var MigrationFailureReason = /* @__PURE__ */ ((MigrationFailureReason2) => {
  MigrationFailureReason2["IncompatibleSubtype"] = "incompatible-subtype";
  MigrationFailureReason2["UnknownType"] = "unknown-type";
  MigrationFailureReason2["TargetVersionTooNew"] = "target-version-too-new";
  MigrationFailureReason2["TargetVersionTooOld"] = "target-version-too-old";
  MigrationFailureReason2["MigrationError"] = "migration-error";
  MigrationFailureReason2["UnrecognizedSubtype"] = "unrecognized-subtype";
  return MigrationFailureReason2;
})(MigrationFailureReason || {});

// node_modules/@tldraw/store/dist-esm/lib/StoreSchema.mjs
function upgradeSchema(schema) {
  if (schema.schemaVersion > 2 || schema.schemaVersion < 1)
    return Result.err("Bad schema version");
  if (schema.schemaVersion === 2)
    return Result.ok(schema);
  const result = {
    schemaVersion: 2,
    sequences: {}
  };
  for (const [typeName, recordVersion] of Object.entries(schema.recordVersions)) {
    result.sequences[`com.tldraw.${typeName}`] = recordVersion.version;
    if ("subTypeKey" in recordVersion) {
      for (const [subType, version2] of Object.entries(recordVersion.subTypeVersions)) {
        result.sequences[`com.tldraw.${typeName}.${subType}`] = version2;
      }
    }
  }
  return Result.ok(result);
}
var StoreSchema = class {
  constructor(types, options) {
    __publicField(this, "migrations", {});
    __publicField(this, "sortedMigrations");
    var _a2, _b2;
    this.types = types;
    this.options = options;
    for (const m of (_a2 = options.migrations) != null ? _a2 : []) {
      assert(!this.migrations[m.sequenceId], `Duplicate migration sequenceId ${m.sequenceId}`);
      validateMigrations(m);
      this.migrations[m.sequenceId] = m;
    }
    const allMigrations = Object.values(this.migrations).flatMap((m) => m.sequence);
    this.sortedMigrations = sortMigrations(allMigrations);
    for (const migration of this.sortedMigrations) {
      if (!((_b2 = migration.dependsOn) == null ? void 0 : _b2.length))
        continue;
      for (const dep of migration.dependsOn) {
        const depMigration = allMigrations.find((m) => m.id === dep);
        assert(depMigration, `Migration '${migration.id}' depends on missing migration '${dep}'`);
      }
    }
  }
  static create(types, options) {
    return new StoreSchema(types, options != null ? options : {});
  }
  validateRecord(store2, record, phase, recordBefore) {
    try {
      const recordType = getOwnProperty(this.types, record.typeName);
      if (!recordType) {
        throw new Error(`Missing definition for record type ${record.typeName}`);
      }
      return recordType.validate(record, recordBefore != null ? recordBefore : void 0);
    } catch (error) {
      if (this.options.onValidationFailure) {
        return this.options.onValidationFailure({
          store: store2,
          record,
          phase,
          recordBefore,
          error
        });
      } else {
        throw error;
      }
    }
  }
  getMigrationsSince(persistedSchema) {
    const upgradeResult = upgradeSchema(persistedSchema);
    if (!upgradeResult.ok) {
      return upgradeResult;
    }
    const schema = upgradeResult.value;
    const sequenceIdsToInclude = new Set(Object.keys(schema.sequences).filter((sequenceId) => this.migrations[sequenceId]));
    for (const sequenceId in this.migrations) {
      if (schema.sequences[sequenceId] === void 0 && this.migrations[sequenceId].retroactive) {
        sequenceIdsToInclude.add(sequenceId);
      }
    }
    if (sequenceIdsToInclude.size === 0) {
      return Result.ok([]);
    }
    const allMigrationsToInclude = /* @__PURE__ */ new Set();
    for (const sequenceId of sequenceIdsToInclude) {
      const theirVersion = schema.sequences[sequenceId];
      if (typeof theirVersion !== "number" && this.migrations[sequenceId].retroactive || theirVersion === 0) {
        for (const migration of this.migrations[sequenceId].sequence) {
          allMigrationsToInclude.add(migration.id);
        }
        continue;
      }
      const theirVersionId = `${sequenceId}/${theirVersion}`;
      const idx = this.migrations[sequenceId].sequence.findIndex((m) => m.id === theirVersionId);
      if (idx === -1) {
        return Result.err("Incompatible schema?");
      }
      for (const migration of this.migrations[sequenceId].sequence.slice(idx + 1)) {
        allMigrationsToInclude.add(migration.id);
      }
    }
    return Result.ok(this.sortedMigrations.filter(({ id }) => allMigrationsToInclude.has(id)));
  }
  migratePersistedRecord(record, persistedSchema, direction = "up") {
    const migrations = this.getMigrationsSince(persistedSchema);
    if (!migrations.ok) {
      console.error("Error migrating record", migrations.error);
      return { type: "error", reason: MigrationFailureReason.MigrationError };
    }
    let migrationsToApply = migrations.value;
    if (migrationsToApply.length === 0) {
      return { type: "success", value: record };
    }
    if (migrationsToApply.some((m) => m.scope === "store")) {
      return {
        type: "error",
        reason: direction === "down" ? MigrationFailureReason.TargetVersionTooOld : MigrationFailureReason.TargetVersionTooNew
      };
    }
    if (direction === "down") {
      if (!migrationsToApply.every((m) => m.down)) {
        return {
          type: "error",
          reason: MigrationFailureReason.TargetVersionTooOld
        };
      }
      migrationsToApply = migrationsToApply.slice().reverse();
    }
    record = structuredClone(record);
    try {
      for (const migration of migrationsToApply) {
        if (migration.scope === "store")
          throw new Error();
        const shouldApply = migration.filter ? migration.filter(record) : true;
        if (!shouldApply)
          continue;
        const result = migration[direction](record);
        if (result) {
          record = structuredClone(result);
        }
      }
    } catch (e) {
      console.error("Error migrating record", e);
      return { type: "error", reason: MigrationFailureReason.MigrationError };
    }
    return { type: "success", value: record };
  }
  migrateStoreSnapshot(snapshot) {
    let { store: store2 } = snapshot;
    const migrations = this.getMigrationsSince(snapshot.schema);
    if (!migrations.ok) {
      console.error("Error migrating store", migrations.error);
      return { type: "error", reason: MigrationFailureReason.MigrationError };
    }
    const migrationsToApply = migrations.value;
    if (migrationsToApply.length === 0) {
      return { type: "success", value: store2 };
    }
    store2 = structuredClone(store2);
    try {
      for (const migration of migrationsToApply) {
        if (migration.scope === "record") {
          for (const [id, record] of Object.entries(store2)) {
            const shouldApply = migration.filter ? migration.filter(record) : true;
            if (!shouldApply)
              continue;
            const result = migration.up(record);
            if (result) {
              store2[id] = structuredClone(result);
            }
          }
        } else if (migration.scope === "store") {
          const result = migration.up(store2);
          if (result) {
            store2 = structuredClone(result);
          }
        } else {
          exhaustiveSwitchError(migration);
        }
      }
    } catch (e) {
      console.error("Error migrating store", e);
      return { type: "error", reason: MigrationFailureReason.MigrationError };
    }
    return { type: "success", value: store2 };
  }
  createIntegrityChecker(store2) {
    var _a2, _b2, _c;
    return (_c = (_b2 = (_a2 = this.options).createIntegrityChecker) == null ? void 0 : _b2.call(_a2, store2)) != null ? _c : void 0;
  }
  serialize() {
    return {
      schemaVersion: 2,
      sequences: Object.fromEntries(Object.values(this.migrations).map(({ sequenceId, sequence }) => [
        sequenceId,
        sequence.length ? parseMigrationId(sequence.at(-1).id).version : 0
      ]))
    };
  }
  serializeEarliestVersion() {
    return {
      schemaVersion: 2,
      sequences: Object.fromEntries(Object.values(this.migrations).map(({ sequenceId }) => [sequenceId, 0]))
    };
  }
};

// node_modules/@tldraw/validate/dist-esm/lib/validation.mjs
var validation_exports = {};
__export(validation_exports, {
  ArrayOfValidator: () => ArrayOfValidator,
  DictValidator: () => DictValidator,
  ObjectValidator: () => ObjectValidator,
  UnionValidator: () => UnionValidator,
  ValidationError: () => ValidationError,
  Validator: () => Validator,
  any: () => any,
  array: () => array,
  arrayOf: () => arrayOf,
  bigint: () => bigint,
  boolean: () => boolean,
  dict: () => dict,
  indexKey: () => indexKey,
  integer: () => integer,
  jsonDict: () => jsonDict,
  jsonValue: () => jsonValue,
  linkUrl: () => linkUrl,
  literal: () => literal,
  literalEnum: () => literalEnum,
  model: () => model,
  nonZeroInteger: () => nonZeroInteger,
  nonZeroNumber: () => nonZeroNumber,
  nullable: () => nullable,
  number: () => number,
  numberUnion: () => numberUnion,
  object: () => object,
  optional: () => optional,
  positiveInteger: () => positiveInteger,
  positiveNumber: () => positiveNumber,
  setEnum: () => setEnum,
  srcUrl: () => srcUrl,
  string: () => string,
  union: () => union,
  unknown: () => unknown,
  unknownObject: () => unknownObject
});
function formatPath(path) {
  if (!path.length) {
    return null;
  }
  let formattedPath = "";
  for (const item of path) {
    if (typeof item === "number") {
      formattedPath += `.${item}`;
    } else if (item.startsWith("(")) {
      if (formattedPath.endsWith(")")) {
        formattedPath = `${formattedPath.slice(0, -1)}, ${item.slice(1)}`;
      } else {
        formattedPath += item;
      }
    } else {
      formattedPath += `.${item}`;
    }
  }
  formattedPath = formattedPath.replace(/id = [^,]+, /, "").replace(/id = [^)]+/, "");
  if (formattedPath.startsWith(".")) {
    return formattedPath.slice(1);
  }
  return formattedPath;
}
var ValidationError = class extends Error {
  constructor(rawMessage, path = []) {
    const formattedPath = formatPath(path);
    const indentedMessage = rawMessage.split("\n").map((line, i) => i === 0 ? line : `  ${line}`).join("\n");
    super(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage);
    __publicField(this, "name", "ValidationError");
    this.rawMessage = rawMessage;
    this.path = path;
  }
};
function prefixError(path, fn) {
  try {
    return fn();
  } catch (err) {
    if (err instanceof ValidationError) {
      throw new ValidationError(err.rawMessage, [path, ...err.path]);
    }
    throw new ValidationError(err.toString(), [path]);
  }
}
function typeToString(value) {
  if (value === null)
    return "null";
  if (Array.isArray(value))
    return "an array";
  const type = typeof value;
  switch (type) {
    case "bigint":
    case "boolean":
    case "function":
    case "number":
    case "string":
    case "symbol":
      return `a ${type}`;
    case "object":
      return `an ${type}`;
    case "undefined":
      return "undefined";
    default:
      exhaustiveSwitchError(type);
  }
}
var Validator = class {
  constructor(validationFn, validateUsingKnownGoodVersionFn) {
    this.validationFn = validationFn;
    this.validateUsingKnownGoodVersionFn = validateUsingKnownGoodVersionFn;
  }
  validate(value) {
    const validated = this.validationFn(value);
    if (!Object.is(value, validated)) {
      throw new ValidationError("Validator functions must return the same value they were passed");
    }
    return validated;
  }
  validateUsingKnownGoodVersion(knownGoodValue, newValue) {
    if (Object.is(knownGoodValue, newValue)) {
      return knownGoodValue;
    }
    if (this.validateUsingKnownGoodVersionFn) {
      return this.validateUsingKnownGoodVersionFn(knownGoodValue, newValue);
    }
    return this.validate(newValue);
  }
  isValid(value) {
    try {
      this.validate(value);
      return true;
    } catch (e) {
      return false;
    }
  }
  nullable() {
    return nullable(this);
  }
  optional() {
    return optional(this);
  }
  refine(otherValidationFn) {
    return new Validator((value) => {
      return otherValidationFn(this.validate(value));
    }, (knownGoodValue, newValue) => {
      const validated = this.validateUsingKnownGoodVersion(knownGoodValue, newValue);
      if (Object.is(knownGoodValue, validated)) {
        return knownGoodValue;
      }
      return otherValidationFn(validated);
    });
  }
  check(nameOrCheckFn, checkFn) {
    if (typeof nameOrCheckFn === "string") {
      return this.refine((value) => {
        prefixError(`(check ${nameOrCheckFn})`, () => checkFn(value));
        return value;
      });
    } else {
      return this.refine((value) => {
        nameOrCheckFn(value);
        return value;
      });
    }
  }
};
var ArrayOfValidator = class extends Validator {
  constructor(itemValidator) {
    super((value) => {
      const arr = array.validate(value);
      for (let i = 0; i < arr.length; i++) {
        prefixError(i, () => itemValidator.validate(arr[i]));
      }
      return arr;
    }, (knownGoodValue, newValue) => {
      if (!itemValidator.validateUsingKnownGoodVersion)
        return this.validate(newValue);
      const arr = array.validate(newValue);
      let isDifferent = knownGoodValue.length !== arr.length;
      for (let i = 0; i < arr.length; i++) {
        const item = arr[i];
        if (i >= knownGoodValue.length) {
          isDifferent = true;
          prefixError(i, () => itemValidator.validate(item));
          continue;
        }
        if (Object.is(knownGoodValue[i], item)) {
          continue;
        }
        const checkedItem = prefixError(i, () => itemValidator.validateUsingKnownGoodVersion(knownGoodValue[i], item));
        if (!Object.is(checkedItem, knownGoodValue[i])) {
          isDifferent = true;
        }
      }
      return isDifferent ? newValue : knownGoodValue;
    });
    this.itemValidator = itemValidator;
  }
  nonEmpty() {
    return this.check((value) => {
      if (value.length === 0) {
        throw new ValidationError("Expected a non-empty array");
      }
    });
  }
  lengthGreaterThan1() {
    return this.check((value) => {
      if (value.length <= 1) {
        throw new ValidationError("Expected an array with length greater than 1");
      }
    });
  }
};
var ObjectValidator = class extends Validator {
  constructor(config, shouldAllowUnknownProperties = false) {
    super((object2) => {
      if (typeof object2 !== "object" || object2 === null) {
        throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
      }
      for (const [key, validator] of Object.entries(config)) {
        prefixError(key, () => {
          ;
          validator.validate(getOwnProperty(object2, key));
        });
      }
      if (!shouldAllowUnknownProperties) {
        for (const key of Object.keys(object2)) {
          if (!hasOwnProperty(config, key)) {
            throw new ValidationError(`Unexpected property`, [key]);
          }
        }
      }
      return object2;
    }, (knownGoodValue, newValue) => {
      if (typeof newValue !== "object" || newValue === null) {
        throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
      }
      let isDifferent = false;
      for (const [key, validator] of Object.entries(config)) {
        const prev = getOwnProperty(knownGoodValue, key);
        const next = getOwnProperty(newValue, key);
        if (Object.is(prev, next)) {
          continue;
        }
        const checked = prefixError(key, () => {
          const validatable = validator;
          if (validatable.validateUsingKnownGoodVersion) {
            return validatable.validateUsingKnownGoodVersion(prev, next);
          } else {
            return validatable.validate(next);
          }
        });
        if (!Object.is(checked, prev)) {
          isDifferent = true;
        }
      }
      if (!shouldAllowUnknownProperties) {
        for (const key of Object.keys(newValue)) {
          if (!hasOwnProperty(config, key)) {
            throw new ValidationError(`Unexpected property`, [key]);
          }
        }
      }
      for (const key of Object.keys(knownGoodValue)) {
        if (!hasOwnProperty(newValue, key)) {
          isDifferent = true;
          break;
        }
      }
      return isDifferent ? newValue : knownGoodValue;
    });
    this.config = config;
    this.shouldAllowUnknownProperties = shouldAllowUnknownProperties;
  }
  allowUnknownProperties() {
    return new ObjectValidator(this.config, true);
  }
  extend(extension) {
    return new ObjectValidator({ ...this.config, ...extension });
  }
};
var UnionValidator = class extends Validator {
  constructor(key, config, unknownValueValidation, useNumberKeys) {
    super((input) => {
      this.expectObject(input);
      const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(input);
      if (matchingSchema === void 0) {
        return this.unknownValueValidation(input, variant);
      }
      return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input));
    }, (prevValue, newValue) => {
      this.expectObject(newValue);
      this.expectObject(prevValue);
      const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(newValue);
      if (matchingSchema === void 0) {
        return this.unknownValueValidation(newValue, variant);
      }
      if (getOwnProperty(prevValue, key) !== getOwnProperty(newValue, key)) {
        return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(newValue));
      }
      return prefixError(`(${key} = ${variant})`, () => {
        if (matchingSchema.validateUsingKnownGoodVersion) {
          return matchingSchema.validateUsingKnownGoodVersion(prevValue, newValue);
        } else {
          return matchingSchema.validate(newValue);
        }
      });
    });
    this.key = key;
    this.config = config;
    this.unknownValueValidation = unknownValueValidation;
    this.useNumberKeys = useNumberKeys;
  }
  expectObject(value) {
    if (typeof value !== "object" || value === null) {
      throw new ValidationError(`Expected an object, got ${typeToString(value)}`, []);
    }
  }
  getMatchingSchemaAndVariant(object2) {
    const variant = getOwnProperty(object2, this.key);
    if (!this.useNumberKeys && typeof variant !== "string") {
      throw new ValidationError(`Expected a string for key "${this.key}", got ${typeToString(variant)}`);
    } else if (this.useNumberKeys && !Number.isFinite(Number(variant))) {
      throw new ValidationError(`Expected a number for key "${this.key}", got "${variant}"`);
    }
    const matchingSchema = hasOwnProperty(this.config, variant) ? this.config[variant] : void 0;
    return { matchingSchema, variant };
  }
  validateUnknownVariants(unknownValueValidation) {
    return new UnionValidator(this.key, this.config, unknownValueValidation, this.useNumberKeys);
  }
};
var DictValidator = class extends Validator {
  constructor(keyValidator, valueValidator) {
    super((object2) => {
      if (typeof object2 !== "object" || object2 === null) {
        throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
      }
      for (const [key, value] of Object.entries(object2)) {
        prefixError(key, () => {
          keyValidator.validate(key);
          valueValidator.validate(value);
        });
      }
      return object2;
    }, (knownGoodValue, newValue) => {
      if (typeof newValue !== "object" || newValue === null) {
        throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
      }
      let isDifferent = false;
      for (const [key, value] of Object.entries(newValue)) {
        if (!hasOwnProperty(knownGoodValue, key)) {
          isDifferent = true;
          prefixError(key, () => {
            keyValidator.validate(key);
            valueValidator.validate(value);
          });
          continue;
        }
        const prev = getOwnProperty(knownGoodValue, key);
        const next = value;
        if (Object.is(prev, next)) {
          continue;
        }
        const checked = prefixError(key, () => {
          if (valueValidator.validateUsingKnownGoodVersion) {
            return valueValidator.validateUsingKnownGoodVersion(prev, next);
          } else {
            return valueValidator.validate(next);
          }
        });
        if (!Object.is(checked, prev)) {
          isDifferent = true;
        }
      }
      for (const key of Object.keys(knownGoodValue)) {
        if (!hasOwnProperty(newValue, key)) {
          isDifferent = true;
          break;
        }
      }
      return isDifferent ? newValue : knownGoodValue;
    });
    this.keyValidator = keyValidator;
    this.valueValidator = valueValidator;
  }
};
function typeofValidator(type) {
  return new Validator((value) => {
    if (typeof value !== type) {
      throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`);
    }
    return value;
  });
}
var unknown = new Validator((value) => value);
var any = new Validator((value) => value);
var string = typeofValidator("string");
var number = typeofValidator("number").check((number2) => {
  if (Number.isNaN(number2)) {
    throw new ValidationError("Expected a number, got NaN");
  }
  if (!Number.isFinite(number2)) {
    throw new ValidationError(`Expected a finite number, got ${number2}`);
  }
});
var positiveNumber = number.check((value) => {
  if (value < 0)
    throw new ValidationError(`Expected a positive number, got ${value}`);
});
var nonZeroNumber = number.check((value) => {
  if (value <= 0)
    throw new ValidationError(`Expected a non-zero positive number, got ${value}`);
});
var integer = number.check((value) => {
  if (!Number.isInteger(value))
    throw new ValidationError(`Expected an integer, got ${value}`);
});
var positiveInteger = integer.check((value) => {
  if (value < 0)
    throw new ValidationError(`Expected a positive integer, got ${value}`);
});
var nonZeroInteger = integer.check((value) => {
  if (value <= 0)
    throw new ValidationError(`Expected a non-zero positive integer, got ${value}`);
});
var boolean = typeofValidator("boolean");
var bigint = typeofValidator("bigint");
function literal(expectedValue) {
  return new Validator((actualValue) => {
    if (actualValue !== expectedValue) {
      throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`);
    }
    return expectedValue;
  });
}
var array = new Validator((value) => {
  if (!Array.isArray(value)) {
    throw new ValidationError(`Expected an array, got ${typeToString(value)}`);
  }
  return value;
});
function arrayOf(itemValidator) {
  return new ArrayOfValidator(itemValidator);
}
var unknownObject = new Validator((value) => {
  if (typeof value !== "object" || value === null) {
    throw new ValidationError(`Expected object, got ${typeToString(value)}`);
  }
  return value;
});
function object(config) {
  return new ObjectValidator(config);
}
function isPlainObject(value) {
  return typeof value === "object" && value !== null && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null || Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE);
}
function isValidJson(value) {
  if (value === null || typeof value === "number" || typeof value === "string" || typeof value === "boolean") {
    return true;
  }
  if (Array.isArray(value)) {
    return value.every(isValidJson);
  }
  if (isPlainObject(value)) {
    return Object.values(value).every(isValidJson);
  }
  return false;
}
var jsonValue = new Validator((value) => {
  if (isValidJson(value)) {
    return value;
  }
  throw new ValidationError(`Expected json serializable value, got ${typeof value}`);
}, (knownGoodValue, newValue) => {
  if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
    let isDifferent = knownGoodValue.length !== newValue.length;
    for (let i = 0; i < newValue.length; i++) {
      if (i >= knownGoodValue.length) {
        isDifferent = true;
        jsonValue.validate(newValue[i]);
        continue;
      }
      const prev = knownGoodValue[i];
      const next = newValue[i];
      if (Object.is(prev, next)) {
        continue;
      }
      const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
      if (!Object.is(checked, prev)) {
        isDifferent = true;
      }
    }
    return isDifferent ? newValue : knownGoodValue;
  } else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
    let isDifferent = false;
    for (const key of Object.keys(newValue)) {
      if (!hasOwnProperty(knownGoodValue, key)) {
        isDifferent = true;
        jsonValue.validate(newValue[key]);
        continue;
      }
      const prev = knownGoodValue[key];
      const next = newValue[key];
      if (Object.is(prev, next)) {
        continue;
      }
      const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
      if (!Object.is(checked, prev)) {
        isDifferent = true;
      }
    }
    for (const key of Object.keys(knownGoodValue)) {
      if (!hasOwnProperty(newValue, key)) {
        isDifferent = true;
        break;
      }
    }
    return isDifferent ? newValue : knownGoodValue;
  } else {
    return jsonValue.validate(newValue);
  }
});
function jsonDict() {
  return dict(string, jsonValue);
}
function dict(keyValidator, valueValidator) {
  return new DictValidator(keyValidator, valueValidator);
}
function union(key, config) {
  return new UnionValidator(key, config, (unknownValue, unknownVariant) => {
    throw new ValidationError(`Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`, [key]);
  }, false);
}
function numberUnion(key, config) {
  return new UnionValidator(key, config, (unknownValue, unknownVariant) => {
    throw new ValidationError(`Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`, [key]);
  }, true);
}
function model(name, validator) {
  return new Validator((value) => {
    return prefixError(name, () => validator.validate(value));
  }, (prevValue, newValue) => {
    return prefixError(name, () => {
      if (validator.validateUsingKnownGoodVersion) {
        return validator.validateUsingKnownGoodVersion(prevValue, newValue);
      } else {
        return validator.validate(newValue);
      }
    });
  });
}
function setEnum(values) {
  return new Validator((value) => {
    if (!values.has(value)) {
      const valuesString = Array.from(values, (value2) => JSON.stringify(value2)).join(" or ");
      throw new ValidationError(`Expected ${valuesString}, got ${value}`);
    }
    return value;
  });
}
function optional(validator) {
  return new Validator((value) => {
    if (value === void 0)
      return void 0;
    return validator.validate(value);
  }, (knownGoodValue, newValue) => {
    if (knownGoodValue === void 0 && newValue === void 0)
      return void 0;
    if (newValue === void 0)
      return void 0;
    if (validator.validateUsingKnownGoodVersion && knownGoodValue !== void 0) {
      return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
    }
    return validator.validate(newValue);
  });
}
function nullable(validator) {
  return new Validator((value) => {
    if (value === null)
      return null;
    return validator.validate(value);
  }, (knownGoodValue, newValue) => {
    if (newValue === null)
      return null;
    if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
      return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
    }
    return validator.validate(newValue);
  });
}
function literalEnum(...values) {
  return setEnum(new Set(values));
}
function parseUrl(str) {
  try {
    return new URL(str);
  } catch (error) {
    if (str.startsWith("/") || str.startsWith("./")) {
      try {
        return new URL(str, "http://example.com");
      } catch (error2) {
        throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
      }
    }
    throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
  }
}
var validLinkProtocols = /* @__PURE__ */ new Set(["http:", "https:", "mailto:"]);
var linkUrl = string.check((value) => {
  if (value === "")
    return;
  const url = parseUrl(value);
  if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
    throw new ValidationError(`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`);
  }
});
var validSrcProtocols = /* @__PURE__ */ new Set(["http:", "https:", "data:"]);
var srcUrl = string.check((value) => {
  if (value === "")
    return;
  const url = parseUrl(value);
  if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
    throw new ValidationError(`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`);
  }
});
var indexKey = string.refine((key) => {
  try {
    validateIndexKey(key);
    return key;
  } catch (e) {
    throw new ValidationError(`Expected an index key, got ${JSON.stringify(key)}`);
  }
});

// node_modules/@tldraw/tlschema/dist-esm/misc/id-validator.mjs
function idValidator(prefix) {
  return validation_exports.string.refine((id) => {
    if (!id.startsWith(`${prefix}:`)) {
      throw new Error(`${prefix} ID must start with "${prefix}:"`);
    }
    return id;
  });
}

// node_modules/@tldraw/tlschema/dist-esm/assets/TLBaseAsset.mjs
var assetIdValidator = idValidator("asset");
function createAssetValidator(type, props) {
  return validation_exports.object({
    id: assetIdValidator,
    typeName: validation_exports.literal("asset"),
    type: validation_exports.literal(type),
    props,
    meta: validation_exports.jsonValue
  });
}

// node_modules/@tldraw/tlschema/dist-esm/records/TLCamera.mjs
var cameraValidator = validation_exports.model("camera", validation_exports.object({
  typeName: validation_exports.literal("camera"),
  id: idValidator("camera"),
  x: validation_exports.number,
  y: validation_exports.number,
  z: validation_exports.number,
  meta: validation_exports.jsonValue
}));
var cameraVersions = createMigrationIds("com.tldraw.camera", {
  AddMeta: 1
});
var cameraMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.camera",
  recordType: "camera",
  sequence: [
    {
      id: cameraVersions.AddMeta,
      up: (record) => {
        ;
        record.meta = {};
      }
    }
  ]
});
var CameraRecordType = createRecordType("camera", {
  validator: cameraValidator,
  scope: "session"
}).withDefaultProperties(() => ({
  x: 0,
  y: 0,
  z: 1,
  meta: {}
}));

// node_modules/@tldraw/tlschema/dist-esm/misc/geometry-types.mjs
var vecModelValidator = validation_exports.object({
  x: validation_exports.number,
  y: validation_exports.number,
  z: validation_exports.number.optional()
});
var boxModelValidator = validation_exports.object({
  x: validation_exports.number,
  y: validation_exports.number,
  w: validation_exports.number,
  h: validation_exports.number
});

// node_modules/@tldraw/tlschema/dist-esm/misc/TLCursor.mjs
var TL_CURSOR_TYPES = /* @__PURE__ */ new Set([
  "none",
  "default",
  "pointer",
  "cross",
  "grab",
  "rotate",
  "grabbing",
  "resize-edge",
  "resize-corner",
  "text",
  "move",
  "ew-resize",
  "ns-resize",
  "nesw-resize",
  "nwse-resize",
  "nesw-rotate",
  "nwse-rotate",
  "swne-rotate",
  "senw-rotate",
  "zoom-in",
  "zoom-out"
]);
var cursorTypeValidator = validation_exports.setEnum(TL_CURSOR_TYPES);
var cursorValidator = validation_exports.object({
  type: cursorTypeValidator,
  rotation: validation_exports.number
});

// node_modules/@tldraw/tlschema/dist-esm/misc/TLOpacity.mjs
var opacityValidator = validation_exports.number.check((n) => {
  if (n < 0 || n > 1) {
    throw new validation_exports.ValidationError("Opacity must be between 0 and 1");
  }
});

// node_modules/@tldraw/tlschema/dist-esm/misc/TLColor.mjs
var TL_CANVAS_UI_COLOR_TYPES = /* @__PURE__ */ new Set([
  "accent",
  "white",
  "black",
  "selection-stroke",
  "selection-fill",
  "laser",
  "muted-1"
]);
var canvasUiColorTypeValidator = validation_exports.setEnum(TL_CANVAS_UI_COLOR_TYPES);

// node_modules/@tldraw/tlschema/dist-esm/misc/TLScribble.mjs
var TL_SCRIBBLE_STATES = /* @__PURE__ */ new Set(["starting", "paused", "active", "stopping"]);
var scribbleValidator = validation_exports.object({
  id: validation_exports.string,
  points: validation_exports.arrayOf(vecModelValidator),
  size: validation_exports.positiveNumber,
  color: canvasUiColorTypeValidator,
  opacity: validation_exports.number,
  state: validation_exports.setEnum(TL_SCRIBBLE_STATES),
  delay: validation_exports.number,
  shrink: validation_exports.number,
  taper: validation_exports.boolean
});

// node_modules/@tldraw/tlschema/dist-esm/records/TLPage.mjs
var pageIdValidator = idValidator("page");
var pageValidator = validation_exports.model("page", validation_exports.object({
  typeName: validation_exports.literal("page"),
  id: pageIdValidator,
  name: validation_exports.string,
  index: validation_exports.indexKey,
  meta: validation_exports.jsonValue
}));
var pageVersions = createMigrationIds("com.tldraw.page", {
  AddMeta: 1
});
var pageMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.page",
  recordType: "page",
  sequence: [
    {
      id: pageVersions.AddMeta,
      up: (record) => {
        record.meta = {};
      }
    }
  ]
});
var PageRecordType = createRecordType("page", {
  validator: pageValidator,
  scope: "document"
}).withDefaultProperties(() => ({
  meta: {}
}));
function isPageId(id) {
  return PageRecordType.isId(id);
}

// node_modules/@tldraw/tlschema/dist-esm/records/TLInstance.mjs
var instanceIdValidator = idValidator("instance");
function createInstanceRecordType(stylesById) {
  const stylesForNextShapeValidators = {};
  for (const [id, style] of stylesById) {
    stylesForNextShapeValidators[id] = validation_exports.optional(style);
  }
  const instanceTypeValidator = validation_exports.model("instance", validation_exports.object({
    typeName: validation_exports.literal("instance"),
    id: idValidator("instance"),
    currentPageId: pageIdValidator,
    followingUserId: validation_exports.string.nullable(),
    brush: boxModelValidator.nullable(),
    opacityForNextShape: opacityValidator,
    stylesForNextShape: validation_exports.object(stylesForNextShapeValidators),
    cursor: cursorValidator,
    scribbles: validation_exports.arrayOf(scribbleValidator),
    isFocusMode: validation_exports.boolean,
    isDebugMode: validation_exports.boolean,
    isToolLocked: validation_exports.boolean,
    exportBackground: validation_exports.boolean,
    screenBounds: boxModelValidator,
    insets: validation_exports.arrayOf(validation_exports.boolean),
    zoomBrush: boxModelValidator.nullable(),
    isPenMode: validation_exports.boolean,
    isGridMode: validation_exports.boolean,
    chatMessage: validation_exports.string,
    isChatting: validation_exports.boolean,
    highlightedUserIds: validation_exports.arrayOf(validation_exports.string),
    canMoveCamera: validation_exports.boolean,
    isFocused: validation_exports.boolean,
    devicePixelRatio: validation_exports.number,
    isCoarsePointer: validation_exports.boolean,
    isHoveringCanvas: validation_exports.boolean.nullable(),
    openMenus: validation_exports.arrayOf(validation_exports.string),
    isChangingStyle: validation_exports.boolean,
    isReadonly: validation_exports.boolean,
    meta: validation_exports.jsonValue,
    duplicateProps: validation_exports.object({
      shapeIds: validation_exports.arrayOf(idValidator("shape")),
      offset: validation_exports.object({
        x: validation_exports.number,
        y: validation_exports.number
      })
    }).nullable()
  }));
  return createRecordType("instance", {
    validator: instanceTypeValidator,
    scope: "session"
  }).withDefaultProperties(() => ({
    followingUserId: null,
    opacityForNextShape: 1,
    stylesForNextShape: {},
    brush: null,
    scribbles: [],
    cursor: {
      type: "default",
      rotation: 0
    },
    isFocusMode: false,
    exportBackground: false,
    isDebugMode: true,
    isToolLocked: false,
    screenBounds: { x: 0, y: 0, w: 1080, h: 720 },
    insets: [false, false, false, false],
    zoomBrush: null,
    isGridMode: false,
    isPenMode: false,
    chatMessage: "",
    isChatting: false,
    highlightedUserIds: [],
    canMoveCamera: true,
    isFocused: false,
    devicePixelRatio: typeof window === "undefined" ? 1 : window.devicePixelRatio,
    isCoarsePointer: false,
    isHoveringCanvas: null,
    openMenus: [],
    isChangingStyle: false,
    isReadonly: false,
    meta: {},
    duplicateProps: null
  }));
}
var instanceVersions = createMigrationIds("com.tldraw.instance", {
  AddTransparentExportBgs: 1,
  RemoveDialog: 2,
  AddToolLockMode: 3,
  RemoveExtraPropsForNextShape: 4,
  AddLabelColor: 5,
  AddFollowingUserId: 6,
  RemoveAlignJustify: 7,
  AddZoom: 8,
  AddVerticalAlign: 9,
  AddScribbleDelay: 10,
  RemoveUserId: 11,
  AddIsPenModeAndIsGridMode: 12,
  HoistOpacity: 13,
  AddChat: 14,
  AddHighlightedUserIds: 15,
  ReplacePropsForNextShapeWithStylesForNextShape: 16,
  AddMeta: 17,
  RemoveCursorColor: 18,
  AddLonelyProperties: 19,
  ReadOnlyReadonly: 20,
  AddHoveringCanvas: 21,
  AddScribbles: 22,
  AddInset: 23,
  AddDuplicateProps: 24
});
var instanceMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.instance",
  recordType: "instance",
  sequence: [
    {
      id: instanceVersions.AddTransparentExportBgs,
      up: (instance) => {
        return { ...instance, exportBackground: true };
      }
    },
    {
      id: instanceVersions.RemoveDialog,
      up: ({ dialog: _, ...instance }) => {
        return instance;
      }
    },
    {
      id: instanceVersions.AddToolLockMode,
      up: (instance) => {
        return { ...instance, isToolLocked: false };
      }
    },
    {
      id: instanceVersions.RemoveExtraPropsForNextShape,
      up: ({ propsForNextShape, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: Object.fromEntries(Object.entries(propsForNextShape).filter(([key]) => [
            "color",
            "labelColor",
            "dash",
            "fill",
            "size",
            "font",
            "align",
            "verticalAlign",
            "icon",
            "geo",
            "arrowheadStart",
            "arrowheadEnd",
            "spline"
          ].includes(key)))
        };
      }
    },
    {
      id: instanceVersions.AddLabelColor,
      up: ({ propsForNextShape, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: {
            ...propsForNextShape,
            labelColor: "black"
          }
        };
      }
    },
    {
      id: instanceVersions.AddFollowingUserId,
      up: (instance) => {
        return { ...instance, followingUserId: null };
      }
    },
    {
      id: instanceVersions.RemoveAlignJustify,
      up: (instance) => {
        let newAlign = instance.propsForNextShape.align;
        if (newAlign === "justify") {
          newAlign = "start";
        }
        return {
          ...instance,
          propsForNextShape: {
            ...instance.propsForNextShape,
            align: newAlign
          }
        };
      }
    },
    {
      id: instanceVersions.AddZoom,
      up: (instance) => {
        return { ...instance, zoomBrush: null };
      }
    },
    {
      id: instanceVersions.AddVerticalAlign,
      up: (instance) => {
        return {
          ...instance,
          propsForNextShape: {
            ...instance.propsForNextShape,
            verticalAlign: "middle"
          }
        };
      }
    },
    {
      id: instanceVersions.AddScribbleDelay,
      up: (instance) => {
        if (instance.scribble !== null) {
          return { ...instance, scribble: { ...instance.scribble, delay: 0 } };
        }
        return { ...instance };
      }
    },
    {
      id: instanceVersions.RemoveUserId,
      up: ({ userId: _, ...instance }) => {
        return instance;
      }
    },
    {
      id: instanceVersions.AddIsPenModeAndIsGridMode,
      up: (instance) => {
        return { ...instance, isPenMode: false, isGridMode: false };
      }
    },
    {
      id: instanceVersions.HoistOpacity,
      up: ({ propsForNextShape: { opacity, ...propsForNextShape }, ...instance }) => {
        return { ...instance, opacityForNextShape: Number(opacity != null ? opacity : "1"), propsForNextShape };
      }
    },
    {
      id: instanceVersions.AddChat,
      up: (instance) => {
        return { ...instance, chatMessage: "", isChatting: false };
      }
    },
    {
      id: instanceVersions.AddHighlightedUserIds,
      up: (instance) => {
        return { ...instance, highlightedUserIds: [] };
      }
    },
    {
      id: instanceVersions.ReplacePropsForNextShapeWithStylesForNextShape,
      up: ({ propsForNextShape: _, ...instance }) => {
        return { ...instance, stylesForNextShape: {} };
      }
    },
    {
      id: instanceVersions.AddMeta,
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      }
    },
    {
      id: instanceVersions.RemoveCursorColor,
      up: (record) => {
        const { color: _, ...cursor } = record.cursor;
        return {
          ...record,
          cursor
        };
      }
    },
    {
      id: instanceVersions.AddLonelyProperties,
      up: (record) => {
        return {
          ...record,
          canMoveCamera: true,
          isFocused: false,
          devicePixelRatio: 1,
          isCoarsePointer: false,
          openMenus: [],
          isChangingStyle: false,
          isReadOnly: false
        };
      }
    },
    {
      id: instanceVersions.ReadOnlyReadonly,
      up: ({ isReadOnly: _isReadOnly, ...record }) => {
        return {
          ...record,
          isReadonly: _isReadOnly
        };
      }
    },
    {
      id: instanceVersions.AddHoveringCanvas,
      up: (record) => {
        return {
          ...record,
          isHoveringCanvas: null
        };
      }
    },
    {
      id: instanceVersions.AddScribbles,
      up: ({ scribble: _, ...record }) => {
        return {
          ...record,
          scribbles: []
        };
      }
    },
    {
      id: instanceVersions.AddInset,
      up: (record) => {
        return {
          ...record,
          insets: [false, false, false, false]
        };
      },
      down: ({ insets: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    {
      id: instanceVersions.AddDuplicateProps,
      up: (record) => {
        return {
          ...record,
          duplicateProps: null
        };
      },
      down: ({ duplicateProps: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  ]
});
var TLINSTANCE_ID = "instance:instance";

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLBaseShape.mjs
var parentIdValidator = validation_exports.string.refine((id) => {
  if (!id.startsWith("page:") && !id.startsWith("shape:")) {
    throw new Error('Parent ID must start with "page:" or "shape:"');
  }
  return id;
});
var shapeIdValidator = idValidator("shape");
function createShapeValidator(type, props, meta) {
  return validation_exports.object({
    id: shapeIdValidator,
    typeName: validation_exports.literal("shape"),
    x: validation_exports.number,
    y: validation_exports.number,
    rotation: validation_exports.number,
    index: validation_exports.indexKey,
    parentId: parentIdValidator,
    type: validation_exports.literal(type),
    isLocked: validation_exports.boolean,
    opacity: opacityValidator,
    props: props ? validation_exports.object(props) : validation_exports.jsonValue,
    meta: meta ? validation_exports.object(meta) : validation_exports.jsonValue
  });
}

// node_modules/@tldraw/tlschema/dist-esm/records/TLPageState.mjs
var instancePageStateValidator = validation_exports.model("instance_page_state", validation_exports.object({
  typeName: validation_exports.literal("instance_page_state"),
  id: idValidator("instance_page_state"),
  pageId: pageIdValidator,
  selectedShapeIds: validation_exports.arrayOf(shapeIdValidator),
  hintingShapeIds: validation_exports.arrayOf(shapeIdValidator),
  erasingShapeIds: validation_exports.arrayOf(shapeIdValidator),
  hoveredShapeId: shapeIdValidator.nullable(),
  editingShapeId: shapeIdValidator.nullable(),
  croppingShapeId: shapeIdValidator.nullable(),
  focusedGroupId: shapeIdValidator.nullable(),
  meta: validation_exports.jsonValue
}));
var instancePageStateVersions = createMigrationIds("com.tldraw.instance_page_state", {
  AddCroppingId: 1,
  RemoveInstanceIdAndCameraId: 2,
  AddMeta: 3,
  RenameProperties: 4,
  RenamePropertiesAgain: 5
});
var instancePageStateMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.instance_page_state",
  recordType: "instance_page_state",
  sequence: [
    {
      id: instancePageStateVersions.AddCroppingId,
      up(instance) {
        instance.croppingShapeId = null;
      }
    },
    {
      id: instancePageStateVersions.RemoveInstanceIdAndCameraId,
      up(instance) {
        delete instance.instanceId;
        delete instance.cameraId;
      }
    },
    {
      id: instancePageStateVersions.AddMeta,
      up: (record) => {
        record.meta = {};
      }
    },
    {
      id: instancePageStateVersions.RenameProperties,
      up: (_record) => {
      },
      down: (_record) => {
      }
    },
    {
      id: instancePageStateVersions.RenamePropertiesAgain,
      up: (record) => {
        var _a2, _b2;
        record.selectedShapeIds = record.selectedIds;
        delete record.selectedIds;
        record.hintingShapeIds = record.hintingIds;
        delete record.hintingIds;
        record.erasingShapeIds = record.erasingIds;
        delete record.erasingIds;
        record.hoveredShapeId = record.hoveredId;
        delete record.hoveredId;
        record.editingShapeId = record.editingId;
        delete record.editingId;
        record.croppingShapeId = (_b2 = (_a2 = record.croppingShapeId) != null ? _a2 : record.croppingId) != null ? _b2 : null;
        delete record.croppingId;
        record.focusedGroupId = record.focusLayerId;
        delete record.focusLayerId;
      },
      down: (record) => {
        record.selectedIds = record.selectedShapeIds;
        delete record.selectedShapeIds;
        record.hintingIds = record.hintingShapeIds;
        delete record.hintingShapeIds;
        record.erasingIds = record.erasingShapeIds;
        delete record.erasingShapeIds;
        record.hoveredId = record.hoveredShapeId;
        delete record.hoveredShapeId;
        record.editingId = record.editingShapeId;
        delete record.editingShapeId;
        record.croppingId = record.croppingShapeId;
        delete record.croppingShapeId;
        record.focusLayerId = record.focusedGroupId;
        delete record.focusedGroupId;
      }
    }
  ]
});
var InstancePageStateRecordType = createRecordType("instance_page_state", {
  validator: instancePageStateValidator,
  scope: "session"
}).withDefaultProperties(() => ({
  editingShapeId: null,
  croppingShapeId: null,
  selectedShapeIds: [],
  hoveredShapeId: null,
  erasingShapeIds: [],
  hintingShapeIds: [],
  focusedGroupId: null,
  meta: {}
}));

// node_modules/@tldraw/tlschema/dist-esm/records/TLPointer.mjs
var pointerValidator = validation_exports.model("pointer", validation_exports.object({
  typeName: validation_exports.literal("pointer"),
  id: idValidator("pointer"),
  x: validation_exports.number,
  y: validation_exports.number,
  lastActivityTimestamp: validation_exports.number,
  meta: validation_exports.jsonValue
}));
var pointerVersions = createMigrationIds("com.tldraw.pointer", {
  AddMeta: 1
});
var pointerMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.pointer",
  recordType: "pointer",
  sequence: [
    {
      id: pointerVersions.AddMeta,
      up: (record) => {
        record.meta = {};
      }
    }
  ]
});
var PointerRecordType = createRecordType("pointer", {
  validator: pointerValidator,
  scope: "session"
}).withDefaultProperties(() => ({
  x: 0,
  y: 0,
  lastActivityTimestamp: 0,
  meta: {}
}));
var TLPOINTER_ID = PointerRecordType.createId("pointer");

// node_modules/@tldraw/tlschema/dist-esm/records/TLPresence.mjs
var instancePresenceValidator = validation_exports.model("instance_presence", validation_exports.object({
  typeName: validation_exports.literal("instance_presence"),
  id: idValidator("instance_presence"),
  userId: validation_exports.string,
  userName: validation_exports.string,
  lastActivityTimestamp: validation_exports.number,
  followingUserId: validation_exports.string.nullable(),
  cursor: validation_exports.object({
    x: validation_exports.number,
    y: validation_exports.number,
    type: cursorTypeValidator,
    rotation: validation_exports.number
  }),
  color: validation_exports.string,
  camera: validation_exports.object({
    x: validation_exports.number,
    y: validation_exports.number,
    z: validation_exports.number
  }),
  screenBounds: boxModelValidator,
  selectedShapeIds: validation_exports.arrayOf(idValidator("shape")),
  currentPageId: idValidator("page"),
  brush: boxModelValidator.nullable(),
  scribbles: validation_exports.arrayOf(scribbleValidator),
  chatMessage: validation_exports.string,
  meta: validation_exports.jsonValue
}));
var instancePresenceVersions = createMigrationIds("com.tldraw.instance_presence", {
  AddScribbleDelay: 1,
  RemoveInstanceId: 2,
  AddChatMessage: 3,
  AddMeta: 4,
  RenameSelectedShapeIds: 5
});
var instancePresenceMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.instance_presence",
  recordType: "instance_presence",
  sequence: [
    {
      id: instancePresenceVersions.AddScribbleDelay,
      up: (instance) => {
        if (instance.scribble !== null) {
          instance.scribble.delay = 0;
        }
      }
    },
    {
      id: instancePresenceVersions.RemoveInstanceId,
      up: (instance) => {
        delete instance.instanceId;
      }
    },
    {
      id: instancePresenceVersions.AddChatMessage,
      up: (instance) => {
        instance.chatMessage = "";
      }
    },
    {
      id: instancePresenceVersions.AddMeta,
      up: (record) => {
        record.meta = {};
      }
    },
    {
      id: instancePresenceVersions.RenameSelectedShapeIds,
      up: (_record) => {
      }
    }
  ]
});
var InstancePresenceRecordType = createRecordType("instance_presence", {
  validator: instancePresenceValidator,
  scope: "presence"
}).withDefaultProperties(() => ({
  lastActivityTimestamp: 0,
  followingUserId: null,
  color: "#FF0000",
  camera: {
    x: 0,
    y: 0,
    z: 1
  },
  cursor: {
    x: 0,
    y: 0,
    type: "default",
    rotation: 0
  },
  screenBounds: {
    x: 0,
    y: 0,
    w: 1,
    h: 1
  },
  selectedShapeIds: [],
  brush: null,
  scribbles: [],
  chatMessage: "",
  meta: {}
}));

// node_modules/@tldraw/tlschema/dist-esm/records/TLDocument.mjs
var documentValidator = validation_exports.model("document", validation_exports.object({
  typeName: validation_exports.literal("document"),
  id: validation_exports.literal("document:document"),
  gridSize: validation_exports.number,
  name: validation_exports.string,
  meta: validation_exports.jsonValue
}));
var documentVersions = createMigrationIds("com.tldraw.document", {
  AddName: 1,
  AddMeta: 2
});
var documentMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.document",
  recordType: "document",
  sequence: [
    {
      id: documentVersions.AddName,
      up: (document2) => {
        ;
        document2.name = "";
      },
      down: (document2) => {
        delete document2.name;
      }
    },
    {
      id: documentVersions.AddMeta,
      up: (record) => {
        ;
        record.meta = {};
      }
    }
  ]
});
var DocumentRecordType = createRecordType("document", {
  validator: documentValidator,
  scope: "document"
}).withDefaultProperties(() => ({
  gridSize: 10,
  name: "",
  meta: {}
}));
var TLDOCUMENT_ID = DocumentRecordType.createId("document");

// node_modules/@tldraw/tlschema/dist-esm/TLStore.mjs
function sortByIndex2(a, b) {
  if (a.index < b.index) {
    return -1;
  } else if (a.index > b.index) {
    return 1;
  }
  return 0;
}
function redactRecordForErrorReporting(record) {
  if (record.typeName === "asset") {
    if ("src" in record) {
      record.src = "<redacted>";
    }
    if ("src" in record.props) {
      record.props.src = "<redacted>";
    }
  }
}
var onValidationFailure = ({ error, phase, record, recordBefore }) => {
  const isExistingValidationIssue = phase === "initialize";
  annotateError(error, {
    tags: {
      origin: "store.validateRecord",
      storePhase: phase,
      isExistingValidationIssue
    },
    extras: {
      recordBefore: recordBefore ? redactRecordForErrorReporting(structuredClone(recordBefore)) : void 0,
      recordAfter: redactRecordForErrorReporting(structuredClone(record))
    }
  });
  throw error;
};
function getDefaultPages() {
  return [
    PageRecordType.create({
      id: "page:page",
      name: "Page 1",
      index: "a1",
      meta: {}
    })
  ];
}
function createIntegrityChecker(store2) {
  const $pageIds = store2.query.ids("page");
  const ensureStoreIsUsable = () => {
    if (!store2.has(TLDOCUMENT_ID)) {
      store2.put([DocumentRecordType.create({ id: TLDOCUMENT_ID, name: store2.props.defaultName })]);
      return ensureStoreIsUsable();
    }
    if (!store2.has(TLPOINTER_ID)) {
      store2.put([PointerRecordType.create({ id: TLPOINTER_ID })]);
      return ensureStoreIsUsable();
    }
    const pageIds = $pageIds.get();
    if (pageIds.size === 0) {
      store2.put(getDefaultPages());
      return ensureStoreIsUsable();
    }
    const getFirstPageId = () => [...pageIds].map((id) => store2.get(id)).sort(sortByIndex2)[0].id;
    const instanceState = store2.get(TLINSTANCE_ID);
    if (!instanceState) {
      store2.put([
        store2.schema.types.instance.create({
          id: TLINSTANCE_ID,
          currentPageId: getFirstPageId(),
          exportBackground: true
        })
      ]);
      return ensureStoreIsUsable();
    } else if (!pageIds.has(instanceState.currentPageId)) {
      store2.put([{ ...instanceState, currentPageId: getFirstPageId() }]);
      return ensureStoreIsUsable();
    }
    const missingPageStateIds = /* @__PURE__ */ new Set();
    const missingCameraIds = /* @__PURE__ */ new Set();
    for (const id of pageIds) {
      const pageStateId = InstancePageStateRecordType.createId(id);
      if (!store2.has(pageStateId)) {
        missingPageStateIds.add(pageStateId);
      }
      const cameraId = CameraRecordType.createId(id);
      if (!store2.has(cameraId)) {
        missingCameraIds.add(cameraId);
      }
    }
    if (missingPageStateIds.size > 0) {
      store2.put([...missingPageStateIds].map((id) => InstancePageStateRecordType.create({
        id,
        pageId: InstancePageStateRecordType.parseId(id)
      })));
    }
    if (missingCameraIds.size > 0) {
      store2.put([...missingCameraIds].map((id) => CameraRecordType.create({ id })));
    }
  };
  return ensureStoreIsUsable;
}

// node_modules/@tldraw/tlschema/dist-esm/assets/TLBookmarkAsset.mjs
var bookmarkAssetValidator = createAssetValidator("bookmark", validation_exports.object({
  title: validation_exports.string,
  description: validation_exports.string,
  image: validation_exports.string,
  src: validation_exports.srcUrl.nullable()
}));
var Versions = createMigrationIds("com.tldraw.asset.bookmark", {
  MakeUrlsValid: 1
});
var bookmarkAssetMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.asset.bookmark",
  recordType: "asset",
  filter: (asset) => asset.type === "bookmark",
  sequence: [
    {
      id: Versions.MakeUrlsValid,
      up: (asset) => {
        if (!validation_exports.srcUrl.isValid(asset.props.src)) {
          asset.props.src = "";
        }
      },
      down: (_asset) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/assets/TLImageAsset.mjs
var imageAssetValidator = createAssetValidator("image", validation_exports.object({
  w: validation_exports.number,
  h: validation_exports.number,
  name: validation_exports.string,
  isAnimated: validation_exports.boolean,
  mimeType: validation_exports.string.nullable(),
  src: validation_exports.srcUrl.nullable()
}));
var Versions2 = createMigrationIds("com.tldraw.asset.image", {
  AddIsAnimated: 1,
  RenameWidthHeight: 2,
  MakeUrlsValid: 3
});
var imageAssetMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.asset.image",
  recordType: "asset",
  filter: (asset) => asset.type === "image",
  sequence: [
    {
      id: Versions2.AddIsAnimated,
      up: (asset) => {
        asset.props.isAnimated = false;
      },
      down: (asset) => {
        delete asset.props.isAnimated;
      }
    },
    {
      id: Versions2.RenameWidthHeight,
      up: (asset) => {
        asset.props.w = asset.props.width;
        asset.props.h = asset.props.height;
        delete asset.props.width;
        delete asset.props.height;
      },
      down: (asset) => {
        asset.props.width = asset.props.w;
        asset.props.height = asset.props.h;
        delete asset.props.w;
        delete asset.props.h;
      }
    },
    {
      id: Versions2.MakeUrlsValid,
      up: (asset) => {
        if (!validation_exports.srcUrl.isValid(asset.props.src)) {
          asset.props.src = "";
        }
      },
      down: (_asset) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/assets/TLVideoAsset.mjs
var videoAssetValidator = createAssetValidator("video", validation_exports.object({
  w: validation_exports.number,
  h: validation_exports.number,
  name: validation_exports.string,
  isAnimated: validation_exports.boolean,
  mimeType: validation_exports.string.nullable(),
  src: validation_exports.srcUrl.nullable()
}));
var Versions3 = createMigrationIds("com.tldraw.asset.video", {
  AddIsAnimated: 1,
  RenameWidthHeight: 2,
  MakeUrlsValid: 3
});
var videoAssetMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.asset.video",
  recordType: "asset",
  filter: (asset) => asset.type === "video",
  sequence: [
    {
      id: Versions3.AddIsAnimated,
      up: (asset) => {
        asset.props.isAnimated = false;
      },
      down: (asset) => {
        delete asset.props.isAnimated;
      }
    },
    {
      id: Versions3.RenameWidthHeight,
      up: (asset) => {
        asset.props.w = asset.props.width;
        asset.props.h = asset.props.height;
        delete asset.props.width;
        delete asset.props.height;
      },
      down: (asset) => {
        asset.props.width = asset.props.w;
        asset.props.height = asset.props.h;
        delete asset.props.w;
        delete asset.props.h;
      }
    },
    {
      id: Versions3.MakeUrlsValid,
      up: (asset) => {
        if (!validation_exports.srcUrl.isValid(asset.props.src)) {
          asset.props.src = "";
        }
      },
      down: (_asset) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/records/TLAsset.mjs
var assetValidator = validation_exports.model("asset", validation_exports.union("type", {
  image: imageAssetValidator,
  video: videoAssetValidator,
  bookmark: bookmarkAssetValidator
}));
var assetVersions = createMigrationIds("com.tldraw.asset", {
  AddMeta: 1
});
var assetMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.asset",
  recordType: "asset",
  sequence: [
    {
      id: assetVersions.AddMeta,
      up: (record) => {
        ;
        record.meta = {};
      }
    }
  ]
});
var AssetRecordType = createRecordType("asset", {
  validator: assetValidator,
  scope: "document"
}).withDefaultProperties(() => ({
  meta: {}
}));

// node_modules/@tldraw/tlschema/node_modules/nanoid/index.browser.js
var nanoid2 = (size4 = 21) => crypto.getRandomValues(new Uint8Array(size4)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/@tldraw/tlschema/dist-esm/styles/StyleProp.mjs
var StyleProp = class {
  constructor(id, defaultValue, type) {
    this.id = id;
    this.defaultValue = defaultValue;
    this.type = type;
  }
  static define(uniqueId2, options) {
    const { defaultValue, type = validation_exports.any } = options;
    return new StyleProp(uniqueId2, defaultValue, type);
  }
  static defineEnum(uniqueId2, options) {
    const { defaultValue, values } = options;
    return new EnumStyleProp(uniqueId2, defaultValue, values);
  }
  validate(value) {
    return this.type.validate(value);
  }
  validateUsingKnownGoodVersion(prevValue, newValue) {
    if (this.type.validateUsingKnownGoodVersion) {
      return this.type.validateUsingKnownGoodVersion(prevValue, newValue);
    } else {
      return this.validate(newValue);
    }
  }
};
var EnumStyleProp = class extends StyleProp {
  constructor(id, defaultValue, values) {
    super(id, defaultValue, validation_exports.literalEnum(...values));
    this.values = values;
  }
};

// node_modules/@tldraw/tlschema/dist-esm/records/TLShape.mjs
var rootShapeVersions = createMigrationIds("com.tldraw.shape", {
  AddIsLocked: 1,
  HoistOpacity: 2,
  AddMeta: 3,
  AddWhite: 4
});
var rootShapeMigrations = createRecordMigrationSequence({
  sequenceId: "com.tldraw.shape",
  recordType: "shape",
  sequence: [
    {
      id: rootShapeVersions.AddIsLocked,
      up: (record) => {
        record.isLocked = false;
      },
      down: (record) => {
        delete record.isLocked;
      }
    },
    {
      id: rootShapeVersions.HoistOpacity,
      up: (record) => {
        var _a2;
        record.opacity = Number((_a2 = record.props.opacity) != null ? _a2 : "1");
        delete record.props.opacity;
      },
      down: (record) => {
        const opacity = record.opacity;
        delete record.opacity;
        record.props.opacity = opacity < 0.175 ? "0.1" : opacity < 0.375 ? "0.25" : opacity < 0.625 ? "0.5" : opacity < 0.875 ? "0.75" : "1";
      }
    },
    {
      id: rootShapeVersions.AddMeta,
      up: (record) => {
        record.meta = {};
      }
    },
    {
      id: rootShapeVersions.AddWhite,
      up: (_record) => {
      },
      down: (record) => {
        if (record.props.color === "white") {
          record.props.color = "black";
        }
      }
    }
  ]
});
function isShape(record) {
  if (!record)
    return false;
  return record.typeName === "shape";
}
function isShapeId(id) {
  if (!id)
    return false;
  return id.startsWith("shape:");
}
function createShapeId(id) {
  return `shape:${id != null ? id : nanoid2()}`;
}
function getShapePropKeysByStyle(props) {
  const propKeysByStyle = /* @__PURE__ */ new Map();
  for (const [key, prop] of Object.entries(props)) {
    if (prop instanceof StyleProp) {
      if (propKeysByStyle.has(prop)) {
        throw new Error(`Duplicate style prop ${prop.id}. Each style prop can only be used once within a shape.`);
      }
      propKeysByStyle.set(prop, key);
    }
  }
  return propKeysByStyle;
}
var RETIRED_DOWN_MIGRATION = "retired";
function createShapePropsMigrationSequence(migrations) {
  return migrations;
}
function createShapePropsMigrationIds(shapeType, ids) {
  return mapObjectMapValues(ids, (_k, v) => `com.tldraw.shape.${shapeType}/${v}`);
}
function processShapeMigrations(shapes) {
  const result = [];
  for (const [shapeType, { migrations }] of Object.entries(shapes)) {
    const sequenceId = `com.tldraw.shape.${shapeType}`;
    if (!migrations) {
      result.push(createMigrationSequence({
        sequenceId,
        retroactive: false,
        sequence: []
      }));
    } else if ("sequenceId" in migrations) {
      assert(sequenceId === migrations.sequenceId, `sequenceId mismatch for ${shapeType} shape migrations. Expected '${sequenceId}', got '${migrations.sequenceId}'`);
      result.push(migrations);
    } else if ("sequence" in migrations) {
      result.push(createMigrationSequence({
        sequenceId,
        retroactive: false,
        sequence: migrations.sequence.map((m) => "id" in m ? {
          id: m.id,
          scope: "record",
          filter: (r) => r.typeName === "shape" && r.type === shapeType,
          dependsOn: m.dependsOn,
          up: (record) => {
            const result2 = m.up(record.props);
            if (result2) {
              record.props = result2;
            }
          },
          down: typeof m.down === "function" ? (record) => {
            const result2 = m.down(record.props);
            if (result2) {
              record.props = result2;
            }
          } : void 0
        } : m)
      }));
    } else {
      result.push(createMigrationSequence({
        sequenceId,
        retroactive: false,
        sequence: Object.keys(migrations.migrators).map((k) => Number(k)).sort((a, b) => a - b).map((version2) => ({
          id: `${sequenceId}/${version2}`,
          scope: "record",
          filter: (r) => r.typeName === "shape" && r.type === shapeType,
          up: (record) => {
            const result2 = migrations.migrators[version2].up(record);
            if (result2) {
              return result2;
            }
          },
          down: (record) => {
            const result2 = migrations.migrators[version2].down(record);
            if (result2) {
              return result2;
            }
          }
        }))
      }));
    }
  }
  return result;
}
function createShapeRecordType(shapes) {
  return createRecordType("shape", {
    scope: "document",
    validator: validation_exports.model("shape", validation_exports.union("type", mapObjectMapValues(shapes, (type, { props, meta }) => createShapeValidator(type, props, meta))))
  }).withDefaultProperties(() => ({
    x: 0,
    y: 0,
    rotation: 0,
    isLocked: false,
    opacity: 1,
    meta: {}
  }));
}

// node_modules/@tldraw/tlschema/dist-esm/styles/TLColorStyle.mjs
var colors = [
  "black",
  "grey",
  "light-violet",
  "violet",
  "blue",
  "light-blue",
  "yellow",
  "orange",
  "green",
  "light-green",
  "light-red",
  "red",
  "white"
];
var DefaultColorThemePalette = {
  lightMode: {
    id: "light",
    text: "#000000",
    background: "rgb(249, 250, 251)",
    solid: "#fcfffe",
    black: {
      solid: "#1d1d1d",
      note: {
        fill: "#FCE19C",
        text: "#000000"
      },
      semi: "#e8e8e8",
      pattern: "#494949",
      highlight: {
        srgb: "#fddd00",
        p3: "color(display-p3 0.972 0.8705 0.05)"
      }
    },
    blue: {
      solid: "#4465e9",
      note: {
        fill: "#8AA3FF",
        text: "#000000"
      },
      semi: "#dce1f8",
      pattern: "#6681ee",
      highlight: {
        srgb: "#10acff",
        p3: "color(display-p3 0.308 0.6632 0.9996)"
      }
    },
    green: {
      solid: "#099268",
      note: {
        fill: "#6FC896",
        text: "#000000"
      },
      semi: "#d3e9e3",
      pattern: "#39a785",
      highlight: {
        srgb: "#00ffc8",
        p3: "color(display-p3 0.2536 0.984 0.7981)"
      }
    },
    grey: {
      solid: "#9fa8b2",
      note: {
        fill: "#C0CAD3",
        text: "#000000"
      },
      semi: "#eceef0",
      pattern: "#bcc3c9",
      highlight: {
        srgb: "#cbe7f1",
        p3: "color(display-p3 0.8163 0.9023 0.9416)"
      }
    },
    "light-blue": {
      solid: "#4ba1f1",
      note: {
        fill: "#9BC4FD",
        text: "#000000"
      },
      semi: "#ddedfa",
      pattern: "#6fbbf8",
      highlight: {
        srgb: "#00f4ff",
        p3: "color(display-p3 0.1512 0.9414 0.9996)"
      }
    },
    "light-green": {
      solid: "#4cb05e",
      note: {
        fill: "#98D08A",
        text: "#000000"
      },
      semi: "#dbf0e0",
      pattern: "#65cb78",
      highlight: {
        srgb: "#65f641",
        p3: "color(display-p3 0.563 0.9495 0.3857)"
      }
    },
    "light-red": {
      solid: "#f87777",
      note: {
        fill: "#F7A5A1",
        text: "#000000"
      },
      semi: "#f4dadb",
      pattern: "#fe9e9e",
      highlight: {
        srgb: "#ff7fa3",
        p3: "color(display-p3 0.9988 0.5301 0.6397)"
      }
    },
    "light-violet": {
      solid: "#e085f4",
      note: {
        fill: "#DFB0F9",
        text: "#000000"
      },
      semi: "#f5eafa",
      pattern: "#e9acf8",
      highlight: {
        srgb: "#ff88ff",
        p3: "color(display-p3 0.9676 0.5652 0.9999)"
      }
    },
    orange: {
      solid: "#e16919",
      note: {
        fill: "#FAA475",
        text: "#000000"
      },
      semi: "#f8e2d4",
      pattern: "#f78438",
      highlight: {
        srgb: "#ffa500",
        p3: "color(display-p3 0.9988 0.6905 0.266)"
      }
    },
    red: {
      solid: "#e03131",
      note: {
        fill: "#FC8282",
        text: "#000000"
      },
      semi: "#f4dadb",
      pattern: "#e55959",
      highlight: {
        srgb: "#ff636e",
        p3: "color(display-p3 0.9992 0.4376 0.45)"
      }
    },
    violet: {
      solid: "#ae3ec9",
      note: {
        fill: "#DB91FD",
        text: "#000000"
      },
      semi: "#ecdcf2",
      pattern: "#bd63d3",
      highlight: {
        srgb: "#c77cff",
        p3: "color(display-p3 0.7469 0.5089 0.9995)"
      }
    },
    yellow: {
      solid: "#f1ac4b",
      note: {
        fill: "#FED49A",
        text: "#000000"
      },
      semi: "#f9f0e6",
      pattern: "#fecb92",
      highlight: {
        srgb: "#fddd00",
        p3: "color(display-p3 0.972 0.8705 0.05)"
      }
    },
    white: {
      solid: "#FFFFFF",
      semi: "#f5f5f5",
      pattern: "#f9f9f9",
      note: {
        fill: "#FFFFFF",
        text: "#000000"
      },
      highlight: {
        srgb: "#ffffff",
        p3: "color(display-p3 1 1 1)"
      }
    }
  },
  darkMode: {
    id: "dark",
    text: "hsl(210, 17%, 98%)",
    background: "hsl(240, 5%, 6.5%)",
    solid: "#010403",
    black: {
      solid: "#f2f2f2",
      note: {
        fill: "#2c2c2c",
        text: "#f2f2f2"
      },
      semi: "#2c3036",
      pattern: "#989898",
      highlight: {
        srgb: "#d2b700",
        p3: "color(display-p3 0.8078 0.7225 0.0312)"
      }
    },
    blue: {
      solid: "#4f72fc",
      note: {
        fill: "#2A3F98",
        text: "#f2f2f2"
      },
      semi: "#262d40",
      pattern: "#3a4b9e",
      highlight: {
        srgb: "#0079d2",
        p3: "color(display-p3 0.0032 0.4655 0.7991)"
      }
    },
    green: {
      solid: "#099268",
      note: {
        fill: "#014429",
        text: "#f2f2f2"
      },
      semi: "#253231",
      pattern: "#366a53",
      highlight: {
        srgb: "#009774",
        p3: "color(display-p3 0.0085 0.582 0.4604)"
      }
    },
    grey: {
      solid: "#9398b0",
      note: {
        fill: "#56595F",
        text: "#f2f2f2"
      },
      semi: "#33373c",
      pattern: "#7c8187",
      highlight: {
        srgb: "#9cb4cb",
        p3: "color(display-p3 0.6299 0.7012 0.7856)"
      }
    },
    "light-blue": {
      solid: "#4dabf7",
      note: {
        fill: "#1F5495",
        text: "#f2f2f2"
      },
      semi: "#2a3642",
      pattern: "#4d7aa9",
      highlight: {
        srgb: "#00bdc8",
        p3: "color(display-p3 0.0023 0.7259 0.7735)"
      }
    },
    "light-green": {
      solid: "#40c057",
      note: {
        fill: "#21581D",
        text: "#f2f2f2"
      },
      semi: "#2a3830",
      pattern: "#4e874e",
      highlight: {
        srgb: "#00a000",
        p3: "color(display-p3 0.2711 0.6172 0.0195)"
      }
    },
    "light-red": {
      solid: "#ff8787",
      note: {
        fill: "#923632",
        text: "#f2f2f2"
      },
      semi: "#3b3235",
      pattern: "#a56767",
      highlight: {
        srgb: "#db005b",
        p3: "color(display-p3 0.7849 0.0585 0.3589)"
      }
    },
    "light-violet": {
      solid: "#e599f7",
      note: {
        fill: "#762F8E",
        text: "#f2f2f2"
      },
      semi: "#383442",
      pattern: "#9770a9",
      highlight: {
        srgb: "#c400c7",
        p3: "color(display-p3 0.7024 0.0403 0.753)"
      }
    },
    orange: {
      solid: "#f76707",
      note: {
        fill: "#843906",
        text: "#f2f2f2"
      },
      semi: "#3a2e2a",
      pattern: "#9f552d",
      highlight: {
        srgb: "#d07a00",
        p3: "color(display-p3 0.7699 0.4937 0.0085)"
      }
    },
    red: {
      solid: "#e03131",
      note: {
        fill: "#89231A",
        text: "#f2f2f2"
      },
      semi: "#36292b",
      pattern: "#8f3734",
      highlight: {
        srgb: "#de002c",
        p3: "color(display-p3 0.7978 0.0509 0.2035)"
      }
    },
    violet: {
      solid: "#ae3ec9",
      note: {
        fill: "#681683",
        text: "#f2f2f2"
      },
      semi: "#31293c",
      pattern: "#763a8b",
      highlight: {
        srgb: "#9e00ee",
        p3: "color(display-p3 0.5651 0.0079 0.8986)"
      }
    },
    yellow: {
      solid: "#ffc034",
      note: {
        fill: "#98571B",
        text: "#f2f2f2"
      },
      semi: "#3c3934",
      pattern: "#fecb92",
      highlight: {
        srgb: "#d2b700",
        p3: "color(display-p3 0.8078 0.7225 0.0312)"
      }
    },
    white: {
      solid: "#f3f3f3",
      semi: "#f5f5f5",
      pattern: "#f9f9f9",
      note: {
        fill: "#eaeaea",
        text: "#1d1d1d"
      },
      highlight: {
        srgb: "#ffffff",
        p3: "color(display-p3 1 1 1)"
      }
    }
  }
};
function getDefaultColorTheme(opts) {
  return opts.isDarkMode ? DefaultColorThemePalette.darkMode : DefaultColorThemePalette.lightMode;
}
var DefaultColorStyle = StyleProp.defineEnum("tldraw:color", {
  defaultValue: "black",
  values: colors
});
var DefaultLabelColorStyle = StyleProp.defineEnum("tldraw:labelColor", {
  defaultValue: "black",
  values: colors
});

// node_modules/@tldraw/tlschema/dist-esm/styles/TLDashStyle.mjs
var DefaultDashStyle = StyleProp.defineEnum("tldraw:dash", {
  defaultValue: "draw",
  values: ["draw", "solid", "dashed", "dotted"]
});

// node_modules/@tldraw/tlschema/dist-esm/styles/TLFillStyle.mjs
var DefaultFillStyle = StyleProp.defineEnum("tldraw:fill", {
  defaultValue: "none",
  values: ["none", "semi", "solid", "pattern"]
});

// node_modules/@tldraw/tlschema/dist-esm/styles/TLFontStyle.mjs
var DefaultFontStyle = StyleProp.defineEnum("tldraw:font", {
  defaultValue: "draw",
  values: ["draw", "sans", "serif", "mono"]
});
var DefaultFontFamilies = {
  draw: "'tldraw_draw', sans-serif",
  sans: "'tldraw_sans', sans-serif",
  serif: "'tldraw_serif', serif",
  mono: "'tldraw_mono', monospace"
};

// node_modules/@tldraw/tlschema/dist-esm/styles/TLSizeStyle.mjs
var DefaultSizeStyle = StyleProp.defineEnum("tldraw:size", {
  defaultValue: "m",
  values: ["s", "m", "l", "xl"]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLArrowShape.mjs
var arrowheadTypes = [
  "arrow",
  "triangle",
  "square",
  "dot",
  "pipe",
  "diamond",
  "inverted",
  "bar",
  "none"
];
var ArrowShapeArrowheadStartStyle = StyleProp.defineEnum("tldraw:arrowheadStart", {
  defaultValue: "none",
  values: arrowheadTypes
});
var ArrowShapeArrowheadEndStyle = StyleProp.defineEnum("tldraw:arrowheadEnd", {
  defaultValue: "arrow",
  values: arrowheadTypes
});
var ArrowShapeTerminal = validation_exports.union("type", {
  binding: validation_exports.object({
    type: validation_exports.literal("binding"),
    boundShapeId: shapeIdValidator,
    normalizedAnchor: vecModelValidator,
    isExact: validation_exports.boolean,
    isPrecise: validation_exports.boolean
  }),
  point: validation_exports.object({
    type: validation_exports.literal("point"),
    x: validation_exports.number,
    y: validation_exports.number
  })
});
var arrowShapeProps = {
  labelColor: DefaultLabelColorStyle,
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  arrowheadStart: ArrowShapeArrowheadStartStyle,
  arrowheadEnd: ArrowShapeArrowheadEndStyle,
  font: DefaultFontStyle,
  start: ArrowShapeTerminal,
  end: ArrowShapeTerminal,
  bend: validation_exports.number,
  text: validation_exports.string,
  labelPosition: validation_exports.number
};
var arrowShapeVersions = createShapePropsMigrationIds("arrow", {
  AddLabelColor: 1,
  AddIsPrecise: 2,
  AddLabelPosition: 3
});
var arrowShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: arrowShapeVersions.AddLabelColor,
      up: (props) => {
        props.labelColor = "black";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: arrowShapeVersions.AddIsPrecise,
      up: ({ start, end }) => {
        if (start.type === "binding") {
          start.isPrecise = !(start.normalizedAnchor.x === 0.5 && start.normalizedAnchor.y === 0.5);
        }
        if (end.type === "binding") {
          end.isPrecise = !(end.normalizedAnchor.x === 0.5 && end.normalizedAnchor.y === 0.5);
        }
      },
      down: ({ start, end }) => {
        if (start.type === "binding") {
          if (!start.isPrecise) {
            start.normalizedAnchor = { x: 0.5, y: 0.5 };
          }
          delete start.isPrecise;
        }
        if (end.type === "binding") {
          if (!end.isPrecise) {
            end.normalizedAnchor = { x: 0.5, y: 0.5 };
          }
          delete end.isPrecise;
        }
      }
    },
    {
      id: arrowShapeVersions.AddLabelPosition,
      up: (props) => {
        props.labelPosition = 0.5;
      },
      down: (props) => {
        delete props.labelPosition;
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLBookmarkShape.mjs
var bookmarkShapeProps = {
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  assetId: assetIdValidator.nullable(),
  url: validation_exports.linkUrl
};
var Versions4 = createShapePropsMigrationIds("bookmark", {
  NullAssetId: 1,
  MakeUrlsValid: 2
});
var bookmarkShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions4.NullAssetId,
      up: (props) => {
        if (props.assetId === void 0) {
          props.assetId = null;
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions4.MakeUrlsValid,
      up: (props) => {
        if (!validation_exports.linkUrl.isValid(props.url)) {
          props.url = "";
        }
      },
      down: (_props) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLDrawShape.mjs
var DrawShapeSegment = validation_exports.object({
  type: validation_exports.literalEnum("free", "straight"),
  points: validation_exports.arrayOf(vecModelValidator)
});
var drawShapeProps = {
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  segments: validation_exports.arrayOf(DrawShapeSegment),
  isComplete: validation_exports.boolean,
  isClosed: validation_exports.boolean,
  isPen: validation_exports.boolean
};
var Versions5 = createShapePropsMigrationIds("draw", {
  AddInPen: 1
});
var drawShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions5.AddInPen,
      up: (props) => {
        const { points } = props.segments[0];
        if (points.length === 0) {
          props.isPen = false;
          return;
        }
        let isPen = !(points[0].z === 0 || points[0].z === 0.5);
        if (points[1]) {
          isPen = isPen && !(points[1].z === 0 || points[1].z === 0.5);
        }
        props.isPen = isPen;
      },
      down: RETIRED_DOWN_MIGRATION
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLEmbedShape.mjs
var TLDRAW_APP_RE = /(^\/r\/[^/]+\/?$)/;
var safeParseUrl = (url) => {
  try {
    return new URL(url);
  } catch (err) {
    return;
  }
};
var EMBED_DEFINITIONS = [
  {
    type: "tldraw",
    title: "tldraw",
    hostnames: ["beta.tldraw.com", "tldraw.com", "localhost:3000"],
    minWidth: 300,
    minHeight: 300,
    width: 720,
    height: 500,
    doesResize: true,
    overridePermissions: {
      "allow-top-navigation": true
    },
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
        return url;
      }
      return;
    }
  },
  {
    type: "figma",
    title: "Figma",
    hostnames: ["figma.com"],
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      if (!!url.match(/https:\/\/([\w\.-]+\.)?figma.com\/(file|proto)\/([0-9a-zA-Z]{22,128})(?:\/.*)?$/) && !url.includes("figma.com/embed")) {
        return `https://www.figma.com/embed?embed_host=share&url=${url}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/?$/)) {
        const outUrl = urlObj.searchParams.get("url");
        if (outUrl) {
          return outUrl;
        }
      }
      return;
    }
  },
  {
    type: "google_maps",
    title: "Google Maps",
    hostnames: ["google.*"],
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      if (url.includes("/maps/")) {
        const match = url.match(/@(.*),(.*),(.*)z/);
        let result;
        if (match) {
          const [, lat, lng, z] = match;
          const host = new URL(url).host.replace("www.", "");
          result = `https://${host}/maps/embed/v1/view?key=${process.env.NEXT_PUBLIC_GC_API_KEY}&center=${lat},${lng}&zoom=${z}`;
        } else {
          result = "";
        }
        return result;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const matches2 = urlObj.pathname.match(/^\/maps\/embed\/v1\/view\/?$/);
      if (matches2 && urlObj.searchParams.has("center") && urlObj.searchParams.get("zoom")) {
        const zoom = urlObj.searchParams.get("zoom");
        const [lat, lon] = urlObj.searchParams.get("center").split(",");
        return `https://www.google.com/maps/@${lat},${lon},${zoom}z`;
      }
      return;
    }
  },
  {
    type: "val_town",
    title: "Val Town",
    hostnames: ["val.town"],
    minWidth: 260,
    minHeight: 100,
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches2 = urlObj && urlObj.pathname.match(/\/v\/([^/]+)\/?/);
      if (matches2) {
        return `https://www.val.town/embed/${matches2[1]}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches2 = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
      if (matches2) {
        return `https://www.val.town/v/${matches2[1]}`;
      }
      return;
    }
  },
  {
    type: "codesandbox",
    title: "CodeSandbox",
    hostnames: ["codesandbox.io"],
    minWidth: 300,
    minHeight: 300,
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches2 = urlObj && urlObj.pathname.match(/\/s\/([^/]+)\/?/);
      if (matches2) {
        return `https://codesandbox.io/embed/${matches2[1]}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches2 = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
      if (matches2) {
        return `https://codesandbox.io/s/${matches2[1]}`;
      }
      return;
    }
  },
  {
    type: "codepen",
    title: "Codepen",
    hostnames: ["codepen.io"],
    minWidth: 300,
    minHeight: 300,
    width: 520,
    height: 400,
    doesResize: true,
    toEmbedUrl: (url) => {
      const CODEPEN_URL_REGEXP = /https:\/\/codepen.io\/([^/]+)\/pen\/([^/]+)/;
      const matches2 = url.match(CODEPEN_URL_REGEXP);
      if (matches2) {
        const [_, user, id] = matches2;
        return `https://codepen.io/${user}/embed/${id}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const CODEPEN_EMBED_REGEXP = /https:\/\/codepen.io\/([^/]+)\/embed\/([^/]+)/;
      const matches2 = url.match(CODEPEN_EMBED_REGEXP);
      if (matches2) {
        const [_, user, id] = matches2;
        return `https://codepen.io/${user}/pen/${id}`;
      }
      return;
    }
  },
  {
    type: "scratch",
    title: "Scratch",
    hostnames: ["scratch.mit.edu"],
    width: 520,
    height: 400,
    doesResize: false,
    toEmbedUrl: (url) => {
      const SCRATCH_URL_REGEXP = /https?:\/\/scratch.mit.edu\/projects\/([^/]+)/;
      const matches2 = url.match(SCRATCH_URL_REGEXP);
      if (matches2) {
        const [_, id] = matches2;
        return `https://scratch.mit.edu/projects/embed/${id}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const SCRATCH_EMBED_REGEXP = /https:\/\/scratch.mit.edu\/projects\/embed\/([^/]+)/;
      const matches2 = url.match(SCRATCH_EMBED_REGEXP);
      if (matches2) {
        const [_, id] = matches2;
        return `https://scratch.mit.edu/projects/${id}`;
      }
      return;
    }
  },
  {
    type: "youtube",
    title: "YouTube",
    hostnames: ["*.youtube.com", "youtube.com", "youtu.be"],
    width: 800,
    height: 450,
    doesResize: true,
    overridePermissions: {
      "allow-presentation": true
    },
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const hostname = urlObj.hostname.replace(/^www./, "");
      if (hostname === "youtu.be") {
        const videoId = urlObj.pathname.split("/").filter(Boolean)[0];
        return `https://www.youtube.com/embed/${videoId}`;
      } else if ((hostname === "youtube.com" || hostname === "m.youtube.com") && urlObj.pathname.match(/^\/watch/)) {
        const videoId = urlObj.searchParams.get("v");
        return `https://www.youtube.com/embed/${videoId}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const hostname = urlObj.hostname.replace(/^www./, "");
      if (hostname === "youtube.com") {
        const matches2 = urlObj.pathname.match(/^\/embed\/([^/]+)\/?/);
        if (matches2) {
          return `https://www.youtube.com/watch?v=${matches2[1]}`;
        }
      }
      return;
    }
  },
  {
    type: "google_calendar",
    title: "Google Calendar",
    hostnames: ["calendar.google.*"],
    width: 720,
    height: 500,
    minWidth: 460,
    minHeight: 360,
    doesResize: true,
    instructionLink: "https://support.google.com/calendar/answer/41207?hl=en",
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const cidQs = urlObj == null ? void 0 : urlObj.searchParams.get("cid");
      if ((urlObj == null ? void 0 : urlObj.pathname.match(/\/calendar\/u\/0/)) && cidQs) {
        urlObj.pathname = "/calendar/embed";
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        urlObj.searchParams.set("src", cidQs);
        return urlObj.href;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const srcQs = urlObj == null ? void 0 : urlObj.searchParams.get("src");
      if ((urlObj == null ? void 0 : urlObj.pathname.match(/\/calendar\/embed/)) && srcQs) {
        urlObj.pathname = "/calendar/u/0";
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        urlObj.searchParams.set("cid", srcQs);
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "google_slides",
    title: "Google Slides",
    hostnames: ["docs.google.*"],
    width: 720,
    height: 500,
    minWidth: 460,
    minHeight: 360,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if ((urlObj == null ? void 0 : urlObj.pathname.match(/^\/presentation/)) && (urlObj == null ? void 0 : urlObj.pathname.match(/\/pub\/?$/))) {
        urlObj.pathname = urlObj.pathname.replace(/\/pub$/, "/embed");
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        return urlObj.href;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if ((urlObj == null ? void 0 : urlObj.pathname.match(/^\/presentation/)) && (urlObj == null ? void 0 : urlObj.pathname.match(/\/embed\/?$/))) {
        urlObj.pathname = urlObj.pathname.replace(/\/embed$/, "/pub");
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "github_gist",
    title: "GitHub Gist",
    hostnames: ["gist.github.com"],
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
        if (!url.split("/").pop())
          return;
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
        if (!url.split("/").pop())
          return;
        return url;
      }
      return;
    }
  },
  {
    type: "replit",
    title: "Replit",
    hostnames: ["replit.com"],
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/)) {
        return `${url}?embed=true`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/) && urlObj.searchParams.has("embed")) {
        urlObj.searchParams.delete("embed");
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "felt",
    title: "Felt",
    hostnames: ["felt.com"],
    width: 720,
    height: 500,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/map\//)) {
        return urlObj.origin + "/embed" + urlObj.pathname;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/map\//)) {
        urlObj.pathname = urlObj.pathname.replace(/^\/embed/, "");
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "spotify",
    title: "Spotify",
    hostnames: ["open.spotify.com"],
    width: 720,
    height: 500,
    minHeight: 500,
    overrideOutlineRadius: 12,
    doesResize: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/(artist|album)\//)) {
        return urlObj.origin + "/embed" + urlObj.pathname;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/(artist|album)\//)) {
        return urlObj.origin + urlObj.pathname.replace(/^\/embed/, "");
      }
      return;
    }
  },
  {
    type: "vimeo",
    title: "Vimeo",
    hostnames: ["vimeo.com", "player.vimeo.com"],
    width: 640,
    height: 360,
    doesResize: true,
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hostname === "vimeo.com") {
        if (urlObj.pathname.match(/^\/[0-9]+/)) {
          return "https://player.vimeo.com/video/" + urlObj.pathname.split("/")[1] + "?title=0&byline=0";
        }
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hostname === "player.vimeo.com") {
        const matches2 = urlObj.pathname.match(/^\/video\/([^/]+)\/?$/);
        if (matches2) {
          return "https://vimeo.com/" + matches2[1];
        }
      }
      return;
    }
  },
  {
    type: "excalidraw",
    title: "Excalidraw",
    hostnames: ["excalidraw.com"],
    width: 720,
    height: 500,
    doesResize: true,
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hash.match(/#room=/)) {
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hash.match(/#room=/)) {
        return url;
      }
      return;
    }
  },
  {
    type: "observable",
    title: "Observable",
    hostnames: ["observablehq.com"],
    width: 720,
    height: 500,
    doesResize: true,
    isAspectRatioLocked: false,
    backgroundColor: "#fff",
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/@([^/]+)\/([^/]+)\/?$/)) {
        return `${urlObj.origin}/embed${urlObj.pathname}?cell=*`;
      }
      if (urlObj && urlObj.pathname.match(/^\/d\/([^/]+)\/?$/)) {
        const pathName = urlObj.pathname.replace(/^\/d/, "");
        return `${urlObj.origin}/embed${pathName}?cell=*`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/@([^/]+)\/([^/]+)\/?$/)) {
        return `${urlObj.origin}${urlObj.pathname.replace("/embed", "")}#cell-*`;
      }
      if (urlObj && urlObj.pathname.match(/^\/embed\/([^/]+)\/?$/)) {
        return `${urlObj.origin}${urlObj.pathname.replace("/embed", "/d")}#cell-*`;
      }
      return;
    }
  }
];
var embedShapePermissionDefaults = {
  "allow-downloads-without-user-activation": false,
  "allow-downloads": false,
  "allow-modals": false,
  "allow-orientation-lock": false,
  "allow-pointer-lock": false,
  "allow-popups": true,
  "allow-popups-to-escape-sandbox": false,
  "allow-presentation": false,
  "allow-storage-access-by-user-activation": false,
  "allow-top-navigation": false,
  "allow-top-navigation-by-user-activation": false,
  "allow-scripts": true,
  "allow-same-origin": true,
  "allow-forms": true
};
var embedShapeProps = {
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  url: validation_exports.string
};
var Versions6 = createShapePropsMigrationIds("embed", {
  GenOriginalUrlInEmbed: 1,
  RemoveDoesResize: 2,
  RemoveTmpOldUrl: 3,
  RemovePermissionOverrides: 4
});
var embedShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions6.GenOriginalUrlInEmbed,
      up: (props) => {
        try {
          const url = props.url;
          const host = new URL(url).host.replace("www.", "");
          let originalUrl;
          for (const localEmbedDef of EMBED_DEFINITIONS) {
            if (localEmbedDef.hostnames.includes(host)) {
              try {
                originalUrl = localEmbedDef.fromEmbedUrl(url);
              } catch (err) {
                console.warn(err);
              }
            }
          }
          props.tmpOldUrl = props.url;
          props.url = originalUrl != null ? originalUrl : "";
        } catch (e) {
          props.url = "";
          props.tmpOldUrl = props.url;
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions6.RemoveDoesResize,
      up: (props) => {
        delete props.doesResize;
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions6.RemoveTmpOldUrl,
      up: (props) => {
        delete props.tmpOldUrl;
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions6.RemovePermissionOverrides,
      up: (props) => {
        delete props.overridePermissions;
      },
      down: RETIRED_DOWN_MIGRATION
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLFrameShape.mjs
var frameShapeProps = {
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  name: validation_exports.string
};
var frameShapeMigrations = createShapePropsMigrationSequence({
  sequence: []
});

// node_modules/@tldraw/tlschema/dist-esm/styles/TLHorizontalAlignStyle.mjs
var DefaultHorizontalAlignStyle = StyleProp.defineEnum("tldraw:horizontalAlign", {
  defaultValue: "middle",
  values: ["start", "middle", "end", "start-legacy", "end-legacy", "middle-legacy"]
});

// node_modules/@tldraw/tlschema/dist-esm/styles/TLVerticalAlignStyle.mjs
var DefaultVerticalAlignStyle = StyleProp.defineEnum("tldraw:verticalAlign", {
  defaultValue: "middle",
  values: ["start", "middle", "end"]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLGeoShape.mjs
var GeoShapeGeoStyle = StyleProp.defineEnum("tldraw:geo", {
  defaultValue: "rectangle",
  values: [
    "cloud",
    "rectangle",
    "ellipse",
    "triangle",
    "diamond",
    "pentagon",
    "hexagon",
    "octagon",
    "star",
    "rhombus",
    "rhombus-2",
    "oval",
    "trapezoid",
    "arrow-right",
    "arrow-left",
    "arrow-up",
    "arrow-down",
    "x-box",
    "check-box"
  ]
});
var geoShapeProps = {
  geo: GeoShapeGeoStyle,
  labelColor: DefaultLabelColorStyle,
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  align: DefaultHorizontalAlignStyle,
  verticalAlign: DefaultVerticalAlignStyle,
  url: validation_exports.linkUrl,
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  growY: validation_exports.positiveNumber,
  text: validation_exports.string
};
var geoShapeVersions = createShapePropsMigrationIds("geo", {
  AddUrlProp: 1,
  AddLabelColor: 2,
  RemoveJustify: 3,
  AddCheckBox: 4,
  AddVerticalAlign: 5,
  MigrateLegacyAlign: 6,
  AddCloud: 7,
  MakeUrlsValid: 8
});
var geoShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: geoShapeVersions.AddUrlProp,
      up: (props) => {
        props.url = "";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.AddLabelColor,
      up: (props) => {
        props.labelColor = "black";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.RemoveJustify,
      up: (props) => {
        if (props.align === "justify") {
          props.align = "start";
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.AddCheckBox,
      up: (_props) => {
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.AddVerticalAlign,
      up: (props) => {
        props.verticalAlign = "middle";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.MigrateLegacyAlign,
      up: (props) => {
        let newAlign;
        switch (props.align) {
          case "start":
            newAlign = "start-legacy";
            break;
          case "end":
            newAlign = "end-legacy";
            break;
          default:
            newAlign = "middle-legacy";
            break;
        }
        props.align = newAlign;
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.AddCloud,
      up: (_props) => {
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: geoShapeVersions.MakeUrlsValid,
      up: (props) => {
        if (!validation_exports.linkUrl.isValid(props.url)) {
          props.url = "";
        }
      },
      down: (_props) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLGroupShape.mjs
var groupShapeProps = {};
var groupShapeMigrations = createShapePropsMigrationSequence({ sequence: [] });

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLHighlightShape.mjs
var highlightShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  segments: validation_exports.arrayOf(DrawShapeSegment),
  isComplete: validation_exports.boolean,
  isPen: validation_exports.boolean
};
var highlightShapeMigrations = createShapePropsMigrationSequence({ sequence: [] });

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLImageShape.mjs
var ImageShapeCrop = validation_exports.object({
  topLeft: vecModelValidator,
  bottomRight: vecModelValidator
});
var imageShapeProps = {
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  playing: validation_exports.boolean,
  url: validation_exports.linkUrl,
  assetId: assetIdValidator.nullable(),
  crop: ImageShapeCrop.nullable()
};
var Versions7 = createShapePropsMigrationIds("image", {
  AddUrlProp: 1,
  AddCropProp: 2,
  MakeUrlsValid: 3
});
var imageShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions7.AddUrlProp,
      up: (props) => {
        props.url = "";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions7.AddCropProp,
      up: (props) => {
        props.crop = null;
      },
      down: (props) => {
        delete props.crop;
      }
    },
    {
      id: Versions7.MakeUrlsValid,
      up: (props) => {
        if (!validation_exports.linkUrl.isValid(props.url)) {
          props.url = "";
        }
      },
      down: (_props) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLLineShape.mjs
var LineShapeSplineStyle = StyleProp.defineEnum("tldraw:spline", {
  defaultValue: "line",
  values: ["cubic", "line"]
});
var lineShapePointValidator = validation_exports.object({
  id: validation_exports.string,
  index: validation_exports.indexKey,
  x: validation_exports.number,
  y: validation_exports.number
});
var lineShapeProps = {
  color: DefaultColorStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  spline: LineShapeSplineStyle,
  points: validation_exports.dict(validation_exports.string, lineShapePointValidator)
};
var lineShapeVersions = createShapePropsMigrationIds("line", {
  AddSnapHandles: 1,
  RemoveExtraHandleProps: 2,
  HandlesToPoints: 3,
  PointIndexIds: 4
});
var lineShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: lineShapeVersions.AddSnapHandles,
      up: (props) => {
        for (const handle of Object.values(props.handles)) {
          ;
          handle.canSnap = true;
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: lineShapeVersions.RemoveExtraHandleProps,
      up: (props) => {
        props.handles = objectMapFromEntries(Object.values(props.handles).map((handle) => [
          handle.index,
          {
            x: handle.x,
            y: handle.y
          }
        ]));
      },
      down: (props) => {
        const handles = Object.entries(props.handles).map(([index2, handle]) => ({ index: index2, ...handle })).sort(sortByIndex);
        props.handles = Object.fromEntries(handles.map((handle, i) => {
          const id = i === 0 ? "start" : i === handles.length - 1 ? "end" : `handle:${handle.index}`;
          return [
            id,
            {
              id,
              type: "vertex",
              canBind: false,
              canSnap: true,
              index: handle.index,
              x: handle.x,
              y: handle.y
            }
          ];
        }));
      }
    },
    {
      id: lineShapeVersions.HandlesToPoints,
      up: (props) => {
        const sortedHandles = Object.entries(props.handles).map(([index2, { x, y }]) => ({ x, y, index: index2 })).sort(sortByIndex);
        props.points = sortedHandles.map(({ x, y }) => ({ x, y }));
        delete props.handles;
      },
      down: (props) => {
        const indices = getIndices(props.points.length);
        props.handles = Object.fromEntries(props.points.map((handle, i) => {
          const index2 = indices[i];
          return [
            index2,
            {
              x: handle.x,
              y: handle.y
            }
          ];
        }));
        delete props.points;
      }
    },
    {
      id: lineShapeVersions.PointIndexIds,
      up: (props) => {
        const indices = getIndices(props.points.length);
        props.points = Object.fromEntries(props.points.map((point, i) => {
          const id = indices[i];
          return [
            id,
            {
              id,
              index: id,
              x: point.x,
              y: point.y
            }
          ];
        }));
      },
      down: (props) => {
        const sortedHandles = Object.values(props.points).sort(sortByIndex);
        props.points = sortedHandles.map(({ x, y }) => ({ x, y }));
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLNoteShape.mjs
var noteShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  fontSizeAdjustment: validation_exports.positiveNumber,
  align: DefaultHorizontalAlignStyle,
  verticalAlign: DefaultVerticalAlignStyle,
  growY: validation_exports.positiveNumber,
  url: validation_exports.linkUrl,
  text: validation_exports.string
};
var Versions8 = createShapePropsMigrationIds("note", {
  AddUrlProp: 1,
  RemoveJustify: 2,
  MigrateLegacyAlign: 3,
  AddVerticalAlign: 4,
  MakeUrlsValid: 5,
  AddFontSizeAdjustment: 6
});
var noteShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions8.AddUrlProp,
      up: (props) => {
        props.url = "";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions8.RemoveJustify,
      up: (props) => {
        if (props.align === "justify") {
          props.align = "start";
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions8.MigrateLegacyAlign,
      up: (props) => {
        switch (props.align) {
          case "start":
            props.align = "start-legacy";
            return;
          case "end":
            props.align = "end-legacy";
            return;
          default:
            props.align = "middle-legacy";
            return;
        }
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions8.AddVerticalAlign,
      up: (props) => {
        props.verticalAlign = "middle";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions8.MakeUrlsValid,
      up: (props) => {
        if (!validation_exports.linkUrl.isValid(props.url)) {
          props.url = "";
        }
      },
      down: (_props) => {
      }
    },
    {
      id: Versions8.AddFontSizeAdjustment,
      up: (props) => {
        props.fontSizeAdjustment = 0;
      },
      down: (props) => {
        delete props.fontSizeAdjustment;
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLTextShape.mjs
var textShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  align: DefaultHorizontalAlignStyle,
  w: validation_exports.nonZeroNumber,
  text: validation_exports.string,
  scale: validation_exports.nonZeroNumber,
  autoSize: validation_exports.boolean
};
var Versions9 = createShapePropsMigrationIds("text", {
  RemoveJustify: 1
});
var textShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions9.RemoveJustify,
      up: (props) => {
        if (props.align === "justify") {
          props.align = "start";
        }
      },
      down: RETIRED_DOWN_MIGRATION
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/shapes/TLVideoShape.mjs
var videoShapeProps = {
  w: validation_exports.nonZeroNumber,
  h: validation_exports.nonZeroNumber,
  time: validation_exports.number,
  playing: validation_exports.boolean,
  url: validation_exports.linkUrl,
  assetId: assetIdValidator.nullable()
};
var Versions10 = createShapePropsMigrationIds("video", {
  AddUrlProp: 1,
  MakeUrlsValid: 2
});
var videoShapeMigrations = createShapePropsMigrationSequence({
  sequence: [
    {
      id: Versions10.AddUrlProp,
      up: (props) => {
        props.url = "";
      },
      down: RETIRED_DOWN_MIGRATION
    },
    {
      id: Versions10.MakeUrlsValid,
      up: (props) => {
        if (!validation_exports.linkUrl.isValid(props.url)) {
          props.url = "";
        }
      },
      down: (_props) => {
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/store-migrations.mjs
var Versions11 = createMigrationIds("com.tldraw.store", {
  RemoveCodeAndIconShapeTypes: 1,
  AddInstancePresenceType: 2,
  RemoveTLUserAndPresenceAndAddPointer: 3,
  RemoveUserDocument: 4
});
var storeMigrations = createMigrationSequence({
  sequenceId: "com.tldraw.store",
  retroactive: false,
  sequence: [
    {
      id: Versions11.RemoveCodeAndIconShapeTypes,
      scope: "store",
      up: (store2) => {
        for (const [id, record] of objectMapEntries(store2)) {
          if (record.typeName === "shape" && (record.type === "icon" || record.type === "code")) {
            delete store2[id];
          }
        }
      }
    },
    {
      id: Versions11.AddInstancePresenceType,
      scope: "store",
      up(_store) {
      }
    },
    {
      id: Versions11.RemoveTLUserAndPresenceAndAddPointer,
      scope: "store",
      up: (store2) => {
        for (const [id, record] of objectMapEntries(store2)) {
          if (record.typeName.match(/^(user|user_presence)$/)) {
            delete store2[id];
          }
        }
      }
    },
    {
      id: Versions11.RemoveUserDocument,
      scope: "store",
      up: (store2) => {
        for (const [id, record] of objectMapEntries(store2)) {
          if (record.typeName.match("user_document")) {
            delete store2[id];
          }
        }
      }
    }
  ]
});

// node_modules/@tldraw/tlschema/dist-esm/createTLSchema.mjs
var defaultShapeSchemas = {
  arrow: { migrations: arrowShapeMigrations, props: arrowShapeProps },
  bookmark: { migrations: bookmarkShapeMigrations, props: bookmarkShapeProps },
  draw: { migrations: drawShapeMigrations, props: drawShapeProps },
  embed: { migrations: embedShapeMigrations, props: embedShapeProps },
  frame: { migrations: frameShapeMigrations, props: frameShapeProps },
  geo: { migrations: geoShapeMigrations, props: geoShapeProps },
  group: { migrations: groupShapeMigrations, props: groupShapeProps },
  highlight: { migrations: highlightShapeMigrations, props: highlightShapeProps },
  image: { migrations: imageShapeMigrations, props: imageShapeProps },
  line: { migrations: lineShapeMigrations, props: lineShapeProps },
  note: { migrations: noteShapeMigrations, props: noteShapeProps },
  text: { migrations: textShapeMigrations, props: textShapeProps },
  video: { migrations: videoShapeMigrations, props: videoShapeProps }
};
function createTLSchema({
  shapes = defaultShapeSchemas,
  migrations
} = {}) {
  var _a2;
  const stylesById = /* @__PURE__ */ new Map();
  for (const shape of objectMapValues(shapes)) {
    for (const style of getShapePropKeysByStyle((_a2 = shape.props) != null ? _a2 : {}).keys()) {
      if (stylesById.has(style.id) && stylesById.get(style.id) !== style) {
        throw new Error(`Multiple StyleProp instances with the same id: ${style.id}`);
      }
      stylesById.set(style.id, style);
    }
  }
  const ShapeRecordType = createShapeRecordType(shapes);
  const InstanceRecordType = createInstanceRecordType(stylesById);
  return StoreSchema.create({
    asset: AssetRecordType,
    camera: CameraRecordType,
    document: DocumentRecordType,
    instance: InstanceRecordType,
    instance_page_state: InstancePageStateRecordType,
    page: PageRecordType,
    instance_presence: InstancePresenceRecordType,
    pointer: PointerRecordType,
    shape: ShapeRecordType
  }, {
    migrations: [
      storeMigrations,
      assetMigrations,
      cameraMigrations,
      documentMigrations,
      instanceMigrations,
      instancePageStateMigrations,
      pageMigrations,
      instancePresenceMigrations,
      pointerMigrations,
      rootShapeMigrations,
      bookmarkAssetMigrations,
      imageAssetMigrations,
      videoAssetMigrations,
      ...processShapeMigrations(shapes),
      ...migrations != null ? migrations : []
    ],
    onValidationFailure,
    createIntegrityChecker
  });
}

// node_modules/@tldraw/tlschema/dist-esm/translations/languages.mjs
var LANGUAGES = [
  { locale: "ca", label: "Catal\xE0" },
  { locale: "cs", label: "\u010Ce\u0161tina" },
  { locale: "da", label: "Danish" },
  { locale: "de", label: "Deutsch" },
  { locale: "en", label: "English" },
  { locale: "es", label: "Espa\xF1ol" },
  { locale: "fr", label: "Fran\xE7ais" },
  { locale: "gl", label: "Galego" },
  { locale: "hr", label: "Hrvatski" },
  { locale: "it", label: "Italiano" },
  { locale: "hu", label: "Magyar" },
  { locale: "no", label: "Norwegian" },
  { locale: "pl", label: "Polski" },
  { locale: "pt-br", label: "Portugu\xEAs - Brasil" },
  { locale: "pt-pt", label: "Portugu\xEAs - Europeu" },
  { locale: "ro", label: "Rom\xE2n\u0103" },
  { locale: "ru", label: "Russian" },
  { locale: "sl", label: "Sloven\u0161\u010Dina" },
  { locale: "fi", label: "Suomi" },
  { locale: "sv", label: "Svenska" },
  { locale: "vi", label: "Ti\u1EBFng Vi\u1EC7t" },
  { locale: "tr", label: "T\xFCrk\xE7e" },
  { locale: "uk", label: "Ukrainian" },
  { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
  { locale: "ar", label: "\u0639\u0631\u0628\u064A" },
  { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC" },
  { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC" },
  { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940" },
  { locale: "hi-in", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
  { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" },
  { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22" },
  { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C" },
  { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4" },
  { locale: "ja", label: "\u65E5\u672C\u8A9E" },
  { locale: "zh-cn", label: "\u7B80\u4F53\u4E2D\u6587" },
  { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)" }
];

// node_modules/@tldraw/tlschema/dist-esm/translations/translations.mjs
function getDefaultTranslationLocale() {
  var _a2;
  const locales = typeof window !== "undefined" ? (_a2 = window.navigator.languages) != null ? _a2 : ["en"] : ["en"];
  return _getDefaultTranslationLocale(locales);
}
function _getDefaultTranslationLocale(locales) {
  for (const locale of locales) {
    const supportedLocale = getSupportedLocale(locale);
    if (supportedLocale) {
      return supportedLocale;
    }
  }
  return "en";
}
var DEFAULT_LOCALE_REGIONS = {
  zh: "zh-cn",
  pt: "pt-br",
  ko: "ko-kr",
  hi: "hi-in"
};
function getSupportedLocale(locale) {
  const exactMatch = LANGUAGES.find((t2) => t2.locale === locale.toLowerCase());
  if (exactMatch) {
    return exactMatch.locale;
  }
  const [language, region] = locale.split(/[-_]/).map((s) => s.toLowerCase());
  if (region) {
    const languageMatch = LANGUAGES.find((t2) => t2.locale === language);
    if (languageMatch) {
      return languageMatch.locale;
    }
  }
  if (language in DEFAULT_LOCALE_REGIONS) {
    return DEFAULT_LOCALE_REGIONS[language];
  }
  return null;
}

// node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_classnames11 = __toESM(require_classnames(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/components/ErrorBoundary.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var initialState = { error: null };
var ErrorBoundary = class extends React2.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", initialState);
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  componentDidCatch(error) {
    var _a2, _b2;
    (_b2 = (_a2 = this.props).onError) == null ? void 0 : _b2.call(_a2, error);
  }
  render() {
    const { error } = this.state;
    if (error !== null) {
      const { fallback: Fallback } = this.props;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fallback, { error });
    }
    return this.props.children;
  }
};
function OptionalErrorBoundary({
  children,
  fallback,
  ...props
}) {
  if (fallback === null) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ErrorBoundary, { fallback, ...props, children });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var import_classnames9 = __toESM(require_classnames(), 1);
var import_react29 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditor.mjs
var import_react8 = __toESM(require_react(), 1);
var EditorContext = import_react8.default.createContext({});
function useEditor() {
  return import_react8.default.useContext(EditorContext);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditorComponents.mjs
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var import_react28 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBackground.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function DefaultBackground() {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "tl-background" });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBrush.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react10 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useTransform.mjs
var import_react9 = __toESM(require_react(), 1);
function useTransform(ref, x, y, scale, rotate, additionalOffset) {
  (0, import_react9.useLayoutEffect)(() => {
    const elm = ref.current;
    if (!elm)
      return;
    if (x === void 0)
      return;
    let trans = `translate(${x}px, ${y}px)`;
    if (scale !== void 0) {
      trans += ` scale(${scale})`;
    }
    if (rotate !== void 0) {
      trans += ` rotate(${rotate}rad)`;
    }
    if (additionalOffset) {
      trans += ` translate(${additionalOffset.x}px, ${additionalOffset.y}px)`;
    }
    elm.style.transform = trans;
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/easings.mjs
var EASINGS = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => t2 * (2 - t2),
  easeInOutQuad: (t2) => t2 < 0.5 ? 2 * t2 * t2 : -1 + (4 - 2 * t2) * t2,
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => --t2 * t2 * t2 + 1,
  easeInOutCubic: (t2) => t2 < 0.5 ? 4 * t2 * t2 * t2 : (t2 - 1) * (2 * t2 - 2) * (2 * t2 - 2) + 1,
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => 1 - --t2 * t2 * t2 * t2,
  easeInOutQuart: (t2) => t2 < 0.5 ? 8 * t2 * t2 * t2 * t2 : 1 - 8 * --t2 * t2 * t2 * t2,
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => 1 + --t2 * t2 * t2 * t2 * t2,
  easeInOutQuint: (t2) => t2 < 0.5 ? 16 * t2 * t2 * t2 * t2 * t2 : 1 + 16 * --t2 * t2 * t2 * t2 * t2,
  easeInSine: (t2) => 1 - Math.cos(t2 * Math.PI / 2),
  easeOutSine: (t2) => Math.sin(t2 * Math.PI / 2),
  easeInOutSine: (t2) => -(Math.cos(Math.PI * t2) - 1) / 2,
  easeInExpo: (t2) => t2 <= 0 ? 0 : Math.pow(2, 10 * t2 - 10),
  easeOutExpo: (t2) => t2 >= 1 ? 1 : 1 - Math.pow(2, -10 * t2),
  easeInOutExpo: (t2) => t2 <= 0 ? 0 : t2 >= 1 ? 1 : t2 < 0.5 ? Math.pow(2, 20 * t2 - 10) / 2 : (2 - Math.pow(2, -20 * t2 + 10)) / 2
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/Vec.mjs
var Vec = class {
  constructor(x = 0, y = 0, z = 1) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  get pressure() {
    return this.z;
  }
  set(x = this.x, y = this.y, z = this.z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  setTo({ x = 0, y = 0, z = 1 }) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  rot(r) {
    if (r === 0)
      return this;
    const { x, y } = this;
    const s = Math.sin(r);
    const c = Math.cos(r);
    this.x = x * c - y * s;
    this.y = x * s + y * c;
    return this;
  }
  rotWith(C, r) {
    if (r === 0)
      return this;
    const x = this.x - C.x;
    const y = this.y - C.y;
    const s = Math.sin(r);
    const c = Math.cos(r);
    this.x = C.x + (x * c - y * s);
    this.y = C.y + (x * s + y * c);
    return this;
  }
  clone() {
    const { x, y, z } = this;
    return new Vec(x, y, z);
  }
  sub(V) {
    this.x -= V.x;
    this.y -= V.y;
    return this;
  }
  subXY(x, y) {
    this.x -= x;
    this.y -= y;
    return this;
  }
  subScalar(n) {
    this.x -= n;
    this.y -= n;
    return this;
  }
  add(V) {
    this.x += V.x;
    this.y += V.y;
    return this;
  }
  addXY(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }
  addScalar(n) {
    this.x += n;
    this.y += n;
    return this;
  }
  clamp(min3, max2) {
    this.x = Math.max(this.x, min3);
    this.y = Math.max(this.y, min3);
    if (max2 !== void 0) {
      this.x = Math.min(this.x, max2);
      this.y = Math.min(this.y, max2);
    }
    return this;
  }
  div(t2) {
    this.x /= t2;
    this.y /= t2;
    return this;
  }
  divV(V) {
    this.x /= V.x;
    this.y /= V.y;
    return this;
  }
  mul(t2) {
    this.x *= t2;
    this.y *= t2;
    return this;
  }
  mulV(V) {
    this.x *= V.x;
    this.y *= V.y;
    return this;
  }
  abs() {
    this.x = Math.abs(this.x);
    this.y = Math.abs(this.y);
    return this;
  }
  nudge(B, distance) {
    const tan = Vec.Tan(B, this);
    return this.add(tan.mul(distance));
  }
  neg() {
    this.x *= -1;
    this.y *= -1;
    return this;
  }
  cross(V) {
    this.x = this.y * V.z - this.z * V.y;
    this.y = this.z * V.x - this.x * V.z;
    return this;
  }
  dpr(V) {
    return Vec.Dpr(this, V);
  }
  cpr(V) {
    return Vec.Cpr(this, V);
  }
  len2() {
    return Vec.Len2(this);
  }
  len() {
    return Vec.Len(this);
  }
  pry(V) {
    return Vec.Pry(this, V);
  }
  per() {
    const { x, y } = this;
    this.x = y;
    this.y = -x;
    return this;
  }
  uni() {
    return Vec.Uni(this);
  }
  tan(V) {
    return Vec.Tan(this, V);
  }
  dist(V) {
    return Vec.Dist(this, V);
  }
  distanceToLineSegment(A, B) {
    return Vec.DistanceToLineSegment(A, B, this);
  }
  slope(B) {
    return Vec.Slope(this, B);
  }
  snapToGrid(gridSize) {
    this.x = Math.round(this.x / gridSize) * gridSize;
    this.y = Math.round(this.y / gridSize) * gridSize;
    return this;
  }
  angle(B) {
    return Vec.Angle(this, B);
  }
  toAngle() {
    return Vec.ToAngle(this);
  }
  lrp(B, t2) {
    this.x = this.x + (B.x - this.x) * t2;
    this.y = this.y + (B.y - this.y) * t2;
    return this;
  }
  equals(B) {
    return Vec.Equals(this, B);
  }
  equalsXY(x, y) {
    return Vec.EqualsXY(this, x, y);
  }
  norm() {
    const l = this.len();
    this.x = l === 0 ? 0 : this.x / l;
    this.y = l === 0 ? 0 : this.y / l;
    return this;
  }
  toFixed() {
    return Vec.ToFixed(this);
  }
  toString() {
    return Vec.ToString(Vec.ToFixed(this));
  }
  toJson() {
    return Vec.ToJson(this);
  }
  toArray() {
    return Vec.ToArray(this);
  }
  static Add(A, B) {
    return new Vec(A.x + B.x, A.y + B.y);
  }
  static AddXY(A, x, y) {
    return new Vec(A.x + x, A.y + y);
  }
  static Sub(A, B) {
    return new Vec(A.x - B.x, A.y - B.y);
  }
  static SubXY(A, x, y) {
    return new Vec(A.x - x, A.y - y);
  }
  static AddScalar(A, n) {
    return new Vec(A.x + n, A.y + n);
  }
  static SubScalar(A, n) {
    return new Vec(A.x - n, A.y - n);
  }
  static Div(A, t2) {
    return new Vec(A.x / t2, A.y / t2);
  }
  static Mul(A, t2) {
    return new Vec(A.x * t2, A.y * t2);
  }
  static DivV(A, B) {
    return new Vec(A.x / B.x, A.y / B.y);
  }
  static MulV(A, B) {
    return new Vec(A.x * B.x, A.y * B.y);
  }
  static Neg(A) {
    return new Vec(-A.x, -A.y);
  }
  static Per(A) {
    return new Vec(A.y, -A.x);
  }
  static Abs(A) {
    return new Vec(Math.abs(A.x), Math.abs(A.y));
  }
  static Dist(A, B) {
    return ((A.y - B.y) ** 2 + (A.x - B.x) ** 2) ** 0.5;
  }
  static DistMin(A, B, n) {
    return (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y) < n ** 2;
  }
  static Dist2(A, B) {
    return (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y);
  }
  static Dpr(A, B) {
    return A.x * B.x + A.y * B.y;
  }
  static Cross(A, V) {
    return new Vec(A.y * V.z - A.z * V.y, A.z * V.x - A.x * V.z);
  }
  static Cpr(A, B) {
    return A.x * B.y - B.x * A.y;
  }
  static Len2(A) {
    return A.x * A.x + A.y * A.y;
  }
  static Len(A) {
    return (A.x * A.x + A.y * A.y) ** 0.5;
  }
  static Pry(A, B) {
    return Vec.Dpr(A, B) / Vec.Len(B);
  }
  static Uni(A) {
    return Vec.Div(A, Vec.Len(A));
  }
  static Tan(A, B) {
    return Vec.Uni(Vec.Sub(A, B));
  }
  static Min(A, B) {
    return new Vec(Math.min(A.x, B.x), Math.min(A.y, B.y));
  }
  static Max(A, B) {
    return new Vec(Math.max(A.x, B.x), Math.max(A.y, B.y));
  }
  static From({ x, y, z = 1 }) {
    return new Vec(x, y, z);
  }
  static FromArray(v) {
    return new Vec(v[0], v[1]);
  }
  static Rot(A, r = 0) {
    const s = Math.sin(r);
    const c = Math.cos(r);
    return new Vec(A.x * c - A.y * s, A.x * s + A.y * c);
  }
  static RotWith(A, C, r) {
    const x = A.x - C.x;
    const y = A.y - C.y;
    const s = Math.sin(r);
    const c = Math.cos(r);
    return new Vec(C.x + (x * c - y * s), C.y + (x * s + y * c));
  }
  static NearestPointOnLineThroughPoint(A, u, P) {
    return Vec.Mul(u, Vec.Sub(P, A).pry(u)).add(A);
  }
  static NearestPointOnLineSegment(A, B, P, clamp3 = true) {
    if (Vec.Equals(A, P))
      return Vec.From(P);
    if (Vec.Equals(B, P))
      return Vec.From(P);
    const u = Vec.Tan(B, A);
    const C = Vec.Add(A, Vec.Mul(u, Vec.Sub(P, A).pry(u)));
    if (clamp3) {
      if (C.x < Math.min(A.x, B.x))
        return Vec.Cast(A.x < B.x ? A : B);
      if (C.x > Math.max(A.x, B.x))
        return Vec.Cast(A.x > B.x ? A : B);
      if (C.y < Math.min(A.y, B.y))
        return Vec.Cast(A.y < B.y ? A : B);
      if (C.y > Math.max(A.y, B.y))
        return Vec.Cast(A.y > B.y ? A : B);
    }
    return C;
  }
  static DistanceToLineThroughPoint(A, u, P) {
    return Vec.Dist(P, Vec.NearestPointOnLineThroughPoint(A, u, P));
  }
  static DistanceToLineSegment(A, B, P, clamp3 = true) {
    return Vec.Dist(P, Vec.NearestPointOnLineSegment(A, B, P, clamp3));
  }
  static Snap(A, step = 1) {
    return new Vec(Math.round(A.x / step) * step, Math.round(A.y / step) * step);
  }
  static Cast(A) {
    if (A instanceof Vec)
      return A;
    return Vec.From(A);
  }
  static Slope(A, B) {
    if (A.x === B.y)
      return NaN;
    return (A.y - B.y) / (A.x - B.x);
  }
  static IsNaN(A) {
    return isNaN(A.x) || isNaN(A.y);
  }
  static Angle(A, B) {
    return Math.atan2(B.y - A.y, B.x - A.x);
  }
  static Lrp(A, B, t2) {
    return Vec.Sub(B, A).mul(t2).add(A);
  }
  static Med(A, B) {
    return new Vec((A.x + B.x) / 2, (A.y + B.y) / 2);
  }
  static Equals(A, B) {
    return Math.abs(A.x - B.x) < 1e-4 && Math.abs(A.y - B.y) < 1e-4;
  }
  static EqualsXY(A, x, y) {
    return A.x === x && A.y === y;
  }
  static Clockwise(A, B, C) {
    return (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0;
  }
  static Rescale(A, n) {
    const l = Vec.Len(A);
    return new Vec(n * A.x / l, n * A.y / l);
  }
  static ScaleWithOrigin(A, scale, origin) {
    return Vec.Sub(A, origin).mul(scale).add(origin);
  }
  static ToFixed(A, n = 2) {
    return new Vec(+A.x.toFixed(n), +A.y.toFixed(n), +A.z.toFixed(n));
  }
  static Nudge(A, B, distance) {
    return Vec.Add(A, Vec.Tan(B, A).mul(distance));
  }
  static ToString(A) {
    return `${A.x}, ${A.y}`;
  }
  static ToAngle(A) {
    let r = Math.atan2(A.y, A.x);
    if (r < 0)
      r += Math.PI * 2;
    return r;
  }
  static FromAngle(r, length = 1) {
    return new Vec(Math.cos(r) * length, Math.sin(r) * length);
  }
  static ToArray(A) {
    return [A.x, A.y, A.z];
  }
  static ToJson(A) {
    const { x, y, z } = A;
    return { x, y, z };
  }
  static Average(arr) {
    const len = arr.length;
    const avg = new Vec(0, 0);
    if (len === 0) {
      return avg;
    }
    for (let i = 0; i < len; i++) {
      avg.add(arr[i]);
    }
    return avg.div(len);
  }
  static Clamp(A, min3, max2) {
    if (max2 === void 0) {
      return new Vec(Math.min(Math.max(A.x, min3)), Math.min(Math.max(A.y, min3)));
    }
    return new Vec(Math.min(Math.max(A.x, min3), max2), Math.min(Math.max(A.y, min3), max2));
  }
  static PointsBetween(A, B, steps = 6) {
    const results = [];
    for (let i = 0; i < steps; i++) {
      const t2 = EASINGS.easeInQuad(i / (steps - 1));
      const point = Vec.Lrp(A, B, t2);
      point.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t2)) * 0.65);
      results.push(point);
    }
    return results;
  }
  static SnapToGrid(A, gridSize = 8) {
    return new Vec(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize);
  }
};
var ease = (t2) => t2 < 0.5 ? 2 * t2 * t2 : -1 + (4 - 2 * t2) * t2;

// node_modules/@tldraw/editor/dist-esm/lib/primitives/utils.mjs
function precise(A) {
  return `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `;
}
function average(A, B) {
  return `${toDomPrecision((A.x + B.x) / 2)},${toDomPrecision((A.y + B.y) / 2)} `;
}
var PI = Math.PI;
var HALF_PI = PI / 2;
var PI2 = PI * 2;
var SIN = Math.sin;
function clamp(n, min3, max2) {
  return Math.max(min3, typeof max2 !== "undefined" ? Math.min(n, max2) : n);
}
function toPrecision(n, precision = 1e10) {
  if (!n)
    return 0;
  return Math.round(n * precision) / precision;
}
function approximately(a, b, precision = 1e-6) {
  return Math.abs(a - b) <= precision;
}
function perimeterOfEllipse(rx, ry) {
  const h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
  const p = PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
  return p;
}
function canonicalizeRotation(a) {
  a = a % PI2;
  if (a < 0) {
    a = a + PI2;
  } else if (a === 0) {
    a = 0;
  }
  return a;
}
function clockwiseAngleDist(a0, a1) {
  a0 = canonicalizeRotation(a0);
  a1 = canonicalizeRotation(a1);
  if (a0 > a1) {
    a1 += PI2;
  }
  return a1 - a0;
}
function counterClockwiseAngleDist(a0, a1) {
  return PI2 - clockwiseAngleDist(a0, a1);
}
function shortAngleDist(a0, a1) {
  const da = (a1 - a0) % PI2;
  return 2 * da % PI2 - da;
}
function clampRadians(r) {
  return (PI2 + r) % PI2;
}
function snapAngle(r, segments) {
  const seg = PI2 / segments;
  let ang = Math.floor((clampRadians(r) + seg / 2) / seg) * seg % PI2;
  if (ang < PI)
    ang += PI2;
  if (ang > PI)
    ang -= PI2;
  return ang;
}
function areAnglesCompatible(a, b) {
  return a === b || approximately(a % (Math.PI / 2) - b % (Math.PI / 2), 0);
}
function degreesToRadians(d) {
  return d * PI / 180;
}
function radiansToDegrees(r) {
  return r * 180 / PI;
}
function getPointOnCircle(center, r, a) {
  return new Vec(center.x, center.y).add(Vec.FromAngle(a, r));
}
function getPolygonVertices(width, height, sides2) {
  const cx = width / 2;
  const cy = height / 2;
  const pointsOnPerimeter = [];
  let minX = Infinity;
  let maxX = -Infinity;
  let minY = Infinity;
  let maxY = -Infinity;
  for (let i = 0; i < sides2; i++) {
    const step = PI2 / sides2;
    const t2 = -HALF_PI + i * step;
    const x = cx + cx * Math.cos(t2);
    const y = cy + cy * Math.sin(t2);
    if (x < minX)
      minX = x;
    if (y < minY)
      minY = y;
    if (x > maxX)
      maxX = x;
    if (y > maxY)
      maxY = y;
    pointsOnPerimeter.push(new Vec(x, y));
  }
  const w = maxX - minX;
  const h = maxY - minY;
  const dx = width - w;
  const dy = height - h;
  if (dx !== 0 || dy !== 0) {
    for (let i = 0; i < pointsOnPerimeter.length; i++) {
      const pt = pointsOnPerimeter[i];
      pt.x = (pt.x - minX) / w * width;
      pt.y = (pt.y - minY) / h * height;
    }
  }
  return pointsOnPerimeter;
}
function rangesOverlap(a0, a1, b0, b1) {
  return a0 < b1 && b0 < a1;
}
function rangeIntersection(a0, a1, b0, b1) {
  const min3 = Math.max(a0, b0);
  const max2 = Math.min(a1, b1);
  if (min3 <= max2) {
    return [min3, max2];
  }
  return null;
}
function cross(x, y, z) {
  return (y.x - x.x) * (z.y - x.y) - (z.x - x.x) * (y.y - x.y);
}
function pointInPolygon(A, points) {
  let windingNumber = 0;
  let a;
  let b;
  for (let i = 0; i < points.length; i++) {
    a = points[i];
    if (a.x === A.x && a.y === A.y)
      return true;
    b = points[(i + 1) % points.length];
    if (Vec.Dist(A, a) + Vec.Dist(A, b) === Vec.Dist(a, b))
      return true;
    if (a.y <= A.y) {
      if (b.y > A.y && cross(a, b, A) > 0) {
        windingNumber += 1;
      }
    } else if (b.y <= A.y && cross(a, b, A) < 0) {
      windingNumber -= 1;
    }
  }
  return windingNumber !== 0;
}
function toDomPrecision(v) {
  return Math.round(v * 1e4) / 1e4;
}
function toFixed(v) {
  return Math.round(v * 100) / 100;
}
var isSafeFloat = (n) => {
  return Math.abs(n) < Number.MAX_SAFE_INTEGER;
};
function angleDistance(fromAngle, toAngle, direction) {
  const dist = direction < 0 ? clockwiseAngleDist(fromAngle, toAngle) : counterClockwiseAngleDist(fromAngle, toAngle);
  return dist;
}
function getPointInArcT(mAB, A, B, P) {
  let mAP;
  if (Math.abs(mAB) > PI) {
    mAP = shortAngleDist(A, P);
    const mPB = shortAngleDist(P, B);
    if (Math.abs(mAP) < Math.abs(mPB)) {
      return mAP / mAB;
    } else {
      return (mAB - mPB) / mAB;
    }
  } else {
    mAP = shortAngleDist(A, P);
    const t2 = mAP / mAB;
    if (Math.sign(mAP) !== Math.sign(mAB)) {
      return Math.abs(t2) > 0.5 ? 1 : 0;
    }
    return t2;
  }
}
function getArcMeasure(A, B, sweepFlag, largeArcFlag) {
  const m = 2 * ((B - A) % PI2) % PI2 - (B - A) % PI2;
  if (!largeArcFlag)
    return m;
  return (PI2 - Math.abs(m)) * (sweepFlag ? 1 : -1);
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBrush.mjs
var DefaultBrush = ({ brush, color, opacity, className }) => {
  const rSvg = (0, import_react10.useRef)(null);
  useTransform(rSvg, brush.x, brush.y);
  const w = toDomPrecision(Math.max(1, brush.w));
  const h = toDomPrecision(Math.max(1, brush.h));
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("svg", { className: "tl-overlays__item", ref: rSvg, children: color ? /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("g", { className: "tl-brush", opacity, children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("rect", { width: w, height: h, fill: color, opacity: 0.75 }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("rect", { width: w, height: h, fill: "none", stroke: color, opacity: 0.1 })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("rect", { className: `tl-brush tl-brush__default ${className}`, width: w, height: h }) });
};

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCanvas.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_classnames = __toESM(require_classnames(), 1);
var import_react22 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/constants.mjs
var MAX_SHAPES_PER_PAGE = 2e3;
var MAX_PAGES = 40;
var ANIMATION_MEDIUM_MS = 320;
var ZOOMS = [0.1, 0.25, 0.5, 1, 2, 4, 8];
var MIN_ZOOM = 0.1;
var MAX_ZOOM = 8;
var FOLLOW_CHASE_PROPORTION = 0.5;
var FOLLOW_CHASE_PAN_SNAP = 0.1;
var FOLLOW_CHASE_PAN_UNSNAP = 0.2;
var FOLLOW_CHASE_ZOOM_SNAP = 5e-3;
var FOLLOW_CHASE_ZOOM_UNSNAP = 0.05;
var DOUBLE_CLICK_DURATION = 450;
var MULTI_CLICK_DURATION = 200;
var COARSE_DRAG_DISTANCE = 36;
var DRAG_DISTANCE = 16;
var SVG_PADDING = 32;
var HASH_PATTERN_ZOOM_NAMES = {};
for (let zoom = 1; zoom <= Math.ceil(MAX_ZOOM); zoom++) {
  HASH_PATTERN_ZOOM_NAMES[zoom + "_dark"] = `hash_pattern_zoom_${zoom}_dark`;
  HASH_PATTERN_ZOOM_NAMES[zoom + "_light"] = `hash_pattern_zoom_${zoom}_light`;
}
var DEFAULT_ANIMATION_OPTIONS = {
  duration: 0,
  easing: EASINGS.easeInOutCubic
};
var CAMERA_SLIDE_FRICTION = 0.09;
var GRID_STEPS = [
  { min: -1, mid: 0.15, step: 64 },
  { min: 0.05, mid: 0.375, step: 16 },
  { min: 0.15, mid: 1, step: 4 },
  { min: 0.7, mid: 2.5, step: 1 }
];
var COLLABORATOR_INACTIVE_TIMEOUT = 6e4;
var COLLABORATOR_IDLE_TIMEOUT = 3e3;
var COLLABORATOR_CHECK_INTERVAL = 1200;
var INTERNAL_POINTER_IDS = {
  CAMERA_MOVE: -10
};
var CAMERA_MOVING_TIMEOUT = 64;
var HIT_TEST_MARGIN = 8;
var EDGE_SCROLL_SPEED = 20;
var EDGE_SCROLL_DISTANCE = 8;
var COARSE_POINTER_WIDTH = 12;
var COARSE_HANDLE_RADIUS = 20;
var HANDLE_RADIUS = 12;
var SIDES = ["top", "right", "bottom", "left"];
var LONG_PRESS_DURATION = 500;
var TEXT_SHADOW_LOD = 0.35;

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useCanvasEvents.mjs
var import_react11 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/utils/debug-flags.mjs
var featureFlags = {};
var pointerCaptureTrackingObject = createDebugValue("pointerCaptureTrackingObject", {
  defaults: { all: /* @__PURE__ */ new Map() },
  shouldStoreForSession: false
});
var debugFlags = {
  logPreventDefaults: createDebugValue("logPreventDefaults", {
    defaults: { all: false }
  }),
  logPointerCaptures: createDebugValue("logPointerCaptures", {
    defaults: { all: false }
  }),
  logElementRemoves: createDebugValue("logElementRemoves", {
    defaults: { all: false }
  }),
  debugSvg: createDebugValue("debugSvg", {
    defaults: { all: false }
  }),
  showFps: createDebugValue("showFps", {
    defaults: { all: false }
  }),
  throwToBlob: createDebugValue("throwToBlob", {
    defaults: { all: false }
  }),
  reconnectOnPing: createDebugValue("reconnectOnPing", {
    defaults: { all: false }
  }),
  debugCursors: createDebugValue("debugCursors", {
    defaults: { all: false }
  }),
  forceSrgb: createDebugValue("forceSrgbColors", { defaults: { all: false } }),
  debugGeometry: createDebugValue("debugGeometry", { defaults: { all: false } }),
  hideShapes: createDebugValue("hideShapes", { defaults: { all: false } }),
  editOnType: createDebugValue("editOnType", { defaults: { all: false } })
};
if (typeof Element !== "undefined") {
  const nativeElementRemoveChild = Element.prototype.removeChild;
  react("element removal logging", () => {
    if (debugFlags.logElementRemoves.get()) {
      Element.prototype.removeChild = function(child) {
        console.warn("[tldraw] removing child:", child);
        return nativeElementRemoveChild.call(this, child);
      };
    } else {
      Element.prototype.removeChild = nativeElementRemoveChild;
    }
  });
}
function createDebugValue(name, {
  defaults: defaults2,
  shouldStoreForSession = true
}) {
  return createDebugValueBase({
    name,
    defaults: defaults2,
    shouldStoreForSession
  });
}
function createDebugValueBase(def) {
  const defaultValue = getDefaultValue(def);
  const storedValue = def.shouldStoreForSession ? getStoredInitialValue(def.name) : null;
  const valueAtom = atom(`debug:${def.name}`, storedValue != null ? storedValue : defaultValue);
  if (typeof window !== "undefined") {
    if (def.shouldStoreForSession) {
      react(`debug:${def.name}`, () => {
        const currentValue = valueAtom.get();
        if (currentValue === defaultValue) {
          deleteFromSessionStorage(`tldraw_debug:${def.name}`);
        } else {
          setInSessionStorage(`tldraw_debug:${def.name}`, JSON.stringify(currentValue));
        }
      });
    }
    Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
      get() {
        return valueAtom.get();
      },
      set(newValue) {
        valueAtom.set(newValue);
      },
      configurable: true
    });
  }
  return Object.assign(valueAtom, def);
}
function getStoredInitialValue(name) {
  var _a2;
  try {
    return JSON.parse((_a2 = getFromSessionStorage(`tldraw_debug:${name}`)) != null ? _a2 : "null");
  } catch (err) {
    return null;
  }
}
function readEnv(fn) {
  try {
    return fn();
  } catch (e) {
    return null;
  }
}
function getDefaultValue(def) {
  var _a2, _b2, _c, _d, _e, _f;
  const env = (_c = (_b2 = (_a2 = readEnv(() => process.env.TLDRAW_ENV)) != null ? _a2 : readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV)) != null ? _b2 : readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV)) != null ? _c : "production";
  switch (env) {
    case "production":
      return (_d = def.defaults.production) != null ? _d : def.defaults.all;
    case "preview":
    case "staging":
      return (_e = def.defaults.staging) != null ? _e : def.defaults.all;
    default:
      return (_f = def.defaults.development) != null ? _f : def.defaults.all;
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/dom.mjs
function loopToHtmlElement(elm) {
  if (elm instanceof HTMLElement)
    return elm;
  if (elm.parentElement)
    return loopToHtmlElement(elm.parentElement);
  else
    throw Error("Could not find a parent element of an HTML type!");
}
function preventDefault(event) {
  event.preventDefault();
  if (debugFlags.logPreventDefaults.get()) {
    console.warn("preventDefault called on event:", event);
  }
}
function setPointerCapture(element, event) {
  var _a2;
  element.setPointerCapture(event.pointerId);
  if (debugFlags.logPointerCaptures.get()) {
    const trackingObj = pointerCaptureTrackingObject.get();
    trackingObj.set(element, ((_a2 = trackingObj.get(element)) != null ? _a2 : 0) + 1);
    console.warn("setPointerCapture called on element:", element, event);
  }
}
function releasePointerCapture(element, event) {
  if (!element.hasPointerCapture(event.pointerId)) {
    return;
  }
  element.releasePointerCapture(event.pointerId);
  if (debugFlags.logPointerCaptures.get()) {
    const trackingObj = pointerCaptureTrackingObject.get();
    if (trackingObj.get(element) === 1) {
      trackingObj.delete(element);
    } else if (trackingObj.has(element)) {
      trackingObj.set(element, trackingObj.get(element) - 1);
    } else {
      console.warn("Release without capture");
    }
    console.warn("releasePointerCapture called on element:", element, event);
  }
}
var stopEventPropagation = (e) => e.stopPropagation();
var setStyleProperty = (elm, property, value) => {
  if (!elm)
    return;
  elm.style.setProperty(property, value);
};

// node_modules/@tldraw/editor/dist-esm/lib/utils/getPointerInfo.mjs
function getPointerInfo(e) {
  ;
  e.isKilled = true;
  return {
    point: {
      x: e.clientX,
      y: e.clientY,
      z: e.pressure
    },
    shiftKey: e.shiftKey,
    altKey: e.altKey,
    ctrlKey: e.metaKey || e.ctrlKey,
    pointerId: e.pointerId,
    button: e.button,
    isPen: e.pointerType === "pen"
  };
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useCanvasEvents.mjs
function useCanvasEvents() {
  const editor = useEditor();
  const events = (0, import_react11.useMemo)(function canvasEvents() {
    let lastX, lastY;
    function onPointerDown(e) {
      if (e.isKilled)
        return;
      if (e.button === 2) {
        editor.dispatch({
          type: "pointer",
          target: "canvas",
          name: "right_click",
          ...getPointerInfo(e)
        });
        return;
      }
      if (e.button !== 0 && e.button !== 1 && e.button !== 5)
        return;
      setPointerCapture(e.currentTarget, e);
      editor.dispatch({
        type: "pointer",
        target: "canvas",
        name: "pointer_down",
        ...getPointerInfo(e)
      });
      if (editor.getOpenMenus().length > 0) {
        editor.updateInstanceState({
          openMenus: []
        });
        document.body.click();
        editor.getContainer().focus();
      }
    }
    function onPointerMove(e) {
      if (e.isKilled)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      editor.dispatch({
        type: "pointer",
        target: "canvas",
        name: "pointer_move",
        ...getPointerInfo(e)
      });
    }
    function onPointerUp(e) {
      if (e.isKilled)
        return;
      if (e.button !== 0 && e.button !== 1 && e.button !== 2 && e.button !== 5)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      releasePointerCapture(e.currentTarget, e);
      editor.dispatch({
        type: "pointer",
        target: "canvas",
        name: "pointer_up",
        ...getPointerInfo(e)
      });
    }
    function onPointerEnter(e) {
      if (e.isKilled)
        return;
      if (editor.getInstanceState().isPenMode && e.pointerType !== "pen")
        return;
      const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
      editor.updateInstanceState({ isHoveringCanvas: canHover ? true : null });
    }
    function onPointerLeave(e) {
      if (e.isKilled)
        return;
      if (editor.getInstanceState().isPenMode && e.pointerType !== "pen")
        return;
      const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
      editor.updateInstanceState({ isHoveringCanvas: canHover ? false : null });
    }
    function onTouchStart(e) {
      ;
      e.isKilled = true;
      document.body.click();
      preventDefault(e);
    }
    function onTouchEnd(e) {
      ;
      e.isKilled = true;
      if (e.target.tagName !== "A" && e.target.tagName !== "TEXTAREA" && !(editor.getEditingShape() && e.target.className.includes("tl-text-content"))) {
        preventDefault(e);
      }
    }
    function onDragOver(e) {
      preventDefault(e);
    }
    async function onDrop(e) {
      var _a2, _b2;
      preventDefault(e);
      if (!((_b2 = (_a2 = e.dataTransfer) == null ? void 0 : _a2.files) == null ? void 0 : _b2.length))
        return;
      const files = Array.from(e.dataTransfer.files);
      await editor.putExternalContent({
        type: "files",
        files,
        point: editor.screenToPage({ x: e.clientX, y: e.clientY }),
        ignoreParent: false
      });
    }
    function onClick(e) {
      stopEventPropagation(e);
    }
    return {
      onPointerDown,
      onPointerMove,
      onPointerUp,
      onPointerEnter,
      onPointerLeave,
      onDragOver,
      onDrop,
      onTouchStart,
      onTouchEnd,
      onClick
    };
  }, [editor]);
  return events;
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useCoarsePointer.mjs
var import_react12 = __toESM(require_react(), 1);
function useCoarsePointer() {
  const editor = useEditor();
  (0, import_react12.useEffect)(() => {
    if (editor.environment.isFirefox && !editor.environment.isAndroid && !editor.environment.isIos) {
      editor.updateInstanceState({ isCoarsePointer: false });
      return;
    }
    if (window.matchMedia) {
      const mql = window.matchMedia("(pointer: coarse)");
      const handler = () => {
        editor.updateInstanceState({ isCoarsePointer: !!mql.matches });
      };
      handler();
      if (mql) {
        mql.addEventListener("change", handler);
        return () => mql.removeEventListener("change", handler);
      }
    }
  }, [editor]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useContainer.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react13 = __toESM(require_react(), 1);
var ContainerContext = (0, import_react13.createContext)(null);
function ContainerProvider({
  container,
  children
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ContainerContext.Provider, { value: container, children });
}
function useContainer() {
  return assertExists((0, import_react13.useContext)(ContainerContext), "useContainer used outside of <Tldraw />");
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
var import_react14 = __toESM(require_react(), 1);
function useDocumentEvents() {
  const editor = useEditor();
  const container = useContainer();
  const isAppFocused = useValue("isFocused", () => editor.getInstanceState().isFocused, [editor]);
  (0, import_react14.useEffect)(() => {
    if (typeof matchMedia === void 0)
      return;
    let remove2 = null;
    const updatePixelRatio = () => {
      if (remove2 != null) {
        remove2();
      }
      const mqString = `(resolution: ${window.devicePixelRatio}dppx)`;
      const media = matchMedia(mqString);
      const safariCb = (ev) => {
        if (ev.type === "change") {
          updatePixelRatio();
        }
      };
      if (media.addEventListener) {
        media.addEventListener("change", updatePixelRatio);
      } else if (media.addListener) {
        media.addListener(safariCb);
      }
      remove2 = () => {
        if (media.removeEventListener) {
          media.removeEventListener("change", updatePixelRatio);
        } else if (media.removeListener) {
          media.removeListener(safariCb);
        }
      };
      editor.updateInstanceState({ devicePixelRatio: window.devicePixelRatio });
    };
    updatePixelRatio();
    return () => {
      remove2 == null ? void 0 : remove2();
    };
  }, [editor]);
  (0, import_react14.useEffect)(() => {
    if (!isAppFocused)
      return;
    const handleKeyDown = (e) => {
      if (e.altKey && (editor.isIn("zoom") || !editor.getPath().endsWith(".idle")) && !isFocusingInput()) {
        preventDefault(e);
      }
      if (e.isKilled)
        return;
      e.isKilled = true;
      switch (e.key) {
        case "=":
        case "-":
        case "0": {
          if (e.metaKey || e.ctrlKey) {
            preventDefault(e);
            return;
          }
          break;
        }
        case "Tab": {
          if (isFocusingInput() || editor.getIsMenuOpen()) {
            return;
          }
          break;
        }
        case ",": {
          return;
        }
        case "Escape": {
          if (editor.getEditingShape() || editor.getSelectedShapeIds().length > 0) {
            e.preventDefault();
          }
          if (editor.getOpenMenus().length > 0)
            return;
          if (!editor.inputs.keys.has("Escape")) {
            editor.inputs.keys.add("Escape");
            editor.cancel();
            container.focus();
          }
          return;
        }
        default: {
          if (isFocusingInput() || editor.getIsMenuOpen()) {
            return;
          }
        }
      }
      const info = {
        type: "keyboard",
        name: e.repeat ? "key_repeat" : "key_down",
        key: e.key,
        code: e.code,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      };
      editor.dispatch(info);
    };
    const handleKeyUp = (e) => {
      if (e.isKilled)
        return;
      e.isKilled = true;
      if (isFocusingInput() || editor.getIsMenuOpen()) {
        return;
      }
      if (e.key === ",") {
        return;
      }
      const info = {
        type: "keyboard",
        name: "key_up",
        key: e.key,
        code: e.code,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      };
      editor.dispatch(info);
    };
    function handleTouchStart(e) {
      var _a2, _b2;
      if (container.contains(e.target)) {
        const touchXPosition = e.touches[0].pageX;
        const touchXRadius = e.touches[0].radiusX || 0;
        if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > editor.getViewportScreenBounds().width - 10) {
          if (((_a2 = e.target) == null ? void 0 : _a2.tagName) === "BUTTON") {
            ;
            (_b2 = e.target) == null ? void 0 : _b2.click();
          }
          preventDefault(e);
        }
      }
    }
    const handleWheel = (e) => {
      if (container.contains(e.target) && (e.ctrlKey || e.metaKey)) {
        preventDefault(e);
      }
    };
    container.addEventListener("touchstart", handleTouchStart, { passive: false });
    container.addEventListener("wheel", handleWheel, { passive: false });
    document.addEventListener("gesturestart", preventDefault);
    document.addEventListener("gesturechange", preventDefault);
    document.addEventListener("gestureend", preventDefault);
    container.addEventListener("keydown", handleKeyDown);
    container.addEventListener("keyup", handleKeyUp);
    return () => {
      container.removeEventListener("touchstart", handleTouchStart);
      container.removeEventListener("wheel", handleWheel);
      document.removeEventListener("gesturestart", preventDefault);
      document.removeEventListener("gesturechange", preventDefault);
      document.removeEventListener("gestureend", preventDefault);
      container.removeEventListener("keydown", handleKeyDown);
      container.removeEventListener("keyup", handleKeyUp);
    };
  }, [editor, container, isAppFocused]);
}
var INPUTS = ["input", "select", "button", "textarea"];
function isFocusingInput() {
  const { activeElement } = document;
  if (activeElement && (activeElement.getAttribute("contenteditable") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1)) {
    return true;
  }
  return false;
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useFixSafariDoubleTapZoomPencilEvents.mjs
var import_react15 = __toESM(require_react(), 1);
var IGNORED_TAGS = ["textarea", "input"];
function useFixSafariDoubleTapZoomPencilEvents(ref) {
  const editor = useEditor();
  (0, import_react15.useEffect)(() => {
    const elm = ref.current;
    if (!elm)
      return;
    const handleEvent = (e) => {
      var _a2;
      if (e instanceof PointerEvent && e.pointerType === "pen") {
        ;
        e.isKilled = true;
        const { target } = e;
        if (IGNORED_TAGS.includes((_a2 = target.tagName) == null ? void 0 : _a2.toLocaleLowerCase()) || editor.isIn("select.editing_shape")) {
          return;
        }
        preventDefault(e);
      }
    };
    elm.addEventListener("touchstart", handleEvent);
    elm.addEventListener("touchend", handleEvent);
    return () => {
      elm.removeEventListener("touchstart", handleEvent);
      elm.removeEventListener("touchend", handleEvent);
    };
  }, [editor, ref]);
}

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var use_gesture_react_esm_exports = {};
__export(use_gesture_react_esm_exports, {
  createUseGesture: () => createUseGesture,
  useDrag: () => useDrag,
  useGesture: () => useGesture,
  useHover: () => useHover,
  useMove: () => useMove,
  usePinch: () => usePinch,
  useScroll: () => useScroll,
  useWheel: () => useWheel
});
var import_actions = __toESM(require_use_gesture_core_actions_cjs());
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_actions_cjs()));
var import_react16 = __toESM(require_react());
var import_core7 = __toESM(require_use_gesture_core_cjs());
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_utils_cjs()));
__reExport(use_gesture_react_esm_exports, __toESM(require_use_gesture_core_types_cjs()));
function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react16.default.useMemo(() => new import_core7.Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  import_react16.default.useEffect(ctrl.effect.bind(ctrl));
  import_react16.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function useDrag(handler, config) {
  (0, import_actions.registerAction)(import_actions.dragAction);
  return useRecognizers({
    drag: handler
  }, config || {}, "drag");
}
function usePinch(handler, config) {
  (0, import_actions.registerAction)(import_actions.pinchAction);
  return useRecognizers({
    pinch: handler
  }, config || {}, "pinch");
}
function useWheel(handler, config) {
  (0, import_actions.registerAction)(import_actions.wheelAction);
  return useRecognizers({
    wheel: handler
  }, config || {}, "wheel");
}
function useScroll(handler, config) {
  (0, import_actions.registerAction)(import_actions.scrollAction);
  return useRecognizers({
    scroll: handler
  }, config || {}, "scroll");
}
function useMove(handler, config) {
  (0, import_actions.registerAction)(import_actions.moveAction);
  return useRecognizers({
    move: handler
  }, config || {}, "move");
}
function useHover(handler, config) {
  (0, import_actions.registerAction)(import_actions.hoverAction);
  return useRecognizers({
    hover: handler
  }, config || {}, "hover");
}
function createUseGesture(actions) {
  actions.forEach(import_actions.registerAction);
  return function useGesture3(_handlers2, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = (0, import_core7.parseMergedHandlers)(_handlers2, _config || {});
    return useRecognizers(handlers, config, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config) {
  const hook = createUseGesture([import_actions.dragAction, import_actions.pinchAction, import_actions.scrollAction, import_actions.wheelAction, import_actions.moveAction, import_actions.hoverAction]);
  return hook(handlers, config || {});
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useGestureEvents.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/utils/normalizeWheel.mjs
var MAX_ZOOM_STEP = 10;
var IS_DARWIN = /Mac|iPod|iPhone|iPad/.test(typeof window === "undefined" ? "node" : window.navigator.platform);
function normalizeWheel(event) {
  let { deltaY, deltaX } = event;
  let deltaZ = 0;
  if (event.ctrlKey || event.altKey || event.metaKey) {
    const signY = Math.sign(event.deltaY);
    const absDeltaY = Math.abs(event.deltaY);
    let dy = deltaY;
    if (absDeltaY > MAX_ZOOM_STEP) {
      dy = MAX_ZOOM_STEP * signY;
    }
    deltaZ = dy / 100;
  } else {
    if (event.shiftKey && !IS_DARWIN) {
      deltaX = deltaY;
      deltaY = 0;
    }
  }
  return { x: -deltaX, y: -deltaY, z: -deltaZ };
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useGestureEvents.mjs
var useGesture2 = createUseGesture([use_gesture_react_esm_exports.wheelAction, use_gesture_react_esm_exports.pinchAction]);
var lastWheelTime = void 0;
var isWheelEndEvent = (time2) => {
  if (lastWheelTime === void 0) {
    lastWheelTime = time2;
    return false;
  }
  if (time2 - lastWheelTime > 120 && time2 - lastWheelTime < 160) {
    lastWheelTime = time2;
    return true;
  }
  lastWheelTime = time2;
  return false;
};
function useGestureEvents(ref) {
  const editor = useEditor();
  const events = React5.useMemo(() => {
    let pinchState = "not sure";
    const onWheel = ({ event }) => {
      if (!editor.getInstanceState().isFocused) {
        return;
      }
      pinchState = "not sure";
      if (isWheelEndEvent(Date.now())) {
        return;
      }
      const editingShapeId = editor.getEditingShapeId();
      if (editingShapeId) {
        const shape = editor.getShape(editingShapeId);
        if (shape) {
          const util = editor.getShapeUtil(shape);
          if (util.canScroll(shape)) {
            const bounds = editor.getShapePageBounds(editingShapeId);
            if (bounds == null ? void 0 : bounds.containsPoint(editor.inputs.currentPagePoint)) {
              return;
            }
          }
        }
      }
      preventDefault(event);
      stopEventPropagation(event);
      const delta = normalizeWheel(event);
      if (delta.x === 0 && delta.y === 0)
        return;
      const info = {
        type: "wheel",
        name: "wheel",
        delta,
        point: new Vec(event.clientX, event.clientY),
        shiftKey: event.shiftKey,
        altKey: event.altKey,
        ctrlKey: event.metaKey || event.ctrlKey
      };
      editor.dispatch(info);
    };
    let initDistanceBetweenFingers = 1;
    let initZoom = 1;
    let currZoom = 1;
    let currDistanceBetweenFingers = 0;
    const initPointBetweenFingers = new Vec();
    const prevPointBetweenFingers = new Vec();
    const onPinchStart = (gesture) => {
      const elm = ref.current;
      pinchState = "not sure";
      const { event, origin, da } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
        return;
      prevPointBetweenFingers.x = origin[0];
      prevPointBetweenFingers.y = origin[1];
      initPointBetweenFingers.x = origin[0];
      initPointBetweenFingers.y = origin[1];
      initDistanceBetweenFingers = da[0];
      initZoom = editor.getZoomLevel();
      editor.dispatch({
        type: "pinch",
        name: "pinch_start",
        point: { x: origin[0], y: origin[1], z: editor.getZoomLevel() },
        delta: { x: 0, y: 0 },
        shiftKey: event.shiftKey,
        altKey: event.altKey,
        ctrlKey: event.metaKey || event.ctrlKey
      });
    };
    const updatePinchState = (isSafariTrackpadPinch) => {
      if (isSafariTrackpadPinch) {
        pinchState = "zooming";
      }
      if (pinchState === "zooming") {
        return;
      }
      const touchDistance = Math.abs(currDistanceBetweenFingers - initDistanceBetweenFingers);
      const originDistance = Vec.Dist(initPointBetweenFingers, prevPointBetweenFingers);
      switch (pinchState) {
        case "not sure": {
          if (touchDistance > 24) {
            pinchState = "zooming";
          } else if (originDistance > 16) {
            pinchState = "panning";
          }
          break;
        }
        case "panning": {
          if (touchDistance > 64) {
            pinchState = "zooming";
          }
          break;
        }
      }
    };
    const onPinch = (gesture) => {
      const elm = ref.current;
      const { event, origin, offset: offset4, da } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
        return;
      const isSafariTrackpadPinch = gesture.type === "gesturechange" || gesture.type === "gestureend";
      currDistanceBetweenFingers = da[0];
      const dx = origin[0] - prevPointBetweenFingers.x;
      const dy = origin[1] - prevPointBetweenFingers.y;
      prevPointBetweenFingers.x = origin[0];
      prevPointBetweenFingers.y = origin[1];
      updatePinchState(isSafariTrackpadPinch);
      switch (pinchState) {
        case "zooming": {
          currZoom = offset4[0];
          editor.dispatch({
            type: "pinch",
            name: "pinch",
            point: { x: origin[0], y: origin[1], z: currZoom },
            delta: { x: dx, y: dy },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey
          });
          break;
        }
        case "panning": {
          editor.dispatch({
            type: "pinch",
            name: "pinch",
            point: { x: origin[0], y: origin[1], z: initZoom },
            delta: { x: dx, y: dy },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey
          });
          break;
        }
      }
    };
    const onPinchEnd = (gesture) => {
      const elm = ref.current;
      const { event, origin, offset: offset4 } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
        return;
      const scale = offset4[0];
      pinchState = "not sure";
      requestAnimationFrame(() => {
        editor.dispatch({
          type: "pinch",
          name: "pinch_end",
          point: { x: origin[0], y: origin[1], z: scale },
          delta: { x: origin[0], y: origin[1] },
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey
        });
      });
    };
    return {
      onWheel,
      onPinchStart,
      onPinchEnd,
      onPinch
    };
  }, [editor, ref]);
  useGesture2(events, {
    target: ref,
    eventOptions: { passive: false },
    pinch: {
      from: () => [editor.getZoomLevel(), 0],
      scaleBounds: () => {
        return { from: editor.getZoomLevel(), max: 8, min: 0.05 };
      }
    }
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useHandleEvents.mjs
var React6 = __toESM(require_react(), 1);
function getHandle(editor, id, handleId) {
  const shape = editor.getShape(id);
  const handles = editor.getShapeHandles(shape);
  return { shape, handle: handles.find((h) => h.id === handleId) };
}
function useHandleEvents(id, handleId) {
  const editor = useEditor();
  return React6.useMemo(() => {
    const onPointerDown = (e) => {
      if (e.isKilled)
        return;
      const target = loopToHtmlElement(e.currentTarget);
      setPointerCapture(target, e);
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_down",
        ...getPointerInfo(e)
      });
    };
    let lastX, lastY;
    const onPointerMove = (e) => {
      if (e.isKilled)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_move",
        ...getPointerInfo(e)
      });
    };
    const onPointerUp = (e) => {
      if (e.isKilled)
        return;
      const target = loopToHtmlElement(e.currentTarget);
      releasePointerCapture(target, e);
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_up",
        ...getPointerInfo(e)
      });
    };
    return {
      onPointerDown,
      onPointerMove,
      onPointerUp
    };
  }, [editor, id, handleId]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useScreenBounds.mjs
var import_lodash2 = __toESM(require_lodash2(), 1);
var import_react18 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/primitives/Box.mjs
var _Box = class {
  constructor(x = 0, y = 0, w = 0, h = 0) {
    __publicField(this, "x", 0);
    __publicField(this, "y", 0);
    __publicField(this, "w", 0);
    __publicField(this, "h", 0);
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  get point() {
    return new Vec(this.x, this.y);
  }
  set point(val) {
    this.x = val.x;
    this.y = val.y;
  }
  get minX() {
    return this.x;
  }
  set minX(n) {
    this.x = n;
  }
  get midX() {
    return this.x + this.w / 2;
  }
  get maxX() {
    return this.x + this.w;
  }
  get minY() {
    return this.y;
  }
  set minY(n) {
    this.y = n;
  }
  get midY() {
    return this.y + this.h / 2;
  }
  get maxY() {
    return this.y + this.h;
  }
  get width() {
    return this.w;
  }
  set width(n) {
    this.w = n;
  }
  get height() {
    return this.h;
  }
  set height(n) {
    this.h = n;
  }
  get aspectRatio() {
    return this.width / this.height;
  }
  get center() {
    return new Vec(this.midX, this.midY);
  }
  set center(v) {
    this.minX = v.x - this.width / 2;
    this.minY = v.y - this.height / 2;
  }
  get corners() {
    return [
      new Vec(this.minX, this.minY),
      new Vec(this.maxX, this.minY),
      new Vec(this.maxX, this.maxY),
      new Vec(this.minX, this.maxY)
    ];
  }
  get cornersAndCenter() {
    return [
      new Vec(this.minX, this.minY),
      new Vec(this.maxX, this.minY),
      new Vec(this.maxX, this.maxY),
      new Vec(this.minX, this.maxY),
      this.center
    ];
  }
  get sides() {
    const { corners } = this;
    return [
      [corners[0], corners[1]],
      [corners[1], corners[2]],
      [corners[2], corners[3]],
      [corners[3], corners[0]]
    ];
  }
  get size() {
    return new Vec(this.w, this.h);
  }
  toFixed() {
    this.x = toPrecision(this.x);
    this.y = toPrecision(this.y);
    this.w = toPrecision(this.w);
    this.h = toPrecision(this.h);
    return this;
  }
  setTo(B) {
    this.x = B.x;
    this.y = B.y;
    this.w = B.w;
    this.h = B.h;
    return this;
  }
  set(x = 0, y = 0, w = 0, h = 0) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    return this;
  }
  expand(A) {
    const minX = Math.min(this.minX, A.minX);
    const minY = Math.min(this.minY, A.minY);
    const maxX = Math.max(this.maxX, A.maxX);
    const maxY = Math.max(this.maxY, A.maxY);
    this.x = minX;
    this.y = minY;
    this.w = maxX - minX;
    this.h = maxY - minY;
    return this;
  }
  expandBy(n) {
    this.x -= n;
    this.y -= n;
    this.w += n * 2;
    this.h += n * 2;
    return this;
  }
  scale(n) {
    this.x /= n;
    this.y /= n;
    this.w /= n;
    this.h /= n;
    return this;
  }
  clone() {
    const { x, y, w, h } = this;
    return new _Box(x, y, w, h);
  }
  translate(delta) {
    this.x += delta.x;
    this.y += delta.y;
    return this;
  }
  snapToGrid(size4) {
    const minX = Math.round(this.minX / size4) * size4;
    const minY = Math.round(this.minY / size4) * size4;
    const maxX = Math.round(this.maxX / size4) * size4;
    const maxY = Math.round(this.maxY / size4) * size4;
    this.minX = minX;
    this.minY = minY;
    this.width = Math.max(1, maxX - minX);
    this.height = Math.max(1, maxY - minY);
  }
  collides(B) {
    return _Box.Collides(this, B);
  }
  contains(B) {
    return _Box.Contains(this, B);
  }
  includes(B) {
    return _Box.Includes(this, B);
  }
  containsPoint(V, margin = 0) {
    return _Box.ContainsPoint(this, V, margin);
  }
  getHandlePoint(handle) {
    switch (handle) {
      case "top_left":
        return new Vec(this.minX, this.minY);
      case "top_right":
        return new Vec(this.maxX, this.minY);
      case "bottom_left":
        return new Vec(this.minX, this.maxY);
      case "bottom_right":
        return new Vec(this.maxX, this.maxY);
      case "top":
        return new Vec(this.midX, this.minY);
      case "right":
        return new Vec(this.maxX, this.midY);
      case "bottom":
        return new Vec(this.midX, this.maxY);
      case "left":
        return new Vec(this.minX, this.midY);
    }
  }
  toJson() {
    return { x: this.minX, y: this.minY, w: this.w, h: this.h };
  }
  resize(handle, dx, dy) {
    const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this;
    let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this;
    switch (handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        b0x += dx;
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        b1x += dx;
        break;
      }
    }
    switch (handle) {
      case "top":
      case "top_left":
      case "top_right": {
        b0y += dy;
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        b1y += dy;
        break;
      }
    }
    const scaleX = (b1x - b0x) / (a1x - a0x);
    const scaleY = (b1y - b0y) / (a1y - a0y);
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    if (flipX) {
      const t2 = b1x;
      b1x = b0x;
      b0x = t2;
    }
    if (flipY) {
      const t2 = b1y;
      b1y = b0y;
      b0y = t2;
    }
    this.minX = b0x;
    this.minY = b0y;
    this.width = Math.abs(b1x - b0x);
    this.height = Math.abs(b1y - b0y);
  }
  union(box) {
    const minX = Math.min(this.minX, box.x);
    const minY = Math.min(this.minY, box.y);
    const maxX = Math.max(this.maxX, box.w + box.x);
    const maxY = Math.max(this.maxY, box.h + box.y);
    this.x = minX;
    this.y = minY;
    this.width = maxX - minX;
    this.height = maxY - minY;
    return this;
  }
  static From(box) {
    return new _Box(box.x, box.y, box.w, box.h);
  }
  static FromCenter(center, size4) {
    return new _Box(center.x - size4.x / 2, center.y - size4.y / 2, size4.x, size4.y);
  }
  static FromPoints(points) {
    if (points.length === 0)
      return new _Box();
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let point;
    for (let i = 0, n = points.length; i < n; i++) {
      point = points[i];
      minX = Math.min(point.x, minX);
      minY = Math.min(point.y, minY);
      maxX = Math.max(point.x, maxX);
      maxY = Math.max(point.y, maxY);
    }
    return new _Box(minX, minY, maxX - minX, maxY - minY);
  }
  static Expand(A, B) {
    const minX = Math.min(B.minX, A.minX);
    const minY = Math.min(B.minY, A.minY);
    const maxX = Math.max(B.maxX, A.maxX);
    const maxY = Math.max(B.maxY, A.maxY);
    return new _Box(minX, minY, maxX - minX, maxY - minY);
  }
  static ExpandBy(A, n) {
    return new _Box(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2);
  }
  static Resize(box, handle, dx, dy, isAspectRatioLocked = false) {
    const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box;
    let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box;
    switch (handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        b0x += dx;
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        b1x += dx;
        break;
      }
    }
    switch (handle) {
      case "top":
      case "top_left":
      case "top_right": {
        b0y += dy;
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        b1y += dy;
        break;
      }
    }
    const scaleX = (b1x - b0x) / (a1x - a0x);
    const scaleY = (b1y - b0y) / (a1y - a0y);
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    if (isAspectRatioLocked) {
      const aspectRatio = (a1x - a0x) / (a1y - a0y);
      const bw = Math.abs(b1x - b0x);
      const bh = Math.abs(b1y - b0y);
      const tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio);
      const th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio;
      const isTall = aspectRatio < bw / bh;
      switch (handle) {
        case "top_left": {
          if (isTall)
            b0y = b1y + tw;
          else
            b0x = b1x + th;
          break;
        }
        case "top_right": {
          if (isTall)
            b0y = b1y + tw;
          else
            b1x = b0x - th;
          break;
        }
        case "bottom_right": {
          if (isTall)
            b1y = b0y - tw;
          else
            b1x = b0x - th;
          break;
        }
        case "bottom_left": {
          if (isTall)
            b1y = b0y - tw;
          else
            b0x = b1x + th;
          break;
        }
        case "bottom":
        case "top": {
          const m = (b0x + b1x) / 2;
          const w = bh * aspectRatio;
          b0x = m - w / 2;
          b1x = m + w / 2;
          break;
        }
        case "left":
        case "right": {
          const m = (b0y + b1y) / 2;
          const h = bw / aspectRatio;
          b0y = m - h / 2;
          b1y = m + h / 2;
          break;
        }
      }
    }
    if (flipX) {
      const t2 = b1x;
      b1x = b0x;
      b0x = t2;
    }
    if (flipY) {
      const t2 = b1y;
      b1y = b0y;
      b0y = t2;
    }
    const final = new _Box(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y));
    return {
      box: final,
      scaleX: +(final.width / box.width * (scaleX > 0 ? 1 : -1)).toFixed(5),
      scaleY: +(final.height / box.height * (scaleY > 0 ? 1 : -1)).toFixed(5)
    };
  }
  equals(other) {
    return _Box.Equals(this, other);
  }
  static Equals(a, b) {
    return b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h;
  }
  zeroFix() {
    this.w = Math.max(1, this.w);
    this.h = Math.max(1, this.h);
    return this;
  }
  static ZeroFix(other) {
    return new _Box(other.x, other.y, Math.max(1, other.w), Math.max(1, other.h));
  }
};
var Box = _Box;
__publicField(Box, "Collides", (A, B) => {
  return !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY);
});
__publicField(Box, "Contains", (A, B) => {
  return A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX;
});
__publicField(Box, "Includes", (A, B) => {
  return _Box.Collides(A, B) || _Box.Contains(A, B);
});
__publicField(Box, "ContainsPoint", (A, B, margin = 0) => {
  return !(B.x < A.minX - margin || B.y < A.minY - margin || B.x > A.maxX + margin || B.y > A.maxY + margin);
});
__publicField(Box, "Common", (boxes) => {
  let minX = Infinity;
  let minY = Infinity;
  let maxX = -Infinity;
  let maxY = -Infinity;
  for (let i = 0; i < boxes.length; i++) {
    const B = boxes[i];
    minX = Math.min(minX, B.minX);
    minY = Math.min(minY, B.minY);
    maxX = Math.max(maxX, B.maxX);
    maxY = Math.max(maxY, B.maxY);
  }
  return new _Box(minX, minY, maxX - minX, maxY - minY);
});
__publicField(Box, "Sides", (A, inset = 0) => {
  const { corners } = A;
  if (inset) {
  }
  return [
    [corners[0], corners[1]],
    [corners[1], corners[2]],
    [corners[2], corners[3]],
    [corners[3], corners[0]]
  ];
});
function flipSelectionHandleY(handle) {
  switch (handle) {
    case "top":
      return "bottom";
    case "bottom":
      return "top";
    case "top_left":
      return "bottom_left";
    case "top_right":
      return "bottom_right";
    case "bottom_left":
      return "top_left";
    case "bottom_right":
      return "top_right";
    default:
      return handle;
  }
}
function flipSelectionHandleX(handle) {
  switch (handle) {
    case "left":
      return "right";
    case "right":
      return "left";
    case "top_left":
      return "top_right";
    case "top_right":
      return "top_left";
    case "bottom_left":
      return "bottom_right";
    case "bottom_right":
      return "bottom_left";
    default:
      return handle;
  }
}
function isSelectionCorner(selection) {
  return selection === "top_left" || selection === "top_right" || selection === "bottom_right" || selection === "bottom_left";
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useScreenBounds.mjs
function useScreenBounds(ref) {
  const editor = useEditor();
  (0, import_react18.useLayoutEffect)(() => {
    let prevBounds = new Box();
    function updateScreenBounds() {
      const container2 = ref.current;
      if (!container2)
        return null;
      const rect = container2.getBoundingClientRect();
      const next = new Box(rect.left || rect.x, rect.top || rect.y, Math.max(rect.width, 1), Math.max(rect.height, 1));
      if (prevBounds.equals(next))
        return;
      editor.updateViewportScreenBounds(next);
      prevBounds = next;
    }
    updateScreenBounds();
    const updateBounds = (0, import_lodash2.default)(updateScreenBounds, 200, {
      trailing: true
    });
    const interval = setInterval(updateBounds, 1e3);
    window.addEventListener("resize", updateBounds);
    const resizeObserver = new ResizeObserver((entries) => {
      if (!entries[0].contentRect)
        return;
      updateBounds();
    });
    const container = ref.current;
    let scrollingParent = null;
    if (container) {
      resizeObserver.observe(container);
      scrollingParent = getNearestScrollableContainer(container);
      scrollingParent.addEventListener("scroll", updateBounds);
    }
    return () => {
      clearInterval(interval);
      window.removeEventListener("resize", updateBounds);
      resizeObserver.disconnect();
      scrollingParent == null ? void 0 : scrollingParent.removeEventListener("scroll", updateBounds);
    };
  }, [editor, ref]);
}
var getNearestScrollableContainer = (element) => {
  let parent = element.parentElement;
  while (parent) {
    if (parent === document.body) {
      return document;
    }
    const { overflowY } = window.getComputedStyle(parent);
    const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
    if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return document;
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/Mat.mjs
var _Mat = class {
  constructor(a, b, c, d, e, f) {
    __publicField(this, "a", 1);
    __publicField(this, "b", 0);
    __publicField(this, "c", 0);
    __publicField(this, "d", 1);
    __publicField(this, "e", 0);
    __publicField(this, "f", 0);
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.e = e;
    this.f = f;
  }
  equals(m) {
    return this === m || this.a === m.a && this.b === m.b && this.c === m.c && this.d === m.d && this.e === m.e && this.f === m.f;
  }
  identity() {
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.e = 0;
    this.f = 0;
    return this;
  }
  multiply(m) {
    const m2 = m;
    const { a, b, c, d, e, f } = this;
    this.a = a * m2.a + c * m2.b;
    this.c = a * m2.c + c * m2.d;
    this.e = a * m2.e + c * m2.f + e;
    this.b = b * m2.a + d * m2.b;
    this.d = b * m2.c + d * m2.d;
    this.f = b * m2.e + d * m2.f + f;
    return this;
  }
  rotate(r, cx, cy) {
    if (r === 0)
      return this;
    if (cx === void 0)
      return this.multiply(_Mat.Rotate(r));
    return this.translate(cx, cy).multiply(_Mat.Rotate(r)).translate(-cx, -cy);
  }
  translate(x, y) {
    return this.multiply(_Mat.Translate(x, y));
  }
  scale(x, y) {
    return this.multiply(_Mat.Scale(x, y));
  }
  invert() {
    const { a, b, c, d, e, f } = this;
    const denom = a * d - b * c;
    this.a = d / denom;
    this.b = b / -denom;
    this.c = c / -denom;
    this.d = a / denom;
    this.e = (d * e - c * f) / -denom;
    this.f = (b * e - a * f) / denom;
    return this;
  }
  applyToPoint(point) {
    return _Mat.applyToPoint(this, point);
  }
  applyToPoints(points) {
    return _Mat.applyToPoints(this, points);
  }
  rotation() {
    return _Mat.Rotation(this);
  }
  point() {
    return _Mat.Point(this);
  }
  decomposed() {
    return _Mat.Decompose(this);
  }
  toCssString() {
    return _Mat.toCssString(this);
  }
  setTo(model2) {
    Object.assign(this, model2);
    return this;
  }
  decompose() {
    return _Mat.Decompose(this);
  }
  clone() {
    return new _Mat(this.a, this.b, this.c, this.d, this.e, this.f);
  }
  static Identity() {
    return new _Mat(1, 0, 0, 1, 0, 0);
  }
  static Translate(x, y) {
    return new _Mat(1, 0, 0, 1, x, y);
  }
  static Rotate(r, cx, cy) {
    if (r === 0)
      return _Mat.Identity();
    const cosAngle = Math.cos(r);
    const sinAngle = Math.sin(r);
    const rotationMatrix = new _Mat(cosAngle, sinAngle, -sinAngle, cosAngle, 0, 0);
    if (cx === void 0)
      return rotationMatrix;
    return _Mat.Compose(_Mat.Translate(cx, cy), rotationMatrix, _Mat.Translate(-cx, -cy));
  }
  static Multiply(m1, m2) {
    return {
      a: m1.a * m2.a + m1.c * m2.b,
      c: m1.a * m2.c + m1.c * m2.d,
      e: m1.a * m2.e + m1.c * m2.f + m1.e,
      b: m1.b * m2.a + m1.d * m2.b,
      d: m1.b * m2.c + m1.d * m2.d,
      f: m1.b * m2.e + m1.d * m2.f + m1.f
    };
  }
  static Inverse(m) {
    const denom = m.a * m.d - m.b * m.c;
    return {
      a: m.d / denom,
      b: m.b / -denom,
      c: m.c / -denom,
      d: m.a / denom,
      e: (m.d * m.e - m.c * m.f) / -denom,
      f: (m.b * m.e - m.a * m.f) / denom
    };
  }
  static Absolute(m) {
    const denom = m.a * m.d - m.b * m.c;
    return {
      a: m.d / denom,
      b: m.b / -denom,
      c: m.c / -denom,
      d: m.a / denom,
      e: (m.d * m.e - m.c * m.f) / denom,
      f: (m.b * m.e - m.a * m.f) / -denom
    };
  }
  static Compose(...matrices) {
    const matrix = _Mat.Identity();
    for (let i = 0, n = matrices.length; i < n; i++) {
      matrix.multiply(matrices[i]);
    }
    return matrix;
  }
  static Point(m) {
    return new Vec(m.e, m.f);
  }
  static Rotation(m) {
    let rotation;
    if (m.a !== 0 || m.c !== 0) {
      const hypotAc = (m.a * m.a + m.c * m.c) ** 0.5;
      rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
    } else if (m.b !== 0 || m.d !== 0) {
      const hypotBd = (m.b * m.b + m.d * m.d) ** 0.5;
      rotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
    } else {
      rotation = 0;
    }
    return clampRadians(rotation);
  }
  static Decompose(m) {
    let scaleX, scaleY, rotation;
    if (m.a !== 0 || m.c !== 0) {
      const hypotAc = (m.a * m.a + m.c * m.c) ** 0.5;
      scaleX = hypotAc;
      scaleY = (m.a * m.d - m.b * m.c) / hypotAc;
      rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
    } else if (m.b !== 0 || m.d !== 0) {
      const hypotBd = (m.b * m.b + m.d * m.d) ** 0.5;
      scaleX = (m.a * m.d - m.b * m.c) / hypotBd;
      scaleY = hypotBd;
      rotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
    } else {
      scaleX = 0;
      scaleY = 0;
      rotation = 0;
    }
    return {
      x: m.e,
      y: m.f,
      scaleX,
      scaleY,
      rotation: clampRadians(rotation)
    };
  }
  static Smooth(m, precision = 1e10) {
    m.a = Math.round(m.a * precision) / precision;
    m.b = Math.round(m.b * precision) / precision;
    m.c = Math.round(m.c * precision) / precision;
    m.d = Math.round(m.d * precision) / precision;
    m.e = Math.round(m.e * precision) / precision;
    m.f = Math.round(m.f * precision) / precision;
    return m;
  }
  static toCssString(m) {
    return `matrix(${toDomPrecision(m.a)}, ${toDomPrecision(m.b)}, ${toDomPrecision(m.c)}, ${toDomPrecision(m.d)}, ${toDomPrecision(m.e)}, ${toDomPrecision(m.f)})`;
  }
  static applyToPoint(m, point) {
    return new Vec(m.a * point.x + m.c * point.y + m.e, m.b * point.x + m.d * point.y + m.f, point.z);
  }
  static applyToXY(m, x, y) {
    return [m.a * x + m.c * y + m.e, m.b * x + m.d * y + m.f];
  }
  static applyToPoints(m, points) {
    return points.map((point) => new Vec(m.a * point.x + m.c * point.y + m.e, m.b * point.x + m.d * point.y + m.f, point.z));
  }
  static applyToBounds(m, box) {
    return new Box(m.e + box.minX, m.f + box.minY, box.width, box.height);
  }
  static From(m) {
    return new _Mat(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  static Cast(m) {
    return m instanceof _Mat ? m : _Mat.From(m);
  }
};
var Mat = _Mat;
__publicField(Mat, "Scale", (x, y, cx, cy) => {
  const scaleMatrix = new _Mat(x, 0, 0, y, 0, 0);
  if (cx === void 0)
    return scaleMatrix;
  return _Mat.Compose(_Mat.Translate(cx, cy), scaleMatrix, _Mat.Translate(-cx, -cy));
});

// node_modules/@tldraw/editor/dist-esm/lib/utils/nearestMultiple.mjs
function gcd(a, b) {
  return b === 0 ? a : gcd(b, a % b);
}
function nearestMultiple(float) {
  const decimal = float.toString().split(".")[1];
  if (!decimal)
    return 1;
  const denominator = Math.pow(10, decimal.length);
  const numerator = parseInt(decimal, 10);
  return denominator / gcd(numerator, denominator);
}

// node_modules/@tldraw/editor/dist-esm/lib/components/GeometryDebuggingView.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react19 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Geometry2d.mjs
var Geometry2d = class {
  constructor(opts) {
    __publicField(this, "isFilled", false);
    __publicField(this, "isClosed", true);
    __publicField(this, "isLabel", false);
    __publicField(this, "debugColor");
    __publicField(this, "ignore");
    __publicField(this, "_vertices");
    __publicField(this, "_bounds");
    __publicField(this, "_area");
    var _a2;
    this.isFilled = opts.isFilled;
    this.isClosed = opts.isClosed;
    this.isLabel = (_a2 = opts.isLabel) != null ? _a2 : false;
    this.debugColor = opts.debugColor;
    this.ignore = opts.ignore;
  }
  hitTestPoint(point, margin = 0, hitInside = false) {
    if (this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices)) {
      return true;
    }
    return Vec.Dist2(point, this.nearestPoint(point)) <= margin * margin;
  }
  distanceToPoint(point, hitInside = false) {
    return point.dist(this.nearestPoint(point)) * (this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices) ? -1 : 1);
  }
  distanceToLineSegment(A, B) {
    if (A.equals(B))
      return this.distanceToPoint(A);
    const { vertices } = this;
    let nearest;
    let dist = Infinity;
    let d, p, q;
    for (let i = 0; i < vertices.length; i++) {
      p = vertices[i];
      q = Vec.NearestPointOnLineSegment(A, B, p, true);
      d = Vec.Dist2(p, q);
      if (d < dist) {
        dist = d;
        nearest = q;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return this.isClosed && this.isFilled && pointInPolygon(nearest, this.vertices) ? -dist : dist;
  }
  hitTestLineSegment(A, B, distance = 0) {
    return this.distanceToLineSegment(A, B) <= distance;
  }
  nearestPointOnLineSegment(A, B) {
    const { vertices } = this;
    let nearest;
    let dist = Infinity;
    let d, p, q;
    for (let i = 0; i < vertices.length; i++) {
      p = vertices[i];
      q = Vec.NearestPointOnLineSegment(A, B, p, true);
      d = Vec.Dist2(p, q);
      if (d < dist) {
        dist = d;
        nearest = q;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  isPointInBounds(point, margin = 0) {
    const { bounds } = this;
    return !(point.x < bounds.minX - margin || point.y < bounds.minY - margin || point.x > bounds.maxX + margin || point.y > bounds.maxY + margin);
  }
  get vertices() {
    if (!this._vertices) {
      this._vertices = this.getVertices();
    }
    return this._vertices;
  }
  getBounds() {
    return Box.FromPoints(this.vertices);
  }
  get bounds() {
    if (!this._bounds) {
      this._bounds = this.getBounds();
    }
    return this._bounds;
  }
  get center() {
    return this.bounds.center;
  }
  get area() {
    if (!this._area) {
      this._area = this.getArea();
    }
    return this._area;
  }
  getArea() {
    if (!this.isClosed) {
      return 0;
    }
    const { vertices } = this;
    let area = 0;
    for (let i = 0, n = vertices.length; i < n; i++) {
      const curr = vertices[i];
      const next = vertices[(i + 1) % n];
      area += curr.x * next.y - next.x * curr.y;
    }
    return area / 2;
  }
  toSimpleSvgPath() {
    let path = "";
    const { vertices } = this;
    const n = vertices.length;
    if (n === 0)
      return path;
    path += `M${vertices[0].x},${vertices[0].y}`;
    for (let i = 1; i < n; i++) {
      path += `L${vertices[i].x},${vertices[i].y}`;
    }
    if (this.isClosed) {
      path += "Z";
    }
    return path;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Group2d.mjs
var Group2d = class extends Geometry2d {
  constructor(config) {
    super({ ...config, isClosed: true, isFilled: false });
    __publicField(this, "children", []);
    __publicField(this, "ignoredChildren", []);
    for (const child of config.children) {
      if (child.ignore) {
        this.ignoredChildren.push(child);
      } else {
        this.children.push(child);
      }
    }
    if (this.children.length === 0)
      throw Error("Group2d must have at least one child");
  }
  getVertices() {
    return this.children.filter((c) => !c.isLabel).flatMap((c) => c.vertices);
  }
  nearestPoint(point) {
    let dist = Infinity;
    let nearest;
    const { children } = this;
    if (children.length === 0) {
      throw Error("no children");
    }
    let p;
    let d;
    for (const child of children) {
      p = child.nearestPoint(point);
      d = Vec.Dist2(p, point);
      if (d < dist) {
        dist = d;
        nearest = p;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  distanceToPoint(point, hitInside = false) {
    return Math.min(...this.children.map((c, i) => c.distanceToPoint(point, hitInside || i > 0)));
  }
  hitTestPoint(point, margin, hitInside) {
    return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestPoint(point, margin, hitInside));
  }
  hitTestLineSegment(A, B, zoom) {
    return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestLineSegment(A, B, zoom));
  }
  getArea() {
    return this.children[0].area;
  }
  toSimpleSvgPath() {
    let path = "";
    for (const child of this.children) {
      path += child.toSimpleSvgPath();
    }
    const corners = Box.FromPoints(this.vertices).corners;
    for (let i = 0, n = corners.length; i < n; i++) {
      const corner = corners[i];
      const prevCorner = corners[(i - 1 + n) % n];
      const prevDist = corner.dist(prevCorner);
      const nextCorner = corners[(i + 1) % n];
      const nextDist = corner.dist(nextCorner);
      const A = corner.clone().lrp(prevCorner, 4 / prevDist);
      const B = corner;
      const C = corner.clone().lrp(nextCorner, 4 / nextDist);
      path += `M${A.x},${A.y} L${B.x},${B.y} L${C.x},${C.y} `;
    }
    return path;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/components/GeometryDebuggingView.mjs
function useTick(isEnabled = true) {
  const [_, setTick] = (0, import_react19.useState)(0);
  const editor = useEditor();
  (0, import_react19.useEffect)(() => {
    if (!isEnabled)
      return;
    const update = () => setTick((tick2) => tick2 + 1);
    editor.on("tick", update);
    return () => {
      editor.off("tick", update);
    };
  }, [editor, isEnabled]);
}
var GeometryDebuggingView = track(function GeometryDebuggingView2({
  showStroke = true,
  showVertices = true,
  showClosestPointOnOutline = true
}) {
  const editor = useEditor();
  useTick(showClosestPointOnOutline);
  const zoomLevel = editor.getZoomLevel();
  const renderingShapes = editor.getRenderingShapes();
  const {
    inputs: { currentPagePoint }
  } = editor;
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("svg", {
    style: {
      position: "absolute",
      pointerEvents: "none",
      zIndex: 999999999,
      top: 0,
      left: 0,
      overflow: "visible"
    },
    children: renderingShapes.map((result) => {
      const shape = editor.getShape(result.id);
      if (shape.type === "group")
        return null;
      const geometry = editor.getShapeGeometry(shape);
      const pageTransform = editor.getShapePageTransform(shape);
      const pointInShapeSpace = editor.getPointInShapeSpace(shape, currentPagePoint);
      const nearestPointOnShape = geometry.nearestPoint(pointInShapeSpace);
      const distanceToPoint = geometry.distanceToPoint(pointInShapeSpace, true);
      const dist = Math.abs(distanceToPoint) * zoomLevel;
      const hitInside = distanceToPoint < 0;
      const { vertices } = geometry;
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("g", {
        transform: pageTransform.toCssString(),
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: [
          showStroke && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(GeometryStroke, { geometry }),
          showVertices && vertices.map((v, i) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("circle", {
            cx: v.x,
            cy: v.y,
            r: "2",
            fill: `hsl(${modulate(i, [0, vertices.length - 1], [120, 200])}, 100%, 50%)`,
            stroke: "black",
            strokeWidth: "1"
          }, `v${i}`)),
          showClosestPointOnOutline && dist < 150 && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("line", {
            x1: nearestPointOnShape.x,
            y1: nearestPointOnShape.y,
            x2: pointInShapeSpace.x,
            y2: pointInShapeSpace.y,
            opacity: 1 - dist / 150,
            stroke: hitInside ? "goldenrod" : "dodgerblue",
            strokeWidth: "2"
          })
        ]
      }, result.id + "_outline");
    })
  });
});
function GeometryStroke({ geometry }) {
  var _a2;
  if (geometry instanceof Group2d) {
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children: [...geometry.children, ...geometry.ignoredChildren].map((child, i) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(GeometryStroke, { geometry: child }, i)) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("path", {
    stroke: (_a2 = geometry.debugColor) != null ? _a2 : "red",
    strokeWidth: "2",
    fill: "none",
    opacity: "1",
    d: geometry.toSimpleSvgPath()
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/LiveCollaborators.mjs
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react20 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/utils/uniq.mjs
var import_lodash3 = __toESM(require_lodash3(), 1);
function uniq(array2) {
  return (0, import_lodash3.default)(array2);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/usePeerIds.mjs
function usePeerIds() {
  const editor = useEditor();
  const $userIds = useComputed("userIds", () => uniq(editor.getCollaborators().map((p) => p.userId)).sort(), { isEqual: (a, b) => {
    var _a2;
    return a.join(",") === ((_a2 = b.join) == null ? void 0 : _a2.call(b, ","));
  } }, [editor]);
  return useValue($userIds);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/usePresence.mjs
function usePresence(userId) {
  const editor = useEditor();
  const latestPresence = useValue(`latestPresence:${userId}`, () => {
    return editor.getCollaborators().find((c) => c.userId === userId);
  }, [editor]);
  return latestPresence != null ? latestPresence : null;
}

// node_modules/@tldraw/editor/dist-esm/lib/components/LiveCollaborators.mjs
var LiveCollaborators = track(function Collaborators() {
  const peerIds = usePeerIds();
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: peerIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorGuard, { collaboratorId: id }, id)) });
});
var CollaboratorGuard = track(function CollaboratorGuard2({
  collaboratorId
}) {
  const editor = useEditor();
  const presence = usePresence(collaboratorId);
  const collaboratorState = useCollaboratorState(presence);
  if (!(presence && presence.currentPageId === editor.getCurrentPageId())) {
    return null;
  }
  switch (collaboratorState) {
    case "inactive": {
      const { followingUserId, highlightedUserIds } = editor.getInstanceState();
      if (!(followingUserId === presence.userId || highlightedUserIds.includes(presence.userId))) {
        return null;
      }
      break;
    }
    case "idle": {
      const { highlightedUserIds } = editor.getInstanceState();
      if (presence.followingUserId === editor.user.getId() && !(presence.chatMessage || highlightedUserIds.includes(presence.userId))) {
        return null;
      }
      break;
    }
    case "active": {
      break;
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Collaborator, { latestPresence: presence });
});
var Collaborator = track(function Collaborator2({
  latestPresence
}) {
  const editor = useEditor();
  const {
    CollaboratorBrush,
    CollaboratorScribble,
    CollaboratorCursor,
    CollaboratorHint,
    CollaboratorShapeIndicator
  } = useEditorComponents();
  const zoomLevel = editor.getZoomLevel();
  const viewportPageBounds = editor.getViewportPageBounds();
  const { userId, chatMessage, brush, scribbles, selectedShapeIds, userName, cursor, color } = latestPresence;
  const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
    brush && CollaboratorBrush ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorBrush, {
      className: "tl-collaborator__brush",
      brush,
      color,
      opacity: 0.1
    }, userId + "_brush") : null,
    isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorCursor, {
      className: "tl-collaborator__cursor",
      point: cursor,
      color,
      zoom: zoomLevel,
      name: userName !== "New User" ? userName : null,
      chatMessage
    }, userId + "_cursor") : CollaboratorHint ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorHint, {
      className: "tl-collaborator__cursor-hint",
      point: cursor,
      color,
      zoom: zoomLevel,
      viewport: viewportPageBounds
    }, userId + "_cursor_hint") : null,
    CollaboratorScribble && scribbles.length ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: scribbles.map((scribble) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorScribble, {
      className: "tl-collaborator__scribble",
      scribble,
      color,
      zoom: zoomLevel,
      opacity: scribble.color === "laser" ? 0.5 : 0.1
    }, userId + "_scribble_" + scribble.id)) }) : null,
    CollaboratorShapeIndicator && selectedShapeIds.map((shapeId) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CollaboratorShapeIndicator, {
      className: "tl-collaborator__shape-indicator",
      shapeId,
      color,
      opacity: 0.5
    }, userId + "_" + shapeId))
  ] });
});
function getStateFromElapsedTime(elapsed) {
  return elapsed > COLLABORATOR_INACTIVE_TIMEOUT ? "inactive" : elapsed > COLLABORATOR_IDLE_TIMEOUT ? "idle" : "active";
}
function useCollaboratorState(latestPresence) {
  var _a2;
  const rLastActivityTimestamp = (0, import_react20.useRef)((_a2 = latestPresence == null ? void 0 : latestPresence.lastActivityTimestamp) != null ? _a2 : -1);
  const [state, setState] = (0, import_react20.useState)(() => getStateFromElapsedTime(Date.now() - rLastActivityTimestamp.current));
  (0, import_react20.useEffect)(() => {
    const interval = setInterval(() => {
      setState(getStateFromElapsedTime(Date.now() - rLastActivityTimestamp.current));
    }, COLLABORATOR_CHECK_INTERVAL);
    return () => clearInterval(interval);
  }, []);
  if (latestPresence) {
    rLastActivityTimestamp.current = latestPresence.lastActivityTimestamp;
  }
  return state;
}

// node_modules/@tldraw/editor/dist-esm/lib/components/Shape.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react21 = __toESM(require_react(), 1);
var Shape = (0, import_react21.memo)(function Shape2({
  id,
  shape,
  util,
  index: index2,
  backgroundIndex,
  opacity,
  dprMultiple
}) {
  const editor = useEditor();
  const { ShapeErrorFallback } = useEditorComponents();
  const containerRef = (0, import_react21.useRef)(null);
  const bgContainerRef = (0, import_react21.useRef)(null);
  const memoizedStuffRef = (0, import_react21.useRef)({
    transform: "",
    clipPath: "none",
    width: 0,
    height: 0,
    x: 0,
    y: 0,
    isCulled: false
  });
  useQuickReactor("set shape stuff", () => {
    var _a2;
    const shape2 = editor.getShape(id);
    if (!shape2)
      return;
    const prev = memoizedStuffRef.current;
    const clipPath = (_a2 = editor.getShapeClipPath(id)) != null ? _a2 : "none";
    if (clipPath !== prev.clipPath) {
      setStyleProperty(containerRef.current, "clip-path", clipPath);
      setStyleProperty(bgContainerRef.current, "clip-path", clipPath);
      prev.clipPath = clipPath;
    }
    const pageTransform = editor.getShapePageTransform(id);
    const transform = Mat.toCssString(pageTransform);
    const bounds = editor.getShapeGeometry(shape2).bounds;
    if (transform !== prev.transform) {
      setStyleProperty(containerRef.current, "transform", transform);
      setStyleProperty(bgContainerRef.current, "transform", transform);
      prev.transform = transform;
    }
    const widthRemainder = bounds.w % dprMultiple;
    const heightRemainder = bounds.h % dprMultiple;
    const width = widthRemainder === 0 ? bounds.w : bounds.w + (dprMultiple - widthRemainder);
    const height = heightRemainder === 0 ? bounds.h : bounds.h + (dprMultiple - heightRemainder);
    if (width !== prev.width || height !== prev.height) {
      setStyleProperty(containerRef.current, "width", Math.max(width, dprMultiple) + "px");
      setStyleProperty(containerRef.current, "height", Math.max(height, dprMultiple) + "px");
      setStyleProperty(bgContainerRef.current, "width", Math.max(width, dprMultiple) + "px");
      setStyleProperty(bgContainerRef.current, "height", Math.max(height, dprMultiple) + "px");
      prev.width = width;
      prev.height = height;
    }
  }, [editor]);
  useQuickReactor("set opacity and z-index", () => {
    const container = containerRef.current;
    const bgContainer = bgContainerRef.current;
    setStyleProperty(container, "opacity", opacity);
    setStyleProperty(bgContainer, "opacity", opacity);
    setStyleProperty(container, "z-index", index2);
    setStyleProperty(bgContainer, "z-index", backgroundIndex);
  }, [opacity, index2, backgroundIndex]);
  useQuickReactor("set display", () => {
    const shape2 = editor.getShape(id);
    if (!shape2)
      return;
    const culledShapes = editor.getCulledShapes();
    const isCulled = culledShapes.has(id);
    if (isCulled !== memoizedStuffRef.current.isCulled) {
      setStyleProperty(containerRef.current, "display", isCulled ? "none" : "block");
      setStyleProperty(bgContainerRef.current, "display", isCulled ? "none" : "block");
      memoizedStuffRef.current.isCulled = isCulled;
    }
  }, [editor]);
  const annotateError2 = (0, import_react21.useCallback)((error) => editor.annotateError(error, { origin: "shape", willCrashApp: false }), [editor]);
  if (!shape)
    return null;
  const isFilledShape = "fill" in shape.props && shape.props.fill !== "none";
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
    util.backgroundComponent && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", {
      ref: bgContainerRef,
      className: "tl-shape tl-shape-background",
      "data-shape-type": shape.type,
      draggable: false,
      children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError2, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InnerShapeBackground, { shape, util }) })
    }),
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", {
      ref: containerRef,
      className: "tl-shape",
      "data-shape-type": shape.type,
      "data-shape-is-filled": isFilledShape,
      draggable: false,
      children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError2, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InnerShape, { shape, util }) })
    })
  ] });
});
var InnerShape = (0, import_react21.memo)(function InnerShape2({ shape, util }) {
  return useStateTracking("InnerShape:" + shape.type, () => util.component(shape));
}, (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta);
var InnerShapeBackground = (0, import_react21.memo)(function InnerShapeBackground2({
  shape,
  util
}) {
  return useStateTracking("InnerShape:" + shape.type, () => {
    var _a2;
    return (_a2 = util.backgroundComponent) == null ? void 0 : _a2.call(util, shape);
  });
}, (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta);

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCanvas.mjs
function DefaultCanvas({ className }) {
  const editor = useEditor();
  const { Background, SvgDefs } = useEditorComponents();
  const rCanvas = (0, import_react22.useRef)(null);
  const rHtmlLayer = (0, import_react22.useRef)(null);
  const rHtmlLayer2 = (0, import_react22.useRef)(null);
  const container = useContainer();
  useScreenBounds(rCanvas);
  useDocumentEvents();
  useCoarsePointer();
  useGestureEvents(rCanvas);
  useFixSafariDoubleTapZoomPencilEvents(rCanvas);
  const rMemoizedStuff = (0, import_react22.useRef)({ lodDisableTextOutline: false, allowTextOutline: true });
  useQuickReactor("position layers", function positionLayersWhenCameraMoves() {
    const { x, y, z } = editor.getCamera();
    if (rMemoizedStuff.current.allowTextOutline && editor.environment.isSafari) {
      container.style.setProperty("--tl-text-outline", "none");
      rMemoizedStuff.current.allowTextOutline = false;
    }
    if (rMemoizedStuff.current.allowTextOutline && z < TEXT_SHADOW_LOD !== rMemoizedStuff.current.lodDisableTextOutline) {
      const lodDisableTextOutline = z < TEXT_SHADOW_LOD;
      container.style.setProperty("--tl-text-outline", lodDisableTextOutline ? "none" : `0 var(--b) 0 var(--color-background), 0 var(--a) 0 var(--color-background),
				var(--b) var(--b) 0 var(--color-background), var(--a) var(--b) 0 var(--color-background),
				var(--a) var(--a) 0 var(--color-background), var(--b) var(--a) 0 var(--color-background)`);
      rMemoizedStuff.current.lodDisableTextOutline = lodDisableTextOutline;
    }
    const offset4 = z >= 1 ? modulate(z, [1, 8], [0.125, 0.5], true) : modulate(z, [0.1, 1], [-2, 0.125], true);
    const transform = `scale(${toDomPrecision(z)}) translate(${toDomPrecision(x + offset4)}px,${toDomPrecision(y + offset4)}px)`;
    setStyleProperty(rHtmlLayer.current, "transform", transform);
    setStyleProperty(rHtmlLayer2.current, "transform", transform);
  }, [editor, container]);
  const events = useCanvasEvents();
  const shapeSvgDefs = useValue("shapeSvgDefs", () => {
    const shapeSvgDefsByKey = /* @__PURE__ */ new Map();
    for (const util of objectMapValues(editor.shapeUtils)) {
      if (!util)
        return;
      const defs = util.getCanvasSvgDefs();
      for (const { key, component: Component2 } of defs) {
        if (shapeSvgDefsByKey.has(key))
          continue;
        shapeSvgDefsByKey.set(key, /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Component2, {}, key));
      }
    }
    return [...shapeSvgDefsByKey.values()];
  }, [editor]);
  const hideShapes = useValue("debug_shapes", () => debugFlags.hideShapes.get(), [debugFlags]);
  const debugSvg = useValue("debug_svg", () => debugFlags.debugSvg.get(), [debugFlags]);
  const debugGeometry = useValue("debug_geometry", () => debugFlags.debugGeometry.get(), [
    debugFlags
  ]);
  const isEditingAnything = useValue("isEditingAnything", () => editor.getEditingShapeId() !== null, [editor]);
  const isSelectingAnything = useValue("isSelectingAnything", () => !!editor.getSelectedShapeIds().length, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", {
    ref: rCanvas,
    draggable: false,
    "data-iseditinganything": isEditingAnything,
    "data-isselectinganything": isSelectingAnything,
    className: (0, import_classnames.default)("tl-canvas", className),
    "data-testid": "canvas",
    ...events,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("svg", { className: "tl-svg-context", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("defs", { children: [
        shapeSvgDefs,
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(CursorDef, {}),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(CollaboratorHintDef, {}),
        SvgDefs && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SvgDefs, {})
      ] }) }),
      Background && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "tl-background__wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Background, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(GridWrapper, {}),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { ref: rHtmlLayer, className: "tl-html-layer tl-shapes", draggable: false, children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(OnTheCanvasWrapper, {}),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SelectionBackgroundWrapper, {}),
        hideShapes ? null : debugSvg ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShapesWithSVGs, {}) : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShapesToDisplay, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "tl-overlays", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { ref: rHtmlLayer2, className: "tl-html-layer", children: [
          debugGeometry ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(GeometryDebuggingView, {}) : null,
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(HandlesWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(BrushWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ScribbleWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ZoomBrushWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShapeIndicators, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(HintedShapeIndicator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SnapIndicatorWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SelectionForegroundWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(LiveCollaborators, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(InFrontOfTheCanvasWrapper, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(MovingCameraHitTestBlocker, {})
    ]
  });
}
function GridWrapper() {
  const editor = useEditor();
  const gridSize = useValue("gridSize", () => editor.getDocumentSettings().gridSize, [editor]);
  const { x, y, z } = useValue("camera", () => editor.getCamera(), [editor]);
  const isGridMode = useValue("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
  const { Grid } = useEditorComponents();
  if (!(Grid && isGridMode))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Grid, { x, y, z, size: gridSize });
}
function ScribbleWrapper() {
  const editor = useEditor();
  const scribbles = useValue("scribbles", () => editor.getInstanceState().scribbles, [editor]);
  const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const { Scribble } = useEditorComponents();
  if (!(Scribble && scribbles.length))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: scribbles.map((scribble) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Scribble, {
    className: "tl-user-scribble",
    scribble,
    zoom: zoomLevel
  }, scribble.id)) });
}
function BrushWrapper() {
  const editor = useEditor();
  const brush = useValue("brush", () => editor.getInstanceState().brush, [editor]);
  const { Brush } = useEditorComponents();
  if (!(Brush && brush))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Brush, { className: "tl-user-brush", brush });
}
function ZoomBrushWrapper() {
  const editor = useEditor();
  const zoomBrush = useValue("zoomBrush", () => editor.getInstanceState().zoomBrush, [editor]);
  const { ZoomBrush } = useEditorComponents();
  if (!(ZoomBrush && zoomBrush))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ZoomBrush, { className: "tl-user-brush tl-zoom-brush", brush: zoomBrush });
}
function SnapIndicatorWrapper() {
  const editor = useEditor();
  const lines = useValue("snapLines", () => editor.snaps.getIndicators(), [editor]);
  const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const { SnapIndicator } = useEditorComponents();
  if (!(SnapIndicator && lines.length > 0))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: lines.map((line) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SnapIndicator, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id)) });
}
function HandlesWrapper() {
  const editor = useEditor();
  const shapeIdWithHandles = useValue("handles shapeIdWithHandles", () => {
    const { isReadonly, isChangingStyle } = editor.getInstanceState();
    if (isReadonly || isChangingStyle)
      return false;
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return false;
    const handles = editor.getShapeHandles(onlySelectedShape);
    if (!handles)
      return false;
    return onlySelectedShape.id;
  }, [editor]);
  if (!shapeIdWithHandles)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(HandlesWrapperInner, { shapeId: shapeIdWithHandles });
}
function HandlesWrapperInner({ shapeId }) {
  const editor = useEditor();
  const { Handles } = useEditorComponents();
  const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const isCoarse = useValue("coarse pointer", () => editor.getInstanceState().isCoarsePointer, [
    editor
  ]);
  const transform = useValue("handles transform", () => editor.getShapePageTransform(shapeId), [
    editor,
    shapeId
  ]);
  const handles = useValue("handles", () => {
    const handles2 = editor.getShapeHandles(shapeId);
    if (!handles2)
      return null;
    const minDistBetweenVirtualHandlesAndRegularHandles = (isCoarse ? COARSE_HANDLE_RADIUS : HANDLE_RADIUS) / zoomLevel * 2;
    return handles2.filter((handle) => handle.type !== "virtual" || !handles2.some((h) => h !== handle && h.type === "vertex" && Vec.Dist(handle, h) < minDistBetweenVirtualHandlesAndRegularHandles)).sort((a) => a.type === "vertex" ? 1 : -1);
  }, [editor, zoomLevel, isCoarse, shapeId]);
  if (!Handles || !handles || !transform) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Handles, { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("g", { transform: Mat.toCssString(transform), children: handles.map((handle) => {
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(HandleWrapper, {
      shapeId,
      handle,
      zoom: zoomLevel,
      isCoarse
    }, handle.id);
  }) }) });
}
function HandleWrapper({
  shapeId,
  handle,
  zoom,
  isCoarse
}) {
  const events = useHandleEvents(shapeId, handle.id);
  const { Handle } = useEditorComponents();
  if (!Handle)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("g", { "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})`, ...events, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Handle, { shapeId, handle, zoom, isCoarse }) });
}
function ShapesWithSVGs() {
  const editor = useEditor();
  const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
  const dprMultiple = useValue("dpr multiple", () => nearestMultiple(Math.floor(editor.getInstanceState().devicePixelRatio * 100) / 100), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_react22.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Shape, { ...result, dprMultiple }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DebugSvgCopy, { id: result.id })
  ] }, result.id + "_fragment")) });
}
function ReflowIfNeeded() {
  const editor = useEditor();
  const culledShapesRef = (0, import_react22.useRef)(/* @__PURE__ */ new Set());
  useQuickReactor("reflow for culled shapes", () => {
    const culledShapes = editor.getCulledShapes();
    if (culledShapesRef.current.size === culledShapes.size && [...culledShapes].every((id) => culledShapesRef.current.has(id)))
      return;
    culledShapesRef.current = culledShapes;
    const canvas = document.getElementsByClassName("tl-canvas");
    if (canvas.length === 0)
      return;
    const _height = canvas[0].offsetHeight;
  }, [editor]);
  return null;
}
function ShapesToDisplay() {
  const editor = useEditor();
  const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
  const dprMultiple = useValue("dpr multiple", () => nearestMultiple(Math.floor(editor.getInstanceState().devicePixelRatio * 100) / 100), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
    renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Shape, { ...result, dprMultiple }, result.id + "_shape")),
    editor.environment.isSafari && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ReflowIfNeeded, {})
  ] });
}
function ShapeIndicators() {
  const editor = useEditor();
  const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
  const rPreviousSelectedShapeIds = (0, import_react22.useRef)(/* @__PURE__ */ new Set());
  const idsToDisplay = useValue("should display selected ids", () => {
    const prev = rPreviousSelectedShapeIds.current;
    const next = /* @__PURE__ */ new Set();
    if (editor.isInAny("select.idle", "select.brushing", "select.scribble_brushing", "select.editing_shape", "select.pointing_shape", "select.pointing_selection", "select.pointing_handle") && !editor.getInstanceState().isChangingStyle) {
      const selected = editor.getSelectedShapeIds();
      for (const id of selected) {
        next.add(id);
      }
      if (editor.isInAny("select.idle", "select.editing_shape")) {
        const instanceState = editor.getInstanceState();
        if (instanceState.isHoveringCanvas && !instanceState.isCoarsePointer) {
          const hovered = editor.getHoveredShapeId();
          if (hovered)
            next.add(hovered);
        }
      }
    }
    if (prev.size !== next.size) {
      rPreviousSelectedShapeIds.current = next;
      return next;
    }
    for (const id of next) {
      if (!prev.has(id)) {
        rPreviousSelectedShapeIds.current = next;
        return next;
      }
    }
    return prev;
  }, [editor]);
  const { ShapeIndicator } = useEditorComponents();
  if (!ShapeIndicator)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: renderingShapes.map(({ id }) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShapeIndicator, { shapeId: id, hidden: !idsToDisplay.has(id) }, id + "_indicator")) });
}
function HintedShapeIndicator() {
  const editor = useEditor();
  const { ShapeIndicator } = useEditorComponents();
  const ids = useValue("hinting shape ids", () => dedupe(editor.getHintingShapeIds()), [editor]);
  if (!ids.length)
    return null;
  if (!ShapeIndicator)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: ids.map((id) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShapeIndicator, { className: "tl-user-indicator__hint", shapeId: id }, id + "_hinting")) });
}
function CursorDef() {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("g", { id: "cursor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("g", { fill: "white", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
    ] })
  ] });
}
function CollaboratorHintDef() {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { id: "cursor_hint", fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
}
function DebugSvgCopy({ id }) {
  const editor = useEditor();
  const [image, setImage] = (0, import_react22.useState)(null);
  const isInRoot = useValue("is in root", () => {
    const shape = editor.getShape(id);
    return (shape == null ? void 0 : shape.parentId) === editor.getCurrentPageId();
  }, [editor, id]);
  (0, import_react22.useEffect)(() => {
    if (!isInRoot)
      return;
    let latest2 = null;
    const unsubscribe = react("shape to svg", async () => {
      const renderId = Math.random();
      latest2 = renderId;
      const isSingleFrame = editor.isShapeOfType(id, "frame");
      const padding = isSingleFrame ? 0 : 10;
      let bounds = editor.getShapePageBounds(id);
      if (!bounds)
        return;
      bounds = bounds.clone().expandBy(padding);
      const result = await editor.getSvgString([id], {
        padding,
        background: editor.getInstanceState().exportBackground
      });
      if (latest2 !== renderId || !result)
        return;
      const svgDataUrl = `data:image/svg+xml;utf8,${encodeURIComponent(result.svg)}`;
      setImage({ src: svgDataUrl, bounds });
    });
    return () => {
      latest2 = null;
      unsubscribe();
    };
  }, [editor, id, isInRoot]);
  if (!isInRoot || !image)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("img", {
    src: image.src,
    width: image.bounds.width,
    height: image.bounds.height,
    style: {
      position: "absolute",
      top: 0,
      left: 0,
      transform: `translate(${image.bounds.x}px, ${image.bounds.maxY + 12}px)`,
      outline: "1px solid black",
      maxWidth: "none"
    }
  });
}
function SelectionForegroundWrapper() {
  const editor = useEditor();
  const selectionRotation = useValue("selection rotation", () => editor.getSelectionRotation(), [
    editor
  ]);
  const selectionBounds = useValue("selection bounds", () => editor.getSelectionRotatedPageBounds(), [editor]);
  const { SelectionForeground } = useEditorComponents();
  if (!selectionBounds || !SelectionForeground)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SelectionForeground, { bounds: selectionBounds, rotation: selectionRotation });
}
function SelectionBackgroundWrapper() {
  const editor = useEditor();
  const selectionRotation = useValue("selection rotation", () => editor.getSelectionRotation(), [
    editor
  ]);
  const selectionBounds = useValue("selection bounds", () => editor.getSelectionRotatedPageBounds(), [editor]);
  const { SelectionBackground } = useEditorComponents();
  if (!selectionBounds || !SelectionBackground)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SelectionBackground, { bounds: selectionBounds, rotation: selectionRotation });
}
function OnTheCanvasWrapper() {
  const { OnTheCanvas } = useEditorComponents();
  if (!OnTheCanvas)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(OnTheCanvas, {});
}
function InFrontOfTheCanvasWrapper() {
  const { InFrontOfTheCanvas } = useEditorComponents();
  if (!InFrontOfTheCanvas)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(InFrontOfTheCanvas, {});
}
function MovingCameraHitTestBlocker() {
  const editor = useEditor();
  const cameraState = useValue("camera state", () => editor.getCameraState(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", {
    className: (0, import_classnames.default)("tl-hit-test-blocker", {
      "tl-hit-test-blocker__hidden": cameraState === "idle"
    })
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCollaboratorHint.mjs
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_classnames2 = __toESM(require_classnames(), 1);
var import_react23 = __toESM(require_react(), 1);
function DefaultCollaboratorHint({
  className,
  zoom,
  point,
  color,
  viewport,
  opacity = 1
}) {
  const rSvg = (0, import_react23.useRef)(null);
  useTransform(rSvg, clamp(point.x, viewport.minX + 5 / zoom, viewport.maxX - 5 / zoom), clamp(point.y, viewport.minY + 5 / zoom, viewport.maxY - 5 / zoom), 1 / zoom, Vec.Angle(viewport.center, point));
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("svg", { ref: rSvg, className: (0, import_classnames2.default)("tl-overlays__item", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("use", { href: "#cursor_hint", color, strokeWidth: 3, stroke: "var(--color-background)" }),
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("use", { href: "#cursor_hint", color, opacity })
  ] });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCursor.mjs
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_classnames3 = __toESM(require_classnames(), 1);
var import_react24 = __toESM(require_react(), 1);
var DefaultCursor = (0, import_react24.memo)(function DefaultCursor2({
  className,
  zoom,
  point,
  color,
  name,
  chatMessage
}) {
  const rCursor = (0, import_react24.useRef)(null);
  useTransform(rCursor, point == null ? void 0 : point.x, point == null ? void 0 : point.y, 1 / zoom);
  if (!point)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { ref: rCursor, className: (0, import_classnames3.default)("tl-overlays__item", className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("svg", { className: "tl-cursor", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("use", { href: "#cursor", color }) }),
    chatMessage ? /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
      name && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "tl-nametag-title", style: { color }, children: name }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "tl-nametag-chat", style: { backgroundColor: color }, children: chatMessage })
    ] }) : name && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "tl-nametag", style: { backgroundColor: color }, children: name })
  ] });
});

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultGrid.mjs
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function DefaultGrid({ x, y, z, size: size4 }) {
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("svg", { className: "tl-grid", version: "1.1", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("defs", { children: GRID_STEPS.map(({ min: min3, mid, step }, i) => {
      const s = step * size4 * z;
      const xo = 0.5 + x * z;
      const yo = 0.5 + y * z;
      const gxo = xo > 0 ? xo % s : s + xo % s;
      const gyo = yo > 0 ? yo % s : s + yo % s;
      const opacity = z < mid ? modulate(z, [min3, mid], [0, 1]) : 1;
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("pattern", {
        id: `grid-${step}`,
        width: s,
        height: s,
        patternUnits: "userSpaceOnUse",
        children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("circle", { className: "tl-grid-dot", cx: gxo, cy: gyo, r: 1, opacity })
      }, `grid-pattern-${i}`);
    }) }),
    GRID_STEPS.map(({ step }, i) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("rect", { width: "100%", height: "100%", fill: `url(#grid-${step})` }, `grid-rect-${i}`))
  ] });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandle.mjs
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_classnames4 = __toESM(require_classnames(), 1);
function DefaultHandle({ handle, isCoarse, className, zoom }) {
  const br = (isCoarse ? COARSE_HANDLE_RADIUS : HANDLE_RADIUS) / zoom;
  if (handle.type === "clone") {
    const fr2 = 3 / Math.max(zoom, 0.35);
    const path = `M0,${-fr2} A${fr2},${fr2} 0 0,1 0,${fr2}`;
    const index2 = SIDES.indexOf(handle.id);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("g", { className: (0, import_classnames4.default)(`tl-handle tl-handle__${handle.type}`, className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("circle", { className: "tl-handle__bg", r: br }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("path", { className: "tl-handle__fg", d: path, transform: `rotate(${-90 + 90 * index2})` })
    ] });
  }
  const fr = (handle.type === "create" && isCoarse ? 3 : 4) / Math.max(zoom, 0.35);
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("g", { className: (0, import_classnames4.default)(`tl-handle tl-handle__${handle.type}`, className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("circle", { className: "tl-handle__bg", r: br }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("circle", { className: "tl-handle__fg", r: fr })
  ] });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandles.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var DefaultHandles = ({ children }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
};

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultScribble.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_classnames5 = __toESM(require_classnames(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/utils/getSvgPathFromPoints.mjs
function getSvgPathFromPoints(points, closed = true) {
  const len = points.length;
  if (len < 2) {
    return "";
  }
  let a = points[0];
  let b = points[1];
  if (len === 2) {
    return `M${precise(a)}L${precise(b)}`;
  }
  let result = "";
  for (let i = 2, max2 = len - 1; i < max2; i++) {
    a = points[i];
    b = points[i + 1];
    result += average(a, b);
  }
  if (closed) {
    return `M${average(points[0], points[1])}Q${precise(points[1])}${average(points[1], points[2])}T${result}${average(points[len - 1], points[0])}${average(points[0], points[1])}Z`;
  } else {
    return `M${precise(points[0])}Q${precise(points[1])}${average(points[1], points[2])}${points.length > 3 ? "T" : ""}${result}L${precise(points[len - 1])}`;
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultScribble.mjs
function DefaultScribble({ scribble, zoom, color, opacity, className }) {
  if (!scribble.points.length)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("svg", { className: className ? (0, import_classnames5.default)("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("path", {
    className: "tl-scribble",
    d: getSvgPathFromPoints(scribble.points, false),
    stroke: color != null ? color : `var(--color-${scribble.color})`,
    fill: "none",
    strokeWidth: 8 / zoom,
    opacity: opacity != null ? opacity : scribble.opacity
  }) });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionBackground.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var React7 = __toESM(require_react(), 1);
function DefaultSelectionBackground({ bounds, rotation }) {
  const rDiv = React7.useRef(null);
  useTransform(rDiv, bounds.x, bounds.y, 1, rotation);
  React7.useLayoutEffect(() => {
    const div = rDiv.current;
    if (!div)
      return;
    div.style.width = toDomPrecision(Math.max(1, bounds.width)) + "px";
    div.style.height = toDomPrecision(Math.max(1, bounds.height)) + "px";
  }, [bounds.width, bounds.height]);
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { ref: rDiv, className: "tl-selection__bg", draggable: false });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionForeground.mjs
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_classnames6 = __toESM(require_classnames(), 1);
var import_react25 = __toESM(require_react(), 1);
function DefaultSelectionForeground({ bounds, rotation }) {
  const editor = useEditor();
  const rSvg = (0, import_react25.useRef)(null);
  const onlyShape = useValue("only selected shape", () => editor.getOnlySelectedShape(), [editor]);
  const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
  useTransform(rSvg, bounds == null ? void 0 : bounds.x, bounds == null ? void 0 : bounds.y, 1, rotation, {
    x: -expandOutlineBy,
    y: -expandOutlineBy
  });
  bounds = bounds.clone().expandBy(expandOutlineBy).zeroFix();
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", {
    ref: rSvg,
    className: "tl-overlays__item tl-selection__fg",
    "data-testid": "selection-foreground",
    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("rect", {
      className: (0, import_classnames6.default)("tl-selection__fg__outline"),
      width: toDomPrecision(bounds.width),
      height: toDomPrecision(bounds.height)
    })
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeErrorFallback.mjs
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var DefaultShapeErrorFallback = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "tl-shape-error-boundary" });
};

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicator.mjs
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var import_classnames7 = __toESM(require_classnames(), 1);
var import_react26 = __toESM(require_react(), 1);
var EvenInnererIndicator = ({ shape, util }) => {
  return useStateTracking("Indicator: " + shape.type, () => util.indicator(shape));
};
var InnerIndicator = ({ editor, id }) => {
  const shape = useValue("shape for indicator", () => editor.store.get(id), [editor, id]);
  const { ShapeIndicatorErrorFallback } = useEditorComponents();
  if (!shape || shape.isLocked)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(OptionalErrorBoundary, {
    fallback: ShapeIndicatorErrorFallback,
    onError: (error) => editor.annotateError(error, { origin: "react.shapeIndicator", willCrashApp: false }),
    children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(EvenInnererIndicator, { shape, util: editor.getShapeUtil(shape) }, shape.id)
  });
};
var DefaultShapeIndicator = (0, import_react26.memo)(function DefaultShapeIndicator2({
  shapeId,
  className,
  color,
  hidden,
  opacity
}) {
  const editor = useEditor();
  const rIndicator = (0, import_react26.useRef)(null);
  useQuickReactor("indicator transform", () => {
    const elm = rIndicator.current;
    if (!elm)
      return;
    const pageTransform = editor.getShapePageTransform(shapeId);
    if (!pageTransform)
      return;
    elm.style.setProperty("transform", pageTransform.toCssString());
  }, [editor, shapeId]);
  (0, import_react26.useLayoutEffect)(() => {
    const elm = rIndicator.current;
    if (!elm)
      return;
    elm.style.setProperty("display", hidden ? "none" : "block");
  }, [hidden]);
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("svg", { ref: rIndicator, className: (0, import_classnames7.default)("tl-overlays__item", className), children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("g", { className: "tl-shape-indicator", stroke: color != null ? color : "var(--color-selected)", opacity, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(InnerIndicator, { editor, id: shapeId }) }) });
});

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicatorErrorFallback.mjs
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var DefaultShapeIndicatorErrorFallback = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("circle", { cx: 4, cy: 4, r: 8, strokeWidth: "1", stroke: "red" });
};

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSnapIndictor.mjs
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var import_classnames8 = __toESM(require_classnames(), 1);
var React8 = __toESM(require_react(), 1);
function PointsSnapIndicator({ points, zoom }) {
  const l = 2.5 / zoom;
  const minX = points.reduce((acc, p) => Math.min(acc, p.x), Infinity);
  const maxX = points.reduce((acc, p) => Math.max(acc, p.x), -Infinity);
  const minY = points.reduce((acc, p) => Math.min(acc, p.y), Infinity);
  const maxY = points.reduce((acc, p) => Math.max(acc, p.y), -Infinity);
  const useNWtoSEdireciton = points.some((p) => p.x === minX && p.y === minY);
  let firstX, firstY, secondX, secondY;
  if (useNWtoSEdireciton) {
    firstX = minX;
    firstY = minY;
    secondX = maxX;
    secondY = maxY;
  } else {
    firstX = minX;
    firstY = maxY;
    secondX = maxX;
    secondY = minY;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("g", { className: "tl-snap-indicator", stroke: "lime", children: [
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", { x1: firstX, y1: firstY, x2: secondX, y2: secondY }),
    points.map((p, i) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("g", { transform: `translate(${p.x},${p.y})`, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("path", {
      className: "tl-snap-point",
      d: `M ${-l},${-l} L ${l},${l} M ${-l},${l} L ${l},${-l}`
    }) }, i))
  ] });
}
function GapsSnapIndicator({ gaps, direction, zoom }) {
  const l = 3.5 / zoom;
  let edgeIntersection = [-Infinity, Infinity];
  let nextEdgeIntersection = null;
  const horizontal = direction === "horizontal";
  for (const gap of gaps) {
    nextEdgeIntersection = rangeIntersection(edgeIntersection[0], edgeIntersection[1], horizontal ? gap.startEdge[0].y : gap.startEdge[0].x, horizontal ? gap.startEdge[1].y : gap.startEdge[1].x);
    if (nextEdgeIntersection) {
      edgeIntersection = nextEdgeIntersection;
    } else {
      continue;
    }
    nextEdgeIntersection = rangeIntersection(edgeIntersection[0], edgeIntersection[1], horizontal ? gap.endEdge[0].y : gap.endEdge[0].x, horizontal ? gap.endEdge[1].y : gap.endEdge[1].x);
    if (nextEdgeIntersection) {
      edgeIntersection = nextEdgeIntersection;
    } else {
      continue;
    }
  }
  if (edgeIntersection === null) {
    return null;
  }
  const midPoint = (edgeIntersection[0] + edgeIntersection[1]) / 2;
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("g", { className: "tl-snap-indicator", stroke: "cyan", children: gaps.map(({ startEdge, endEdge }, i) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(React8.Fragment, { children: horizontal ? /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: startEdge[0].x,
      y1: midPoint - 2 * l,
      x2: startEdge[1].x,
      y2: midPoint + 2 * l
    }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: endEdge[0].x,
      y1: midPoint - 2 * l,
      x2: endEdge[1].x,
      y2: midPoint + 2 * l
    }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", { x1: startEdge[0].x, y1: midPoint, x2: endEdge[0].x, y2: midPoint }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: (startEdge[0].x + endEdge[0].x) / 2,
      y1: midPoint - l,
      x2: (startEdge[0].x + endEdge[0].x) / 2,
      y2: midPoint + l
    })
  ] }) : /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: midPoint - 2 * l,
      y1: startEdge[0].y,
      x2: midPoint + 2 * l,
      y2: startEdge[1].y
    }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: midPoint - 2 * l,
      y1: endEdge[0].y,
      x2: midPoint + 2 * l,
      y2: endEdge[1].y
    }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", { x1: midPoint, y1: startEdge[0].y, x2: midPoint, y2: endEdge[0].y }),
    /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("line", {
      x1: midPoint - l,
      y1: (startEdge[0].y + endEdge[0].y) / 2,
      x2: midPoint + l,
      y2: (startEdge[0].y + endEdge[0].y) / 2
    })
  ] }) }, i)) });
}
function DefaultSnapIndicator({ className, line, zoom }) {
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("svg", { className: (0, import_classnames8.default)("tl-overlays__item", className), children: line.type === "points" ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(PointsSnapIndicator, { ...line, zoom }) : line.type === "gaps" ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(GapsSnapIndicator, { ...line, zoom }) : null });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSpinner.mjs
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
function DefaultSpinner() {
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "var(--color-text-1)" }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "var(--color-text-1)", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("animateTransform", {
      attributeName: "transform",
      type: "rotate",
      from: "0 8 8",
      to: "360 8 8",
      dur: "1s",
      repeatCount: "indefinite"
    }) })
  ] }) });
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSvgDefs.mjs
var DefaultSvgDefs = () => {
  return null;
};

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useIdentity.mjs
var import_react27 = __toESM(require_react(), 1);
function useIdentity(value, isEqual2) {
  const ref = (0, import_react27.useRef)(value);
  if (isEqual2(value, ref.current)) {
    return ref.current;
  }
  ref.current = value;
  return value;
}
function useShallowArrayIdentity(arr) {
  return useIdentity(arr, areArraysShallowEqual);
}
function useShallowObjectIdentity(arr) {
  return useIdentity(arr, areObjectsShallowEqual);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditorComponents.mjs
var EditorComponentsContext = (0, import_react28.createContext)({});
function EditorComponentsProvider({
  overrides = {},
  children
}) {
  const _overrides = useShallowObjectIdentity(overrides);
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(EditorComponentsContext.Provider, {
    value: (0, import_react28.useMemo)(() => ({
      Background: DefaultBackground,
      SvgDefs: DefaultSvgDefs,
      Brush: DefaultBrush,
      ZoomBrush: DefaultBrush,
      ScreenshotBrush: DefaultBrush,
      CollaboratorBrush: DefaultBrush,
      Cursor: DefaultCursor,
      CollaboratorCursor: DefaultCursor,
      CollaboratorHint: DefaultCollaboratorHint,
      CollaboratorShapeIndicator: DefaultShapeIndicator,
      Grid: DefaultGrid,
      Scribble: DefaultScribble,
      SnapIndicator: DefaultSnapIndicator,
      Handles: DefaultHandles,
      Handle: DefaultHandle,
      CollaboratorScribble: DefaultScribble,
      ErrorFallback: DefaultErrorFallback,
      ShapeErrorFallback: DefaultShapeErrorFallback,
      ShapeIndicatorErrorFallback: DefaultShapeIndicatorErrorFallback,
      Spinner: DefaultSpinner,
      SelectionBackground: DefaultSelectionBackground,
      SelectionForeground: DefaultSelectionForeground,
      ShapeIndicator: DefaultShapeIndicator,
      OnTheCanvas: null,
      InFrontOfTheCanvas: null,
      Canvas: DefaultCanvas,
      ..._overrides
    }), [_overrides]),
    children
  });
}
function useEditorComponents() {
  return (0, import_react28.useContext)(EditorComponentsContext);
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/runtime.mjs
var runtime = {
  openWindow: (url, target) => window.open(url, target, "noopener noreferrer"),
  refreshPage: () => window.location.reload(),
  hardReset: async () => {
    var _a2;
    return await ((_a2 = window.__tldraw__hardReset) == null ? void 0 : _a2.call(window));
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/utils/hardResetEditor.mjs
function hardResetEditor() {
  runtime.hardReset();
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/refreshPage.mjs
function refreshPage() {
  runtime.refreshPage();
}

// node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs
var BASE_ERROR_URL = "https://github.com/tldraw/tldraw/issues/new";
function noop2() {
}
var DefaultErrorFallback = ({ error, editor }) => {
  const containerRef = (0, import_react29.useRef)(null);
  const [shouldShowError, setShouldShowError] = (0, import_react29.useState)(true);
  const [didCopy, setDidCopy] = (0, import_react29.useState)(false);
  const [shouldShowResetConfirmation, setShouldShowResetConfirmation] = (0, import_react29.useState)(false);
  const { Canvas } = useEditorComponents();
  const errorMessage = error instanceof Error ? error.message : String(error);
  const errorStack = error instanceof Error ? error.stack : null;
  const isDarkModeFromApp = useValue("isDarkMode", () => {
    try {
      if (editor) {
        return editor.user.getIsDarkMode();
      }
    } catch (e) {
    }
    return null;
  }, [editor]);
  const [isDarkMode, setIsDarkMode] = (0, import_react29.useState)(null);
  (0, import_react29.useLayoutEffect)(() => {
    var _a2;
    if (isDarkModeFromApp !== null) {
      setIsDarkMode(isDarkModeFromApp);
    }
    let parent = (_a2 = containerRef.current) == null ? void 0 : _a2.parentElement;
    let foundParentThemeClass = false;
    while (parent) {
      if (parent.classList.contains("tl-theme__dark") || parent.classList.contains("tl-theme__light")) {
        foundParentThemeClass = true;
        break;
      }
      parent = parent.parentElement;
    }
    if (foundParentThemeClass) {
      setIsDarkMode(null);
      return;
    }
    setIsDarkMode(window.matchMedia("(prefers-color-scheme: dark)").matches);
  }, [isDarkModeFromApp]);
  (0, import_react29.useEffect)(() => {
    if (didCopy) {
      const timeout = setTimeout(() => {
        setDidCopy(false);
      }, 2e3);
      return () => clearTimeout(timeout);
    }
  }, [didCopy]);
  const copyError = () => {
    const textarea = document.createElement("textarea");
    textarea.value = errorStack != null ? errorStack : errorMessage;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    textarea.remove();
    setDidCopy(true);
  };
  const refresh = () => {
    refreshPage();
  };
  const resetLocalState = async () => {
    hardResetEditor();
  };
  const url = new URL(BASE_ERROR_URL);
  url.searchParams.set("title", errorMessage);
  url.searchParams.set("labels", `bug`);
  url.searchParams.set("body", `Hey, I ran into an error while using tldraw:

\`\`\`js
${errorStack != null ? errorStack : errorMessage}
\`\`\`

My browser: ${navigator.userAgent}`);
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", {
    ref: containerRef,
    className: (0, import_classnames9.default)("tl-container tl-error-boundary", isDarkMode === null ? "" : isDarkMode ? "tl-theme__dark" : "tl-theme__light"),
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "tl-error-boundary__overlay" }),
      editor && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ErrorBoundary, { onError: noop2, fallback: () => null, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "tl-overlay tl-error-boundary__canvas", children: Canvas ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Canvas, {}) : null }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", {
        className: (0, import_classnames9.default)("tl-modal", "tl-error-boundary__content", {
          "tl-error-boundary__content__expanded": shouldShowError && !shouldShowResetConfirmation
        }),
        children: shouldShowResetConfirmation ? /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Are you sure?" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Resetting your data will delete your drawing and cannot be undone." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { onClick: () => setShouldShowResetConfirmation(false), children: "Cancel" }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { className: "tl-error-boundary__reset", onClick: resetLocalState, children: "Reset data" })
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Something's gone wrong." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("p", { children: [
            "Sorry, we encountered an error. Please refresh the page to continue. If you keep seeing this error, you can ",
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("a", { href: url.toString(), children: "create a GitHub issue" }),
            " or",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("a", { href: "https://discord.gg/Cq6cPsTfNy", children: "ask for help on Discord" }),
            "."
          ] }),
          shouldShowError && /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
            "Message:",
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h4", { children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("code", { children: errorMessage }) }),
            "Stack trace:",
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "tl-error-boundary__content__error", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("pre", { children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("code", { children: errorStack != null ? errorStack : errorMessage }) }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { onClick: copyError, children: didCopy ? "Copied!" : "Copy" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { onClick: () => setShouldShowError(!shouldShowError), children: shouldShowError ? "Hide details" : "Show details" }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "tl-error-boundary__content__actions__group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", {
                className: "tl-error-boundary__reset",
                onClick: () => setShouldShowResetConfirmation(true),
                children: "Reset data"
              }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { className: "tl-error-boundary__refresh", onClick: refresh, children: "Refresh Page" })
            ] })
          ] })
        ] })
      })
    ]
  });
};

// node_modules/@tldraw/editor/node_modules/nanoid/index.browser.js
var nanoid3 = (size4 = 21) => crypto.getRandomValues(new Uint8Array(size4)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/@tldraw/editor/dist-esm/lib/utils/uniqueId.mjs
function uniqueId() {
  return nanoid3();
}

// node_modules/@tldraw/editor/dist-esm/lib/config/TLUserPreferences.mjs
var USER_DATA_KEY = "TLDRAW_USER_DATA_v3";
var userTypeValidator = validation_exports.object({
  id: validation_exports.string,
  name: validation_exports.string.nullable().optional(),
  locale: validation_exports.string.nullable().optional(),
  color: validation_exports.string.nullable().optional(),
  isDarkMode: validation_exports.boolean.nullable().optional(),
  animationSpeed: validation_exports.number.nullable().optional(),
  edgeScrollSpeed: validation_exports.number.nullable().optional(),
  isSnapMode: validation_exports.boolean.nullable().optional(),
  isWrapMode: validation_exports.boolean.nullable().optional()
});
var Versions12 = {
  AddAnimationSpeed: 1,
  AddIsSnapMode: 2,
  MakeFieldsNullable: 3,
  AddEdgeScrollSpeed: 4,
  AddExcalidrawSelectMode: 5
};
var CURRENT_VERSION = Math.max(...Object.values(Versions12));
function migrateSnapshot(data) {
  if (data.version < Versions12.AddAnimationSpeed) {
    data.user.animationSpeed = 1;
  }
  if (data.version < Versions12.AddIsSnapMode) {
    data.user.isSnapMode = false;
  }
  if (data.version < Versions12.MakeFieldsNullable) {
  }
  if (data.version < Versions12.AddEdgeScrollSpeed) {
    data.user.edgeScrollSpeed = 1;
  }
  if (data.version < Versions12.AddExcalidrawSelectMode) {
    data.user.isWrapMode = false;
  }
  data.version = CURRENT_VERSION;
}
var USER_COLORS = [
  "#FF802B",
  "#EC5E41",
  "#F2555A",
  "#F04F88",
  "#E34BA9",
  "#BD54C6",
  "#9D5BD2",
  "#7B66DC",
  "#02B1CC",
  "#11B3A3",
  "#39B178",
  "#55B467"
];
function getRandomColor() {
  return USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)];
}
function userPrefersDarkUI() {
  var _a2, _b2, _c;
  if (typeof window === "undefined") {
    return false;
  }
  return (_c = (_b2 = (_a2 = window.matchMedia) == null ? void 0 : _a2.call(window, "(prefers-color-scheme: dark)")) == null ? void 0 : _b2.matches) != null ? _c : false;
}
function userPrefersReducedMotion() {
  var _a2, _b2, _c;
  if (typeof window === "undefined") {
    return false;
  }
  return (_c = (_b2 = (_a2 = window.matchMedia) == null ? void 0 : _a2.call(window, "(prefers-reduced-motion: reduce)")) == null ? void 0 : _b2.matches) != null ? _c : false;
}
var defaultUserPreferences = Object.freeze({
  name: "New User",
  locale: getDefaultTranslationLocale(),
  color: getRandomColor(),
  isDarkMode: false,
  edgeScrollSpeed: 1,
  animationSpeed: userPrefersReducedMotion() ? 0 : 1,
  isSnapMode: false,
  isWrapMode: false
});
function getFreshUserPreferences() {
  return {
    id: uniqueId()
  };
}
function migrateUserPreferences(userData) {
  if (userData === null || typeof userData !== "object") {
    return getFreshUserPreferences();
  }
  if (!("version" in userData) || !("user" in userData) || typeof userData.version !== "number") {
    return getFreshUserPreferences();
  }
  const snapshot = structuredClone(userData);
  migrateSnapshot(snapshot);
  try {
    return userTypeValidator.validate(snapshot.user);
  } catch (e) {
    return getFreshUserPreferences();
  }
}
function loadUserPreferences() {
  var _a2;
  const userData = (_a2 = JSON.parse(getFromLocalStorage(USER_DATA_KEY) || "null")) != null ? _a2 : null;
  return migrateUserPreferences(userData);
}
var globalUserPreferences = atom("globalUserData", null);
function storeUserPreferences() {
  setInLocalStorage(USER_DATA_KEY, JSON.stringify({
    version: CURRENT_VERSION,
    user: globalUserPreferences.get()
  }));
}
function setUserPreferences(user) {
  userTypeValidator.validate(user);
  globalUserPreferences.set(user);
  storeUserPreferences();
  broadcastUserPreferencesChange();
}
var isTest2 = typeof process !== "undefined" && false;
var channel = typeof BroadcastChannel !== "undefined" && !isTest2 ? new BroadcastChannel("tldraw-user-sync") : null;
channel == null ? void 0 : channel.addEventListener("message", (e) => {
  const data = e.data;
  if ((data == null ? void 0 : data.type) === broadcastEventKey && (data == null ? void 0 : data.origin) !== getBroadcastOrigin()) {
    globalUserPreferences.set(migrateUserPreferences(data.data));
  }
});
var _broadcastOrigin = null;
function getBroadcastOrigin() {
  if (_broadcastOrigin === null) {
    _broadcastOrigin = uniqueId();
  }
  return _broadcastOrigin;
}
var broadcastEventKey = "tldraw-user-preferences-change";
function broadcastUserPreferencesChange() {
  channel == null ? void 0 : channel.postMessage({
    type: broadcastEventKey,
    origin: getBroadcastOrigin(),
    data: {
      user: getUserPreferences(),
      version: CURRENT_VERSION
    }
  });
}
function getUserPreferences() {
  let prefs = globalUserPreferences.get();
  if (!prefs) {
    prefs = loadUserPreferences();
    globalUserPreferences.set(prefs);
  }
  return prefs;
}

// node_modules/@tldraw/editor/dist-esm/lib/config/createTLUser.mjs
function createTLUser(opts = {}) {
  var _a2, _b2, _c;
  return {
    derivePresenceState: (_a2 = opts.derivePresenceState) != null ? _a2 : () => computed("presence", () => null),
    userPreferences: (_b2 = opts.userPreferences) != null ? _b2 : computed("userPreferences", () => getUserPreferences()),
    setUserPreferences: (_c = opts.setUserPreferences) != null ? _c : setUserPreferences
  };
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/Editor.mjs
var import_eventemitter3 = __toESM(require_eventemitter3(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var import_client = __toESM(require_client(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/components/SVGContainer.mjs
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var import_classnames10 = __toESM(require_classnames(), 1);
function SVGContainer({ children, className = "", ...rest }) {
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("svg", { ...rest, className: (0, import_classnames10.default)("tl-svg-container", className), children });
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/intersect.mjs
function intersectLineSegmentLineSegment(a1, a2, b1, b2) {
  const ABx = a1.x - b1.x;
  const ABy = a1.y - b1.y;
  const BVx = b2.x - b1.x;
  const BVy = b2.y - b1.y;
  const AVx = a2.x - a1.x;
  const AVy = a2.y - a1.y;
  const ua_t = BVx * ABy - BVy * ABx;
  const ub_t = AVx * ABy - AVy * ABx;
  const u_b = BVy * AVx - BVx * AVy;
  if (ua_t === 0 || ub_t === 0)
    return null;
  if (u_b === 0)
    return null;
  if (u_b !== 0) {
    const ua = ua_t / u_b;
    const ub = ub_t / u_b;
    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
      return Vec.AddXY(a1, ua * AVx, ua * AVy);
    }
  }
  return null;
}
function intersectLineSegmentCircle(a1, a2, c, r) {
  const a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y);
  const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y));
  const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r;
  const deter = b * b - 4 * a * cc;
  if (deter < 0)
    return null;
  if (deter === 0)
    return null;
  const e = Math.sqrt(deter);
  const u1 = (-b + e) / (2 * a);
  const u2 = (-b - e) / (2 * a);
  if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {
    return null;
  }
  const result = [];
  if (0 <= u1 && u1 <= 1)
    result.push(Vec.Lrp(a1, a2, u1));
  if (0 <= u2 && u2 <= 1)
    result.push(Vec.Lrp(a1, a2, u2));
  if (result.length === 0)
    return null;
  return result;
}
function intersectLineSegmentPolyline(a1, a2, points) {
  const result = [];
  let segmentIntersection;
  for (let i = 0, n = points.length - 1; i < n; i++) {
    segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1]);
    if (segmentIntersection)
      result.push(segmentIntersection);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectLineSegmentPolygon(a1, a2, points) {
  const result = [];
  let segmentIntersection;
  for (let i = 1, n = points.length; i < n + 1; i++) {
    segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i - 1], points[i % points.length]);
    if (segmentIntersection)
      result.push(segmentIntersection);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectCircleCircle(c1, r1, c2, r2) {
  let dx = c2.x - c1.x;
  let dy = c2.y - c1.y;
  const d = Math.sqrt(dx * dx + dy * dy), x = (d * d - r2 * r2 + r1 * r1) / (2 * d), y = Math.sqrt(r1 * r1 - x * x);
  dx /= d;
  dy /= d;
  return [
    new Vec(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y),
    new Vec(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y)
  ];
}
function intersectCirclePolygon(c, r, points) {
  const result = [];
  let a, b, int;
  for (let i = 0, n = points.length; i < n; i++) {
    a = points[i];
    b = points[(i + 1) % points.length];
    int = intersectLineSegmentCircle(a, b, c, r);
    if (int)
      result.push(...int);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectCirclePolyline(c, r, points) {
  const result = [];
  let a, b, int;
  for (let i = 1, n = points.length; i < n; i++) {
    a = points[i - 1];
    b = points[i];
    int = intersectLineSegmentCircle(a, b, c, r);
    if (int)
      result.push(...int);
  }
  if (result.length === 0)
    return null;
  return result;
}
function ccw(A, B, C) {
  return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x);
}
function linesIntersect(A, B, C, D) {
  return ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D);
}
function intersectPolygonPolygon(polygonA, polygonB) {
  const result = /* @__PURE__ */ new Map();
  let a, b, c, d;
  for (let i = 0, n = polygonA.length; i < n; i++) {
    a = polygonA[i];
    if (pointInPolygon(a, polygonB)) {
      const id = getPointId(a);
      if (!result.has(id)) {
        result.set(id, a);
      }
    }
  }
  for (let i = 0, n = polygonB.length; i < n; i++) {
    a = polygonB[i];
    if (pointInPolygon(a, polygonA)) {
      const id = getPointId(a);
      if (!result.has(id)) {
        result.set(id, a);
      }
    }
  }
  for (let i = 0, n = polygonA.length; i < n; i++) {
    a = polygonA[i];
    b = polygonA[(i + 1) % polygonA.length];
    for (let j = 0, m = polygonB.length; j < m; j++) {
      c = polygonB[j];
      d = polygonB[(j + 1) % polygonB.length];
      const intersection = intersectLineSegmentLineSegment(a, b, c, d);
      if (intersection !== null) {
        const id = getPointId(intersection);
        if (!result.has(id)) {
          result.set(id, intersection);
        }
      }
    }
  }
  if (result.size === 0)
    return null;
  return orderClockwise([...result.values()]);
}
function getPointId(point) {
  return `${point.x},${point.y}`;
}
function orderClockwise(points) {
  const C = Vec.Average(points);
  return points.sort((A, B) => Vec.Angle(C, A) - Vec.Angle(C, B));
}
function polygonsIntersect(a, b) {
  let a0, a1, b0, b1;
  for (let i = 0, n = a.length; i < n; i++) {
    a0 = a[i];
    a1 = a[(i + 1) % n];
    for (let j = 0, m = b.length; j < m; j++) {
      b0 = b[j];
      b1 = b[(j + 1) % m];
      if (linesIntersect(a0, a1, b0, b1))
        return true;
    }
  }
  return false;
}
function polygonIntersectsPolyline(polygon, polyline) {
  let a, b, c, d;
  for (let i = 0, n = polygon.length; i < n; i++) {
    a = polygon[i];
    b = polygon[(i + 1) % n];
    for (let j = 1, m = polyline.length; j < m; j++) {
      c = polyline[j - 1];
      d = polyline[j];
      if (linesIntersect(a, b, c, d))
        return true;
    }
  }
  return false;
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Edge2d.mjs
var Edge2d = class extends Geometry2d {
  constructor(config) {
    super({ ...config, isClosed: false, isFilled: false });
    __publicField(this, "start");
    __publicField(this, "end");
    __publicField(this, "d");
    __publicField(this, "u");
    __publicField(this, "ul");
    __publicField(this, "_length");
    const { start, end } = config;
    this.start = start;
    this.end = end;
    this.d = start.clone().sub(end);
    this.u = this.d.clone().uni();
    this.ul = this.u.len();
  }
  get length() {
    if (!this._length) {
      return this.d.len();
    }
    return this._length;
  }
  midPoint() {
    return this.start.lrp(this.end, 0.5);
  }
  getVertices() {
    return [this.start, this.end];
  }
  nearestPoint(point) {
    const { start, end, u, ul: l } = this;
    if (l === 0)
      return start;
    const k = Vec.Sub(point, start).dpr(u) / l;
    const cx = start.x + u.x * k;
    if (cx < Math.min(start.x, end.x))
      return start.x < end.x ? start : end;
    if (cx > Math.max(start.x, end.x))
      return start.x > end.x ? start : end;
    const cy = start.y + u.y * k;
    if (cy < Math.min(start.y, end.y))
      return start.y < end.y ? start : end;
    if (cy > Math.max(start.y, end.y))
      return start.y > end.y ? start : end;
    return new Vec(cx, cy);
  }
  hitTestLineSegment(A, B, distance = 0) {
    return linesIntersect(A, B, this.start, this.end) || this.distanceToLineSegment(A, B) <= distance;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polyline2d.mjs
var Polyline2d = class extends Geometry2d {
  constructor(config) {
    super({ isClosed: false, isFilled: false, ...config });
    __publicField(this, "points");
    __publicField(this, "_segments");
    __publicField(this, "_length");
    const { points } = config;
    this.points = points;
  }
  get segments() {
    if (!this._segments) {
      this._segments = [];
      const { vertices } = this;
      for (let i = 0, n = vertices.length - 1; i < n; i++) {
        const start = vertices[i];
        const end = vertices[i + 1];
        this._segments.push(new Edge2d({ start, end }));
      }
      if (this.isClosed) {
        this._segments.push(new Edge2d({ start: vertices[vertices.length - 1], end: vertices[0] }));
      }
    }
    return this._segments;
  }
  get length() {
    if (!this._length) {
      this._length = this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    return this._length;
  }
  getVertices() {
    return this.points;
  }
  nearestPoint(A) {
    const { segments } = this;
    let nearest = this.points[0];
    let dist = Infinity;
    let p;
    let d;
    for (let i = 0; i < segments.length; i++) {
      p = segments[i].nearestPoint(A);
      d = Vec.Dist2(p, A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B, distance = 0) {
    const { segments } = this;
    for (let i = 0, n = segments.length; i < n; i++) {
      if (segments[i].hitTestLineSegment(A, B, distance)) {
        return true;
      }
    }
    return false;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polygon2d.mjs
var Polygon2d = class extends Polyline2d {
  constructor(config) {
    super({ ...config });
    this.isClosed = true;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Rectangle2d.mjs
var Rectangle2d = class extends Polygon2d {
  constructor(config) {
    const { x = 0, y = 0, width, height } = config;
    super({
      ...config,
      points: [
        new Vec(x, y),
        new Vec(x + width, y),
        new Vec(x + width, y + height),
        new Vec(x, y + height)
      ]
    });
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "w");
    __publicField(this, "h");
    this.x = x;
    this.y = y;
    this.w = width;
    this.h = height;
  }
  getBounds() {
    return new Box(this.x, this.y, this.w, this.h);
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/ShapeUtil.mjs
var ShapeUtil = class {
  constructor(editor) {
    __publicField(this, "canSnap", () => true);
    __publicField(this, "canScroll", () => false);
    __publicField(this, "canBind", (_shape, _otherShape) => true);
    __publicField(this, "canEdit", () => false);
    __publicField(this, "canResize", () => true);
    __publicField(this, "canEditInReadOnly", () => false);
    __publicField(this, "canCrop", () => false);
    __publicField(this, "hideResizeHandles", () => false);
    __publicField(this, "hideRotateHandle", () => false);
    __publicField(this, "hideSelectionBoundsBg", () => false);
    __publicField(this, "hideSelectionBoundsFg", () => false);
    __publicField(this, "isAspectRatioLocked", () => false);
    __publicField(this, "onBeforeCreate");
    __publicField(this, "onBeforeUpdate");
    __publicField(this, "onDragShapesOver");
    __publicField(this, "onDragShapesOut");
    __publicField(this, "onDropShapesOver");
    __publicField(this, "onResizeStart");
    __publicField(this, "onResize");
    __publicField(this, "onResizeEnd");
    __publicField(this, "onTranslateStart");
    __publicField(this, "onTranslate");
    __publicField(this, "onTranslateEnd");
    __publicField(this, "onHandleDrag");
    __publicField(this, "onRotateStart");
    __publicField(this, "onRotate");
    __publicField(this, "onRotateEnd");
    __publicField(this, "onBindingChange");
    __publicField(this, "onChildrenChange");
    __publicField(this, "onDoubleClickHandle");
    __publicField(this, "onDoubleClickEdge");
    __publicField(this, "onDoubleClick");
    __publicField(this, "onClick");
    __publicField(this, "onEditEnd");
    this.editor = editor;
  }
  providesBackgroundForChildren(shape) {
    return false;
  }
  canReceiveNewChildrenOfType(shape, type) {
    return false;
  }
  canDropShapes(shape, shapes) {
    return false;
  }
  expandSelectionOutlinePx(shape) {
    return 0;
  }
  getCanvasSvgDefs() {
    return [];
  }
  getBoundsSnapGeometry(shape) {
    return {};
  }
  getHandleSnapGeometry(shape) {
    return {};
  }
};
__publicField(ShapeUtil, "props");
__publicField(ShapeUtil, "migrations");
__publicField(ShapeUtil, "type");

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/DashedOutlineBox.mjs
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/getPerfectDashProps.mjs
function getPerfectDashProps(totalLength, strokeWidth, opts = {}) {
  const {
    closed = false,
    snap = 1,
    start = "outset",
    end = "outset",
    lengthRatio = 2,
    style = "dashed"
  } = opts;
  let dashLength = 0;
  let dashCount = 0;
  let ratio = 1;
  let gapLength = 0;
  let strokeDashoffset = 0;
  switch (style) {
    case "dashed": {
      ratio = 1;
      dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
      break;
    }
    case "dotted": {
      ratio = 100;
      dashLength = strokeWidth / ratio;
      break;
    }
    default: {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
  }
  if (!closed) {
    if (start === "outset") {
      totalLength += dashLength / 2;
      strokeDashoffset += dashLength / 2;
    } else if (start === "skip") {
      totalLength -= dashLength;
      strokeDashoffset -= dashLength;
    }
    if (end === "outset") {
      totalLength += dashLength / 2;
    } else if (end === "skip") {
      totalLength -= dashLength;
    }
  }
  dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
  dashCount -= dashCount % snap;
  if (dashCount < 3 && style === "dashed") {
    if (totalLength / strokeWidth < 5) {
      dashLength = totalLength;
      dashCount = 1;
      gapLength = 0;
    } else {
      dashLength = totalLength * 0.333;
      gapLength = totalLength * 0.333;
    }
  } else {
    dashCount = Math.max(dashCount, 3);
    dashLength = totalLength / dashCount / (2 * ratio);
    if (closed) {
      strokeDashoffset = dashLength / 2;
      gapLength = (totalLength - dashCount * dashLength) / dashCount;
    } else {
      gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
    }
  }
  return {
    strokeDasharray: [dashLength, gapLength].join(" "),
    strokeDashoffset: strokeDashoffset.toString()
  };
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/DashedOutlineBox.mjs
function DashedOutlineBox({ bounds, className }) {
  const editor = useEditor();
  const zoomLevel = useValue("zoom level", () => editor.getZoomLevel(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("g", { className, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round", children: bounds.sides.map((side, i) => {
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(side[0].dist(side[1]), 1 / zoomLevel, {
      style: "dashed",
      lengthRatio: 4
    });
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("line", {
      x1: side[0].x,
      y1: side[0].y,
      x2: side[1].x,
      y2: side[1].y,
      strokeDasharray,
      strokeDashoffset
    }, i);
  }) });
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs
var GroupShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "hideSelectionBoundsFg", () => true);
    __publicField(this, "canBind", () => false);
    __publicField(this, "onChildrenChange", (group) => {
      const children = this.editor.getSortedChildIdsForParent(group.id);
      if (children.length === 0) {
        if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
          this.editor.popFocusedGroupId();
        }
        this.editor.deleteShapes([group.id]);
        return;
      } else if (children.length === 1) {
        if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
          this.editor.popFocusedGroupId();
        }
        this.editor.reparentShapes(children, group.parentId);
        this.editor.deleteShapes([group.id]);
        return;
      }
    });
  }
  getDefaultProps() {
    return {};
  }
  getGeometry(shape) {
    const children = this.editor.getSortedChildIdsForParent(shape.id);
    if (children.length === 0) {
      return new Rectangle2d({ width: 1, height: 1, isFilled: false });
    }
    return new Group2d({
      children: children.map((childId) => {
        const shape2 = this.editor.getShape(childId);
        const geometry = this.editor.getShapeGeometry(childId);
        const points = this.editor.getShapeLocalTransform(shape2).applyToPoints(geometry.vertices);
        if (geometry.isClosed) {
          return new Polygon2d({
            points,
            isFilled: true
          });
        }
        return new Polyline2d({
          points
        });
      })
    });
  }
  component(shape) {
    const isErasing = this.editor.getErasingShapeIds().includes(shape.id);
    const { hintingShapeIds } = this.editor.getCurrentPageState();
    const isHintingOtherGroup = hintingShapeIds.length > 0 && hintingShapeIds.some((id) => id !== shape.id && this.editor.isShapeOfType(this.editor.getShape(id), "group"));
    const isFocused = this.editor.getCurrentPageState().focusedGroupId !== shape.id;
    if (!isErasing && (isFocused || isHintingOtherGroup)) {
      return null;
    }
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(SVGContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DashedOutlineBox, { className: "tl-group", bounds }) });
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DashedOutlineBox, { className: "", bounds });
  }
};
__publicField(GroupShapeUtil, "type", "group");
__publicField(GroupShapeUtil, "props", groupShapeProps);
__publicField(GroupShapeUtil, "migrations", groupShapeMigrations);

// node_modules/@tldraw/editor/dist-esm/lib/config/defaultShapes.mjs
var coreShapes = [
  GroupShapeUtil
];
var coreShapeTypes = new Set(coreShapes.map((s) => s.type));
function checkShapesAndAddCore(customShapes) {
  const shapes = [...coreShapes];
  const addedCustomShapeTypes = /* @__PURE__ */ new Set();
  for (const customShape of customShapes) {
    if (coreShapeTypes.has(customShape.type)) {
      throw new Error(`Shape type "${customShape.type}" is a core shapes type and cannot be overridden`);
    }
    if (addedCustomShapeTypes.has(customShape.type)) {
      throw new Error(`Shape type "${customShape.type}" is defined more than once`);
    }
    shapes.push(customShape);
    addedCustomShapeTypes.add(customShape.type);
  }
  return shapes;
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/SharedStylesMap.mjs
function sharedStyleEquals(a, b) {
  if (!b)
    return false;
  switch (a.type) {
    case "mixed":
      return b.type === "mixed";
    case "shared":
      return b.type === "shared" && a.value === b.value;
    default:
      throw exhaustiveSwitchError(a);
  }
}
var ReadonlySharedStyleMap = class {
  constructor(entries) {
    __publicField(this, "map");
    this.map = new Map(entries);
  }
  get(prop) {
    return this.map.get(prop);
  }
  getAsKnownValue(prop) {
    const value = this.get(prop);
    if (!value)
      return void 0;
    if (value.type === "mixed")
      return void 0;
    return value.value;
  }
  get size() {
    return this.map.size;
  }
  equals(other) {
    if (this.size !== other.size)
      return false;
    const checkedKeys = /* @__PURE__ */ new Set();
    for (const [styleProp, value] of this) {
      if (!sharedStyleEquals(value, other.get(styleProp)))
        return false;
      checkedKeys.add(styleProp);
    }
    for (const [styleProp, value] of other) {
      if (checkedKeys.has(styleProp))
        continue;
      if (!sharedStyleEquals(value, this.get(styleProp)))
        return false;
    }
    return true;
  }
  keys() {
    return this.map.keys();
  }
  values() {
    return this.map.values();
  }
  entries() {
    return this.map.entries();
  }
  [Symbol.iterator]() {
    return this.map[Symbol.iterator]();
  }
};
var SharedStyleMap = class extends ReadonlySharedStyleMap {
  set(prop, value) {
    this.map.set(prop, value);
  }
  applyValue(prop, value) {
    const existingValue = this.get(prop);
    if (!existingValue) {
      this.set(prop, { type: "shared", value });
      return;
    }
    switch (existingValue.type) {
      case "mixed":
        return;
      case "shared":
        if (existingValue.value !== value) {
          this.set(prop, { type: "mixed" });
        }
        return;
      default:
        exhaustiveSwitchError(existingValue, "type");
    }
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/utils/WeakMapCache.mjs
var WeakMapCache = class {
  constructor() {
    __publicField(this, "items", /* @__PURE__ */ new WeakMap());
  }
  get(item, cb) {
    if (!this.items.has(item)) {
      this.items.set(item, cb(item));
    }
    return this.items.get(item);
  }
  access(item) {
    return this.items.get(item);
  }
  set(item, value) {
    this.items.set(item, value);
  }
  has(item) {
    return this.items.has(item);
  }
  invalidate(item) {
    this.items.delete(item);
  }
  bust() {
    this.items = /* @__PURE__ */ new WeakMap();
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs
function dataUrlToFile(url, filename, mimeType) {
  return fetch(url).then(function(res) {
    return res.arrayBuffer();
  }).then(function(buf) {
    return new File([buf], filename, { type: mimeType });
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/getIncrementedName.mjs
function getIncrementedName(name, others) {
  var _a2;
  let result = name;
  const set2 = new Set(others);
  while (set2.has(result)) {
    result = ((_a2 = /^.*(\d+)$/.exec(result)) == null ? void 0 : _a2[1]) ? result.replace(/(\d+)(?=\D?)$/, (m) => {
      return (+m + 1).toString();
    }) : `${result} 1`;
  }
  return result;
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/reorderShapes.mjs
function getReorderingShapesChanges(editor, operation, ids) {
  if (ids.length === 0)
    return [];
  const parents = /* @__PURE__ */ new Map();
  for (const shape of compact(ids.map((id) => editor.getShape(id)))) {
    const { parentId } = shape;
    if (!parents.has(parentId)) {
      parents.set(parentId, {
        children: compact(editor.getSortedChildIdsForParent(parentId).map((id) => editor.getShape(id))),
        moving: /* @__PURE__ */ new Set()
      });
    }
    parents.get(parentId).moving.add(shape);
  }
  const changes = [];
  switch (operation) {
    case "toBack": {
      parents.forEach(({ moving, children }) => reorderToBack(moving, children, changes));
      break;
    }
    case "toFront": {
      parents.forEach(({ moving, children }) => reorderToFront(moving, children, changes));
      break;
    }
    case "forward": {
      parents.forEach(({ moving, children }) => reorderForward(moving, children, changes));
      break;
    }
    case "backward": {
      parents.forEach(({ moving, children }) => reorderBackward(moving, children, changes));
      break;
    }
  }
  return changes;
}
function reorderToBack(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let below;
  let above;
  for (let i = 0; i < len; i++) {
    const shape = children[i];
    if (moving.has(shape)) {
      below = shape.index;
      moving.delete(shape);
    } else {
      above = shape.index;
      break;
    }
  }
  if (moving.size === 0) {
    return;
  } else {
    const indices = getIndicesBetween(below, above, moving.size);
    changes.push(...Array.from(moving.values()).sort(sortByIndex).map((shape, i) => ({ ...shape, index: indices[i] })));
  }
}
function reorderToFront(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let below;
  let above;
  for (let i = len - 1; i > -1; i--) {
    const shape = children[i];
    if (moving.has(shape)) {
      above = shape.index;
      moving.delete(shape);
    } else {
      below = shape.index;
      break;
    }
  }
  if (moving.size === 0) {
    return;
  } else {
    const indices = getIndicesBetween(below, above, moving.size);
    changes.push(...Array.from(moving.values()).sort(sortByIndex).map((shape, i) => ({ ...shape, index: indices[i] })));
  }
}
function reorderForward(moving, children, changes) {
  var _a2;
  const len = children.length;
  if (moving.size === len)
    return;
  let state = { name: "skipping" };
  for (let i = 0; i < len; i++) {
    const isMoving = moving.has(children[i]);
    switch (state.name) {
      case "skipping": {
        if (!isMoving)
          continue;
        state = { name: "selecting", selectIndex: i };
        break;
      }
      case "selecting": {
        if (isMoving)
          continue;
        const { selectIndex } = state;
        getIndicesBetween(children[i].index, (_a2 = children[i + 1]) == null ? void 0 : _a2.index, i - selectIndex).forEach((index2, k) => changes.push({ ...children[selectIndex + k], index: index2 }));
        state = { name: "skipping" };
        break;
      }
    }
  }
}
function reorderBackward(moving, children, changes) {
  var _a2;
  const len = children.length;
  if (moving.size === len)
    return;
  let state = { name: "skipping" };
  for (let i = len - 1; i > -1; i--) {
    const isMoving = moving.has(children[i]);
    switch (state.name) {
      case "skipping": {
        if (!isMoving)
          continue;
        state = { name: "selecting", selectIndex: i };
        break;
      }
      case "selecting": {
        if (isMoving)
          continue;
        getIndicesBetween((_a2 = children[i - 1]) == null ? void 0 : _a2.index, children[i].index, state.selectIndex - i).forEach((index2, k) => {
          changes.push({ ...children[i + k + 1], index: index2 });
        });
        state = { name: "skipping" };
        break;
      }
    }
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/rotation.mjs
function getRotationSnapshot({ editor }) {
  const selectedShapes = editor.getSelectedShapes();
  const selectionRotation = editor.getSelectionRotation();
  const selectionBounds = editor.getSelectionRotatedPageBounds();
  const {
    inputs: { originPagePoint }
  } = editor;
  if (!selectionBounds) {
    return null;
  }
  const selectionPageCenter = selectionBounds.center.clone().rotWith(selectionBounds.point, selectionRotation);
  return {
    selectionPageCenter,
    initialCursorAngle: selectionPageCenter.angle(originPagePoint),
    initialSelectionRotation: selectionRotation,
    shapeSnapshots: selectedShapes.map((shape) => ({
      shape: structuredClone(shape),
      initialPagePoint: editor.getShapePageTransform(shape.id).point()
    }))
  };
}
function applyRotationToSnapshotShapes({
  delta,
  editor,
  snapshot,
  stage
}) {
  const { selectionPageCenter, shapeSnapshots } = snapshot;
  editor.updateShapes(shapeSnapshots.map(({ shape, initialPagePoint }) => {
    const parentTransform = isShapeId(shape.parentId) ? editor.getShapePageTransform(shape.parentId) : Mat.Identity();
    const newPagePoint = Vec.RotWith(initialPagePoint, selectionPageCenter, delta);
    const newLocalPoint = Mat.applyToPoint(Mat.Inverse(parentTransform), newPagePoint);
    const newRotation = canonicalizeRotation(shape.rotation + delta);
    return {
      id: shape.id,
      type: shape.type,
      x: newLocalPoint.x,
      y: newLocalPoint.y,
      rotation: newRotation
    };
  }));
  const changes = [];
  shapeSnapshots.forEach(({ shape }) => {
    var _a2, _b2, _c;
    const current2 = editor.getShape(shape.id);
    if (!current2)
      return;
    const util = editor.getShapeUtil(shape);
    if (stage === "start" || stage === "one-off") {
      const changeStart = (_a2 = util.onRotateStart) == null ? void 0 : _a2.call(util, shape);
      if (changeStart)
        changes.push(changeStart);
    }
    const changeUpdate = (_b2 = util.onRotate) == null ? void 0 : _b2.call(util, shape, current2);
    if (changeUpdate)
      changes.push(changeUpdate);
    if (stage === "end" || stage === "one-off") {
      const changeEnd = (_c = util.onRotateEnd) == null ? void 0 : _c.call(util, shape, current2);
      if (changeEnd)
        changes.push(changeEnd);
    }
  });
  if (changes.length > 0) {
    editor.updateShapes(changes);
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/arrowBindingsIndex.mjs
var arrowBindingsIndex = (editor) => {
  const { store: store2 } = editor;
  const shapeHistory = store2.query.filterHistory("shape");
  const arrowQuery = store2.query.records("shape", () => ({ type: { eq: "arrow" } }));
  function fromScratch() {
    const allArrows = arrowQuery.get();
    const bindings2Arrows = {};
    for (const arrow4 of allArrows) {
      const { start, end } = arrow4.props;
      if (start.type === "binding") {
        const arrows = bindings2Arrows[start.boundShapeId];
        if (arrows)
          arrows.push({ arrowId: arrow4.id, handleId: "start" });
        else
          bindings2Arrows[start.boundShapeId] = [{ arrowId: arrow4.id, handleId: "start" }];
      }
      if (end.type === "binding") {
        const arrows = bindings2Arrows[end.boundShapeId];
        if (arrows)
          arrows.push({ arrowId: arrow4.id, handleId: "end" });
        else
          bindings2Arrows[end.boundShapeId] = [{ arrowId: arrow4.id, handleId: "end" }];
      }
    }
    return bindings2Arrows;
  }
  return computed("arrowBindingsIndex", (_lastValue, lastComputedEpoch) => {
    if (isUninitialized(_lastValue)) {
      return fromScratch();
    }
    const lastValue = _lastValue;
    const diff = shapeHistory.getDiffSince(lastComputedEpoch);
    if (diff === RESET_VALUE) {
      return fromScratch();
    }
    let nextValue = void 0;
    function ensureNewArray(boundShapeId) {
      if (!nextValue) {
        nextValue = { ...lastValue };
      }
      if (!nextValue[boundShapeId]) {
        nextValue[boundShapeId] = [];
      } else if (nextValue[boundShapeId] === lastValue[boundShapeId]) {
        nextValue[boundShapeId] = [...nextValue[boundShapeId]];
      }
    }
    function removingBinding(boundShapeId, arrowId, handleId) {
      ensureNewArray(boundShapeId);
      nextValue[boundShapeId] = nextValue[boundShapeId].filter((binding) => binding.arrowId !== arrowId || binding.handleId !== handleId);
      if (nextValue[boundShapeId].length === 0) {
        delete nextValue[boundShapeId];
      }
    }
    function addBinding(boundShapeId, arrowId, handleId) {
      ensureNewArray(boundShapeId);
      nextValue[boundShapeId].push({ arrowId, handleId });
    }
    for (const changes of diff) {
      for (const newShape of Object.values(changes.added)) {
        if (editor.isShapeOfType(newShape, "arrow")) {
          const { start, end } = newShape.props;
          if (start.type === "binding") {
            addBinding(start.boundShapeId, newShape.id, "start");
          }
          if (end.type === "binding") {
            addBinding(end.boundShapeId, newShape.id, "end");
          }
        }
      }
      for (const [prev, next] of Object.values(changes.updated)) {
        if (!editor.isShapeOfType(prev, "arrow") || !editor.isShapeOfType(next, "arrow"))
          continue;
        for (const handle of ["start", "end"]) {
          const prevTerminal = prev.props[handle];
          const nextTerminal = next.props[handle];
          if (prevTerminal.type === "binding" && nextTerminal.type === "point") {
            removingBinding(prevTerminal.boundShapeId, prev.id, handle);
          } else if (prevTerminal.type === "point" && nextTerminal.type === "binding") {
            addBinding(nextTerminal.boundShapeId, next.id, handle);
          } else if (prevTerminal.type === "binding" && nextTerminal.type === "binding" && prevTerminal.boundShapeId !== nextTerminal.boundShapeId) {
            removingBinding(prevTerminal.boundShapeId, prev.id, handle);
            addBinding(nextTerminal.boundShapeId, next.id, handle);
          }
        }
      }
      for (const prev of Object.values(changes.removed)) {
        if (editor.isShapeOfType(prev, "arrow")) {
          const { start, end } = prev.props;
          if (start.type === "binding") {
            removingBinding(start.boundShapeId, prev.id, "start");
          }
          if (end.type === "binding") {
            removingBinding(end.boundShapeId, prev.id, "end");
          }
        }
      }
    }
    return nextValue != null ? nextValue : lastValue;
  });
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/notVisibleShapes.mjs
function isShapeNotVisible(editor, id, viewportPageBounds) {
  const maskedPageBounds = editor.getShapeMaskedPageBounds(id);
  if (maskedPageBounds === void 0)
    return true;
  return !viewportPageBounds.includes(maskedPageBounds);
}
var notVisibleShapes = (editor) => {
  const isCullingOffScreenShapes = Number.isFinite(editor.renderingBoundsMargin);
  function fromScratch(editor2) {
    const shapes = editor2.getCurrentPageShapeIds();
    const viewportPageBounds = editor2.getViewportPageBounds();
    const notVisibleShapes2 = /* @__PURE__ */ new Set();
    shapes.forEach((id) => {
      if (isShapeNotVisible(editor2, id, viewportPageBounds)) {
        notVisibleShapes2.add(id);
      }
    });
    return notVisibleShapes2;
  }
  return computed("getCulledShapes", (prevValue) => {
    if (!isCullingOffScreenShapes)
      return /* @__PURE__ */ new Set();
    if (isUninitialized(prevValue)) {
      return fromScratch(editor);
    }
    const nextValue = fromScratch(editor);
    if (prevValue.size !== nextValue.size)
      return nextValue;
    for (const prev of prevValue) {
      if (!nextValue.has(prev)) {
        return nextValue;
      }
    }
    return prevValue;
  });
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/parentsToChildren.mjs
var parentsToChildren = (store2) => {
  const shapeIdsQuery = store2.query.ids("shape");
  const shapeHistory = store2.query.filterHistory("shape");
  function fromScratch() {
    const result = {};
    const shapeIds = shapeIdsQuery.get();
    const shapes = Array(shapeIds.size);
    shapeIds.forEach((id) => shapes.push(store2.get(id)));
    shapes.sort(sortByIndex);
    shapes.forEach((shape) => {
      if (!result[shape.parentId]) {
        result[shape.parentId] = [];
      }
      result[shape.parentId].push(shape.id);
    });
    return result;
  }
  return computed("parentsToChildrenWithIndexes", (lastValue, lastComputedEpoch) => {
    if (isUninitialized(lastValue)) {
      return fromScratch();
    }
    const diff = shapeHistory.getDiffSince(lastComputedEpoch);
    if (diff === RESET_VALUE) {
      return fromScratch();
    }
    if (diff.length === 0)
      return lastValue;
    let newValue = null;
    const ensureNewArray = (parentId) => {
      if (!newValue) {
        newValue = { ...lastValue };
      }
      if (!newValue[parentId]) {
        newValue[parentId] = [];
      } else if (newValue[parentId] === lastValue[parentId]) {
        newValue[parentId] = [...newValue[parentId]];
      }
    };
    const toSort = /* @__PURE__ */ new Set();
    let changes;
    for (let i = 0, n = diff.length; i < n; i++) {
      changes = diff[i];
      for (const record of Object.values(changes.added)) {
        if (!isShape(record))
          continue;
        ensureNewArray(record.parentId);
        newValue[record.parentId].push(record.id);
        toSort.add(newValue[record.parentId]);
      }
      for (const [from, to] of Object.values(changes.updated)) {
        if (!isShape(to))
          continue;
        if (!isShape(from))
          continue;
        if (from.parentId !== to.parentId) {
          ensureNewArray(from.parentId);
          ensureNewArray(to.parentId);
          newValue[from.parentId].splice(newValue[from.parentId].indexOf(to.id), 1);
          newValue[to.parentId].push(to.id);
          toSort.add(newValue[to.parentId]);
        } else if (from.index !== to.index) {
          ensureNewArray(to.parentId);
          const idx = newValue[to.parentId].indexOf(to.id);
          newValue[to.parentId][idx] = to.id;
          toSort.add(newValue[to.parentId]);
        }
      }
      for (const record of Object.values(changes.removed)) {
        if (!isShape(record))
          continue;
        ensureNewArray(record.parentId);
        newValue[record.parentId].splice(newValue[record.parentId].indexOf(record.id), 1);
      }
    }
    for (const arr of toSort) {
      const shapesInArr = compact(arr.map((id) => store2.get(id)));
      shapesInArr.sort(sortByIndex);
      arr.splice(0, arr.length, ...shapesInArr.map((shape) => shape.id));
    }
    return newValue != null ? newValue : lastValue;
  });
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/shapeIdsInCurrentPage.mjs
var isShapeInPage = (store2, pageId, shape) => {
  while (!isPageId(shape.parentId)) {
    const parent = store2.get(shape.parentId);
    if (!parent)
      return false;
    shape = parent;
  }
  return shape.parentId === pageId;
};
var deriveShapeIdsInCurrentPage = (store2, getCurrentPageId) => {
  const shapesIndex = store2.query.ids("shape");
  let lastPageId = null;
  function fromScratch() {
    const currentPageId = getCurrentPageId();
    lastPageId = currentPageId;
    return new Set([...shapesIndex.get()].filter((id) => isShapeInPage(store2, currentPageId, store2.get(id))));
  }
  return computed("_shapeIdsInCurrentPage", (prevValue, lastComputedEpoch) => {
    if (isUninitialized(prevValue)) {
      return fromScratch();
    }
    const currentPageId = getCurrentPageId();
    if (currentPageId !== lastPageId) {
      return fromScratch();
    }
    const diff = store2.history.getDiffSince(lastComputedEpoch);
    if (diff === RESET_VALUE) {
      return fromScratch();
    }
    const builder = new IncrementalSetConstructor(prevValue);
    for (const changes of diff) {
      for (const record of Object.values(changes.added)) {
        if (isShape(record) && isShapeInPage(store2, currentPageId, record)) {
          builder.add(record.id);
        }
      }
      for (const [_from, to] of Object.values(changes.updated)) {
        if (isShape(to)) {
          if (isShapeInPage(store2, currentPageId, to)) {
            builder.add(to.id);
          } else {
            builder.remove(to.id);
          }
        }
      }
      for (const id of Object.keys(changes.removed)) {
        if (isShapeId(id)) {
          builder.remove(id);
        }
      }
    }
    const result = builder.get();
    if (!result) {
      return prevValue;
    }
    return withDiff(result.value, result.diff);
  });
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/getSvgJsx.mjs
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var import_react31 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/types/SvgExportContext.mjs
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var import_react30 = __toESM(require_react(), 1);
var Context = (0, import_react30.createContext)(null);
function SvgExportContextProvider({
  context,
  editor,
  children
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Context.Provider, { value: context, children }) });
}
function useSvgExportContext() {
  const ctx = (0, import_react30.useContext)(Context);
  if (!ctx)
    return null;
  return { isDarkMode: ctx.isDarkMode };
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/getSvgJsx.mjs
async function getSvgJsx(editor, shapes, opts = {}) {
  var _a2, _b2, _c;
  const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
  if (ids.length === 0)
    return;
  if (!window.document)
    throw Error("No document");
  const { scale = 1, background = false, padding = SVG_PADDING, preserveAspectRatio = false } = opts;
  const isDarkMode = (_a2 = opts.darkMode) != null ? _a2 : editor.user.getIsDarkMode();
  const theme = getDefaultColorTheme({ isDarkMode });
  const shapeIdsToInclude = editor.getShapeAndDescendantIds(ids);
  const renderingShapes = editor.getUnorderedRenderingShapes(false).filter(({ id }) => shapeIdsToInclude.has(id));
  let bbox = null;
  if (opts.bounds) {
    bbox = opts.bounds;
  } else {
    for (const { id } of renderingShapes) {
      const maskedPageBounds = editor.getShapeMaskedPageBounds(id);
      if (!maskedPageBounds)
        continue;
      if (bbox) {
        bbox.union(maskedPageBounds);
      } else {
        bbox = maskedPageBounds.clone();
      }
    }
  }
  if (!bbox)
    return;
  const singleFrameShapeId = ids.length === 1 && editor.isShapeOfType(editor.getShape(ids[0]), "frame") ? ids[0] : null;
  if (!singleFrameShapeId) {
    bbox.expandBy(padding);
  }
  const w = bbox.width * scale;
  const h = bbox.height * scale;
  try {
    (_c = (_b2 = document.body).focus) == null ? void 0 : _c.call(_b2);
  } catch (e) {
  }
  const defChildren = [];
  const exportDefPromisesById = /* @__PURE__ */ new Map();
  const exportContext = {
    isDarkMode,
    addExportDef: (def) => {
      if (exportDefPromisesById.has(def.key))
        return;
      const promise = (async () => {
        const element = await def.getElement();
        if (!element)
          return;
        defChildren.push(/* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_react31.Fragment, { children: element }, defChildren.length));
      })();
      exportDefPromisesById.set(def.key, promise);
    }
  };
  const unorderedShapeElements = (await Promise.all(renderingShapes.map(async ({ id, opacity, index: index2, backgroundIndex }) => {
    var _a3, _b3;
    if (id === singleFrameShapeId)
      return [];
    const shape = editor.getShape(id);
    if (editor.isShapeOfType(shape, "group"))
      return [];
    const util = editor.getShapeUtil(shape);
    let toSvgResult = await ((_a3 = util.toSvg) == null ? void 0 : _a3.call(util, shape, exportContext));
    let toBackgroundSvgResult = await ((_b3 = util.toBackgroundSvg) == null ? void 0 : _b3.call(util, shape, exportContext));
    if (!toSvgResult && !toBackgroundSvgResult) {
      const bounds = editor.getShapePageBounds(shape);
      toSvgResult = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("rect", {
        width: bounds.w,
        height: bounds.h,
        fill: theme.solid,
        stroke: theme.grey.pattern,
        strokeWidth: 1
      });
    }
    let pageTransform = editor.getShapePageTransform(shape).toCssString();
    if ("scale" in shape.props) {
      if (shape.props.scale !== 1) {
        pageTransform = `${pageTransform} scale(${shape.props.scale}, ${shape.props.scale})`;
      }
    }
    if (toSvgResult) {
      toSvgResult = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("g", { transform: pageTransform, opacity, children: toSvgResult }, shape.id);
    }
    if (toBackgroundSvgResult) {
      toBackgroundSvgResult = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("g", { transform: pageTransform, opacity, children: toBackgroundSvgResult }, `bg_${shape.id}`);
    }
    const pageMask = editor.getShapeMask(shape.id);
    if (pageMask) {
      const pageMaskId = `mask_${shape.id.replace(":", "_")}`;
      defChildren.push(/* @__PURE__ */ (0, import_jsx_runtime28.jsx)("clipPath", { id: pageMaskId, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: `M${pageMask.map(({ x, y }) => `${x},${y}`).join("L")}Z` }) }, defChildren.length));
      if (toSvgResult) {
        toSvgResult = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("g", { clipPath: `url(#${pageMaskId})`, children: toSvgResult }, shape.id);
      }
      if (toBackgroundSvgResult) {
        toBackgroundSvgResult = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("g", { clipPath: `url(#${pageMaskId})`, children: toBackgroundSvgResult }, `bg_${shape.id}`);
      }
    }
    const elements = [];
    if (toSvgResult) {
      elements.push({ zIndex: index2, element: toSvgResult });
    }
    if (toBackgroundSvgResult) {
      elements.push({ zIndex: backgroundIndex, element: toBackgroundSvgResult });
    }
    return elements;
  }))).flat();
  await Promise.all(exportDefPromisesById.values());
  const svg = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(SvgExportContextProvider, { editor, context: exportContext, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", {
    preserveAspectRatio: preserveAspectRatio ? preserveAspectRatio : void 0,
    direction: "ltr",
    width: w,
    height: h,
    viewBox: `${bbox.minX} ${bbox.minY} ${bbox.width} ${bbox.height}`,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    style: {
      backgroundColor: background ? singleFrameShapeId ? theme.solid : theme.background : "transparent"
    },
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("defs", { children: defChildren }),
      unorderedShapeElements.sort((a, b) => a.zIndex - b.zIndex).map(({ element }) => element)
    ]
  }) });
  return { jsx: svg, width: w, height: h };
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/ClickManager.mjs
var MAX_CLICK_DISTANCE = 40;
var ClickManager = class {
  constructor(editor) {
    __publicField(this, "_clickId", "");
    __publicField(this, "_clickTimeout");
    __publicField(this, "_clickScreenPoint");
    __publicField(this, "_previousScreenPoint");
    __publicField(this, "_getClickTimeout", (state, id = uniqueId()) => {
      this._clickId = id;
      clearTimeout(this._clickTimeout);
      this._clickTimeout = setTimeout(() => {
        if (this._clickState === state && this._clickId === id) {
          switch (this._clickState) {
            case "pendingTriple": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "double_click",
                phase: "settle"
              });
              break;
            }
            case "pendingQuadruple": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "triple_click",
                phase: "settle"
              });
              break;
            }
            case "pendingOverflow": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "quadruple_click",
                phase: "settle"
              });
              break;
            }
            default: {
            }
          }
          this._clickState = "idle";
        }
      }, state === "idle" || state === "pendingDouble" ? DOUBLE_CLICK_DURATION : MULTI_CLICK_DURATION);
    });
    __publicField(this, "_clickState", "idle");
    __publicField(this, "lastPointerInfo", {});
    __publicField(this, "transformPointerDownEvent", (info) => {
      if (!this._clickState)
        return info;
      this._clickScreenPoint = Vec.From(info.point);
      if (this._previousScreenPoint && this._previousScreenPoint.dist(this._clickScreenPoint) > MAX_CLICK_DISTANCE) {
        this._clickState = "idle";
      }
      this._previousScreenPoint = this._clickScreenPoint;
      this.lastPointerInfo = info;
      switch (this._clickState) {
        case "idle": {
          this._clickState = "pendingDouble";
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return info;
        }
        case "pendingDouble": {
          this._clickState = "pendingTriple";
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return {
            ...info,
            type: "click",
            name: "double_click",
            phase: "down"
          };
        }
        case "pendingTriple": {
          this._clickState = "pendingQuadruple";
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return {
            ...info,
            type: "click",
            name: "triple_click",
            phase: "down"
          };
        }
        case "pendingQuadruple": {
          this._clickState = "pendingOverflow";
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return {
            ...info,
            type: "click",
            name: "quadruple_click",
            phase: "down"
          };
        }
        case "pendingOverflow": {
          this._clickState = "overflow";
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return info;
        }
        default: {
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return info;
        }
      }
    });
    __publicField(this, "transformPointerUpEvent", (info) => {
      if (!this._clickState)
        return info;
      this._clickScreenPoint = Vec.From(info.point);
      switch (this._clickState) {
        case "pendingTriple": {
          return {
            ...this.lastPointerInfo,
            type: "click",
            name: "double_click",
            phase: "up"
          };
        }
        case "pendingQuadruple": {
          return {
            ...this.lastPointerInfo,
            type: "click",
            name: "triple_click",
            phase: "up"
          };
        }
        case "pendingOverflow": {
          return {
            ...this.lastPointerInfo,
            type: "click",
            name: "quadruple_click",
            phase: "up"
          };
        }
        default: {
          return info;
        }
      }
    });
    __publicField(this, "cancelDoubleClickTimeout", () => {
      this._clickTimeout = clearTimeout(this._clickTimeout);
      this._clickState = "idle";
    });
    __publicField(this, "handleMove", () => {
      if (this._clickState !== "idle" && this._clickScreenPoint && Vec.Dist2(this._clickScreenPoint, this.editor.inputs.currentScreenPoint) > (this.editor.getInstanceState().isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE)) {
        this.cancelDoubleClickTimeout();
      }
    });
    this.editor = editor;
  }
  get clickState() {
    return this._clickState;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/EnvironmentManager.mjs
var EnvironmentManager = class {
  constructor(editor) {
    __publicField(this, "isSafari");
    __publicField(this, "isIos");
    __publicField(this, "isChromeForIos");
    __publicField(this, "isFirefox");
    __publicField(this, "isAndroid");
    this.editor = editor;
    if (typeof window !== "undefined" && "navigator" in window) {
      this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      this.isIos = !!navigator.userAgent.match(/iPad/i) || !!navigator.userAgent.match(/iPhone/i);
      this.isChromeForIos = /crios.*safari/i.test(navigator.userAgent);
      this.isFirefox = /firefox/i.test(navigator.userAgent);
      this.isAndroid = /android/i.test(navigator.userAgent);
    } else {
      this.isSafari = false;
      this.isIos = false;
      this.isChromeForIos = false;
      this.isFirefox = false;
      this.isAndroid = false;
    }
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/Stack.mjs
function stack(items) {
  if (items) {
    let result = EMPTY_STACK_ITEM;
    while (items.length) {
      result = result.push(items.pop());
    }
    return result;
  }
  return EMPTY_STACK_ITEM;
}
var EmptyStackItem = class {
  constructor() {
    __publicField(this, "length", 0);
    __publicField(this, "head", null);
    __publicField(this, "tail", this);
  }
  push(head) {
    return new StackItem(head, this);
  }
  toArray() {
    return EMPTY_ARRAY;
  }
  [Symbol.iterator]() {
    return {
      next() {
        return { value: void 0, done: true };
      }
    };
  }
};
var EMPTY_STACK_ITEM = new EmptyStackItem();
var StackItem = class {
  constructor(head, tail) {
    __publicField(this, "length");
    this.head = head;
    this.tail = tail;
    this.length = tail.length + 1;
  }
  push(head) {
    return new StackItem(head, this);
  }
  toArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let stack2 = this;
    return {
      next() {
        if (stack2.length) {
          const value = stack2.head;
          stack2 = stack2.tail;
          return { value, done: false };
        } else {
          return { value: void 0, done: true };
        }
      }
    };
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/HistoryManager.mjs
var HistoryManager = class {
  constructor(ctx, annotateError2) {
    __publicField(this, "_undos", atom("HistoryManager.undos", stack()));
    __publicField(this, "_redos", atom("HistoryManager.redos", stack()));
    __publicField(this, "_batchDepth", 0);
    __publicField(this, "onBatchComplete", () => void 0);
    __publicField(this, "_commands", {});
    __publicField(this, "createCommand", (name, constructor, handle) => {
      if (this._commands[name]) {
        throw new Error(`Duplicate command: ${name}`);
      }
      this._commands[name] = handle;
      const exec = (...args) => {
        if (!this._batchDepth) {
          this.batch(() => exec(...args));
          return this.ctx;
        }
        const result = constructor(...args);
        if (!result) {
          return this.ctx;
        }
        const { data, ephemeral, squashing, preservesRedoStack } = result;
        this.ignoringUpdates((undos, redos) => {
          handle.do(data);
          return { undos, redos };
        });
        if (!ephemeral) {
          const prev = this._undos.get().head;
          if (squashing && prev && prev.type === "command" && prev.name === name && prev.preservesRedoStack === preservesRedoStack) {
            this._undos.update((undos) => undos.tail.push({
              ...prev,
              data: devFreeze(handle.squash(prev.data, data))
            }));
          } else {
            this._undos.update((undos) => undos.push({
              type: "command",
              name,
              data: devFreeze(data),
              preservesRedoStack
            }));
          }
          if (!result.preservesRedoStack) {
            this._redos.set(stack());
          }
          this.ctx.emit("change-history", { reason: "push" });
        }
        return this.ctx;
      };
      return exec;
    });
    __publicField(this, "batch", (fn) => {
      try {
        this._batchDepth++;
        if (this._batchDepth === 1) {
          transact(() => {
            const mostRecentAction = this._undos.get().head;
            fn();
            if (mostRecentAction !== this._undos.get().head) {
              this.onBatchComplete();
            }
          });
        } else {
          fn();
        }
      } catch (error) {
        this.annotateError(error);
        throw error;
      } finally {
        this._batchDepth--;
      }
      return this;
    });
    __publicField(this, "ignoringUpdates", (fn) => {
      let undos = this._undos.get();
      let redos = this._redos.get();
      this._undos.set(stack());
      this._redos.set(stack());
      try {
        ;
        ({ undos, redos } = transact(() => fn(undos, redos)));
      } finally {
        this._undos.set(undos);
        this._redos.set(redos);
      }
    });
    __publicField(this, "_undo", ({
      pushToRedoStack,
      toMark = void 0
    }) => {
      this.ignoringUpdates((undos, redos) => {
        var _a2;
        if (undos.length === 0) {
          return { undos, redos };
        }
        while (((_a2 = undos.head) == null ? void 0 : _a2.type) === "STOP") {
          const mark = undos.head;
          undos = undos.tail;
          if (pushToRedoStack) {
            redos = redos.push(mark);
          }
          if (mark.id === toMark) {
            this.ctx.emit("change-history", pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark });
            return { undos, redos };
          }
        }
        if (undos.length === 0) {
          this.ctx.emit("change-history", pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark });
          return { undos, redos };
        }
        while (undos.head) {
          const command = undos.head;
          undos = undos.tail;
          if (pushToRedoStack) {
            redos = redos.push(command);
          }
          if (command.type === "STOP") {
            if (command.onUndo && (!toMark || command.id === toMark)) {
              this.ctx.emit("change-history", pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark });
              return { undos, redos };
            }
          } else {
            const handler = this._commands[command.name];
            handler.undo(command.data);
          }
        }
        this.ctx.emit("change-history", pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark });
        return { undos, redos };
      });
      return this;
    });
    __publicField(this, "undo", () => {
      this._undo({ pushToRedoStack: true });
      return this;
    });
    __publicField(this, "redo", () => {
      this.ignoringUpdates((undos, redos) => {
        var _a2;
        if (redos.length === 0) {
          return { undos, redos };
        }
        while (((_a2 = redos.head) == null ? void 0 : _a2.type) === "STOP") {
          undos = undos.push(redos.head);
          redos = redos.tail;
        }
        if (redos.length === 0) {
          this.ctx.emit("change-history", { reason: "redo" });
          return { undos, redos };
        }
        while (redos.head) {
          const command = redos.head;
          undos = undos.push(redos.head);
          redos = redos.tail;
          if (command.type === "STOP") {
            if (command.onRedo) {
              break;
            }
          } else {
            const handler = this._commands[command.name];
            if (handler.redo) {
              handler.redo(command.data);
            } else {
              handler.do(command.data);
            }
          }
        }
        this.ctx.emit("change-history", { reason: "redo" });
        return { undos, redos };
      });
      return this;
    });
    __publicField(this, "bail", () => {
      this._undo({ pushToRedoStack: false });
      return this;
    });
    __publicField(this, "bailToMark", (id) => {
      this._undo({ pushToRedoStack: false, toMark: id });
      return this;
    });
    __publicField(this, "mark", (id = uniqueId(), onUndo = true, onRedo = true) => {
      const mostRecent = this._undos.get().head;
      if (mostRecent && mostRecent.type === "STOP") {
        if (mostRecent.id === id && mostRecent.onUndo === onUndo && mostRecent.onRedo === onRedo) {
          return mostRecent.id;
        }
      }
      this._undos.update((undos) => undos.push({ type: "STOP", id, onUndo, onRedo }));
      this.ctx.emit("mark-history", { id });
      return id;
    });
    this.ctx = ctx;
    this.annotateError = annotateError2;
  }
  getNumUndos() {
    return this._undos.get().length;
  }
  getNumRedos() {
    return this._redos.get().length;
  }
  clear() {
    this._undos.set(stack());
    this._redos.set(stack());
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/ScribbleManager.mjs
var ScribbleManager = class {
  constructor(editor) {
    __publicField(this, "scribbleItems", /* @__PURE__ */ new Map());
    __publicField(this, "state", "paused");
    __publicField(this, "addScribble", (scribble, id = uniqueId()) => {
      var _a2;
      const item = {
        id,
        scribble: {
          id,
          size: 20,
          color: "accent",
          opacity: 0.8,
          delay: 0,
          points: [],
          shrink: 0.1,
          taper: true,
          ...scribble,
          state: "starting"
        },
        timeoutMs: 0,
        delayRemaining: (_a2 = scribble.delay) != null ? _a2 : 0,
        prev: null,
        next: null
      };
      this.scribbleItems.set(id, item);
      return item;
    });
    __publicField(this, "stop", (id) => {
      const item = this.scribbleItems.get(id);
      if (!item)
        throw Error(`Scribble with id ${id} not found`);
      item.delayRemaining = Math.min(item.delayRemaining, 200);
      item.scribble.state = "stopping";
      return item;
    });
    __publicField(this, "addPoint", (id, x, y) => {
      const item = this.scribbleItems.get(id);
      if (!item)
        throw Error(`Scribble with id ${id} not found`);
      const { prev } = item;
      const point = { x, y, z: 0.5 };
      if (!prev || Vec.Dist(prev, point) >= 1) {
        item.next = point;
      }
      return item;
    });
    __publicField(this, "tick", (elapsed) => {
      if (this.scribbleItems.size === 0)
        return;
      this.editor.batch(() => {
        this.scribbleItems.forEach((item) => {
          if (item.scribble.state === "starting") {
            const { next: next2, prev: prev2 } = item;
            if (next2 && next2 !== prev2) {
              item.prev = next2;
              item.scribble.points.push(next2);
            }
            if (item.scribble.points.length > 8) {
              item.scribble.state = "active";
            }
            return;
          }
          if (item.delayRemaining > 0) {
            item.delayRemaining = Math.max(0, item.delayRemaining - elapsed);
          }
          item.timeoutMs += elapsed;
          if (item.timeoutMs >= 16) {
            item.timeoutMs = 0;
          }
          const { delayRemaining, timeoutMs, prev, next, scribble } = item;
          switch (scribble.state) {
            case "active": {
              if (next && next !== prev) {
                item.prev = next;
                scribble.points.push(next);
                if (delayRemaining === 0) {
                  if (scribble.points.length > 8) {
                    scribble.points.shift();
                  }
                }
              } else {
                if (timeoutMs === 0) {
                  if (scribble.points.length > 1) {
                    scribble.points.shift();
                  } else {
                    item.delayRemaining = scribble.delay;
                  }
                }
              }
              break;
            }
            case "stopping": {
              if (item.delayRemaining === 0) {
                if (timeoutMs === 0) {
                  if (scribble.points.length === 1) {
                    this.scribbleItems.delete(item.id);
                    return;
                  }
                  if (scribble.shrink) {
                    scribble.size = Math.max(1, scribble.size * (1 - scribble.shrink));
                  }
                  scribble.points.shift();
                }
              }
              break;
            }
            case "paused": {
              break;
            }
          }
        });
        this.editor.updateInstanceState({
          scribbles: Array.from(this.scribbleItems.values()).map(({ scribble }) => ({
            ...scribble,
            points: [...scribble.points]
          })).slice(-5)
        });
      });
    });
    this.editor = editor;
  }
  reset() {
    this.editor.updateInstanceState({ scribbles: [] });
    this.scribbleItems.clear();
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SideEffectManager.mjs
var SideEffectManager = class {
  constructor(editor) {
    __publicField(this, "_beforeCreateHandlers", {});
    __publicField(this, "_afterCreateHandlers", {});
    __publicField(this, "_beforeChangeHandlers", {});
    __publicField(this, "_afterChangeHandlers", {});
    __publicField(this, "_beforeDeleteHandlers", {});
    __publicField(this, "_afterDeleteHandlers", {});
    __publicField(this, "_batchCompleteHandlers", []);
    this.editor = editor;
    editor.store.onBeforeCreate = (record, source) => {
      const handlers = this._beforeCreateHandlers[record.typeName];
      if (handlers) {
        let r = record;
        for (const handler of handlers) {
          r = handler(r, source);
        }
        return r;
      }
      return record;
    };
    editor.store.onAfterCreate = (record, source) => {
      const handlers = this._afterCreateHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    };
    editor.store.onBeforeChange = (prev, next, source) => {
      const handlers = this._beforeChangeHandlers[next.typeName];
      if (handlers) {
        let r = next;
        for (const handler of handlers) {
          r = handler(prev, r, source);
        }
        return r;
      }
      return next;
    };
    let updateDepth = 0;
    editor.store.onAfterChange = (prev, next, source) => {
      updateDepth++;
      if (updateDepth > 1e3) {
        console.error("[CleanupManager.onAfterChange] Maximum update depth exceeded, bailing out.");
      } else {
        const handlers = this._afterChangeHandlers[next.typeName];
        if (handlers) {
          for (const handler of handlers) {
            handler(prev, next, source);
          }
        }
      }
      updateDepth--;
    };
    editor.store.onBeforeDelete = (record, source) => {
      const handlers = this._beforeDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          if (handler(record, source) === false) {
            return false;
          }
        }
      }
    };
    editor.store.onAfterDelete = (record, source) => {
      const handlers = this._afterDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    };
    editor.history.onBatchComplete = () => {
      this._batchCompleteHandlers.forEach((fn) => fn());
    };
  }
  registerBeforeCreateHandler(typeName, handler) {
    const handlers = this._beforeCreateHandlers[typeName];
    if (!handlers)
      this._beforeCreateHandlers[typeName] = [];
    this._beforeCreateHandlers[typeName].push(handler);
    return () => remove(this._beforeCreateHandlers[typeName], handler);
  }
  registerAfterCreateHandler(typeName, handler) {
    const handlers = this._afterCreateHandlers[typeName];
    if (!handlers)
      this._afterCreateHandlers[typeName] = [];
    this._afterCreateHandlers[typeName].push(handler);
    return () => remove(this._afterCreateHandlers[typeName], handler);
  }
  registerBeforeChangeHandler(typeName, handler) {
    const handlers = this._beforeChangeHandlers[typeName];
    if (!handlers)
      this._beforeChangeHandlers[typeName] = [];
    this._beforeChangeHandlers[typeName].push(handler);
    return () => remove(this._beforeChangeHandlers[typeName], handler);
  }
  registerAfterChangeHandler(typeName, handler) {
    const handlers = this._afterChangeHandlers[typeName];
    if (!handlers)
      this._afterChangeHandlers[typeName] = [];
    this._afterChangeHandlers[typeName].push(handler);
    return () => remove(this._afterChangeHandlers[typeName], handler);
  }
  registerBeforeDeleteHandler(typeName, handler) {
    const handlers = this._beforeDeleteHandlers[typeName];
    if (!handlers)
      this._beforeDeleteHandlers[typeName] = [];
    this._beforeDeleteHandlers[typeName].push(handler);
    return () => remove(this._beforeDeleteHandlers[typeName], handler);
  }
  registerAfterDeleteHandler(typeName, handler) {
    const handlers = this._afterDeleteHandlers[typeName];
    if (!handlers)
      this._afterDeleteHandlers[typeName] = [];
    this._afterDeleteHandlers[typeName].push(handler);
    return () => remove(this._afterDeleteHandlers[typeName], handler);
  }
  registerBatchCompleteHandler(handler) {
    this._batchCompleteHandlers.push(handler);
    return () => remove(this._batchCompleteHandlers, handler);
  }
};
function remove(array2, item) {
  const index2 = array2.indexOf(item);
  if (index2 >= 0) {
    array2.splice(index2, 1);
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/BoundsSnaps.mjs
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc2(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp2(target, key, result);
  return result;
};
var round = (x) => {
  const decimalPlacesTolerance = 8;
  return Math.round(x * 10 ** decimalPlacesTolerance) / 10 ** decimalPlacesTolerance;
};
function findAdjacentGaps(gaps, shapeId, gapLength, direction, intersection) {
  const matches2 = gaps.filter((gap) => (direction === "forward" ? gap.startNode.id === shapeId : gap.endNode.id === shapeId) && round(gap.length) === round(gapLength) && rangeIntersection(gap.breadthIntersection[0], gap.breadthIntersection[1], intersection[0], intersection[1]));
  if (matches2.length === 0)
    return [];
  const nextNodes = /* @__PURE__ */ new Set();
  matches2.forEach((match) => {
    const node = direction === "forward" ? match.endNode.id : match.startNode.id;
    if (!nextNodes.has(node)) {
      nextNodes.add(node);
      const foundGaps = findAdjacentGaps(gaps, node, gapLength, direction, rangeIntersection(match.breadthIntersection[0], match.breadthIntersection[1], intersection[0], intersection[1]));
      matches2.push(...foundGaps);
    }
  });
  return matches2;
}
function dedupeGapSnaps(snaps) {
  snaps.sort((a, b) => b.gaps.length - a.gaps.length);
  for (let i = snaps.length - 1; i > 0; i--) {
    const snap = snaps[i];
    for (let j = i - 1; j >= 0; j--) {
      const otherSnap = snaps[j];
      if (otherSnap.direction === snap.direction && snap.gaps.every((gap) => otherSnap.gaps.some((otherGap) => round(gap.startEdge[0].x) === round(otherGap.startEdge[0].x) && round(gap.startEdge[0].y) === round(otherGap.startEdge[0].y) && round(gap.startEdge[1].x) === round(otherGap.startEdge[1].x) && round(gap.startEdge[1].y) === round(otherGap.startEdge[1].y)) && otherSnap.gaps.some((otherGap) => round(gap.endEdge[0].x) === round(otherGap.endEdge[0].x) && round(gap.endEdge[0].y) === round(otherGap.endEdge[0].y) && round(gap.endEdge[1].x) === round(otherGap.endEdge[1].x) && round(gap.endEdge[1].y) === round(otherGap.endEdge[1].y)))) {
        snaps.splice(i, 1);
        break;
      }
    }
  }
}
var BoundsSnaps = class {
  constructor(manager) {
    __publicField(this, "editor");
    this.manager = manager;
    this.editor = manager.editor;
  }
  getSnapPointsCache() {
    const { editor } = this;
    return editor.store.createComputedCache("snapPoints", (shape) => {
      var _a2;
      const pageTransform = editor.getShapePageTransform(shape.id);
      if (!pageTransform)
        return void 0;
      const boundsSnapGeometry = editor.getShapeUtil(shape).getBoundsSnapGeometry(shape);
      const snapPoints = (_a2 = boundsSnapGeometry.points) != null ? _a2 : editor.getShapeGeometry(shape).bounds.cornersAndCenter;
      if (!pageTransform || !snapPoints)
        return void 0;
      return snapPoints.map((point, i) => {
        const { x, y } = Mat.applyToPoint(pageTransform, point);
        return { x, y, id: `${shape.id}:${i}` };
      });
    });
  }
  getSnapPoints(shapeId) {
    var _a2;
    return (_a2 = this.getSnapPointsCache().get(shapeId)) != null ? _a2 : [];
  }
  getSnappablePoints() {
    const snapPointsCache = this.getSnapPointsCache();
    const snappableShapes = this.manager.getSnappableShapes();
    const result = [];
    for (const shapeId of snappableShapes) {
      const snapPoints = snapPointsCache.get(shapeId);
      if (snapPoints) {
        result.push(...snapPoints);
      }
    }
    return result;
  }
  getSnappableGapNodes() {
    return Array.from(this.manager.getSnappableShapes(), (shapeId) => ({
      id: shapeId,
      pageBounds: assertExists(this.editor.getShapePageBounds(shapeId))
    }));
  }
  getVisibleGaps() {
    const horizontal = [];
    const vertical = [];
    let startNode, endNode;
    const sortedShapesOnCurrentPageHorizontal = this.getSnappableGapNodes().sort((a, b) => {
      return a.pageBounds.minX - b.pageBounds.minX;
    });
    for (let i = 0; i < sortedShapesOnCurrentPageHorizontal.length; i++) {
      startNode = sortedShapesOnCurrentPageHorizontal[i];
      for (let j = i + 1; j < sortedShapesOnCurrentPageHorizontal.length; j++) {
        endNode = sortedShapesOnCurrentPageHorizontal[j];
        if (startNode.pageBounds.maxX < endNode.pageBounds.minX && rangesOverlap(startNode.pageBounds.minY, startNode.pageBounds.maxY, endNode.pageBounds.minY, endNode.pageBounds.maxY)) {
          horizontal.push({
            startNode,
            endNode,
            startEdge: [
              new Vec(startNode.pageBounds.maxX, startNode.pageBounds.minY),
              new Vec(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
            ],
            endEdge: [
              new Vec(endNode.pageBounds.minX, endNode.pageBounds.minY),
              new Vec(endNode.pageBounds.minX, endNode.pageBounds.maxY)
            ],
            length: endNode.pageBounds.minX - startNode.pageBounds.maxX,
            breadthIntersection: rangeIntersection(startNode.pageBounds.minY, startNode.pageBounds.maxY, endNode.pageBounds.minY, endNode.pageBounds.maxY)
          });
        }
      }
    }
    const sortedShapesOnCurrentPageVertical = sortedShapesOnCurrentPageHorizontal.sort((a, b) => {
      return a.pageBounds.minY - b.pageBounds.minY;
    });
    for (let i = 0; i < sortedShapesOnCurrentPageVertical.length; i++) {
      startNode = sortedShapesOnCurrentPageVertical[i];
      for (let j = i + 1; j < sortedShapesOnCurrentPageVertical.length; j++) {
        endNode = sortedShapesOnCurrentPageVertical[j];
        if (startNode.pageBounds.maxY < endNode.pageBounds.minY && rangesOverlap(startNode.pageBounds.minX, startNode.pageBounds.maxX, endNode.pageBounds.minX, endNode.pageBounds.maxX)) {
          vertical.push({
            startNode,
            endNode,
            startEdge: [
              new Vec(startNode.pageBounds.minX, startNode.pageBounds.maxY),
              new Vec(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
            ],
            endEdge: [
              new Vec(endNode.pageBounds.minX, endNode.pageBounds.minY),
              new Vec(endNode.pageBounds.maxX, endNode.pageBounds.minY)
            ],
            length: endNode.pageBounds.minY - startNode.pageBounds.maxY,
            breadthIntersection: rangeIntersection(startNode.pageBounds.minX, startNode.pageBounds.maxX, endNode.pageBounds.minX, endNode.pageBounds.maxX)
          });
        }
      }
    }
    return { horizontal, vertical };
  }
  snapTranslateShapes({
    lockedAxis,
    initialSelectionPageBounds,
    initialSelectionSnapPoints,
    dragDelta
  }) {
    var _a2, _b2, _c, _d;
    const snapThreshold = this.manager.getSnapThreshold();
    const visibleSnapPointsNotInSelection = this.getSnappablePoints();
    const selectionPageBounds = initialSelectionPageBounds.clone().translate(dragDelta);
    const selectionSnapPoints = initialSelectionSnapPoints.map(({ x, y }, i) => ({
      id: "selection:" + i,
      x: x + dragDelta.x,
      y: y + dragDelta.y
    }));
    const otherNodeSnapPoints = visibleSnapPointsNotInSelection;
    const nearestSnapsX = [];
    const nearestSnapsY = [];
    const minOffset = new Vec(snapThreshold, snapThreshold);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    this.collectGapSnaps({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY,
      minOffset
    });
    const nudge = new Vec(lockedAxis === "x" ? 0 : (_b2 = (_a2 = nearestSnapsX[0]) == null ? void 0 : _a2.nudge) != null ? _b2 : 0, lockedAxis === "y" ? 0 : (_d = (_c = nearestSnapsY[0]) == null ? void 0 : _c.nudge) != null ? _d : 0);
    minOffset.x = 0;
    minOffset.y = 0;
    nearestSnapsX.length = 0;
    nearestSnapsY.length = 0;
    selectionSnapPoints.forEach((s) => {
      s.x += nudge.x;
      s.y += nudge.y;
    });
    selectionPageBounds.translate(nudge);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    this.collectGapSnaps({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY,
      minOffset
    });
    const pointSnapsLines = this.getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    });
    const gapSnapLines = this.getGapSnapLines({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY
    });
    this.manager.setIndicators([...gapSnapLines, ...pointSnapsLines]);
    return { nudge };
  }
  snapResizeShapes({
    initialSelectionPageBounds,
    dragDelta,
    handle: originalHandle,
    isAspectRatioLocked,
    isResizingFromCenter
  }) {
    var _a2, _b2, _c, _d;
    const snapThreshold = this.manager.getSnapThreshold();
    const {
      box: unsnappedResizedPageBounds,
      scaleX,
      scaleY
    } = Box.Resize(initialSelectionPageBounds, originalHandle, isResizingFromCenter ? dragDelta.x * 2 : dragDelta.x, isResizingFromCenter ? dragDelta.y * 2 : dragDelta.y, isAspectRatioLocked);
    let handle = originalHandle;
    if (scaleX < 0) {
      handle = flipSelectionHandleX(handle);
    }
    if (scaleY < 0) {
      handle = flipSelectionHandleY(handle);
    }
    if (isResizingFromCenter) {
      unsnappedResizedPageBounds.center = initialSelectionPageBounds.center;
    }
    const isXLocked = handle === "top" || handle === "bottom";
    const isYLocked = handle === "left" || handle === "right";
    const selectionSnapPoints = getResizeSnapPointsForHandle(handle, unsnappedResizedPageBounds);
    const otherNodeSnapPoints = this.getSnappablePoints();
    const nearestSnapsX = [];
    const nearestSnapsY = [];
    const minOffset = new Vec(snapThreshold, snapThreshold);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    const nudge = new Vec(isXLocked ? 0 : (_b2 = (_a2 = nearestSnapsX[0]) == null ? void 0 : _a2.nudge) != null ? _b2 : 0, isYLocked ? 0 : (_d = (_c = nearestSnapsY[0]) == null ? void 0 : _c.nudge) != null ? _d : 0);
    if (isAspectRatioLocked && isSelectionCorner(handle) && nudge.len() !== 0) {
      const primaryNudgeAxis = nearestSnapsX.length && nearestSnapsY.length ? Math.abs(nudge.x) < Math.abs(nudge.y) ? "x" : "y" : nearestSnapsX.length ? "x" : "y";
      const ratio = initialSelectionPageBounds.aspectRatio;
      if (primaryNudgeAxis === "x") {
        nearestSnapsY.length = 0;
        nudge.y = nudge.x / ratio;
        if (handle === "bottom_left" || handle === "top_right") {
          nudge.y = -nudge.y;
        }
      } else {
        nearestSnapsX.length = 0;
        nudge.x = nudge.y * ratio;
        if (handle === "bottom_left" || handle === "top_right") {
          nudge.x = -nudge.x;
        }
      }
    }
    const snappedDelta = Vec.Add(dragDelta, nudge);
    const { box: snappedResizedPageBounds } = Box.Resize(initialSelectionPageBounds, originalHandle, isResizingFromCenter ? snappedDelta.x * 2 : snappedDelta.x, isResizingFromCenter ? snappedDelta.y * 2 : snappedDelta.y, isAspectRatioLocked);
    if (isResizingFromCenter) {
      snappedResizedPageBounds.center = initialSelectionPageBounds.center;
    }
    const snappedSelectionPoints = getResizeSnapPointsForHandle("any", snappedResizedPageBounds);
    nearestSnapsX.length = 0;
    nearestSnapsY.length = 0;
    minOffset.x = 0;
    minOffset.y = 0;
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints: snappedSelectionPoints
    });
    const pointSnaps = this.getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    });
    this.manager.setIndicators([...pointSnaps]);
    return { nudge };
  }
  collectPointSnaps({
    selectionSnapPoints,
    otherNodeSnapPoints,
    minOffset,
    nearestSnapsX,
    nearestSnapsY
  }) {
    for (const thisSnapPoint of selectionSnapPoints) {
      for (const otherSnapPoint of otherNodeSnapPoints) {
        const offset4 = Vec.Sub(thisSnapPoint, otherSnapPoint);
        const offsetX = Math.abs(offset4.x);
        const offsetY = Math.abs(offset4.y);
        if (round(offsetX) <= round(minOffset.x)) {
          if (round(offsetX) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          nearestSnapsX.push({
            type: "points",
            points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
            nudge: otherSnapPoint.x - thisSnapPoint.x
          });
          minOffset.x = offsetX;
        }
        if (round(offsetY) <= round(minOffset.y)) {
          if (round(offsetY) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          nearestSnapsY.push({
            type: "points",
            points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
            nudge: otherSnapPoint.y - thisSnapPoint.y
          });
          minOffset.y = offsetY;
        }
      }
    }
  }
  collectGapSnaps({
    selectionPageBounds,
    minOffset,
    nearestSnapsX,
    nearestSnapsY
  }) {
    const { horizontal, vertical } = this.getVisibleGaps();
    for (const gap of horizontal) {
      if (!rangesOverlap(gap.breadthIntersection[0], gap.breadthIntersection[1], selectionPageBounds.minY, selectionPageBounds.maxY)) {
        continue;
      }
      const gapMidX = gap.startEdge[0].x + gap.length / 2;
      const centerNudge = gapMidX - selectionPageBounds.center.x;
      const gapIsLargerThanSelection = gap.length > selectionPageBounds.width;
      if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(centerNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(centerNudge);
        const snap = {
          type: "gap_center",
          gap,
          nudge: centerNudge
        };
        const otherCenterSnap = nearestSnapsX.find(({ type }) => type === "gap_center");
        const gapBreadthsOverlap = otherCenterSnap && rangeIntersection(gap.breadthIntersection[0], gap.breadthIntersection[1], otherCenterSnap.gap.breadthIntersection[0], otherCenterSnap.gap.breadthIntersection[1]);
        if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
          nearestSnapsX[nearestSnapsX.indexOf(otherCenterSnap)] = snap;
        } else if (!otherCenterSnap || !gapBreadthsOverlap) {
          nearestSnapsX.push(snap);
        }
      }
      const duplicationLeftX = gap.startNode.pageBounds.minX - gap.length;
      const selectionRightX = selectionPageBounds.maxX;
      const duplicationLeftNudge = duplicationLeftX - selectionRightX;
      if (round(Math.abs(duplicationLeftNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(duplicationLeftNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(duplicationLeftNudge);
        nearestSnapsX.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "left",
          nudge: duplicationLeftNudge
        });
      }
      const duplicationRightX = gap.endNode.pageBounds.maxX + gap.length;
      const selectionLeftX = selectionPageBounds.minX;
      const duplicationRightNudge = duplicationRightX - selectionLeftX;
      if (round(Math.abs(duplicationRightNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(duplicationRightNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(duplicationRightNudge);
        nearestSnapsX.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "right",
          nudge: duplicationRightNudge
        });
      }
    }
    for (const gap of vertical) {
      if (!rangesOverlap(gap.breadthIntersection[0], gap.breadthIntersection[1], selectionPageBounds.minX, selectionPageBounds.maxX)) {
        continue;
      }
      const gapMidY = gap.startEdge[0].y + gap.length / 2;
      const centerNudge = gapMidY - selectionPageBounds.center.y;
      const gapIsLargerThanSelection = gap.length > selectionPageBounds.height;
      if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(centerNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(centerNudge);
        const snap = {
          type: "gap_center",
          gap,
          nudge: centerNudge
        };
        const otherCenterSnap = nearestSnapsY.find(({ type }) => type === "gap_center");
        const gapBreadthsOverlap = otherCenterSnap && rangesOverlap(otherCenterSnap.gap.breadthIntersection[0], otherCenterSnap.gap.breadthIntersection[1], gap.breadthIntersection[0], gap.breadthIntersection[1]);
        if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
          nearestSnapsY[nearestSnapsY.indexOf(otherCenterSnap)] = snap;
        } else if (!otherCenterSnap || !gapBreadthsOverlap) {
          nearestSnapsY.push(snap);
        }
        continue;
      }
      const duplicationTopY = gap.startNode.pageBounds.minY - gap.length;
      const selectionBottomY = selectionPageBounds.maxY;
      const duplicationTopNudge = duplicationTopY - selectionBottomY;
      if (round(Math.abs(duplicationTopNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(duplicationTopNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(duplicationTopNudge);
        nearestSnapsY.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "top",
          nudge: duplicationTopNudge
        });
      }
      const duplicationBottomY = gap.endNode.pageBounds.maxY + gap.length;
      const selectionTopY = selectionPageBounds.minY;
      const duplicationBottomNudge = duplicationBottomY - selectionTopY;
      if (round(Math.abs(duplicationBottomNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(duplicationBottomNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(duplicationBottomNudge);
        nearestSnapsY.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "bottom",
          nudge: duplicationBottomNudge
        });
      }
    }
  }
  getPointSnapLines({
    nearestSnapsX,
    nearestSnapsY
  }) {
    const snapGroupsX = {};
    const snapGroupsY = {};
    if (nearestSnapsX.length > 0) {
      for (const snap of nearestSnapsX) {
        if (snap.type === "points") {
          const key = round(snap.points.otherPoint.x);
          if (!snapGroupsX[key]) {
            snapGroupsX[key] = [];
          }
          snapGroupsX[key].push(snap.points);
        }
      }
    }
    if (nearestSnapsY.length > 0) {
      for (const snap of nearestSnapsY) {
        if (snap.type === "points") {
          const key = round(snap.points.otherPoint.y);
          if (!snapGroupsY[key]) {
            snapGroupsY[key] = [];
          }
          snapGroupsY[key].push(snap.points);
        }
      }
    }
    return Object.values(snapGroupsX).concat(Object.values(snapGroupsY)).map((snapGroup) => ({
      id: uniqueId(),
      type: "points",
      points: dedupe(snapGroup.map((snap) => Vec.From(snap.otherPoint)).concat(snapGroup.map((snap) => Vec.From(snap.thisPoint))), (a, b) => a.equals(b))
    }));
  }
  getGapSnapLines({
    selectionPageBounds,
    nearestSnapsX,
    nearestSnapsY
  }) {
    const { vertical, horizontal } = this.getVisibleGaps();
    const selectionSides = {
      top: selectionPageBounds.sides[0],
      right: selectionPageBounds.sides[1],
      bottom: [selectionPageBounds.corners[3], selectionPageBounds.corners[2]],
      left: [selectionPageBounds.corners[0], selectionPageBounds.corners[3]]
    };
    const result = [];
    if (nearestSnapsX.length > 0) {
      for (const snap of nearestSnapsX) {
        if (snap.type === "points")
          continue;
        const {
          gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
        } = snap;
        switch (snap.type) {
          case "gap_center": {
            const newGapsLength = (length - selectionPageBounds.width) / 2;
            const gapBreadthIntersection = rangeIntersection(breadthIntersection[0], breadthIntersection[1], selectionPageBounds.minY, selectionPageBounds.maxY);
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: uniqueId(),
              gaps: [
                ...findAdjacentGaps(horizontal, startNode.id, newGapsLength, "backward", gapBreadthIntersection),
                {
                  startEdge,
                  endEdge: selectionSides.left
                },
                {
                  startEdge: selectionSides.right,
                  endEdge
                },
                ...findAdjacentGaps(horizontal, endNode.id, newGapsLength, "forward", gapBreadthIntersection)
              ]
            });
            break;
          }
          case "gap_duplicate": {
            const gapBreadthIntersection = rangeIntersection(breadthIntersection[0], breadthIntersection[1], selectionPageBounds.minY, selectionPageBounds.maxY);
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: uniqueId(),
              gaps: snap.protrusionDirection === "left" ? [
                {
                  startEdge: selectionSides.right,
                  endEdge: startEdge.map((v) => v.clone().addXY(-startNode.pageBounds.width, 0))
                },
                { startEdge, endEdge },
                ...findAdjacentGaps(horizontal, endNode.id, length, "forward", gapBreadthIntersection)
              ] : [
                ...findAdjacentGaps(horizontal, startNode.id, length, "backward", gapBreadthIntersection),
                { startEdge, endEdge },
                {
                  startEdge: endEdge.map((v) => v.clone().addXY(snap.gap.endNode.pageBounds.width, 0)),
                  endEdge: selectionSides.left
                }
              ]
            });
            break;
          }
        }
      }
    }
    if (nearestSnapsY.length > 0) {
      for (const snap of nearestSnapsY) {
        if (snap.type === "points")
          continue;
        const {
          gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
        } = snap;
        switch (snap.type) {
          case "gap_center": {
            const newGapsLength = (length - selectionPageBounds.height) / 2;
            const gapBreadthIntersection = rangeIntersection(breadthIntersection[0], breadthIntersection[1], selectionPageBounds.minX, selectionPageBounds.maxX);
            result.push({
              type: "gaps",
              direction: "vertical",
              id: uniqueId(),
              gaps: [
                ...findAdjacentGaps(vertical, startNode.id, newGapsLength, "backward", gapBreadthIntersection),
                {
                  startEdge,
                  endEdge: selectionSides.top
                },
                {
                  startEdge: selectionSides.bottom,
                  endEdge
                },
                ...findAdjacentGaps(vertical, snap.gap.endNode.id, newGapsLength, "forward", gapBreadthIntersection)
              ]
            });
            break;
          }
          case "gap_duplicate":
            {
              const gapBreadthIntersection = rangeIntersection(breadthIntersection[0], breadthIntersection[1], selectionPageBounds.minX, selectionPageBounds.maxX);
              result.push({
                type: "gaps",
                direction: "vertical",
                id: uniqueId(),
                gaps: snap.protrusionDirection === "top" ? [
                  {
                    startEdge: selectionSides.bottom,
                    endEdge: startEdge.map((v) => v.clone().addXY(0, -startNode.pageBounds.height))
                  },
                  { startEdge, endEdge },
                  ...findAdjacentGaps(vertical, endNode.id, length, "forward", gapBreadthIntersection)
                ] : [
                  ...findAdjacentGaps(vertical, startNode.id, length, "backward", gapBreadthIntersection),
                  { startEdge, endEdge },
                  {
                    startEdge: endEdge.map((v) => v.clone().addXY(0, endNode.pageBounds.height)),
                    endEdge: selectionSides.top
                  }
                ]
              });
            }
            break;
        }
      }
    }
    dedupeGapSnaps(result);
    return result;
  }
};
__decorateClass([
  computed
], BoundsSnaps.prototype, "getSnapPointsCache", 1);
__decorateClass([
  computed
], BoundsSnaps.prototype, "getSnappablePoints", 1);
__decorateClass([
  computed
], BoundsSnaps.prototype, "getSnappableGapNodes", 1);
__decorateClass([
  computed
], BoundsSnaps.prototype, "getVisibleGaps", 1);
function getResizeSnapPointsForHandle(handle, selectionPageBounds) {
  const { minX, maxX, minY, maxY } = selectionPageBounds;
  const result = [];
  switch (handle) {
    case "top":
    case "left":
    case "top_left":
    case "any":
      result.push({
        id: "top_left",
        handle: "top_left",
        x: minX,
        y: minY
      });
  }
  switch (handle) {
    case "top":
    case "right":
    case "top_right":
    case "any":
      result.push({
        id: "top_right",
        handle: "top_right",
        x: maxX,
        y: minY
      });
  }
  switch (handle) {
    case "bottom":
    case "right":
    case "bottom_right":
    case "any":
      result.push({
        id: "bottom_right",
        handle: "bottom_right",
        x: maxX,
        y: maxY
      });
  }
  switch (handle) {
    case "bottom":
    case "left":
    case "bottom_left":
    case "any":
      result.push({
        id: "bottom_left",
        handle: "bottom_left",
        x: minX,
        y: maxY
      });
  }
  return result;
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/HandleSnaps.mjs
var __defProp3 = Object.defineProperty;
var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
var __decorateClass2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc3(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp3(target, key, result);
  return result;
};
var defaultGetSelfSnapOutline = () => null;
var defaultGetSelfSnapPoints = () => [];
var HandleSnaps = class {
  constructor(manager) {
    __publicField(this, "editor");
    this.manager = manager;
    this.editor = manager.editor;
  }
  getSnapGeometryCache() {
    const { editor } = this;
    return editor.store.createComputedCache("handle snap geometry", (shape) => {
      var _a2, _b2, _c;
      const snapGeometry = editor.getShapeUtil(shape).getHandleSnapGeometry(shape);
      return {
        outline: snapGeometry.outline === void 0 ? editor.getShapeGeometry(shape) : snapGeometry.outline,
        points: (_a2 = snapGeometry.points) != null ? _a2 : [],
        getSelfSnapOutline: (_b2 = snapGeometry.getSelfSnapOutline) != null ? _b2 : defaultGetSelfSnapOutline,
        getSelfSnapPoints: (_c = snapGeometry.getSelfSnapPoints) != null ? _c : defaultGetSelfSnapPoints
      };
    });
  }
  *iterateSnapPointsInPageSpace(currentShapeId, currentHandle) {
    var _a2, _b2;
    const selfSnapPoints = (_a2 = this.getSnapGeometryCache().get(currentShapeId)) == null ? void 0 : _a2.getSelfSnapPoints(currentHandle);
    if (selfSnapPoints && selfSnapPoints.length) {
      const shapePageTransform = assertExists(this.editor.getShapePageTransform(currentShapeId));
      for (const point of selfSnapPoints) {
        yield shapePageTransform.applyToPoint(point);
      }
    }
    for (const shapeId of this.manager.getSnappableShapes()) {
      if (shapeId === currentShapeId)
        continue;
      const snapPoints = (_b2 = this.getSnapGeometryCache().get(shapeId)) == null ? void 0 : _b2.points;
      if (!snapPoints || !snapPoints.length)
        continue;
      const shapePageTransform = assertExists(this.editor.getShapePageTransform(shapeId));
      for (const point of snapPoints) {
        yield shapePageTransform.applyToPoint(point);
      }
    }
  }
  *iterateSnapOutlines(currentShapeId, currentHandle) {
    var _a2, _b2;
    const selfSnapOutline = (_a2 = this.getSnapGeometryCache().get(currentShapeId)) == null ? void 0 : _a2.getSelfSnapOutline(currentHandle);
    if (selfSnapOutline) {
      yield { shapeId: currentShapeId, outline: selfSnapOutline };
    }
    for (const shapeId of this.manager.getSnappableShapes()) {
      if (shapeId === currentShapeId)
        continue;
      const snapOutline = (_b2 = this.getSnapGeometryCache().get(shapeId)) == null ? void 0 : _b2.outline;
      if (!snapOutline)
        continue;
      yield { shapeId, outline: snapOutline };
    }
  }
  getHandleSnapPosition({
    currentShapeId,
    handle,
    handleInPageSpace
  }) {
    const snapThreshold = this.manager.getSnapThreshold();
    let minDistanceForSnapPoint = snapThreshold;
    let nearestSnapPoint = null;
    for (const snapPoint of this.iterateSnapPointsInPageSpace(currentShapeId, handle)) {
      if (Vec.DistMin(handleInPageSpace, snapPoint, minDistanceForSnapPoint)) {
        minDistanceForSnapPoint = Vec.Dist(handleInPageSpace, snapPoint);
        nearestSnapPoint = snapPoint;
      }
    }
    if (nearestSnapPoint)
      return nearestSnapPoint;
    let minDistanceForOutline = snapThreshold;
    let nearestPointOnOutline = null;
    for (const { shapeId, outline } of this.iterateSnapOutlines(currentShapeId, handle)) {
      const shapePageTransform = assertExists(this.editor.getShapePageTransform(shapeId));
      const pointInShapeSpace = this.editor.getPointInShapeSpace(shapeId, handleInPageSpace);
      const nearestShapePointInShapeSpace = outline.nearestPoint(pointInShapeSpace);
      const nearestInPageSpace = shapePageTransform.applyToPoint(nearestShapePointInShapeSpace);
      if (Vec.DistMin(handleInPageSpace, nearestInPageSpace, minDistanceForOutline)) {
        minDistanceForOutline = Vec.Dist(handleInPageSpace, nearestInPageSpace);
        nearestPointOnOutline = nearestInPageSpace;
      }
    }
    if (nearestPointOnOutline)
      return nearestPointOnOutline;
    return null;
  }
  snapHandle({
    currentShapeId,
    handle
  }) {
    const currentShapeTransform = assertExists(this.editor.getShapePageTransform(currentShapeId));
    const handleInPageSpace = currentShapeTransform.applyToPoint(handle);
    const snapPosition = this.getHandleSnapPosition({ currentShapeId, handle, handleInPageSpace });
    if (snapPosition) {
      this.manager.setIndicators([
        {
          id: uniqueId(),
          type: "points",
          points: [snapPosition]
        }
      ]);
      return { nudge: Vec.Sub(snapPosition, handleInPageSpace) };
    }
    return null;
  }
};
__decorateClass2([
  computed
], HandleSnaps.prototype, "getSnapGeometryCache", 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/SnapManager.mjs
var __defProp4 = Object.defineProperty;
var __getOwnPropDesc4 = Object.getOwnPropertyDescriptor;
var __decorateClass3 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc4(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp4(target, key, result);
  return result;
};
var SnapManager = class {
  constructor(editor) {
    __publicField(this, "shapeBounds");
    __publicField(this, "handles");
    __publicField(this, "_snapIndicators", atom("snapLines", void 0));
    this.editor = editor;
    this.shapeBounds = new BoundsSnaps(this);
    this.handles = new HandleSnaps(this);
  }
  getIndicators() {
    var _a2;
    return (_a2 = this._snapIndicators.get()) != null ? _a2 : EMPTY_ARRAY;
  }
  clearIndicators() {
    if (this.getIndicators().length) {
      this._snapIndicators.set(void 0);
    }
  }
  setIndicators(indicators) {
    this._snapIndicators.set(indicators);
  }
  getSnapThreshold() {
    return 8 / this.editor.getZoomLevel();
  }
  getSnappableShapes() {
    var _a2;
    const { editor } = this;
    const renderingBounds = editor.getRenderingBounds();
    const selectedShapeIds = editor.getSelectedShapeIds();
    const snappableShapes = /* @__PURE__ */ new Set();
    const collectSnappableShapesFromParent = (parentId) => {
      if (isShapeId(parentId)) {
        const parent = editor.getShape(parentId);
        if (parent && editor.isShapeOfType(parent, "frame")) {
          snappableShapes.add(parentId);
        }
      }
      const sortedChildIds = editor.getSortedChildIdsForParent(parentId);
      for (const childId of sortedChildIds) {
        if (selectedShapeIds.includes(childId))
          continue;
        const childShape = editor.getShape(childId);
        if (!childShape)
          continue;
        const util = editor.getShapeUtil(childShape);
        if (!util.canSnap(childShape))
          continue;
        const pageBounds = editor.getShapePageBounds(childId);
        if (!(pageBounds && renderingBounds.includes(pageBounds)))
          continue;
        if (editor.isShapeOfType(childShape, "group")) {
          collectSnappableShapesFromParent(childId);
          continue;
        }
        snappableShapes.add(childId);
      }
    };
    collectSnappableShapesFromParent((_a2 = this.getCurrentCommonAncestor()) != null ? _a2 : editor.getCurrentPageId());
    return snappableShapes;
  }
  getCurrentCommonAncestor() {
    return this.editor.findCommonAncestor(this.editor.getSelectedShapes());
  }
};
__decorateClass3([
  computed
], SnapManager.prototype, "getSnapThreshold", 1);
__decorateClass3([
  computed
], SnapManager.prototype, "getSnappableShapes", 1);
__decorateClass3([
  computed
], SnapManager.prototype, "getCurrentCommonAncestor", 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager.mjs
var fixNewLines = /\r?\n|\r/g;
function normalizeTextForDom(text) {
  return text.replace(fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
}
var textAlignmentsForLtr = {
  start: "left",
  "start-legacy": "left",
  middle: "center",
  "middle-legacy": "center",
  end: "right",
  "end-legacy": "right"
};
var spaceCharacterRegex = /\s/;
var TextManager = class {
  constructor(editor) {
    __publicField(this, "baseElm");
    __publicField(this, "measureText", (textToMeasure, opts) => {
      var _a2;
      const elm = (_a2 = this.baseElm) == null ? void 0 : _a2.cloneNode();
      this.baseElm.insertAdjacentElement("afterend", elm);
      elm.setAttribute("dir", "ltr");
      elm.style.setProperty("font-family", opts.fontFamily);
      elm.style.setProperty("font-style", opts.fontStyle);
      elm.style.setProperty("font-weight", opts.fontWeight);
      elm.style.setProperty("font-size", opts.fontSize + "px");
      elm.style.setProperty("line-height", opts.lineHeight * opts.fontSize + "px");
      elm.style.setProperty("max-width", opts.maxWidth === null ? null : opts.maxWidth + "px");
      elm.style.setProperty("min-width", opts.minWidth === null ? null : opts.minWidth + "px");
      elm.style.setProperty("padding", opts.padding);
      elm.style.setProperty("overflow-wrap", opts.disableOverflowWrapBreaking ? "normal" : "break-word");
      elm.textContent = normalizeTextForDom(textToMeasure);
      const scrollWidth = elm.scrollWidth;
      const rect = elm.getBoundingClientRect();
      elm.remove();
      return {
        x: 0,
        y: 0,
        w: rect.width,
        h: rect.height,
        scrollWidth
      };
    });
    var _a2;
    this.editor = editor;
    const container = this.editor.getContainer();
    (_a2 = container.querySelector("#tldraw_text_measure")) == null ? void 0 : _a2.remove();
    const elm = document.createElement("div");
    elm.id = `tldraw_text_measure`;
    elm.classList.add("tl-text");
    elm.classList.add("tl-text-measure");
    elm.tabIndex = -1;
    container.appendChild(elm);
    this.baseElm = elm;
  }
  measureElementTextNodeSpans(element, { shouldTruncateToFirstLine = false } = {}) {
    var _a2;
    const spans = [];
    const elmBounds = element.getBoundingClientRect();
    const offsetX = -elmBounds.left;
    const offsetY = -elmBounds.top;
    const range = new Range();
    const textNode = element.childNodes[0];
    let idx = 0;
    let currentSpan = null;
    let prevCharWasSpaceCharacter = null;
    let prevCharTop = 0;
    let didTruncate = false;
    for (const childNode of element.childNodes) {
      if (childNode.nodeType !== Node.TEXT_NODE)
        continue;
      for (const char of (_a2 = childNode.textContent) != null ? _a2 : "") {
        range.setStart(textNode, idx);
        range.setEnd(textNode, idx + char.length);
        const rects = range.getClientRects();
        const rect = rects[rects.length - 1];
        const top = rect.top + offsetY;
        const left = rect.left + offsetX;
        const right = rect.right + offsetX;
        const isSpaceCharacter = spaceCharacterRegex.test(char);
        if (isSpaceCharacter !== prevCharWasSpaceCharacter || top !== prevCharTop || !currentSpan) {
          if (currentSpan) {
            if (shouldTruncateToFirstLine && top !== prevCharTop) {
              didTruncate = true;
              break;
            }
            spans.push(currentSpan);
          }
          currentSpan = {
            box: { x: left, y: top, w: rect.width, h: rect.height },
            text: char
          };
        } else {
          currentSpan.box.w = right - currentSpan.box.x;
          currentSpan.text += char;
        }
        prevCharWasSpaceCharacter = isSpaceCharacter;
        prevCharTop = top;
        idx += char.length;
      }
    }
    if (currentSpan) {
      spans.push(currentSpan);
    }
    return { spans, didTruncate };
  }
  measureTextSpans(textToMeasure, opts) {
    var _a2;
    if (textToMeasure === "")
      return [];
    const elm = (_a2 = this.baseElm) == null ? void 0 : _a2.cloneNode();
    this.baseElm.insertAdjacentElement("afterend", elm);
    const elementWidth = Math.ceil(opts.width - opts.padding * 2);
    elm.style.setProperty("width", `${elementWidth}px`);
    elm.style.setProperty("height", "min-content");
    elm.style.setProperty("dir", "ltr");
    elm.style.setProperty("font-size", `${opts.fontSize}px`);
    elm.style.setProperty("font-family", opts.fontFamily);
    elm.style.setProperty("font-weight", opts.fontWeight);
    elm.style.setProperty("line-height", `${opts.lineHeight * opts.fontSize}px`);
    elm.style.setProperty("text-align", textAlignmentsForLtr[opts.textAlign]);
    const shouldTruncateToFirstLine = opts.overflow === "truncate-ellipsis" || opts.overflow === "truncate-clip";
    if (shouldTruncateToFirstLine) {
      elm.style.setProperty("overflow-wrap", "anywhere");
      elm.style.setProperty("word-break", "break-all");
    }
    const normalizedText = normalizeTextForDom(textToMeasure);
    elm.textContent = normalizedText;
    const { spans, didTruncate } = this.measureElementTextNodeSpans(elm, {
      shouldTruncateToFirstLine
    });
    if (opts.overflow === "truncate-ellipsis" && didTruncate) {
      elm.textContent = "\u2026";
      const ellipsisWidth = Math.ceil(this.measureElementTextNodeSpans(elm).spans[0].box.w);
      elm.style.setProperty("width", `${elementWidth - ellipsisWidth}px`);
      elm.textContent = normalizedText;
      const truncatedSpans = this.measureElementTextNodeSpans(elm, {
        shouldTruncateToFirstLine: true
      }).spans;
      const lastSpan = truncatedSpans[truncatedSpans.length - 1];
      truncatedSpans.push({
        text: "\u2026",
        box: {
          x: Math.min(lastSpan.box.x + lastSpan.box.w, opts.width - opts.padding - ellipsisWidth),
          y: lastSpan.box.y,
          w: ellipsisWidth,
          h: lastSpan.box.h
        }
      });
      return truncatedSpans;
    }
    elm.remove();
    return spans;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TickManager.mjs
var throttleToNextFrame2 = typeof process !== "undefined" && false ? function mockThrottle(cb) {
  const frame2 = requestAnimationFrame(cb);
  return () => cancelAnimationFrame(frame2);
} : throttleToNextFrame;
var TickManager = class {
  constructor(editor) {
    __publicField(this, "cancelRaf");
    __publicField(this, "isPaused", true);
    __publicField(this, "now", 0);
    __publicField(this, "start", () => {
      var _a2;
      this.isPaused = false;
      (_a2 = this.cancelRaf) == null ? void 0 : _a2.call(this);
      this.cancelRaf = throttleToNextFrame2(this.tick);
      this.now = Date.now();
    });
    __publicField(this, "tick", () => {
      if (this.isPaused) {
        return;
      }
      const now = Date.now();
      const elapsed = now - this.now;
      this.now = now;
      this.updatePointerVelocity(elapsed);
      this.editor.emit("frame", elapsed);
      this.editor.emit("tick", elapsed);
      this.cancelRaf = throttleToNextFrame2(this.tick);
    });
    __publicField(this, "dispose", () => {
      var _a2;
      this.isPaused = true;
      (_a2 = this.cancelRaf) == null ? void 0 : _a2.call(this);
    });
    __publicField(this, "prevPoint", new Vec());
    __publicField(this, "updatePointerVelocity", (elapsed) => {
      const {
        prevPoint,
        editor: {
          inputs: { currentScreenPoint, pointerVelocity }
        }
      } = this;
      if (elapsed === 0)
        return;
      const delta = Vec.Sub(currentScreenPoint, prevPoint);
      this.prevPoint = currentScreenPoint.clone();
      const length = delta.len();
      const direction = length ? delta.div(length) : new Vec(0, 0);
      const next = pointerVelocity.clone().lrp(direction.mul(length / elapsed), 0.5);
      if (Math.abs(next.x) < 0.01)
        next.x = 0;
      if (Math.abs(next.y) < 0.01)
        next.y = 0;
      if (!pointerVelocity.equals(next)) {
        this.editor.inputs.pointerVelocity = next;
      }
    });
    this.editor = editor;
    this.editor.disposables.add(this.dispose);
    this.start();
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/managers/UserPreferencesManager.mjs
var __defProp5 = Object.defineProperty;
var __getOwnPropDesc5 = Object.getOwnPropertyDescriptor;
var __decorateClass4 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc5(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp5(target, key, result);
  return result;
};
var UserPreferencesManager = class {
  constructor(user, inferDarkMode) {
    __publicField(this, "updateUserPreferences", (userPreferences) => {
      this.user.setUserPreferences({
        ...this.user.userPreferences.get(),
        ...userPreferences
      });
    });
    this.user = user;
    this.inferDarkMode = inferDarkMode;
  }
  getUserPreferences() {
    return {
      id: this.getId(),
      name: this.getName(),
      locale: this.getLocale(),
      color: this.getColor(),
      animationSpeed: this.getAnimationSpeed(),
      isSnapMode: this.getIsSnapMode(),
      isDarkMode: this.getIsDarkMode(),
      isWrapMode: this.getIsWrapMode()
    };
  }
  getIsDarkMode() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().isDarkMode) != null ? _a2 : this.inferDarkMode ? userPrefersDarkUI() : false;
  }
  getEdgeScrollSpeed() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().edgeScrollSpeed) != null ? _a2 : defaultUserPreferences.edgeScrollSpeed;
  }
  getAnimationSpeed() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().animationSpeed) != null ? _a2 : defaultUserPreferences.animationSpeed;
  }
  getId() {
    return this.user.userPreferences.get().id;
  }
  getName() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().name) != null ? _a2 : defaultUserPreferences.name;
  }
  getLocale() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().locale) != null ? _a2 : defaultUserPreferences.locale;
  }
  getColor() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().color) != null ? _a2 : defaultUserPreferences.color;
  }
  getIsSnapMode() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().isSnapMode) != null ? _a2 : defaultUserPreferences.isSnapMode;
  }
  getIsWrapMode() {
    var _a2;
    return (_a2 = this.user.userPreferences.get().isWrapMode) != null ? _a2 : defaultUserPreferences.isWrapMode;
  }
};
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getUserPreferences", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getIsDarkMode", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getEdgeScrollSpeed", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getAnimationSpeed", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getId", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getName", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getLocale", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getColor", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getIsSnapMode", 1);
__decorateClass4([
  computed
], UserPreferencesManager.prototype, "getIsWrapMode", 1);

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/arrow/shared.mjs
function getIsArrowStraight(shape) {
  return Math.abs(shape.props.bend) < 8;
}
function getBoundShapeInfoForTerminal(editor, terminal) {
  if (terminal.type === "point") {
    return;
  }
  const shape = editor.getShape(terminal.boundShapeId);
  const transform = editor.getShapePageTransform(shape);
  const geometry = editor.getShapeGeometry(shape);
  const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices;
  return {
    shape,
    transform,
    isClosed: geometry.isClosed,
    isExact: terminal.isExact,
    didIntersect: false,
    outline
  };
}
function getArrowTerminalInArrowSpace(editor, arrowPageTransform, terminal, forceImprecise) {
  if (terminal.type === "point") {
    return Vec.From(terminal);
  }
  const boundShape = editor.getShape(terminal.boundShapeId);
  if (!boundShape) {
    return new Vec(0, 0);
  } else {
    const { point, size: size4 } = editor.getShapeGeometry(boundShape).bounds;
    const shapePoint = Vec.Add(point, Vec.MulV(terminal.isPrecise || forceImprecise ? terminal.normalizedAnchor : { x: 0.5, y: 0.5 }, size4));
    const pagePoint = Mat.applyToPoint(editor.getShapePageTransform(boundShape), shapePoint);
    const arrowPoint = Mat.applyToPoint(Mat.Inverse(arrowPageTransform), pagePoint);
    return arrowPoint;
  }
}
function getArrowTerminalsInArrowSpace(editor, shape) {
  const arrowPageTransform = editor.getShapePageTransform(shape);
  let startBoundShapeId;
  let endBoundShapeId;
  if (shape.props.start.type === "binding" && shape.props.end.type === "binding") {
    startBoundShapeId = shape.props.start.boundShapeId;
    endBoundShapeId = shape.props.end.boundShapeId;
  }
  const boundShapeRelationships = getBoundShapeRelationships(editor, startBoundShapeId, endBoundShapeId);
  const start = getArrowTerminalInArrowSpace(editor, arrowPageTransform, shape.props.start, boundShapeRelationships === "double-bound" || boundShapeRelationships === "start-contains-end");
  const end = getArrowTerminalInArrowSpace(editor, arrowPageTransform, shape.props.end, boundShapeRelationships === "double-bound" || boundShapeRelationships === "end-contains-start");
  return { start, end };
}
var MIN_ARROW_LENGTH = 10;
var BOUND_ARROW_OFFSET = 10;
var WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;
var STROKE_SIZES = {
  s: 2,
  m: 3.5,
  l: 5,
  xl: 10
};
function getBoundShapeRelationships(editor, startShapeId, endShapeId) {
  if (!startShapeId || !endShapeId)
    return "safe";
  if (startShapeId === endShapeId)
    return "double-bound";
  const startBounds = editor.getShapePageBounds(startShapeId);
  const endBounds = editor.getShapePageBounds(endShapeId);
  if (startBounds && endBounds) {
    if (startBounds.contains(endBounds))
      return "start-contains-end";
    if (endBounds.contains(startBounds))
      return "end-contains-start";
  }
  return "safe";
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/arrow/straight-arrow.mjs
function getStraightArrowInfo(editor, shape) {
  const { start, end, arrowheadStart, arrowheadEnd } = shape.props;
  const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(editor, shape);
  const a = terminalsInArrowSpace.start.clone();
  const b = terminalsInArrowSpace.end.clone();
  const c = Vec.Med(a, b);
  if (Vec.Equals(a, b)) {
    return {
      isStraight: true,
      start: {
        handle: a,
        point: a,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: b,
        point: b,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      isValid: false,
      length: 0
    };
  }
  const uAB = Vec.Sub(b, a).uni();
  const startShapeInfo = getBoundShapeInfoForTerminal(editor, start);
  const endShapeInfo = getBoundShapeInfoForTerminal(editor, end);
  const arrowPageTransform = editor.getShapePageTransform(shape);
  updateArrowheadPointWithBoundShape(b, terminalsInArrowSpace.start, arrowPageTransform, endShapeInfo);
  updateArrowheadPointWithBoundShape(a, terminalsInArrowSpace.end, arrowPageTransform, startShapeInfo);
  let offsetA = 0;
  let offsetB = 0;
  let strokeOffsetA = 0;
  let strokeOffsetB = 0;
  let minLength = MIN_ARROW_LENGTH;
  const isSelfIntersection = startShapeInfo && endShapeInfo && startShapeInfo.shape === endShapeInfo.shape;
  const relationship = startShapeInfo && endShapeInfo ? getBoundShapeRelationships(editor, startShapeInfo.shape.id, endShapeInfo.shape.id) : "safe";
  if (relationship === "safe" && startShapeInfo && endShapeInfo && !isSelfIntersection && !startShapeInfo.isExact && !endShapeInfo.isExact) {
    if (endShapeInfo.didIntersect && !startShapeInfo.didIntersect) {
      if (startShapeInfo.isClosed) {
        a.setTo(b.clone().add(uAB.clone().mul(MIN_ARROW_LENGTH)));
      }
    } else if (!endShapeInfo.didIntersect) {
      if (endShapeInfo.isClosed) {
        b.setTo(a.clone().sub(uAB.clone().mul(MIN_ARROW_LENGTH)));
      }
    }
  }
  const distance = Vec.Sub(b, a);
  const u = Vec.Len(distance) ? distance.uni() : Vec.From(distance);
  const didFlip = !Vec.Equals(u, uAB);
  if (!isSelfIntersection) {
    if (relationship !== "start-contains-end" && startShapeInfo && arrowheadStart !== "none" && !startShapeInfo.isExact) {
      strokeOffsetA = STROKE_SIZES[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? STROKE_SIZES[startShapeInfo.shape.props.size] / 2 : 0);
      offsetA = BOUND_ARROW_OFFSET + strokeOffsetA;
      minLength += strokeOffsetA;
    }
    if (relationship !== "end-contains-start" && endShapeInfo && arrowheadEnd !== "none" && !endShapeInfo.isExact) {
      strokeOffsetB = STROKE_SIZES[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? STROKE_SIZES[endShapeInfo.shape.props.size] / 2 : 0);
      offsetB = BOUND_ARROW_OFFSET + strokeOffsetB;
      minLength += strokeOffsetB;
    }
  }
  const tA = a.clone().add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
  const tB = b.clone().sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
  if (Vec.DistMin(tA, tB, minLength)) {
    if (offsetA !== 0 && offsetB !== 0) {
      offsetA *= -1.5;
      offsetB *= -1.5;
    } else if (offsetA !== 0) {
      offsetA *= -1;
    } else if (offsetB !== 0) {
      offsetB *= -1;
    } else {
    }
  }
  a.add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
  b.sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
  if (didFlip) {
    if (startShapeInfo && endShapeInfo) {
      b.setTo(Vec.Add(a, u.clone().mul(-MIN_ARROW_LENGTH)));
    }
    c.setTo(Vec.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end));
  } else {
    c.setTo(Vec.Med(a, b));
  }
  const length = Vec.Dist(a, b);
  return {
    isStraight: true,
    start: {
      handle: terminalsInArrowSpace.start,
      point: a,
      arrowhead: shape.props.arrowheadStart
    },
    end: {
      handle: terminalsInArrowSpace.end,
      point: b,
      arrowhead: shape.props.arrowheadEnd
    },
    middle: c,
    isValid: length > 0,
    length
  };
}
function updateArrowheadPointWithBoundShape(point, opposite, arrowPageTransform, targetShapeInfo) {
  var _a2;
  if (targetShapeInfo === void 0) {
    return;
  }
  if (targetShapeInfo.isExact) {
    return;
  }
  const pageFrom = Mat.applyToPoint(arrowPageTransform, opposite);
  const pageTo = Mat.applyToPoint(arrowPageTransform, point);
  const targetFrom = Mat.applyToPoint(Mat.Inverse(targetShapeInfo.transform), pageFrom);
  const targetTo = Mat.applyToPoint(Mat.Inverse(targetShapeInfo.transform), pageTo);
  const isClosed = targetShapeInfo.isClosed;
  const fn = isClosed ? intersectLineSegmentPolygon : intersectLineSegmentPolyline;
  const intersection = fn(targetFrom, targetTo, targetShapeInfo.outline);
  let targetInt;
  if (intersection !== null) {
    targetInt = (_a2 = intersection.sort((p1, p2) => Vec.Dist2(p1, targetFrom) - Vec.Dist2(p2, targetFrom))[0]) != null ? _a2 : isClosed ? void 0 : targetTo;
  }
  if (targetInt === void 0) {
    return;
  }
  const pageInt = Mat.applyToPoint(targetShapeInfo.transform, targetInt);
  const arrowInt = Mat.applyToPoint(Mat.Inverse(arrowPageTransform), pageInt);
  point.setTo(arrowInt);
  targetShapeInfo.didIntersect = true;
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/arrow/curved-arrow.mjs
function getCurvedArrowInfo(editor, shape, extraBend = 0) {
  var _a2;
  const { arrowheadEnd, arrowheadStart } = shape.props;
  const bend = shape.props.bend + extraBend;
  if (Math.abs(bend) > Math.abs(shape.props.bend * WAY_TOO_BIG_ARROW_BEND_FACTOR)) {
    return getStraightArrowInfo(editor, shape);
  }
  const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(editor, shape);
  const med = Vec.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end);
  const distance = Vec.Sub(terminalsInArrowSpace.end, terminalsInArrowSpace.start);
  const u = Vec.Len(distance) ? distance.uni() : Vec.From(distance);
  const middle = Vec.Add(med, u.per().mul(-bend));
  const startShapeInfo = getBoundShapeInfoForTerminal(editor, shape.props.start);
  const endShapeInfo = getBoundShapeInfoForTerminal(editor, shape.props.end);
  const a = terminalsInArrowSpace.start.clone();
  const b = terminalsInArrowSpace.end.clone();
  const c = middle.clone();
  if (Vec.Equals(a, b)) {
    return {
      isStraight: true,
      start: {
        handle: a,
        point: a,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: b,
        point: b,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      isValid: false,
      length: 0
    };
  }
  const isClockwise = shape.props.bend < 0;
  const distFn = isClockwise ? clockwiseAngleDist : counterClockwiseAngleDist;
  const handleArc = getArcInfo(a, b, c);
  const handle_aCA = Vec.Angle(handleArc.center, a);
  const handle_aCB = Vec.Angle(handleArc.center, b);
  const handle_dAB = distFn(handle_aCA, handle_aCB);
  if (handleArc.length === 0 || handleArc.size === 0 || !isSafeFloat(handleArc.length) || !isSafeFloat(handleArc.size)) {
    return getStraightArrowInfo(editor, shape);
  }
  const tempA = a.clone();
  const tempB = b.clone();
  const tempC = c.clone();
  const arrowPageTransform = editor.getShapePageTransform(shape);
  let offsetA = 0;
  let offsetB = 0;
  let minLength = MIN_ARROW_LENGTH;
  if (startShapeInfo && !startShapeInfo.isExact) {
    const startInPageSpace = Mat.applyToPoint(arrowPageTransform, tempA);
    const centerInPageSpace = Mat.applyToPoint(arrowPageTransform, handleArc.center);
    const endInPageSpace = Mat.applyToPoint(arrowPageTransform, tempB);
    const inverseTransform = Mat.Inverse(startShapeInfo.transform);
    const startInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, startInPageSpace);
    const centerInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, centerInPageSpace);
    const endInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, endInPageSpace);
    const { isClosed } = startShapeInfo;
    const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
    let point;
    let intersections = fn(centerInStartShapeLocalSpace, handleArc.radius, startShapeInfo.outline);
    if (intersections) {
      const angleToStart = centerInStartShapeLocalSpace.angle(startInStartShapeLocalSpace);
      const angleToEnd = centerInStartShapeLocalSpace.angle(endInStartShapeLocalSpace);
      const dAB2 = distFn(angleToStart, angleToEnd);
      intersections = intersections.filter((pt) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(pt)) <= dAB2);
      const targetDist = dAB2 * 0.25;
      intersections.sort(isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) ? -1 : 1);
      point = (_a2 = intersections[0]) != null ? _a2 : isClosed ? void 0 : startInStartShapeLocalSpace;
    } else {
      point = isClosed ? void 0 : startInStartShapeLocalSpace;
    }
    if (point) {
      tempA.setTo(editor.getPointInShapeSpace(shape, Mat.applyToPoint(startShapeInfo.transform, point)));
      startShapeInfo.didIntersect = true;
      if (arrowheadStart !== "none") {
        const strokeOffset = STROKE_SIZES[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? STROKE_SIZES[startShapeInfo.shape.props.size] / 2 : 0);
        offsetA = BOUND_ARROW_OFFSET + strokeOffset;
        minLength += strokeOffset;
      }
    }
  }
  if (endShapeInfo && !endShapeInfo.isExact) {
    const startInPageSpace = Mat.applyToPoint(arrowPageTransform, tempA);
    const endInPageSpace = Mat.applyToPoint(arrowPageTransform, tempB);
    const centerInPageSpace = Mat.applyToPoint(arrowPageTransform, handleArc.center);
    const inverseTransform = Mat.Inverse(endShapeInfo.transform);
    const startInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, startInPageSpace);
    const centerInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, centerInPageSpace);
    const endInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, endInPageSpace);
    const isClosed = endShapeInfo.isClosed;
    const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
    let point;
    let intersections = fn(centerInEndShapeLocalSpace, handleArc.radius, endShapeInfo.outline);
    if (intersections) {
      const angleToStart = centerInEndShapeLocalSpace.angle(startInEndShapeLocalSpace);
      const angleToEnd = centerInEndShapeLocalSpace.angle(endInEndShapeLocalSpace);
      const dAB2 = distFn(angleToStart, angleToEnd);
      const targetDist = dAB2 * 0.75;
      intersections = intersections.filter((pt) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(pt)) <= dAB2);
      intersections.sort(isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) ? -1 : 1);
      if (intersections[0]) {
        point = intersections[0];
      } else {
        point = isClosed ? void 0 : endInEndShapeLocalSpace;
      }
    } else {
      point = isClosed ? void 0 : endInEndShapeLocalSpace;
    }
    if (point) {
      tempB.setTo(editor.getPointInShapeSpace(shape, Mat.applyToPoint(endShapeInfo.transform, point)));
      endShapeInfo.didIntersect = true;
      if (arrowheadEnd !== "none") {
        const strokeOffset = STROKE_SIZES[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? STROKE_SIZES[endShapeInfo.shape.props.size] / 2 : 0);
        offsetB = BOUND_ARROW_OFFSET + strokeOffset;
        minLength += strokeOffset;
      }
    }
  }
  let aCA = Vec.Angle(handleArc.center, tempA);
  let aCB = Vec.Angle(handleArc.center, tempB);
  let dAB = distFn(aCA, aCB);
  let lAB = dAB * handleArc.radius;
  const tA = tempA.clone();
  const tB = tempB.clone();
  if (offsetA !== 0) {
    const n = offsetA / lAB * (isClockwise ? 1 : -1);
    const u2 = Vec.FromAngle(aCA + dAB * n);
    tA.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (offsetB !== 0) {
    const n = offsetB / lAB * (isClockwise ? -1 : 1);
    const u2 = Vec.FromAngle(aCB + dAB * n);
    tB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (Vec.DistMin(tA, tB, minLength)) {
    if (offsetA !== 0 && offsetB !== 0) {
      offsetA *= -1.5;
      offsetB *= -1.5;
    } else if (offsetA !== 0) {
      offsetA *= -2;
    } else if (offsetB !== 0) {
      offsetB *= -2;
    } else {
    }
  }
  if (offsetA !== 0) {
    const n = offsetA / lAB * (isClockwise ? 1 : -1);
    const u2 = Vec.FromAngle(aCA + dAB * n);
    tempA.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (offsetB !== 0) {
    const n = offsetB / lAB * (isClockwise ? -1 : 1);
    const u2 = Vec.FromAngle(aCB + dAB * n);
    tempB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (startShapeInfo && endShapeInfo && !startShapeInfo.isExact && !endShapeInfo.isExact) {
    aCA = Vec.Angle(handleArc.center, tempA);
    aCB = Vec.Angle(handleArc.center, tempB);
    dAB = distFn(aCA, aCB);
    lAB = dAB * handleArc.radius;
    const relationship = getBoundShapeRelationships(editor, startShapeInfo.shape.id, endShapeInfo.shape.id);
    if (relationship === "double-bound" && lAB < 30) {
      tempA.setTo(a);
      tempB.setTo(b);
      tempC.setTo(c);
    } else if (relationship === "safe") {
      if (startShapeInfo && !startShapeInfo.didIntersect) {
        tempA.setTo(a);
      }
      if (endShapeInfo && !endShapeInfo.didIntersect || distFn(handle_aCA, aCA) > distFn(handle_aCA, aCB)) {
        const n = Math.min(0.9, MIN_ARROW_LENGTH / lAB) * (isClockwise ? 1 : -1);
        const u2 = Vec.FromAngle(aCA + dAB * n);
        tempB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
      }
    }
  }
  placeCenterHandle(handleArc.center, handleArc.radius, tempA, tempB, tempC, handle_dAB, isClockwise);
  if (tempA.equals(tempB)) {
    tempA.setTo(tempC.clone().addXY(1, 1));
    tempB.setTo(tempC.clone().subXY(1, 1));
  }
  a.setTo(tempA);
  b.setTo(tempB);
  c.setTo(tempC);
  const bodyArc = getArcInfo(a, b, c);
  return {
    isStraight: false,
    start: {
      point: a,
      handle: terminalsInArrowSpace.start,
      arrowhead: shape.props.arrowheadStart
    },
    end: {
      point: b,
      handle: terminalsInArrowSpace.end,
      arrowhead: shape.props.arrowheadEnd
    },
    middle: c,
    handleArc,
    bodyArc,
    isValid: bodyArc.length !== 0 && isFinite(bodyArc.center.x) && isFinite(bodyArc.center.y)
  };
}
function getArcInfo(a, b, c) {
  const u = -2 * (a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y);
  const center = {
    x: ((a.x * a.x + a.y * a.y) * (c.y - b.y) + (b.x * b.x + b.y * b.y) * (a.y - c.y) + (c.x * c.x + c.y * c.y) * (b.y - a.y)) / u,
    y: ((a.x * a.x + a.y * a.y) * (b.x - c.x) + (b.x * b.x + b.y * b.y) * (c.x - a.x) + (c.x * c.x + c.y * c.y) * (a.x - b.x)) / u
  };
  const radius = Vec.Dist(center, a);
  const sweepFlag = +Vec.Clockwise(a, c, b);
  const ab = ((a.y - b.y) ** 2 + (a.x - b.x) ** 2) ** 0.5;
  const bc = ((b.y - c.y) ** 2 + (b.x - c.x) ** 2) ** 0.5;
  const ca = ((c.y - a.y) ** 2 + (c.x - a.x) ** 2) ** 0.5;
  const theta = Math.acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca)) * 2;
  const largeArcFlag = +(PI > theta);
  const size4 = (PI2 - theta) * (sweepFlag ? 1 : -1);
  const length = size4 * radius;
  return {
    center,
    radius,
    size: size4,
    length,
    largeArcFlag,
    sweepFlag
  };
}
function placeCenterHandle(center, radius, tempA, tempB, tempC, originalArcLength, isClockwise) {
  const aCA = Vec.Angle(center, tempA);
  const aCB = Vec.Angle(center, tempB);
  let dAB = clockwiseAngleDist(aCA, aCB);
  if (!isClockwise)
    dAB = PI2 - dAB;
  const n = 0.5 * (isClockwise ? 1 : -1);
  const u = Vec.FromAngle(aCA + dAB * n);
  tempC.setTo(center).add(u.mul(radius));
  if (dAB > originalArcLength) {
    tempC.rotWith(center, PI);
    const t2 = tempB.clone();
    tempB.setTo(tempA);
    tempA.setTo(t2);
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/types/event-types.mjs
var EVENT_NAME_MAP = {
  wheel: "onWheel",
  pointer_down: "onPointerDown",
  pointer_move: "onPointerMove",
  long_press: "onLongPress",
  pointer_up: "onPointerUp",
  right_click: "onRightClick",
  middle_click: "onMiddleClick",
  key_down: "onKeyDown",
  key_up: "onKeyUp",
  key_repeat: "onKeyRepeat",
  cancel: "onCancel",
  complete: "onComplete",
  interrupt: "onInterrupt",
  double_click: "onDoubleClick",
  triple_click: "onTripleClick",
  quadruple_click: "onQuadrupleClick",
  tick: "onTick"
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/tools/StateNode.mjs
var StateNode = class {
  constructor(editor, parent) {
    __publicField(this, "id");
    __publicField(this, "type");
    __publicField(this, "shapeType");
    __publicField(this, "initial");
    __publicField(this, "children");
    __publicField(this, "parent");
    __publicField(this, "_path");
    __publicField(this, "_current");
    __publicField(this, "_isActive");
    __publicField(this, "transition", (id, info = {}) => {
      var _a2;
      const path = id.split(".");
      let currState = this;
      for (let i = 0; i < path.length; i++) {
        const id2 = path[i];
        const prevChildState = currState.getCurrent();
        const nextChildState = (_a2 = currState.children) == null ? void 0 : _a2[id2];
        if (!nextChildState) {
          throw Error(`${currState.id} - no child state exists with the id ${id2}.`);
        }
        if ((prevChildState == null ? void 0 : prevChildState.id) !== nextChildState.id) {
          prevChildState == null ? void 0 : prevChildState.exit(info, id2);
          currState._current.set(nextChildState);
          nextChildState.enter(info, (prevChildState == null ? void 0 : prevChildState.id) || "initial");
          if (!nextChildState.getIsActive())
            break;
        }
        currState = nextChildState;
      }
      return this;
    });
    __publicField(this, "handleEvent", (info) => {
      var _a2;
      const cbName = EVENT_NAME_MAP[info.name];
      const currentActiveChild = this._current.__unsafe__getWithoutCapture();
      (_a2 = this[cbName]) == null ? void 0 : _a2.call(this, info);
      if (this._isActive.__unsafe__getWithoutCapture() && currentActiveChild && currentActiveChild === this._current.__unsafe__getWithoutCapture()) {
        currentActiveChild.handleEvent(info);
      }
    });
    __publicField(this, "enter", (info, from) => {
      var _a2;
      this._isActive.set(true);
      (_a2 = this.onEnter) == null ? void 0 : _a2.call(this, info, from);
      if (this.children && this.initial && this.getIsActive()) {
        const initial = this.children[this.initial];
        this._current.set(initial);
        initial.enter(info, from);
      }
    });
    __publicField(this, "exit", (info, from) => {
      var _a2, _b2;
      this._isActive.set(false);
      (_a2 = this.onExit) == null ? void 0 : _a2.call(this, info, from);
      if (!this.getIsActive()) {
        (_b2 = this.getCurrent()) == null ? void 0 : _b2.exit(info, from);
      }
    });
    __publicField(this, "_currentToolIdMask", atom("curent tool id mask", void 0));
    __publicField(this, "onWheel");
    __publicField(this, "onPointerDown");
    __publicField(this, "onPointerMove");
    __publicField(this, "onLongPress");
    __publicField(this, "onPointerUp");
    __publicField(this, "onDoubleClick");
    __publicField(this, "onTripleClick");
    __publicField(this, "onQuadrupleClick");
    __publicField(this, "onRightClick");
    __publicField(this, "onMiddleClick");
    __publicField(this, "onKeyDown");
    __publicField(this, "onKeyUp");
    __publicField(this, "onKeyRepeat");
    __publicField(this, "onCancel");
    __publicField(this, "onComplete");
    __publicField(this, "onInterrupt");
    __publicField(this, "onTick");
    __publicField(this, "onEnter");
    __publicField(this, "onExit");
    this.editor = editor;
    const { id, children, initial } = this.constructor;
    this.id = id;
    this._isActive = atom("toolIsActive" + this.id, false);
    this._current = atom("toolState" + this.id, void 0);
    this._path = computed("toolPath" + this.id, () => {
      const current2 = this.getCurrent();
      return this.id + (current2 ? `.${current2.getPath()}` : "");
    });
    this.parent = parent != null ? parent : {};
    if (this.parent) {
      if (children && initial) {
        this.type = "branch";
        this.initial = initial;
        this.children = Object.fromEntries(children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)]));
        this._current.set(this.children[this.initial]);
      } else {
        this.type = "leaf";
      }
    } else {
      this.type = "root";
      if (children && initial) {
        this.initial = initial;
        this.children = Object.fromEntries(children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)]));
        this._current.set(this.children[this.initial]);
      }
    }
  }
  getPath() {
    return this._path.get();
  }
  getCurrent() {
    return this._current.get();
  }
  getIsActive() {
    return this._isActive.get();
  }
  getCurrentToolIdMask() {
    return this._currentToolIdMask.get();
  }
  setCurrentToolIdMask(id) {
    this._currentToolIdMask.set(id);
  }
};
__publicField(StateNode, "id");
__publicField(StateNode, "initial");
__publicField(StateNode, "children");

// node_modules/@tldraw/editor/dist-esm/lib/editor/tools/RootState.mjs
var RootState = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onKeyDown", (info) => {
      var _a2;
      switch (info.code) {
        case "KeyZ": {
          if (!(info.shiftKey || info.ctrlKey)) {
            const currentTool = this.getCurrent();
            if (currentTool && ((_a2 = currentTool.getCurrent()) == null ? void 0 : _a2.id) === "idle" && this.children["zoom"]) {
              this.editor.setCurrentTool("zoom", { ...info, onInteractionEnd: currentTool.id });
            }
          }
          break;
        }
      }
    });
  }
};
__publicField(RootState, "id", "root");
__publicField(RootState, "initial", "");
__publicField(RootState, "children", () => []);

// node_modules/@tldraw/editor/dist-esm/lib/editor/Editor.mjs
var __defProp6 = Object.defineProperty;
var __getOwnPropDesc6 = Object.getOwnPropertyDescriptor;
var __decorateClass5 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc6(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp6(target, key, result);
  return result;
};
var Editor = class extends import_eventemitter3.EventEmitter {
  constructor({
    store: store2,
    user,
    shapeUtils,
    tools,
    getContainer,
    initialState: initialState2,
    inferDarkMode
  }) {
    var _a2;
    super();
    __publicField(this, "store");
    __publicField(this, "root");
    __publicField(this, "disposables", /* @__PURE__ */ new Set());
    __publicField(this, "_tickManager");
    __publicField(this, "snaps");
    __publicField(this, "user");
    __publicField(this, "textMeasure");
    __publicField(this, "environment");
    __publicField(this, "scribbles");
    __publicField(this, "getContainer");
    __publicField(this, "sideEffects");
    __publicField(this, "shapeUtils");
    __publicField(this, "styleProps");
    __publicField(this, "history", new HistoryManager(this, (error) => {
      this.annotateError(error, { origin: "history.batch", willCrashApp: true });
      this.crash(error);
    }));
    __publicField(this, "_crashingError", null);
    __publicField(this, "_updateInstanceState", this.history.createCommand("updateInstanceState", (partial, historyOptions) => {
      const prev = this.store.get(this.getInstanceState().id);
      const next = { ...prev, ...partial };
      return {
        data: { prev, next },
        ephemeral: false,
        squashing: false,
        ...historyOptions
      };
    }, {
      do: ({ next }) => {
        this.store.put([next]);
      },
      undo: ({ prev }) => {
        this.store.put([prev]);
      },
      squash({ prev }, { next }) {
        return { prev, next };
      }
    }));
    __publicField(this, "_isChangingStyleTimeout", -1);
    __publicField(this, "setCursor", (cursor) => {
      this.updateInstanceState({ cursor: { ...this.getInstanceState().cursor, ...cursor } }, { ephemeral: true });
      return this;
    });
    __publicField(this, "_setInstancePageState", this.history.createCommand("setInstancePageState", (partial, historyOptions) => {
      var _a2;
      const prev = this.store.get((_a2 = partial.id) != null ? _a2 : this.getCurrentPageState().id);
      return { data: { prev, partial }, ...historyOptions };
    }, {
      do: ({ prev, partial }) => {
        this.store.update(prev.id, (state) => ({ ...state, ...partial }));
      },
      undo: ({ prev }) => {
        this.store.update(prev.id, () => prev);
      }
    }));
    __publicField(this, "_setSelectedShapes", this.history.createCommand("setSelectedShapes", (ids, historyOptions) => {
      const { selectedShapeIds: prevSelectedShapeIds } = this.getCurrentPageState();
      const prevSet = new Set(prevSelectedShapeIds);
      if (ids.length === prevSet.size && ids.every((id) => prevSet.has(id)))
        return null;
      return {
        data: { selectedShapeIds: ids, prevSelectedShapeIds },
        preservesRedoStack: true,
        ...historyOptions
      };
    }, {
      do: ({ selectedShapeIds }) => {
        this.store.put([{ ...this.getCurrentPageState(), selectedShapeIds }]);
      },
      undo: ({ prevSelectedShapeIds }) => {
        this.store.put([
          {
            ...this.getCurrentPageState(),
            selectedShapeIds: prevSelectedShapeIds
          }
        ]);
      },
      squash({ prevSelectedShapeIds }, { selectedShapeIds }) {
        return {
          selectedShapeIds,
          prevSelectedShapeIds
        };
      }
    }));
    __publicField(this, "_setFocusedGroupId", this.history.createCommand("setFocusedGroupId", (next) => {
      const prev = this.getCurrentPageState().focusedGroupId;
      if (prev === next)
        return;
      return {
        data: {
          prev,
          next
        },
        preservesRedoStack: true,
        squashing: true
      };
    }, {
      do: ({ next }) => {
        this.store.update(this.getCurrentPageState().id, (s) => ({ ...s, focusedGroupId: next }));
      },
      undo: ({ prev }) => {
        this.store.update(this.getCurrentPageState().id, (s) => ({ ...s, focusedGroupId: prev }));
      },
      squash({ prev }, { next }) {
        return { prev, next };
      }
    }));
    __publicField(this, "_viewportAnimation", null);
    __publicField(this, "_willSetInitialBounds", true);
    __publicField(this, "_wasInset", false);
    __publicField(this, "_cameraState", atom("camera state", "idle"));
    __publicField(this, "_cameraStateTimeoutRemaining", 0);
    __publicField(this, "_lastUpdateRenderingBoundsTimestamp", Date.now());
    __publicField(this, "_decayCameraStateTimeout", (elapsed) => {
      this._cameraStateTimeoutRemaining -= elapsed;
      if (this._cameraStateTimeoutRemaining <= 0) {
        this.off("tick", this._decayCameraStateTimeout);
        this._cameraState.set("idle");
        this.updateRenderingBounds();
      }
    });
    __publicField(this, "_tickCameraState", () => {
      this._cameraStateTimeoutRemaining = CAMERA_MOVING_TIMEOUT;
      const now = Date.now();
      if (this._cameraState.__unsafe__getWithoutCapture() === "idle") {
        this._lastUpdateRenderingBoundsTimestamp = now;
        this._cameraState.set("moving");
        this.on("tick", this._decayCameraStateTimeout);
      }
    });
    __publicField(this, "_renderingBounds", atom("rendering viewport", new Box()));
    __publicField(this, "renderingBoundsMargin", 100);
    __publicField(this, "_currentPageShapeIds");
    __publicField(this, "_setCurrentPageId", this.history.createCommand("setCurrentPage", (pageId, historyOptions) => {
      if (!this.store.has(pageId)) {
        console.error("Tried to set the current page id to a page that doesn't exist.");
        return;
      }
      this.stopFollowingUser();
      return {
        data: { toId: pageId, fromId: this.getCurrentPageId() },
        squashing: true,
        preservesRedoStack: true,
        ...historyOptions
      };
    }, {
      do: ({ toId }) => {
        if (!this.store.has(toId)) {
          return;
        }
        if (!this.getPageStates().find((p) => p.pageId === toId)) {
          const camera = CameraRecordType.create({
            id: CameraRecordType.createId(toId)
          });
          this.store.put([
            camera,
            InstancePageStateRecordType.create({
              id: InstancePageStateRecordType.createId(toId),
              pageId: toId
            })
          ]);
        }
        this.store.put([{ ...this.getInstanceState(), currentPageId: toId }]);
        this.updateRenderingBounds();
      },
      undo: ({ fromId }) => {
        if (!this.store.has(fromId)) {
          return;
        }
        this.store.put([{ ...this.getInstanceState(), currentPageId: fromId }]);
        this.updateRenderingBounds();
      },
      squash: ({ fromId }, { toId }) => {
        return { toId, fromId };
      }
    }));
    __publicField(this, "_updatePage", this.history.createCommand("updatePage", (partial, historyOptions) => {
      if (this.getInstanceState().isReadonly)
        return null;
      const prev = this.getPage(partial.id);
      if (!prev)
        return null;
      return { data: { prev, partial }, ...historyOptions };
    }, {
      do: ({ partial }) => {
        this.store.update(partial.id, (page) => ({ ...page, ...partial }));
      },
      undo: ({ prev, partial }) => {
        this.store.update(partial.id, () => prev);
      },
      squash(prevData, nextData) {
        return {
          prev: { ...prevData.prev, ...nextData.prev },
          partial: nextData.partial
        };
      }
    }));
    __publicField(this, "_createPage", this.history.createCommand("createPage", (page) => {
      var _a2;
      if (this.getInstanceState().isReadonly)
        return null;
      if (this.getPages().length >= MAX_PAGES)
        return null;
      const pages = this.getPages();
      const name = getIncrementedName((_a2 = page.name) != null ? _a2 : "Page 1", pages.map((p) => p.name));
      let index2 = page.index;
      if (!index2 || pages.some((p) => p.index === index2)) {
        index2 = getIndexAbove(pages[pages.length - 1].index);
      }
      const newPage = PageRecordType.create({
        meta: {},
        ...page,
        name,
        index: index2
      });
      const newCamera = CameraRecordType.create({
        id: CameraRecordType.createId(newPage.id)
      });
      const newTabPageState = InstancePageStateRecordType.create({
        id: InstancePageStateRecordType.createId(newPage.id),
        pageId: newPage.id
      });
      return {
        data: {
          newPage,
          newTabPageState,
          newCamera
        }
      };
    }, {
      do: ({ newPage, newTabPageState, newCamera }) => {
        this.store.put([newPage, newCamera, newTabPageState]);
      },
      undo: ({ newPage, newTabPageState, newCamera }) => {
        if (this.getPages().length === 1)
          return;
        this.store.remove([newTabPageState.id, newPage.id, newCamera.id]);
      }
    }));
    __publicField(this, "_deletePage", this.history.createCommand("delete_page", (id) => {
      var _a2;
      if (this.getInstanceState().isReadonly)
        return null;
      const pages = this.getPages();
      if (pages.length === 1)
        return null;
      const deletedPage = this.getPage(id);
      const deletedPageStates = this.getPageStates().filter((s) => s.pageId === id);
      if (!deletedPage)
        return null;
      if (id === this.getCurrentPageId()) {
        const index2 = pages.findIndex((page) => page.id === id);
        const next = (_a2 = pages[index2 - 1]) != null ? _a2 : pages[index2 + 1];
        this.setCurrentPage(next.id);
      }
      return { data: { id, deletedPage, deletedPageStates } };
    }, {
      do: ({ deletedPage, deletedPageStates }) => {
        var _a2;
        const pages = this.getPages();
        if (pages.length === 1)
          return;
        if (deletedPage.id === this.getCurrentPageId()) {
          const index2 = pages.findIndex((page) => page.id === deletedPage.id);
          const next = (_a2 = pages[index2 - 1]) != null ? _a2 : pages[index2 + 1];
          this.setCurrentPage(next.id);
        }
        this.store.remove(deletedPageStates.map((s) => s.id));
        this.store.remove([deletedPage.id]);
        this.updateRenderingBounds();
      },
      undo: ({ deletedPage, deletedPageStates }) => {
        this.store.put([deletedPage]);
        this.store.put(deletedPageStates);
        this.updateRenderingBounds();
      }
    }));
    __publicField(this, "_createAssets", this.history.createCommand("createAssets", (assets) => {
      if (this.getInstanceState().isReadonly)
        return null;
      if (assets.length <= 0)
        return null;
      return { data: { assets } };
    }, {
      do: ({ assets }) => {
        this.store.put(assets);
      },
      undo: ({ assets }) => {
        this.store.remove(assets.map((a) => a.id));
      }
    }));
    __publicField(this, "_updateAssets", this.history.createCommand("updateAssets", (assets) => {
      if (this.getInstanceState().isReadonly)
        return;
      if (assets.length <= 0)
        return;
      const snapshots = {};
      return { data: { snapshots, assets } };
    }, {
      do: ({ assets, snapshots }) => {
        this.store.put(assets.map((a) => {
          const asset = this.store.get(a.id);
          snapshots[a.id] = asset;
          return {
            ...asset,
            ...a
          };
        }));
      },
      undo: ({ snapshots }) => {
        this.store.put(Object.values(snapshots));
      }
    }));
    __publicField(this, "_deleteAssets", this.history.createCommand("deleteAssets", (ids) => {
      if (this.getInstanceState().isReadonly)
        return;
      if (ids.length <= 0)
        return;
      const prev = compact(ids.map((id) => this.store.get(id)));
      return { data: { ids, prev } };
    }, {
      do: ({ ids }) => {
        this.store.remove(ids);
      },
      undo: ({ prev }) => {
        this.store.put(prev);
      }
    }));
    __publicField(this, "_parentIdsToChildIds");
    __publicField(this, "_childIdsCache", new WeakMapCache());
    __publicField(this, "_createShapes", this.history.createCommand("createShapes", (partials) => {
      if (this.getInstanceState().isReadonly)
        return null;
      if (partials.length <= 0)
        return null;
      const currentPageShapeIds = this.getCurrentPageShapeIds();
      const maxShapesReached = partials.length + currentPageShapeIds.size > MAX_SHAPES_PER_PAGE;
      if (maxShapesReached) {
        alertMaxShapes(this);
        return;
      }
      if (partials.length === 0)
        return null;
      return {
        data: {
          currentPageId: this.getCurrentPageId(),
          partials: partials.map((p) => p.id ? p : { ...p, id: createShapeId() })
        }
      };
    }, {
      do: ({ partials }) => {
        var _a2, _b2, _c, _d, _e;
        const focusedGroupId = this.getFocusedGroupId();
        const currentPageShapesSorted = this.getCurrentPageShapesSorted();
        partials = partials.map((partial) => {
          var _a3, _b3, _c2, _d2, _e2;
          if (!partial.parentId || !(this.store.has(partial.parentId) || partials.some((p) => p.id === partial.parentId))) {
            let parentId = this.getFocusedGroupId();
            for (let i = currentPageShapesSorted.length - 1; i >= 0; i--) {
              const parent = currentPageShapesSorted[i];
              if (this.getShapeUtil(parent).canReceiveNewChildrenOfType(parent, partial.type) && this.isPointInShape(parent, { x: (_a3 = partial.x) != null ? _a3 : 0, y: (_b3 = partial.y) != null ? _b3 : 0 }, {
                margin: 0,
                hitInside: true
              })) {
                parentId = parent.id;
                break;
              }
            }
            const prevParentId = partial.parentId;
            if (parentId === partial.id) {
              parentId = focusedGroupId;
            }
            if (parentId !== prevParentId) {
              partial = { ...partial };
              partial.parentId = parentId;
              if (isShapeId(parentId)) {
                const point = this.getPointInShapeSpace(this.getShape(parentId), {
                  x: (_c2 = partial.x) != null ? _c2 : 0,
                  y: (_d2 = partial.y) != null ? _d2 : 0
                });
                partial.x = point.x;
                partial.y = point.y;
                partial.rotation = -this.getShapePageTransform(parentId).rotation() + ((_e2 = partial.rotation) != null ? _e2 : 0);
              }
            }
          }
          return partial;
        });
        const parentIndices = /* @__PURE__ */ new Map();
        const shapeRecordsToCreate = [];
        for (const partial of partials) {
          const util = this.getShapeUtil(partial);
          let index2 = partial.index;
          if (!index2) {
            const parentId = (_a2 = partial.parentId) != null ? _a2 : focusedGroupId;
            if (!parentIndices.has(parentId)) {
              parentIndices.set(parentId, this.getHighestIndexForParent(parentId));
            }
            index2 = parentIndices.get(parentId);
            parentIndices.set(parentId, getIndexAbove(index2));
          }
          const initialProps = util.getDefaultProps();
          for (const [style, propKey] of this.styleProps[partial.type]) {
            ;
            initialProps[propKey] = this.getStyleForNextShape(style);
          }
          let shapeRecordToCreate = this.store.schema.types.shape.create({
            ...partial,
            index: index2,
            opacity: (_b2 = partial.opacity) != null ? _b2 : this.getInstanceState().opacityForNextShape,
            parentId: (_c = partial.parentId) != null ? _c : focusedGroupId,
            props: "props" in partial ? { ...initialProps, ...partial.props } : initialProps
          });
          if (shapeRecordToCreate.index === void 0) {
            throw Error("no index!");
          }
          const next = (_e = (_d = this.getShapeUtil(shapeRecordToCreate)).onBeforeCreate) == null ? void 0 : _e.call(_d, shapeRecordToCreate);
          if (next) {
            shapeRecordToCreate = next;
          }
          shapeRecordsToCreate.push(shapeRecordToCreate);
        }
        shapeRecordsToCreate.forEach((shape) => {
          shape.meta = {
            ...this.getInitialMetaForShape(shape),
            ...shape.meta
          };
        });
        this.store.put(shapeRecordsToCreate);
      },
      undo: ({ partials }) => {
        this.store.remove(partials.map((p) => p.id));
      }
    }));
    __publicField(this, "animatingShapes", /* @__PURE__ */ new Map());
    __publicField(this, "_updateShapes", this.history.createCommand("updateShapes", (_partials, historyOptions) => {
      if (this.getInstanceState().isReadonly)
        return null;
      const snapshots = {};
      const updates = {};
      let shape;
      let updated;
      for (let i = 0, n = _partials.length; i < n; i++) {
        const partial = _partials[i];
        if (!partial)
          continue;
        shape = this.getShape(partial.id);
        if (!shape)
          continue;
        updated = applyPartialToShape(shape, partial);
        if (updated === shape)
          continue;
        snapshots[shape.id] = shape;
        updates[shape.id] = updated;
      }
      return { data: { snapshots, updates }, ...historyOptions };
    }, {
      do: ({ updates }) => {
        this.store.put(objectMapValues(updates).map((shape) => {
          var _a2, _b2;
          const current2 = this.store.get(shape.id);
          if (current2) {
            const next = (_b2 = (_a2 = this.getShapeUtil(shape)).onBeforeUpdate) == null ? void 0 : _b2.call(_a2, current2, shape);
            if (next)
              return next;
          }
          return shape;
        }));
      },
      undo: ({ snapshots }) => {
        this.store.put(Object.values(snapshots));
      },
      squash(prevData, nextData) {
        return {
          snapshots: { ...nextData.snapshots, ...prevData.snapshots },
          updates: { ...prevData.updates, ...nextData.updates }
        };
      }
    }));
    __publicField(this, "_deleteShapes", this.history.createCommand("delete_shapes", (ids) => {
      if (this.getInstanceState().isReadonly)
        return null;
      if (ids.length === 0)
        return null;
      const prevSelectedShapeIds = [...this.getCurrentPageState().selectedShapeIds];
      const allIds = new Set(ids);
      for (const id of ids) {
        this.visitDescendants(id, (childId) => {
          allIds.add(childId);
        });
      }
      const deletedIds = [...allIds];
      const arrowBindings = this._getArrowBindingsIndex().get();
      const snapshots = compact(deletedIds.flatMap((id) => {
        const shape = this.getShape(id);
        const bindings = arrowBindings[id];
        if (bindings && bindings.length > 0) {
          return bindings.map(({ arrowId }) => this.getShape(arrowId)).concat(shape);
        }
        return shape;
      }));
      const postSelectedShapeIds = prevSelectedShapeIds.filter((id) => !allIds.has(id));
      return { data: { deletedIds, snapshots, prevSelectedShapeIds, postSelectedShapeIds } };
    }, {
      do: ({ deletedIds, postSelectedShapeIds }) => {
        this.store.remove(deletedIds);
        this.store.update(this.getCurrentPageState().id, (state) => ({
          ...state,
          selectedShapeIds: postSelectedShapeIds
        }));
      },
      undo: ({ snapshots, prevSelectedShapeIds }) => {
        this.store.put(snapshots);
        this.store.update(this.getCurrentPageState().id, (state) => ({
          ...state,
          selectedShapeIds: prevSelectedShapeIds
        }));
      }
    }));
    __publicField(this, "externalAssetContentHandlers", {
      file: null,
      url: null
    });
    __publicField(this, "externalContentHandlers", {
      text: null,
      files: null,
      embed: null,
      "svg-text": null,
      url: null
    });
    __publicField(this, "inputs", {
      originPagePoint: new Vec(),
      originScreenPoint: new Vec(),
      previousPagePoint: new Vec(),
      previousScreenPoint: new Vec(),
      currentPagePoint: new Vec(),
      currentScreenPoint: new Vec(),
      keys: /* @__PURE__ */ new Set(),
      buttons: /* @__PURE__ */ new Set(),
      isPen: false,
      shiftKey: false,
      ctrlKey: false,
      altKey: false,
      isDragging: false,
      isPointing: false,
      isPinching: false,
      isEditing: false,
      isPanning: false,
      pointerVelocity: new Vec()
    });
    __publicField(this, "_clickManager", new ClickManager(this));
    __publicField(this, "_prevCursor", "default");
    __publicField(this, "_shiftKeyTimeout", -1);
    __publicField(this, "_setShiftKeyTimeout", () => {
      this.inputs.shiftKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Shift",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        code: "ShiftLeft"
      });
    });
    __publicField(this, "_altKeyTimeout", -1);
    __publicField(this, "_setAltKeyTimeout", () => {
      this.inputs.altKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Alt",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        code: "AltLeft"
      });
    });
    __publicField(this, "_ctrlKeyTimeout", -1);
    __publicField(this, "_setCtrlKeyTimeout", () => {
      this.inputs.ctrlKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Ctrl",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        code: "ControlLeft"
      });
    });
    __publicField(this, "_restoreToolId", "select");
    __publicField(this, "_pinchStart", 1);
    __publicField(this, "_didPinch", false);
    __publicField(this, "_selectedShapeIdsAtPointerDown", []);
    __publicField(this, "_longPressTimeout", -1);
    __publicField(this, "capturedPointerId", null);
    __publicField(this, "dispatch", (info) => {
      this._pendingEventsForNextTick.push(info);
      if (!(info.type === "pointer" && info.name === "pointer_move" || info.type === "wheel" || info.type === "pinch")) {
        this._flushEventsForTick(0);
      }
      return this;
    });
    __publicField(this, "_pendingEventsForNextTick", []);
    __publicField(this, "_flushEventForTick", (info) => {
      var _a2;
      if (this.getCrashingError())
        return this;
      const { inputs } = this;
      const { type } = info;
      if (info.type === "misc") {
        if (info.name === "cancel" || info.name === "complete") {
          this.inputs.isDragging = false;
          if (this.inputs.isPanning) {
            this.inputs.isPanning = false;
            this.updateInstanceState({
              cursor: {
                type: this._prevCursor,
                rotation: 0
              }
            });
          }
        }
        this.root.handleEvent(info);
        return;
      }
      if (info.shiftKey) {
        clearInterval(this._shiftKeyTimeout);
        this._shiftKeyTimeout = -1;
        inputs.shiftKey = true;
      } else if (!info.shiftKey && inputs.shiftKey && this._shiftKeyTimeout === -1) {
        this._shiftKeyTimeout = setTimeout(this._setShiftKeyTimeout, 150);
      }
      if (info.altKey) {
        clearInterval(this._altKeyTimeout);
        this._altKeyTimeout = -1;
        inputs.altKey = true;
      } else if (!info.altKey && inputs.altKey && this._altKeyTimeout === -1) {
        this._altKeyTimeout = setTimeout(this._setAltKeyTimeout, 150);
      }
      if (info.ctrlKey) {
        clearInterval(this._ctrlKeyTimeout);
        this._ctrlKeyTimeout = -1;
        inputs.ctrlKey = true;
      } else if (!info.ctrlKey && inputs.ctrlKey && this._ctrlKeyTimeout === -1) {
        this._ctrlKeyTimeout = setTimeout(this._setCtrlKeyTimeout, 150);
      }
      const { originPagePoint, originScreenPoint, currentPagePoint, currentScreenPoint } = inputs;
      if (!inputs.isPointing) {
        inputs.isDragging = false;
      }
      switch (type) {
        case "pinch": {
          if (!this.getInstanceState().canMoveCamera)
            return;
          clearTimeout(this._longPressTimeout);
          this._updateInputsFromEvent(info);
          switch (info.name) {
            case "pinch_start": {
              if (inputs.isPinching)
                return;
              if (!inputs.isEditing) {
                this._pinchStart = this.getCamera().z;
                if (!this._selectedShapeIdsAtPointerDown.length) {
                  this._selectedShapeIdsAtPointerDown = this.getSelectedShapeIds();
                }
                this._didPinch = true;
                inputs.isPinching = true;
                this.interrupt();
              }
              return;
            }
            case "pinch": {
              if (!inputs.isPinching)
                return;
              const {
                point: { z = 1 },
                delta: { x: dx, y: dy }
              } = info;
              const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
              const { x, y } = Vec.SubXY(info.point, screenBounds.x, screenBounds.y);
              const { x: cx, y: cy, z: cz } = this.getCamera();
              const zoom = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, z));
              this.stopCameraAnimation();
              if (this.getInstanceState().followingUserId) {
                this.stopFollowingUser();
              }
              this._setCamera({
                x: cx + dx / cz - x / cz + x / zoom,
                y: cy + dy / cz - y / cz + y / zoom,
                z: zoom
              }, true);
              return;
            }
            case "pinch_end": {
              if (!inputs.isPinching)
                return this;
              inputs.isPinching = false;
              const { _selectedShapeIdsAtPointerDown } = this;
              this.setSelectedShapes(this._selectedShapeIdsAtPointerDown, { squashing: true });
              this._selectedShapeIdsAtPointerDown = [];
              if (this._didPinch) {
                this._didPinch = false;
                this.once("tick", () => {
                  if (!this._didPinch) {
                    this.setSelectedShapes(_selectedShapeIdsAtPointerDown, { squashing: true });
                  }
                });
              }
              return;
            }
          }
        }
        case "wheel": {
          if (!this.getInstanceState().canMoveCamera)
            return;
          this._updateInputsFromEvent(info);
          if (this.getIsMenuOpen()) {
          } else {
            this.stopCameraAnimation();
            if (this.getInstanceState().followingUserId) {
              this.stopFollowingUser();
            }
            if (inputs.ctrlKey) {
              const { x, y } = this.inputs.currentScreenPoint;
              const { x: cx2, y: cy2, z: cz2 } = this.getCamera();
              const zoom = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, cz2 + ((_a2 = info.delta.z) != null ? _a2 : 0) * cz2));
              this._setCamera({
                x: cx2 + (x / zoom - x) - (x / cz2 - x),
                y: cy2 + (y / zoom - y) - (y / cz2 - y),
                z: zoom
              }, true);
              return;
            }
            const { x: cx, y: cy, z: cz } = this.getCamera();
            this._setCamera({ x: cx + info.delta.x / cz, y: cy + info.delta.y / cz, z: cz }, true);
            if (!inputs.isDragging && inputs.isPointing && Vec.Dist2(originPagePoint, currentPagePoint) > (this.getInstanceState().isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE) / this.getZoomLevel()) {
              clearTimeout(this._longPressTimeout);
              inputs.isDragging = true;
            }
          }
          break;
        }
        case "pointer": {
          if (inputs.isPinching)
            return;
          this._updateInputsFromEvent(info);
          const { isPen } = info;
          switch (info.name) {
            case "pointer_down": {
              this.clearOpenMenus();
              this._longPressTimeout = setTimeout(() => {
                this.dispatch({ ...info, name: "long_press" });
              }, LONG_PRESS_DURATION);
              this._selectedShapeIdsAtPointerDown = this.getSelectedShapeIds();
              if (info.button === 0) {
                this.capturedPointerId = info.pointerId;
              }
              inputs.buttons.add(info.button);
              inputs.isPointing = true;
              inputs.isDragging = false;
              if (this.getInstanceState().isPenMode) {
                if (!isPen) {
                  return;
                }
              } else {
                if (isPen) {
                  this.updateInstanceState({ isPenMode: true });
                }
              }
              if (info.button === 5) {
                this._restoreToolId = this.getCurrentToolId();
                this.complete();
                this.setCurrentTool("eraser");
              } else if (info.button === 1) {
                if (!this.inputs.isPanning) {
                  this._prevCursor = this.getInstanceState().cursor.type;
                }
                this.inputs.isPanning = true;
              }
              if (this.inputs.isPanning) {
                this.stopCameraAnimation();
                this.setCursor({ type: "grabbing", rotation: 0 });
                return this;
              }
              originScreenPoint.setTo(currentScreenPoint);
              originPagePoint.setTo(currentPagePoint);
              break;
            }
            case "pointer_move": {
              if (!isPen && this.getInstanceState().isPenMode) {
                return;
              }
              if (this.inputs.isPanning && this.inputs.isPointing) {
                clearTimeout(this._longPressTimeout);
                const { currentScreenPoint: currentScreenPoint2, previousScreenPoint } = this.inputs;
                this.pan(Vec.Sub(currentScreenPoint2, previousScreenPoint));
                return;
              }
              if (!inputs.isDragging && inputs.isPointing && Vec.Dist2(originPagePoint, currentPagePoint) > (this.getInstanceState().isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE) / this.getZoomLevel()) {
                clearTimeout(this._longPressTimeout);
                inputs.isDragging = true;
              }
              break;
            }
            case "pointer_up": {
              inputs.buttons.delete(info.button);
              inputs.isPointing = false;
              inputs.isDragging = false;
              if (this.getIsMenuOpen()) {
                return;
              }
              if (!isPen && this.getInstanceState().isPenMode) {
                return;
              }
              if (this.capturedPointerId === info.pointerId) {
                this.capturedPointerId = null;
                info.button = 0;
              }
              if (inputs.isPanning) {
                if (info.button === 1) {
                  if (!this.inputs.keys.has(" ")) {
                    inputs.isPanning = false;
                    this.slideCamera({
                      speed: Math.min(2, this.inputs.pointerVelocity.len()),
                      direction: this.inputs.pointerVelocity,
                      friction: CAMERA_SLIDE_FRICTION
                    });
                    this.setCursor({ type: this._prevCursor, rotation: 0 });
                  } else {
                    this.slideCamera({
                      speed: Math.min(2, this.inputs.pointerVelocity.len()),
                      direction: this.inputs.pointerVelocity,
                      friction: CAMERA_SLIDE_FRICTION
                    });
                    this.setCursor({
                      type: "grab",
                      rotation: 0
                    });
                  }
                } else if (info.button === 0) {
                  this.slideCamera({
                    speed: Math.min(2, this.inputs.pointerVelocity.len()),
                    direction: this.inputs.pointerVelocity,
                    friction: CAMERA_SLIDE_FRICTION
                  });
                  this.setCursor({
                    type: "grab",
                    rotation: 0
                  });
                }
              } else {
                if (info.button === 5) {
                  this.complete();
                  this.setCurrentTool(this._restoreToolId);
                }
              }
              break;
            }
          }
          break;
        }
        case "keyboard": {
          if (info.key === "ShiftRight")
            info.key = "ShiftLeft";
          if (info.key === "AltRight")
            info.key = "AltLeft";
          if (info.code === "ControlRight")
            info.code = "ControlLeft";
          switch (info.name) {
            case "key_down": {
              inputs.keys.add(info.code);
              if (!info.ctrlKey && info.code === "Space") {
                if (!this.inputs.isPanning) {
                  this._prevCursor = this.getInstanceState().cursor.type;
                }
                this.inputs.isPanning = true;
                this.setCursor({ type: this.inputs.isPointing ? "grabbing" : "grab", rotation: 0 });
              }
              break;
            }
            case "key_up": {
              inputs.keys.delete(info.code);
              if (info.code === "Space" && !this.inputs.buttons.has(1)) {
                this.inputs.isPanning = false;
                this.setCursor({ type: this._prevCursor, rotation: 0 });
              }
              break;
            }
            case "key_repeat": {
              break;
            }
          }
          break;
        }
      }
      if (info.type === "pointer") {
        if (info.button === 1) {
          info.name = "middle_click";
        } else if (info.button === 2) {
          info.name = "right_click";
        }
        if (info.isPen === this.getInstanceState().isPenMode) {
          switch (info.name) {
            case "pointer_down": {
              const otherEvent = this._clickManager.transformPointerDownEvent(info);
              if (info.name !== otherEvent.name) {
                this.root.handleEvent(info);
                this.emit("event", info);
                this.root.handleEvent(otherEvent);
                this.emit("event", otherEvent);
                return;
              }
              break;
            }
            case "pointer_up": {
              clearTimeout(this._longPressTimeout);
              const otherEvent = this._clickManager.transformPointerUpEvent(info);
              if (info.name !== otherEvent.name) {
                this.root.handleEvent(info);
                this.emit("event", info);
                this.root.handleEvent(otherEvent);
                this.emit("event", otherEvent);
                return;
              }
              break;
            }
            case "pointer_move": {
              this._clickManager.handleMove();
              break;
            }
          }
        }
      }
      this.root.handleEvent(info);
      this.emit("event", info);
      return this;
    });
    this.store = store2;
    this.snaps = new SnapManager(this);
    this.user = new UserPreferencesManager(user != null ? user : createTLUser(), inferDarkMode != null ? inferDarkMode : false);
    this.getContainer = getContainer != null ? getContainer : () => document.body;
    this.textMeasure = new TextManager(this);
    this._tickManager = new TickManager(this);
    class NewRoot extends RootState {
    }
    __publicField(NewRoot, "initial", initialState2 != null ? initialState2 : "");
    this.root = new NewRoot(this);
    this.root.children = {};
    const allShapeUtils = checkShapesAndAddCore(shapeUtils);
    const _shapeUtils = {};
    const _styleProps = {};
    const allStylesById = /* @__PURE__ */ new Map();
    for (const Util of allShapeUtils) {
      const util = new Util(this);
      _shapeUtils[Util.type] = util;
      const propKeysByStyle = getShapePropKeysByStyle((_a2 = Util.props) != null ? _a2 : {});
      _styleProps[Util.type] = propKeysByStyle;
      for (const style of propKeysByStyle.keys()) {
        if (!allStylesById.has(style.id)) {
          allStylesById.set(style.id, style);
        } else if (allStylesById.get(style.id) !== style) {
          throw Error(`Multiple style props with id "${style.id}" in use. Style prop IDs must be unique.`);
        }
      }
    }
    this.shapeUtils = _shapeUtils;
    this.styleProps = _styleProps;
    for (const Tool of [...tools]) {
      if (hasOwnProperty(this.root.children, Tool.id)) {
        throw Error(`Can't override tool with id "${Tool.id}"`);
      }
      this.root.children[Tool.id] = new Tool(this, this.root);
    }
    this.environment = new EnvironmentManager(this);
    this.scribbles = new ScribbleManager(this);
    const invalidParents = /* @__PURE__ */ new Set();
    const reparentArrow = (arrowId) => {
      var _a3, _b2;
      const arrow4 = this.getShape(arrowId);
      if (!arrow4)
        return;
      const { start, end } = arrow4.props;
      const startShape = start.type === "binding" ? this.getShape(start.boundShapeId) : void 0;
      const endShape = end.type === "binding" ? this.getShape(end.boundShapeId) : void 0;
      const parentPageId = this.getAncestorPageId(arrow4);
      if (!parentPageId)
        return;
      let nextParentId;
      if (startShape && endShape) {
        nextParentId = (_a3 = this.findCommonAncestor([startShape, endShape])) != null ? _a3 : parentPageId;
      } else if (startShape || endShape) {
        const bindingParentId = (_b2 = startShape || endShape) == null ? void 0 : _b2.parentId;
        if (bindingParentId && bindingParentId === arrow4.parentId) {
          nextParentId = arrow4.parentId;
        } else {
          nextParentId = parentPageId;
        }
      } else {
        return;
      }
      if (nextParentId && nextParentId !== arrow4.parentId) {
        this.reparentShapes([arrowId], nextParentId);
      }
      const reparentedArrow = this.getShape(arrowId);
      if (!reparentedArrow)
        throw Error("no reparented arrow");
      const startSibling = this.getShapeNearestSibling(reparentedArrow, startShape);
      const endSibling = this.getShapeNearestSibling(reparentedArrow, endShape);
      let highestSibling;
      if (startSibling && endSibling) {
        highestSibling = startSibling.index > endSibling.index ? startSibling : endSibling;
      } else if (startSibling && !endSibling) {
        highestSibling = startSibling;
      } else if (endSibling && !startSibling) {
        highestSibling = endSibling;
      } else {
        return;
      }
      let finalIndex;
      const higherSiblings = this.getSortedChildIdsForParent(highestSibling.parentId).map((id) => this.getShape(id)).filter((sibling) => sibling.index > highestSibling.index);
      if (higherSiblings.length) {
        const nextHighestNonArrowSibling = higherSiblings.find((sibling) => sibling.type !== "arrow");
        if (reparentedArrow.index > highestSibling.index && (!nextHighestNonArrowSibling || reparentedArrow.index < nextHighestNonArrowSibling.index)) {
          return;
        }
        finalIndex = getIndexBetween(highestSibling.index, higherSiblings[0].index);
      } else {
        finalIndex = getIndexAbove(highestSibling.index);
      }
      if (finalIndex !== reparentedArrow.index) {
        this.updateShapes([{ id: arrowId, type: "arrow", index: finalIndex }]);
      }
    };
    const unbindArrowTerminal = (arrow4, handleId) => {
      const { x, y } = getArrowTerminalsInArrowSpace(this, arrow4)[handleId];
      this.store.put([{ ...arrow4, props: { ...arrow4.props, [handleId]: { type: "point", x, y } } }]);
    };
    const arrowDidUpdate = (arrow4) => {
      for (const handle of ["start", "end"]) {
        const terminal = arrow4.props[handle];
        if (terminal.type !== "binding")
          continue;
        const boundShape = this.getShape(terminal.boundShapeId);
        const isShapeInSamePageAsArrow = this.getAncestorPageId(arrow4) === this.getAncestorPageId(boundShape);
        if (!boundShape || !isShapeInSamePageAsArrow) {
          unbindArrowTerminal(arrow4, handle);
        }
      }
      reparentArrow(arrow4.id);
    };
    const cleanupInstancePageState = (prevPageState, shapesNoLongerInPage) => {
      let nextPageState = null;
      const selectedShapeIds = prevPageState.selectedShapeIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (selectedShapeIds.length !== prevPageState.selectedShapeIds.length) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.selectedShapeIds = selectedShapeIds;
      }
      const erasingShapeIds = prevPageState.erasingShapeIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (erasingShapeIds.length !== prevPageState.erasingShapeIds.length) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.erasingShapeIds = erasingShapeIds;
      }
      if (prevPageState.hoveredShapeId && shapesNoLongerInPage.has(prevPageState.hoveredShapeId)) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.hoveredShapeId = null;
      }
      if (prevPageState.editingShapeId && shapesNoLongerInPage.has(prevPageState.editingShapeId)) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.editingShapeId = null;
      }
      const hintingShapeIds = prevPageState.hintingShapeIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (hintingShapeIds.length !== prevPageState.hintingShapeIds.length) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.hintingShapeIds = hintingShapeIds;
      }
      if (prevPageState.focusedGroupId && shapesNoLongerInPage.has(prevPageState.focusedGroupId)) {
        if (!nextPageState)
          nextPageState = { ...prevPageState };
        nextPageState.focusedGroupId = null;
      }
      return nextPageState;
    };
    this.sideEffects = new SideEffectManager(this);
    this.sideEffects.registerBatchCompleteHandler(() => {
      var _a3;
      for (const parentId of invalidParents) {
        invalidParents.delete(parentId);
        const parent = this.getShape(parentId);
        if (!parent)
          continue;
        const util = this.getShapeUtil(parent);
        const changes = (_a3 = util.onChildrenChange) == null ? void 0 : _a3.call(util, parent);
        if (changes == null ? void 0 : changes.length) {
          this.updateShapes(changes, { squashing: true });
        }
      }
      this.emit("update");
    });
    this.sideEffects.registerBeforeDeleteHandler("shape", (record) => {
      if (record.parentId && isShapeId(record.parentId)) {
        invalidParents.add(record.parentId);
      }
      const bindings = this._getArrowBindingsIndex().get()[record.id];
      if (bindings == null ? void 0 : bindings.length) {
        for (const { arrowId, handleId } of bindings) {
          const arrow4 = this.getShape(arrowId);
          if (!arrow4)
            continue;
          unbindArrowTerminal(arrow4, handleId);
        }
      }
      const deletedIds = /* @__PURE__ */ new Set([record.id]);
      const updates = compact(this.getPageStates().map((pageState) => {
        return cleanupInstancePageState(pageState, deletedIds);
      }));
      if (updates.length) {
        this.store.put(updates);
      }
    });
    this.sideEffects.registerBeforeDeleteHandler("page", (record) => {
      var _a3;
      if (this.getInstanceState().currentPageId !== record.id)
        return;
      const backupPageId = (_a3 = this.getPages().find((p) => p.id !== record.id)) == null ? void 0 : _a3.id;
      if (!backupPageId)
        return;
      this.store.put([{ ...this.getInstanceState(), currentPageId: backupPageId }]);
      const cameraId = CameraRecordType.createId(record.id);
      const instance_PageStateId = InstancePageStateRecordType.createId(record.id);
      this.store.remove([cameraId, instance_PageStateId]);
    });
    this.sideEffects.registerAfterChangeHandler("shape", (prev, next) => {
      if (this.isShapeOfType(next, "arrow")) {
        arrowDidUpdate(next);
      }
      if (prev.parentId !== next.parentId) {
        const reparentBoundArrows = (id) => {
          const boundArrows = this._getArrowBindingsIndex().get()[id];
          if (boundArrows == null ? void 0 : boundArrows.length) {
            for (const arrow4 of boundArrows) {
              reparentArrow(arrow4.arrowId);
            }
          }
        };
        reparentBoundArrows(next.id);
        this.visitDescendants(next.id, reparentBoundArrows);
      }
      if (prev.parentId !== next.parentId && isPageId(next.parentId)) {
        const allMovingIds = /* @__PURE__ */ new Set([prev.id]);
        this.visitDescendants(prev.id, (id) => {
          allMovingIds.add(id);
        });
        for (const instancePageState of this.getPageStates()) {
          if (instancePageState.pageId === next.parentId)
            continue;
          const nextPageState = cleanupInstancePageState(instancePageState, allMovingIds);
          if (nextPageState) {
            this.store.put([nextPageState]);
          }
        }
      }
      if (prev.parentId && isShapeId(prev.parentId)) {
        invalidParents.add(prev.parentId);
      }
      if (next.parentId !== prev.parentId && isShapeId(next.parentId)) {
        invalidParents.add(next.parentId);
      }
    });
    this.sideEffects.registerAfterChangeHandler("instance_page_state", (prev, next) => {
      if ((prev == null ? void 0 : prev.selectedShapeIds) !== (next == null ? void 0 : next.selectedShapeIds)) {
        const filtered = next.selectedShapeIds.filter((id) => {
          var _a3, _b2;
          let parentId = (_a3 = this.getShape(id)) == null ? void 0 : _a3.parentId;
          while (isShapeId(parentId)) {
            if (next.selectedShapeIds.includes(parentId)) {
              return false;
            }
            parentId = (_b2 = this.getShape(parentId)) == null ? void 0 : _b2.parentId;
          }
          return true;
        });
        let nextFocusedGroupId = null;
        if (filtered.length > 0) {
          const commonGroupAncestor = this.findCommonAncestor(compact(filtered.map((id) => this.getShape(id))), (shape) => this.isShapeOfType(shape, "group"));
          if (commonGroupAncestor) {
            nextFocusedGroupId = commonGroupAncestor;
          }
        } else {
          if (next == null ? void 0 : next.focusedGroupId) {
            nextFocusedGroupId = next.focusedGroupId;
          }
        }
        if (filtered.length !== next.selectedShapeIds.length || nextFocusedGroupId !== next.focusedGroupId) {
          this.store.put([
            { ...next, selectedShapeIds: filtered, focusedGroupId: nextFocusedGroupId != null ? nextFocusedGroupId : null }
          ]);
        }
      }
    });
    this.sideEffects.registerAfterCreateHandler("shape", (record) => {
      if (this.isShapeOfType(record, "arrow")) {
        arrowDidUpdate(record);
      }
    });
    this.sideEffects.registerAfterCreateHandler("page", (record) => {
      const cameraId = CameraRecordType.createId(record.id);
      const _pageStateId = InstancePageStateRecordType.createId(record.id);
      if (!this.store.has(cameraId)) {
        this.store.put([CameraRecordType.create({ id: cameraId })]);
      }
      if (!this.store.has(_pageStateId)) {
        this.store.put([
          InstancePageStateRecordType.create({ id: _pageStateId, pageId: record.id })
        ]);
      }
    });
    this._currentPageShapeIds = deriveShapeIdsInCurrentPage(this.store, () => this.getCurrentPageId());
    this._parentIdsToChildIds = parentsToChildren(this.store);
    this.disposables.add(this.store.listen((changes) => {
      this.emit("change", changes);
    }));
    this.store.ensureStoreIsUsable();
    this._setInstancePageState({
      editingShapeId: null,
      hoveredShapeId: null,
      erasingShapeIds: []
    }, { ephemeral: true });
    if (initialState2 && this.root.children[initialState2] === void 0) {
      throw Error(`No state found for initialState "${initialState2}".`);
    }
    this.root.enter(void 0, "initial");
    if (this.getInstanceState().followingUserId) {
      this.stopFollowingUser();
    }
    this.updateRenderingBounds();
    this.on("tick", this._flushEventsForTick);
    requestAnimationFrame(() => {
      this._tickManager.start();
    });
  }
  dispose() {
    this.disposables.forEach((dispose) => dispose());
    this.disposables.clear();
  }
  getShapeUtil(arg) {
    const type = typeof arg === "string" ? arg : arg.type;
    const shapeUtil = getOwnProperty(this.shapeUtils, type);
    assert(shapeUtil, `No shape util found for type "${type}"`);
    return shapeUtil;
  }
  undo() {
    this._flushEventsForTick(0);
    this.history.undo();
    return this;
  }
  getCanUndo() {
    return this.history.getNumUndos() > 0;
  }
  redo() {
    this._flushEventsForTick(0);
    this.history.redo();
    return this;
  }
  getCanRedo() {
    return this.history.getNumRedos() > 0;
  }
  mark(markId, onUndo, onRedo) {
    this.history.mark(markId, onUndo, onRedo);
    return this;
  }
  bail() {
    this.history.bail();
    return this;
  }
  bailToMark(id) {
    this.history.bailToMark(id);
    return this;
  }
  batch(fn) {
    this.history.batch(fn);
    return this;
  }
  _getArrowBindingsIndex() {
    return arrowBindingsIndex(this);
  }
  getArrowsBoundTo(shapeId) {
    return this._getArrowBindingsIndex().get()[shapeId] || EMPTY_ARRAY;
  }
  getArrowInfoCache() {
    return this.store.createComputedCache("arrow infoCache", (shape) => {
      return getIsArrowStraight(shape) ? getStraightArrowInfo(this, shape) : getCurvedArrowInfo(this, shape);
    });
  }
  getArrowInfo(shape) {
    const id = typeof shape === "string" ? shape : shape.id;
    return this.getArrowInfoCache().get(id);
  }
  annotateError(error, {
    origin,
    willCrashApp,
    tags,
    extras
  }) {
    const defaultAnnotations = this.createErrorAnnotations(origin, willCrashApp);
    annotateError(error, {
      tags: { ...defaultAnnotations.tags, ...tags },
      extras: { ...defaultAnnotations.extras, ...extras }
    });
    if (willCrashApp) {
      this.store.markAsPossiblyCorrupted();
    }
    return this;
  }
  createErrorAnnotations(origin, willCrashApp) {
    try {
      const editingShapeId = this.getEditingShapeId();
      return {
        tags: {
          origin,
          willCrashApp
        },
        extras: {
          activeStateNode: this.root.getPath(),
          selectedShapes: this.getSelectedShapes(),
          editingShape: editingShapeId ? this.getShape(editingShapeId) : void 0,
          inputs: this.inputs
        }
      };
    } catch (e) {
      return {
        tags: {
          origin,
          willCrashApp
        },
        extras: {}
      };
    }
  }
  getCrashingError() {
    return this._crashingError;
  }
  crash(error) {
    this._crashingError = error;
    this.store.markAsPossiblyCorrupted();
    this.emit("crash", { error });
    return this;
  }
  getPath() {
    return this.root.getPath().split("root.")[1];
  }
  isIn(path) {
    const ids = path.split(".").reverse();
    let state = this.root;
    while (ids.length > 0) {
      const id = ids.pop();
      if (!id)
        return true;
      const current2 = state.getCurrent();
      if ((current2 == null ? void 0 : current2.id) === id) {
        if (ids.length === 0)
          return true;
        state = current2;
        continue;
      } else
        return false;
    }
    return false;
  }
  isInAny(...paths) {
    return paths.some((path) => this.isIn(path));
  }
  setCurrentTool(id, info = {}) {
    this.root.transition(id, info);
    return this;
  }
  getCurrentTool() {
    return this.root.getCurrent();
  }
  getCurrentToolId() {
    var _a2;
    const currentTool = this.getCurrentTool();
    if (!currentTool)
      return "";
    return (_a2 = currentTool.getCurrentToolIdMask()) != null ? _a2 : currentTool.id;
  }
  getStateDescendant(path) {
    var _a2;
    const ids = path.split(".").reverse();
    let state = this.root;
    while (ids.length > 0) {
      const id = ids.pop();
      if (!id)
        return state;
      const childState = (_a2 = state.children) == null ? void 0 : _a2[id];
      if (!childState)
        return void 0;
      state = childState;
    }
    return state;
  }
  getDocumentSettings() {
    return this.store.get(TLDOCUMENT_ID);
  }
  updateDocumentSettings(settings) {
    this.store.put([{ ...this.getDocumentSettings(), ...settings }]);
    return this;
  }
  getInstanceState() {
    return this.store.get(TLINSTANCE_ID);
  }
  updateInstanceState(partial, historyOptions) {
    this._updateInstanceState(partial, { ephemeral: true, squashing: true, ...historyOptions });
    if (partial.isChangingStyle !== void 0) {
      clearTimeout(this._isChangingStyleTimeout);
      if (partial.isChangingStyle === true) {
        this._isChangingStyleTimeout = setTimeout(() => {
          this.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
        }, 2e3);
      }
    }
    return this;
  }
  getOpenMenus() {
    return this.getInstanceState().openMenus;
  }
  addOpenMenu(id) {
    const menus = new Set(this.getOpenMenus());
    if (!menus.has(id)) {
      menus.add(id);
      this.updateInstanceState({ openMenus: [...menus] });
    }
    return this;
  }
  deleteOpenMenu(id) {
    const menus = new Set(this.getOpenMenus());
    if (menus.has(id)) {
      menus.delete(id);
      this.updateInstanceState({ openMenus: [...menus] });
    }
    return this;
  }
  clearOpenMenus() {
    if (this.getOpenMenus().length) {
      this.updateInstanceState({ openMenus: [] });
    }
    return this;
  }
  getIsMenuOpen() {
    return this.getOpenMenus().length > 0;
  }
  getPageStates() {
    return this._getPageStatesQuery().get();
  }
  _getPageStatesQuery() {
    return this.store.query.records("instance_page_state");
  }
  getCurrentPageState() {
    return this.store.get(this._getCurrentPageStateId());
  }
  _getCurrentPageStateId() {
    return InstancePageStateRecordType.createId(this.getCurrentPageId());
  }
  updateCurrentPageState(partial, historyOptions) {
    this._setInstancePageState(partial, historyOptions);
    return this;
  }
  getSelectedShapeIds() {
    return this.getCurrentPageState().selectedShapeIds;
  }
  getSelectedShapes() {
    const { selectedShapeIds } = this.getCurrentPageState();
    return compact(selectedShapeIds.map((id) => this.store.get(id)));
  }
  setSelectedShapes(shapes, historyOptions) {
    const ids = shapes.map((shape) => typeof shape === "string" ? shape : shape.id);
    this._setSelectedShapes(ids, historyOptions);
    return this;
  }
  select(...shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
    this.setSelectedShapes(ids);
    return this;
  }
  deselect(...shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
    const selectedShapeIds = this.getSelectedShapeIds();
    if (selectedShapeIds.length > 0 && ids.length > 0) {
      this.setSelectedShapes(selectedShapeIds.filter((id) => !ids.includes(id)));
    }
    return this;
  }
  selectAll() {
    const ids = this.getSortedChildIdsForParent(this.getCurrentPageId());
    if (ids.length <= 0)
      return this;
    this.setSelectedShapes(this._getUnlockedShapeIds(ids));
    return this;
  }
  selectNone() {
    if (this.getSelectedShapeIds().length > 0) {
      this.setSelectedShapes([]);
    }
    return this;
  }
  getOnlySelectedShapeId() {
    var _a2, _b2;
    return (_b2 = (_a2 = this.getOnlySelectedShape()) == null ? void 0 : _a2.id) != null ? _b2 : null;
  }
  getOnlySelectedShape() {
    const selectedShapes = this.getSelectedShapes();
    return selectedShapes.length === 1 ? selectedShapes[0] : null;
  }
  getSelectionPageBounds() {
    const selectedShapeIds = this.getCurrentPageState().selectedShapeIds;
    if (selectedShapeIds.length === 0)
      return null;
    return Box.Common(compact(selectedShapeIds.map((id) => this.getShapePageBounds(id))));
  }
  getSelectionRotation() {
    const selectedShapeIds = this.getSelectedShapeIds();
    let foundFirst = false;
    let rotation = 0;
    for (let i = 0, n = selectedShapeIds.length; i < n; i++) {
      const pageTransform = this.getShapePageTransform(selectedShapeIds[i]);
      if (!pageTransform)
        continue;
      if (foundFirst) {
        if (pageTransform.rotation() !== rotation) {
          return 0;
        }
      } else {
        foundFirst = true;
        rotation = pageTransform.rotation();
      }
    }
    return rotation;
  }
  getSelectionRotatedPageBounds() {
    const selectedShapeIds = this.getSelectedShapeIds();
    if (selectedShapeIds.length === 0) {
      return void 0;
    }
    const selectionRotation = this.getSelectionRotation();
    if (selectionRotation === 0) {
      return this.getSelectionPageBounds();
    }
    if (selectedShapeIds.length === 1) {
      const bounds = this.getShapeGeometry(selectedShapeIds[0]).bounds.clone();
      const pageTransform = this.getShapePageTransform(selectedShapeIds[0]);
      bounds.point = pageTransform.applyToPoint(bounds.point);
      return bounds;
    }
    const boxFromRotatedVertices = Box.FromPoints(this.getSelectedShapeIds().flatMap((id) => {
      const pageTransform = this.getShapePageTransform(id);
      if (!pageTransform)
        return [];
      return pageTransform.applyToPoints(this.getShapeGeometry(id).bounds.corners);
    }).map((p) => p.rot(-selectionRotation)));
    boxFromRotatedVertices.point = boxFromRotatedVertices.point.rot(selectionRotation);
    return boxFromRotatedVertices;
  }
  getSelectionRotatedScreenBounds() {
    const bounds = this.getSelectionRotatedPageBounds();
    if (!bounds)
      return void 0;
    const { x, y } = this.pageToScreen(bounds.point);
    const zoom = this.getZoomLevel();
    return new Box(x, y, bounds.width * zoom, bounds.height * zoom);
  }
  getFocusedGroupId() {
    var _a2;
    return (_a2 = this.getCurrentPageState().focusedGroupId) != null ? _a2 : this.getCurrentPageId();
  }
  getFocusedGroup() {
    const focusedGroupId = this.getFocusedGroupId();
    return focusedGroupId ? this.getShape(focusedGroupId) : void 0;
  }
  setFocusedGroup(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : (_a2 = shape == null ? void 0 : shape.id) != null ? _a2 : null;
    if (id !== null) {
      const shape2 = this.getShape(id);
      if (!shape2) {
        throw Error(`Editor.setFocusedGroup: Shape with id ${id} does not exist`);
      }
      if (!this.isShapeOfType(shape2, "group")) {
        throw Error(`Editor.setFocusedGroup: Cannot set focused group to shape of type ${shape2.type}`);
      }
    }
    if (id === this.getFocusedGroupId())
      return this;
    this._setFocusedGroupId(id);
    return this;
  }
  popFocusedGroupId() {
    var _a2;
    const focusedGroup = this.getFocusedGroup();
    if (focusedGroup) {
      const match = this.findShapeAncestor(focusedGroup, (shape) => this.isShapeOfType(shape, "group"));
      this.setFocusedGroup((_a2 = match == null ? void 0 : match.id) != null ? _a2 : null);
      this.select(focusedGroup.id);
    } else {
      this.setFocusedGroup(null);
      this.selectNone();
    }
    return this;
  }
  getEditingShapeId() {
    return this.getCurrentPageState().editingShapeId;
  }
  getEditingShape() {
    const editingShapeId = this.getEditingShapeId();
    return editingShapeId ? this.getShape(editingShapeId) : void 0;
  }
  setEditingShape(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : (_a2 = shape == null ? void 0 : shape.id) != null ? _a2 : null;
    if (id !== this.getEditingShapeId()) {
      if (id) {
        const shape2 = this.getShape(id);
        if (shape2 && this.getShapeUtil(shape2).canEdit(shape2)) {
          this._setInstancePageState({ editingShapeId: id });
          return this;
        }
      }
      this._setInstancePageState({ editingShapeId: null });
    }
    return this;
  }
  getHoveredShapeId() {
    return this.getCurrentPageState().hoveredShapeId;
  }
  getHoveredShape() {
    const hoveredShapeId = this.getHoveredShapeId();
    return hoveredShapeId ? this.getShape(hoveredShapeId) : void 0;
  }
  setHoveredShape(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : (_a2 = shape == null ? void 0 : shape.id) != null ? _a2 : null;
    if (id === this.getHoveredShapeId())
      return this;
    this.updateCurrentPageState({ hoveredShapeId: id }, { ephemeral: true });
    return this;
  }
  getHintingShapeIds() {
    return this.getCurrentPageState().hintingShapeIds;
  }
  getHintingShape() {
    const hintingShapeIds = this.getHintingShapeIds();
    return compact(hintingShapeIds.map((id) => this.getShape(id)));
  }
  setHintingShapes(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
    this.updateCurrentPageState({ hintingShapeIds: dedupe(ids) }, { ephemeral: true });
    return this;
  }
  getErasingShapeIds() {
    return this.getCurrentPageState().erasingShapeIds;
  }
  getErasingShapes() {
    const erasingShapeIds = this.getErasingShapeIds();
    return compact(erasingShapeIds.map((id) => this.getShape(id)));
  }
  setErasingShapes(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
    ids.sort();
    const erasingShapeIds = this.getErasingShapeIds();
    if (ids.length === erasingShapeIds.length) {
      for (let i = 0; i < ids.length; i++) {
        if (ids[i] !== erasingShapeIds[i]) {
          this._setInstancePageState({ erasingShapeIds: ids }, { ephemeral: true });
          break;
        }
      }
    } else {
      this._setInstancePageState({ erasingShapeIds: ids }, { ephemeral: true });
    }
    return this;
  }
  getCroppingShapeId() {
    return this.getCurrentPageState().croppingShapeId;
  }
  setCroppingShape(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : (_a2 = shape == null ? void 0 : shape.id) != null ? _a2 : null;
    if (id !== this.getCroppingShapeId()) {
      if (!id) {
        this.updateCurrentPageState({ croppingShapeId: null });
      } else {
        const shape2 = this.getShape(id);
        const util = this.getShapeUtil(shape2);
        if (shape2 && util.canCrop(shape2)) {
          this.updateCurrentPageState({ croppingShapeId: id });
        }
      }
    }
    return this;
  }
  getCameraId() {
    return CameraRecordType.createId(this.getCurrentPageId());
  }
  getCamera() {
    return this.store.get(this.getCameraId());
  }
  getZoomLevel() {
    return this.getCamera().z;
  }
  _setCamera(point, immediate = false) {
    const currentCamera = this.getCamera();
    if (currentCamera.x === point.x && currentCamera.y === point.y && currentCamera.z === point.z) {
      return this;
    }
    this.batch(() => {
      var _a2;
      const camera = { ...currentCamera, ...point };
      this.store.put([camera]);
      const { currentScreenPoint, currentPagePoint } = this.inputs;
      const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
      if (currentScreenPoint.x / camera.z - camera.x !== currentPagePoint.x || currentScreenPoint.y / camera.z - camera.y !== currentPagePoint.y) {
        const event = {
          type: "pointer",
          target: "canvas",
          name: "pointer_move",
          point: Vec.AddXY(currentScreenPoint, screenBounds.x, screenBounds.y),
          pointerId: INTERNAL_POINTER_IDS.CAMERA_MOVE,
          ctrlKey: this.inputs.ctrlKey,
          altKey: this.inputs.altKey,
          shiftKey: this.inputs.shiftKey,
          button: 0,
          isPen: (_a2 = this.getInstanceState().isPenMode) != null ? _a2 : false
        };
        if (immediate) {
          this._flushEventForTick(event);
        } else {
          this.dispatch(event);
        }
      }
      this._tickCameraState();
    });
    return this;
  }
  setCamera(point, animation) {
    const x = Number.isFinite(point.x) ? point.x : 0;
    const y = Number.isFinite(point.y) ? point.y : 0;
    const z = Number.isFinite(point.z) ? point.z : this.getZoomLevel();
    this.stopCameraAnimation();
    if (this.getInstanceState().followingUserId) {
      this.stopFollowingUser();
    }
    if (animation) {
      const { width, height } = this.getViewportScreenBounds();
      return this._animateToViewport(new Box(-x, -y, width / z, height / z), animation);
    } else {
      this._setCamera({ x, y, z });
    }
    return this;
  }
  centerOnPoint(point, animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const { width: pw, height: ph } = this.getViewportPageBounds();
    this.setCamera({ x: -(point.x - pw / 2), y: -(point.y - ph / 2), z: this.getCamera().z }, animation);
    return this;
  }
  zoomToContent(opts = { duration: 220 }) {
    var _a2;
    const bounds = (_a2 = this.getSelectionPageBounds()) != null ? _a2 : this.getCurrentPageBounds();
    if (bounds) {
      this.zoomToBounds(bounds, { targetZoom: Math.min(1, this.getZoomLevel()), ...opts });
    }
    return this;
  }
  zoomToFit(animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const ids = [...this.getCurrentPageShapeIds()];
    if (ids.length <= 0)
      return this;
    const pageBounds = Box.Common(compact(ids.map((id) => this.getShapePageBounds(id))));
    this.zoomToBounds(pageBounds, animation);
    return this;
  }
  resetZoom(point = this.getViewportScreenCenter(), animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const { x: cx, y: cy, z: cz } = this.getCamera();
    const { x, y } = point;
    this.setCamera({ x: cx + (x / 1 - x) - (x / cz - x), y: cy + (y / 1 - y) - (y / cz - y), z: 1 }, animation);
    return this;
  }
  zoomIn(point = this.getViewportScreenCenter(), animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const { x: cx, y: cy, z: cz } = this.getCamera();
    let zoom = MAX_ZOOM;
    for (let i = 1; i < ZOOMS.length; i++) {
      const z1 = ZOOMS[i - 1];
      const z2 = ZOOMS[i];
      if (z2 - cz <= (z2 - z1) / 2)
        continue;
      zoom = z2;
      break;
    }
    const { x, y } = point;
    this.setCamera({ x: cx + (x / zoom - x) - (x / cz - x), y: cy + (y / zoom - y) - (y / cz - y), z: zoom }, animation);
    return this;
  }
  zoomOut(point = this.getViewportScreenCenter(), animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const { x: cx, y: cy, z: cz } = this.getCamera();
    let zoom = MIN_ZOOM;
    for (let i = ZOOMS.length - 1; i > 0; i--) {
      const z1 = ZOOMS[i - 1];
      const z2 = ZOOMS[i];
      if (z2 - cz >= (z2 - z1) / 2)
        continue;
      zoom = z1;
      break;
    }
    const { x, y } = point;
    this.setCamera({
      x: cx + (x / zoom - x) - (x / cz - x),
      y: cy + (y / zoom - y) - (y / cz - y),
      z: zoom
    }, animation);
    return this;
  }
  zoomToSelection(animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const selectionPageBounds = this.getSelectionPageBounds();
    if (!selectionPageBounds)
      return this;
    this.zoomToBounds(selectionPageBounds, {
      targetZoom: Math.max(1, this.getZoomLevel()),
      ...animation
    });
    return this;
  }
  panZoomIntoView(ids, animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    if (ids.length <= 0)
      return this;
    const selectionBounds = Box.Common(compact(ids.map((id) => this.getShapePageBounds(id))));
    const viewportPageBounds = this.getViewportPageBounds();
    if (viewportPageBounds.h < selectionBounds.h || viewportPageBounds.w < selectionBounds.w) {
      this.zoomToBounds(selectionBounds, { targetZoom: this.getCamera().z, ...animation });
      return this;
    } else {
      const insetViewport = this.getViewportPageBounds().clone().expandBy(-32 / this.getZoomLevel());
      let offsetX = 0;
      let offsetY = 0;
      if (insetViewport.maxY < selectionBounds.maxY) {
        offsetY = insetViewport.maxY - selectionBounds.maxY;
      } else if (insetViewport.minY > selectionBounds.minY) {
        offsetY = insetViewport.minY - selectionBounds.minY;
      } else {
      }
      if (insetViewport.maxX < selectionBounds.maxX) {
        offsetX = insetViewport.maxX - selectionBounds.maxX;
      } else if (insetViewport.minX > selectionBounds.minX) {
        offsetX = insetViewport.minX - selectionBounds.minX;
      } else {
      }
      const camera = this.getCamera();
      this.setCamera({ x: camera.x + offsetX, y: camera.y + offsetY, z: camera.z }, animation);
    }
    return this;
  }
  zoomToBounds(bounds, opts) {
    var _a2;
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const viewportScreenBounds = this.getViewportScreenBounds();
    const inset = (_a2 = opts == null ? void 0 : opts.inset) != null ? _a2 : Math.min(256, viewportScreenBounds.width * 0.28);
    let zoom = clamp(Math.min((viewportScreenBounds.width - inset) / bounds.width, (viewportScreenBounds.height - inset) / bounds.height), MIN_ZOOM, MAX_ZOOM);
    if ((opts == null ? void 0 : opts.targetZoom) !== void 0) {
      zoom = Math.min(opts.targetZoom, zoom);
    }
    this.setCamera({
      x: -bounds.minX + (viewportScreenBounds.width - bounds.width * zoom) / 2 / zoom,
      y: -bounds.minY + (viewportScreenBounds.height - bounds.height * zoom) / 2 / zoom,
      z: zoom
    }, opts);
    return this;
  }
  pan(offset4, animation) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const { x: cx, y: cy, z: cz } = this.getCamera();
    this.setCamera({ x: cx + offset4.x / cz, y: cy + offset4.y / cz, z: cz }, animation);
    this._flushEventsForTick(0);
    return this;
  }
  stopCameraAnimation() {
    this.emit("stop-camera-animation");
    return this;
  }
  _animateViewport(ms) {
    if (!this._viewportAnimation)
      return;
    const cancel = () => {
      this.removeListener("tick", this._animateViewport);
      this.removeListener("stop-camera-animation", cancel);
      this._viewportAnimation = null;
    };
    this.once("stop-camera-animation", cancel);
    this._viewportAnimation.elapsed += ms;
    const { elapsed, easing, duration, start, end } = this._viewportAnimation;
    if (elapsed > duration) {
      this._setCamera({ x: -end.x, y: -end.y, z: this.getViewportScreenBounds().width / end.width });
      cancel();
      return;
    }
    const remaining = duration - elapsed;
    const t2 = easing(1 - remaining / duration);
    const left = start.minX + (end.minX - start.minX) * t2;
    const top = start.minY + (end.minY - start.minY) * t2;
    const right = start.maxX + (end.maxX - start.maxX) * t2;
    this._setCamera({ x: -left, y: -top, z: this.getViewportScreenBounds().width / (right - left) });
  }
  _animateToViewport(targetViewportPage, opts = {}) {
    const { duration = 0, easing = EASINGS.easeInOutCubic } = opts;
    const animationSpeed = this.user.getAnimationSpeed();
    const viewportPageBounds = this.getViewportPageBounds();
    this.stopCameraAnimation();
    if (this.getInstanceState().followingUserId) {
      this.stopFollowingUser();
    }
    if (duration === 0 || animationSpeed === 0) {
      return this._setCamera({
        x: -targetViewportPage.x,
        y: -targetViewportPage.y,
        z: this.getViewportScreenBounds().width / targetViewportPage.width
      });
    }
    this._viewportAnimation = {
      elapsed: 0,
      duration: duration / animationSpeed,
      easing,
      start: viewportPageBounds.clone(),
      end: targetViewportPage.clone()
    };
    this.addListener("tick", this._animateViewport);
    return this;
  }
  slideCamera(opts = {}) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    this.stopCameraAnimation();
    const animationSpeed = this.user.getAnimationSpeed();
    if (animationSpeed === 0)
      return this;
    const { speed, friction, direction, speedThreshold = 0.01 } = opts;
    let currentSpeed = Math.min(speed, 1);
    const cancel = () => {
      this.removeListener("tick", moveCamera);
      this.removeListener("stop-camera-animation", cancel);
    };
    this.once("stop-camera-animation", cancel);
    const moveCamera = (elapsed) => {
      const { x: cx, y: cy, z: cz } = this.getCamera();
      const movementVec = Vec.Mul(direction, currentSpeed * elapsed / cz);
      currentSpeed *= 1 - friction;
      if (currentSpeed < speedThreshold) {
        cancel();
      } else {
        this._setCamera({ x: cx + movementVec.x, y: cy + movementVec.y, z: cz });
      }
    };
    this.addListener("tick", moveCamera);
    return this;
  }
  animateToUser(userId) {
    const presence = this.getCollaborators().find((c) => c.userId === userId);
    if (!presence)
      return this;
    this.batch(() => {
      if (this.getInstanceState().followingUserId !== null) {
        this.stopFollowingUser();
      }
      const isOnSamePage = presence.currentPageId === this.getCurrentPageId();
      if (!isOnSamePage) {
        this.setCurrentPage(presence.currentPageId);
      }
      const options = isOnSamePage ? { duration: 500 } : void 0;
      this.centerOnPoint(presence.cursor, options);
      const { highlightedUserIds } = this.getInstanceState();
      this.updateInstanceState({ highlightedUserIds: [...highlightedUserIds, userId] });
      setTimeout(() => {
        const highlightedUserIds2 = [...this.getInstanceState().highlightedUserIds];
        const index2 = highlightedUserIds2.indexOf(userId);
        if (index2 < 0)
          return;
        highlightedUserIds2.splice(index2, 1);
        this.updateInstanceState({ highlightedUserIds: highlightedUserIds2 });
      }, COLLABORATOR_IDLE_TIMEOUT);
    });
    return this;
  }
  animateToShape(shapeId, opts = DEFAULT_ANIMATION_OPTIONS) {
    if (!this.getInstanceState().canMoveCamera)
      return this;
    const activeArea = this.getViewportScreenBounds().clone().expandBy(-32);
    const viewportAspectRatio = activeArea.width / activeArea.height;
    const shapePageBounds = this.getShapePageBounds(shapeId);
    if (!shapePageBounds)
      return this;
    const shapeAspectRatio = shapePageBounds.width / shapePageBounds.height;
    const targetViewportPage = shapePageBounds.clone();
    const z = shapePageBounds.width / activeArea.width;
    targetViewportPage.width += (activeArea.minX + activeArea.maxX) * z;
    targetViewportPage.height += (activeArea.minY + activeArea.maxY) * z;
    targetViewportPage.x -= activeArea.minX * z;
    targetViewportPage.y -= activeArea.minY * z;
    if (shapeAspectRatio > viewportAspectRatio) {
      targetViewportPage.height = shapePageBounds.width / viewportAspectRatio;
      targetViewportPage.y -= (targetViewportPage.height - shapePageBounds.height) / 2;
    } else {
      targetViewportPage.width = shapePageBounds.height * viewportAspectRatio;
      targetViewportPage.x -= (targetViewportPage.width - shapePageBounds.width) / 2;
    }
    return this._animateToViewport(targetViewportPage, opts);
  }
  updateViewportScreenBounds(screenBounds, center = false) {
    screenBounds.width = Math.max(screenBounds.width, 1);
    screenBounds.height = Math.max(screenBounds.height, 1);
    const insets = [
      screenBounds.minY !== 0,
      document.body.scrollWidth !== screenBounds.maxX,
      document.body.scrollHeight !== screenBounds.maxY,
      screenBounds.minX !== 0
    ];
    const boundsAreEqual = screenBounds.equals(this.getViewportScreenBounds());
    const { _willSetInitialBounds } = this;
    if (boundsAreEqual) {
      this._willSetInitialBounds = false;
    } else {
      if (_willSetInitialBounds) {
        this._willSetInitialBounds = false;
        this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets }, { squashing: true, ephemeral: true });
      } else {
        if (center && !this.getInstanceState().followingUserId) {
          const before = this.getViewportPageCenter();
          this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets }, { squashing: true, ephemeral: true });
          this.centerOnPoint(before);
        } else {
          this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets }, { squashing: true, ephemeral: true });
        }
      }
    }
    this._tickCameraState();
    this.updateRenderingBounds();
    return this;
  }
  getViewportScreenBounds() {
    const { x, y, w, h } = this.getInstanceState().screenBounds;
    return new Box(x, y, w, h);
  }
  getViewportScreenCenter() {
    const viewportScreenBounds = this.getViewportScreenBounds();
    return new Vec(viewportScreenBounds.midX - viewportScreenBounds.minX, viewportScreenBounds.midY - viewportScreenBounds.minY);
  }
  getViewportPageBounds() {
    const { w, h } = this.getViewportScreenBounds();
    const { x: cx, y: cy, z: cz } = this.getCamera();
    return new Box(-cx, -cy, w / cz, h / cz);
  }
  getViewportPageCenter() {
    return this.getViewportPageBounds().center;
  }
  screenToPage(point) {
    var _a2;
    const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
    const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
    return {
      x: (point.x - screenBounds.x) / cz - cx,
      y: (point.y - screenBounds.y) / cz - cy,
      z: (_a2 = point.z) != null ? _a2 : 0.5
    };
  }
  pageToScreen(point) {
    var _a2;
    const screenBounds = this.getViewportScreenBounds();
    const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
    return {
      x: (point.x + cx) * cz + screenBounds.x,
      y: (point.y + cy) * cz + screenBounds.y,
      z: (_a2 = point.z) != null ? _a2 : 0.5
    };
  }
  pageToViewport(point) {
    var _a2;
    const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
    return {
      x: (point.x + cx) * cz,
      y: (point.y + cy) * cz,
      z: (_a2 = point.z) != null ? _a2 : 0.5
    };
  }
  _getCollaboratorsQuery() {
    return this.store.query.records("instance_presence", () => ({
      userId: { neq: this.user.getId() }
    }));
  }
  getCollaborators() {
    const allPresenceRecords = this._getCollaboratorsQuery().get();
    if (!allPresenceRecords.length)
      return EMPTY_ARRAY;
    const userIds = [...new Set(allPresenceRecords.map((c) => c.userId))].sort();
    return userIds.map((id) => {
      const latestPresence = allPresenceRecords.filter((c) => c.userId === id).sort((a, b) => b.lastActivityTimestamp - a.lastActivityTimestamp)[0];
      return latestPresence;
    });
  }
  getCollaboratorsOnCurrentPage() {
    const currentPageId = this.getCurrentPageId();
    return this.getCollaborators().filter((c) => c.currentPageId === currentPageId);
  }
  startFollowingUser(userId) {
    const leaderPresences = this._getCollaboratorsQuery().get().filter((p) => p.userId === userId);
    const thisUserId = this.user.getId();
    if (!thisUserId) {
      console.warn("You should set the userId for the current instance before following a user");
    }
    if (leaderPresences.some((p) => p.followingUserId === thisUserId)) {
      return this;
    }
    transact(() => {
      this.stopFollowingUser();
      this.updateInstanceState({ followingUserId: userId }, { ephemeral: true });
    });
    const cancel = () => {
      this.removeListener("frame", moveTowardsUser);
      this.removeListener("stop-following", cancel);
    };
    let isCaughtUp = false;
    const moveTowardsUser = () => {
      const leaderPresence = [...leaderPresences].sort((a, b) => {
        return a.lastActivityTimestamp - b.lastActivityTimestamp;
      }).pop();
      if (!leaderPresence) {
        this.stopFollowingUser();
        return;
      }
      const isOnSamePage = leaderPresence.currentPageId === this.getCurrentPageId();
      const chaseProportion = isOnSamePage ? FOLLOW_CHASE_PROPORTION : 1;
      if (!isOnSamePage) {
        this.stopFollowingUser();
        this.setCurrentPage(leaderPresence.currentPageId);
        this.startFollowingUser(userId);
        return;
      }
      const { center, width, height } = this.getViewportPageBounds();
      const leaderScreen = Box.From(leaderPresence.screenBounds);
      const leaderWidth = leaderScreen.width / leaderPresence.camera.z;
      const leaderHeight = leaderScreen.height / leaderPresence.camera.z;
      const leaderCenter = new Vec(leaderWidth / 2 - leaderPresence.camera.x, leaderHeight / 2 - leaderPresence.camera.y);
      const isFollowingFollower = leaderPresence.followingUserId === thisUserId;
      const desiredWidth = width + (leaderWidth - width) * chaseProportion;
      const desiredHeight = height + (leaderHeight - height) * chaseProportion;
      const ratio = !isFollowingFollower ? Math.min(width / desiredWidth, height / desiredHeight) : height / desiredHeight;
      const targetZoom = clamp(this.getCamera().z * ratio, MIN_ZOOM, MAX_ZOOM);
      const targetWidth = this.getViewportScreenBounds().w / targetZoom;
      const targetHeight = this.getViewportScreenBounds().h / targetZoom;
      const displacement = leaderCenter.sub(center);
      const targetCenter = Vec.Add(center, Vec.Mul(displacement, chaseProportion));
      const distance = Vec.Sub(targetCenter, center).len();
      const zoomChange = Math.abs(targetZoom - this.getCamera().z);
      if (distance < FOLLOW_CHASE_PAN_SNAP && zoomChange < FOLLOW_CHASE_ZOOM_SNAP) {
        isCaughtUp = true;
        return;
      }
      if (isCaughtUp && distance < FOLLOW_CHASE_PAN_UNSNAP && zoomChange < FOLLOW_CHASE_ZOOM_UNSNAP) {
        return;
      }
      isCaughtUp = false;
      this.stopCameraAnimation();
      this._setCamera({
        x: -(targetCenter.x - targetWidth / 2),
        y: -(targetCenter.y - targetHeight / 2),
        z: targetZoom
      });
    };
    this.once("stop-following", cancel);
    this.addListener("frame", moveTowardsUser);
    return this;
  }
  stopFollowingUser() {
    this.updateInstanceState({ followingUserId: null }, { ephemeral: true });
    this.emit("stop-following");
    return this;
  }
  getCameraState() {
    return this._cameraState.get();
  }
  getUnorderedRenderingShapes(useEditorState) {
    const renderingShapes = [];
    let nextIndex = MAX_SHAPES_PER_PAGE * 2;
    let nextBackgroundIndex = MAX_SHAPES_PER_PAGE;
    const erasingShapeIds = this.getErasingShapeIds();
    const addShapeById = (id, opacity, isAncestorErasing) => {
      const shape = this.getShape(id);
      if (!shape)
        return;
      opacity *= shape.opacity;
      let isShapeErasing = false;
      const util = this.getShapeUtil(shape);
      if (useEditorState) {
        isShapeErasing = !isAncestorErasing && erasingShapeIds.includes(id);
        if (isShapeErasing) {
          opacity *= 0.32;
        }
      }
      renderingShapes.push({
        id,
        shape,
        util,
        index: nextIndex,
        backgroundIndex: nextBackgroundIndex,
        opacity
      });
      nextIndex += 1;
      nextBackgroundIndex += 1;
      const childIds = this.getSortedChildIdsForParent(id);
      if (!childIds.length)
        return;
      let backgroundIndexToRestore = null;
      if (util.providesBackgroundForChildren(shape)) {
        backgroundIndexToRestore = nextBackgroundIndex;
        nextBackgroundIndex = nextIndex;
        nextIndex += MAX_SHAPES_PER_PAGE;
      }
      for (const childId of childIds) {
        addShapeById(childId, opacity, isAncestorErasing || isShapeErasing);
      }
      if (backgroundIndexToRestore !== null) {
        nextBackgroundIndex = backgroundIndexToRestore;
      }
    };
    const pages = useEditorState ? [this.getCurrentPage()] : this.getPages();
    for (const page of pages) {
      for (const childId of this.getSortedChildIdsForParent(page.id)) {
        addShapeById(childId, 1, false);
      }
    }
    return renderingShapes;
  }
  getRenderingShapes() {
    const renderingShapes = this.getUnorderedRenderingShapes(true);
    return renderingShapes.sort(sortById);
  }
  getRenderingBounds() {
    return this._renderingBounds.get();
  }
  updateRenderingBounds() {
    const viewportPageBounds = this.getViewportPageBounds();
    if (viewportPageBounds.equals(this._renderingBounds.__unsafe__getWithoutCapture()))
      return this;
    this._renderingBounds.set(viewportPageBounds.clone());
    return this;
  }
  _getAllPagesQuery() {
    return this.store.query.records("page");
  }
  getPages() {
    return this._getAllPagesQuery().get().sort(sortByIndex);
  }
  getCurrentPage() {
    return this.getPage(this.getCurrentPageId());
  }
  getCurrentPageId() {
    return this.getInstanceState().currentPageId;
  }
  getPage(page) {
    return this.store.get(typeof page === "string" ? page : page.id);
  }
  getCurrentPageShapeIds() {
    return this._currentPageShapeIds.get();
  }
  getCurrentPageShapeIdsSorted() {
    return Array.from(this.getCurrentPageShapeIds()).sort();
  }
  getPageShapeIds(page) {
    const pageId = typeof page === "string" ? page : page.id;
    const result = this.store.query.exec("shape", { parentId: { eq: pageId } });
    return this.getShapeAndDescendantIds(result.map((s) => s.id));
  }
  setCurrentPage(page, historyOptions) {
    const pageId = typeof page === "string" ? page : page.id;
    this._setCurrentPageId(pageId, historyOptions);
    return this;
  }
  updatePage(partial, historyOptions) {
    this._updatePage(partial, historyOptions);
    return this;
  }
  createPage(page) {
    this._createPage(page);
    return this;
  }
  deletePage(page) {
    const id = typeof page === "string" ? page : page.id;
    this._deletePage(id);
    return this;
  }
  duplicatePage(page, createId = PageRecordType.createId()) {
    if (this.getPages().length >= MAX_PAGES)
      return this;
    const id = typeof page === "string" ? page : page.id;
    const freshPage = this.getPage(id);
    if (!freshPage)
      return this;
    const prevCamera = { ...this.getCamera() };
    const content = this.getContentFromCurrentPage(this.getSortedChildIdsForParent(freshPage.id));
    this.batch(() => {
      var _a2;
      const pages = this.getPages();
      const index2 = getIndexBetween(freshPage.index, (_a2 = pages[pages.indexOf(freshPage) + 1]) == null ? void 0 : _a2.index);
      this.createPage({ name: freshPage.name + " Copy", id: createId, index: index2 });
      this.setCurrentPage(createId);
      this.setCamera(prevCamera);
      if (content) {
        return this.putContentOntoCurrentPage(content);
      }
    });
    return this;
  }
  renamePage(page, name, historyOptions) {
    const id = typeof page === "string" ? page : page.id;
    if (this.getInstanceState().isReadonly)
      return this;
    this.updatePage({ id, name }, historyOptions);
    return this;
  }
  _getAllAssetsQuery() {
    return this.store.query.records("asset");
  }
  getAssets() {
    return this._getAllAssetsQuery().get();
  }
  createAssets(assets) {
    this._createAssets(assets);
    return this;
  }
  updateAssets(assets) {
    this._updateAssets(assets);
    return this;
  }
  deleteAssets(assets) {
    const ids = typeof assets[0] === "string" ? assets : assets.map((a) => a.id);
    this._deleteAssets(ids);
    return this;
  }
  getAsset(asset) {
    return this.store.get(typeof asset === "string" ? asset : asset.id);
  }
  _getShapeGeometryCache() {
    return this.store.createComputedCache("bounds", (shape) => this.getShapeUtil(shape).getGeometry(shape), (a, b) => a.props === b.props);
  }
  getShapeGeometry(shape) {
    return this._getShapeGeometryCache().get(typeof shape === "string" ? shape : shape.id);
  }
  _getShapeHandlesCache() {
    return this.store.createComputedCache("handles", (shape) => {
      var _a2, _b2;
      return (_b2 = (_a2 = this.getShapeUtil(shape)).getHandles) == null ? void 0 : _b2.call(_a2, shape);
    });
  }
  getShapeHandles(shape) {
    return this._getShapeHandlesCache().get(typeof shape === "string" ? shape : shape.id);
  }
  getShapeLocalTransform(shape) {
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    if (!freshShape)
      throw Error("Editor.getTransform: shape not found");
    return Mat.Identity().translate(freshShape.x, freshShape.y).rotate(freshShape.rotation);
  }
  _getShapePageTransformCache() {
    return this.store.createComputedCache("pageTransformCache", (shape) => {
      var _a2;
      if (isPageId(shape.parentId)) {
        return this.getShapeLocalTransform(shape);
      }
      const parentTransform = (_a2 = this._getShapePageTransformCache().get(shape.parentId)) != null ? _a2 : Mat.Identity();
      return Mat.Compose(parentTransform, this.getShapeLocalTransform(shape));
    });
  }
  getShapeParentTransform(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    if (!freshShape || isPageId(freshShape.parentId))
      return Mat.Identity();
    return (_a2 = this._getShapePageTransformCache().get(freshShape.parentId)) != null ? _a2 : Mat.Identity();
  }
  getShapePageTransform(shape) {
    var _a2;
    const id = typeof shape === "string" ? shape : shape.id;
    return (_a2 = this._getShapePageTransformCache().get(id)) != null ? _a2 : Mat.Identity();
  }
  _getShapePageBoundsCache() {
    return this.store.createComputedCache("pageBoundsCache", (shape) => {
      const pageTransform = this._getShapePageTransformCache().get(shape.id);
      if (!pageTransform)
        return new Box();
      const result = Box.FromPoints(Mat.applyToPoints(pageTransform, this.getShapeGeometry(shape).vertices));
      return result;
    });
  }
  getShapePageBounds(shape) {
    return this._getShapePageBoundsCache().get(typeof shape === "string" ? shape : shape.id);
  }
  _getShapeClipPathCache() {
    return this.store.createComputedCache("clipPathCache", (shape) => {
      const pageMask = this._getShapeMaskCache().get(shape.id);
      if (!pageMask)
        return void 0;
      if (pageMask.length === 0) {
        return `polygon(0px 0px, 0px 0px, 0px 0px)`;
      }
      const pageTransform = this._getShapePageTransformCache().get(shape.id);
      if (!pageTransform)
        return void 0;
      const localMask = Mat.applyToPoints(Mat.Inverse(pageTransform), pageMask);
      return `polygon(${localMask.map((p) => `${p.x}px ${p.y}px`).join(",")})`;
    });
  }
  getShapeClipPath(shape) {
    return this._getShapeClipPathCache().get(typeof shape === "string" ? shape : shape.id);
  }
  _getShapeMaskCache() {
    return this.store.createComputedCache("pageMaskCache", (shape) => {
      if (isPageId(shape.parentId))
        return void 0;
      const frameAncestors = this.getShapeAncestors(shape.id).filter((shape2) => this.isShapeOfType(shape2, "frame"));
      if (frameAncestors.length === 0)
        return void 0;
      const pageMask = frameAncestors.map((s) => this._getShapePageTransformCache().get(s.id).applyToPoints(this.getShapeGeometry(s).vertices)).reduce((acc, b) => {
        if (!(b && acc))
          return void 0;
        const intersection = intersectPolygonPolygon(acc, b);
        if (intersection) {
          return intersection.map(Vec.Cast);
        }
        return [];
      });
      return pageMask;
    });
  }
  getShapeMask(shape) {
    return this._getShapeMaskCache().get(typeof shape === "string" ? shape : shape.id);
  }
  getShapeMaskedPageBounds(shape) {
    if (typeof shape !== "string")
      shape = shape.id;
    return this._getShapeMaskedPageBoundsCache().get(shape);
  }
  _getShapeMaskedPageBoundsCache() {
    return this.store.createComputedCache("shapeMaskedPageBoundsCache", (shape) => {
      const pageBounds = this._getShapePageBoundsCache().get(shape.id);
      if (!pageBounds)
        return;
      const pageMask = this._getShapeMaskCache().get(shape.id);
      if (pageMask) {
        if (pageMask.length === 0)
          return void 0;
        const { corners } = pageBounds;
        if (corners.every((p, i) => p && Vec.Equals(p, pageMask[i])))
          return pageBounds.clone();
        const intersection = intersectPolygonPolygon(pageMask, corners);
        if (!intersection)
          return;
        return Box.FromPoints(intersection);
      }
      return pageBounds;
    });
  }
  getShapeAncestors(shape, acc = []) {
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    if (!freshShape)
      return acc;
    const parentId = freshShape.parentId;
    if (isPageId(parentId)) {
      acc.reverse();
      return acc;
    }
    const parent = this.store.get(parentId);
    if (!parent)
      return acc;
    acc.push(parent);
    return this.getShapeAncestors(parent, acc);
  }
  findShapeAncestor(shape, predicate) {
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    if (!freshShape)
      return;
    const parentId = freshShape.parentId;
    if (isPageId(parentId))
      return;
    const parent = this.getShape(parentId);
    if (!parent)
      return;
    return predicate(parent) ? parent : this.findShapeAncestor(parent, predicate);
  }
  hasAncestor(shape, ancestorId) {
    const id = typeof shape === "string" ? shape : shape == null ? void 0 : shape.id;
    const freshShape = id && this.getShape(id);
    if (!freshShape)
      return false;
    if (freshShape.parentId === ancestorId)
      return true;
    return this.hasAncestor(this.getShapeParent(freshShape), ancestorId);
  }
  findCommonAncestor(shapes, predicate) {
    var _a2;
    if (shapes.length === 0) {
      return;
    }
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    const freshShapes = compact(ids.map((id) => this.getShape(id)));
    if (freshShapes.length === 1) {
      const parentId = freshShapes[0].parentId;
      if (isPageId(parentId)) {
        return;
      }
      return predicate ? (_a2 = this.findShapeAncestor(freshShapes[0], predicate)) == null ? void 0 : _a2.id : parentId;
    }
    const [nodeA, ...others] = freshShapes;
    let ancestor = this.getShapeParent(nodeA);
    while (ancestor) {
      if (predicate && !predicate(ancestor)) {
        ancestor = this.getShapeParent(ancestor);
        continue;
      }
      if (others.every((shape) => this.hasAncestor(shape, ancestor.id))) {
        return ancestor.id;
      }
      ancestor = this.getShapeParent(ancestor);
    }
    return void 0;
  }
  isShapeOrAncestorLocked(arg) {
    const shape = typeof arg === "string" ? this.getShape(arg) : arg;
    if (shape === void 0)
      return false;
    if (shape.isLocked)
      return true;
    return this.isShapeOrAncestorLocked(this.getShapeParent(shape));
  }
  _notVisibleShapes() {
    return notVisibleShapes(this);
  }
  getCulledShapes() {
    const notVisibleShapes2 = this._notVisibleShapes().get();
    const selectedShapeIds = this.getSelectedShapeIds();
    const editingId = this.getEditingShapeId();
    const culledShapes = new Set(notVisibleShapes2);
    if (editingId) {
      culledShapes.delete(editingId);
    }
    selectedShapeIds.forEach((id) => {
      culledShapes.delete(id);
    });
    return culledShapes;
  }
  getCurrentPageBounds() {
    let commonBounds;
    this.getCurrentPageShapeIdsSorted().forEach((shapeId) => {
      const bounds = this.getShapeMaskedPageBounds(shapeId);
      if (!bounds)
        return;
      if (!commonBounds) {
        commonBounds = bounds.clone();
      } else {
        commonBounds = commonBounds.expand(bounds);
      }
    });
    return commonBounds;
  }
  getSelectedShapeAtPoint(point) {
    const selectedShapeIds = this.getSelectedShapeIds();
    return this.getCurrentPageShapesSorted().filter((shape) => shape.type !== "group" && selectedShapeIds.includes(shape.id)).reverse().find((shape) => this.isPointInShape(shape, point, { hitInside: true, margin: 0 }));
  }
  getShapeAtPoint(point, opts = {}) {
    const zoomLevel = this.getZoomLevel();
    const viewportPageBounds = this.getViewportPageBounds();
    const {
      filter: filter2,
      margin = 0,
      hitLabels = false,
      hitInside = false,
      hitFrameInside = false
    } = opts;
    let inHollowSmallestArea = Infinity;
    let inHollowSmallestAreaHit = null;
    let inMarginClosestToEdgeDistance = Infinity;
    let inMarginClosestToEdgeHit = null;
    const shapesToCheck = (opts.renderingOnly ? this.getCurrentPageRenderingShapesSorted() : this.getCurrentPageShapesSorted()).filter((shape) => {
      if (this.isShapeOfType(shape, "group"))
        return false;
      const pageMask = this.getShapeMask(shape);
      if (pageMask && !pointInPolygon(point, pageMask))
        return false;
      if (filter2)
        return filter2(shape);
      return true;
    });
    for (let i = shapesToCheck.length - 1; i >= 0; i--) {
      const shape = shapesToCheck[i];
      const geometry = this.getShapeGeometry(shape);
      const isGroup = geometry instanceof Group2d;
      const pointInShapeSpace = this.getPointInShapeSpace(shape, point);
      if (this.isShapeOfType(shape, "arrow") || this.isShapeOfType(shape, "geo") && shape.props.fill === "none") {
        if (shape.props.text.trim()) {
          for (const childGeometry of geometry.children) {
            if (childGeometry.isLabel && childGeometry.isPointInBounds(pointInShapeSpace)) {
              return shape;
            }
          }
        }
      }
      if (this.isShapeOfType(shape, "frame")) {
        const distance2 = geometry.distanceToPoint(pointInShapeSpace, hitInside);
        if (Math.abs(distance2) <= margin) {
          return inMarginClosestToEdgeHit || shape;
        }
        if (geometry.hitTestPoint(pointInShapeSpace, 0, true)) {
          return inMarginClosestToEdgeHit || inHollowSmallestAreaHit || (hitFrameInside ? shape : void 0);
        }
        continue;
      }
      let distance;
      if (isGroup) {
        let minDistance = Infinity;
        for (const childGeometry of geometry.children) {
          if (childGeometry.isLabel && !hitLabels)
            continue;
          const tDistance = childGeometry.distanceToPoint(pointInShapeSpace, hitInside);
          if (tDistance < minDistance) {
            minDistance = tDistance;
          }
        }
        distance = minDistance;
      } else {
        if (margin === 0 && (geometry.bounds.w < 1 || geometry.bounds.h < 1)) {
          distance = geometry.distanceToPoint(pointInShapeSpace, hitInside);
        } else {
          if (geometry.bounds.containsPoint(pointInShapeSpace, margin)) {
            distance = geometry.distanceToPoint(pointInShapeSpace, hitInside);
          } else {
            distance = Infinity;
          }
        }
      }
      if (geometry.isClosed) {
        if (distance <= margin) {
          if (geometry.isFilled || isGroup && geometry.children[0].isFilled) {
            return inMarginClosestToEdgeHit || shape;
          } else {
            if (this.getShapePageBounds(shape).contains(viewportPageBounds))
              continue;
            if (Math.abs(distance) < margin) {
              if (Math.abs(distance) < inMarginClosestToEdgeDistance) {
                inMarginClosestToEdgeDistance = Math.abs(distance);
                inMarginClosestToEdgeHit = shape;
              }
            } else if (!inMarginClosestToEdgeHit) {
              const { area } = geometry;
              if (area < inHollowSmallestArea) {
                inHollowSmallestArea = area;
                inHollowSmallestAreaHit = shape;
              }
            }
          }
        }
      } else {
        if (distance < HIT_TEST_MARGIN / zoomLevel) {
          return shape;
        }
      }
    }
    return inMarginClosestToEdgeHit || inHollowSmallestAreaHit || void 0;
  }
  getShapesAtPoint(point, opts = {}) {
    return this.getCurrentPageShapes().filter((shape) => this.isPointInShape(shape, point, opts));
  }
  isPointInShape(shape, point, opts = {}) {
    const { hitInside = false, margin = 0 } = opts;
    const id = typeof shape === "string" ? shape : shape.id;
    const pageMask = this.getShapeMask(id);
    if (pageMask && !pointInPolygon(point, pageMask))
      return false;
    return this.getShapeGeometry(id).hitTestPoint(this.getPointInShapeSpace(shape, point), margin, hitInside);
  }
  getPointInShapeSpace(shape, point) {
    const id = typeof shape === "string" ? shape : shape.id;
    return this._getShapePageTransformCache().get(id).clone().invert().applyToPoint(point);
  }
  getPointInParentSpace(shape, point) {
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    if (!freshShape)
      return new Vec(0, 0);
    if (isPageId(freshShape.parentId))
      return Vec.From(point);
    const parentTransform = this.getShapePageTransform(freshShape.parentId);
    if (!parentTransform)
      return Vec.From(point);
    return parentTransform.clone().invert().applyToPoint(point);
  }
  getCurrentPageShapes() {
    return Array.from(this.getCurrentPageShapeIds(), (id) => this.store.get(id));
  }
  getCurrentPageShapesSorted() {
    const result = [];
    const topLevelShapes = this.getSortedChildIdsForParent(this.getCurrentPageId());
    for (let i = 0, n = topLevelShapes.length; i < n; i++) {
      pushShapeWithDescendants(this, topLevelShapes[i], result);
    }
    return result;
  }
  getCurrentPageRenderingShapesSorted() {
    const culledShapes = this.getCulledShapes();
    return this.getCurrentPageShapesSorted().filter(({ id }) => !culledShapes.has(id));
  }
  isShapeOfType(arg, type) {
    const shape = typeof arg === "string" ? this.getShape(arg) : arg;
    if (!shape)
      return false;
    return shape.type === type;
  }
  getShape(shape) {
    const id = typeof shape === "string" ? shape : shape.id;
    if (!isShapeId(id))
      return void 0;
    return this.store.get(id);
  }
  getShapeParent(shape) {
    const id = typeof shape === "string" ? shape : shape == null ? void 0 : shape.id;
    if (!id)
      return void 0;
    const freshShape = this.getShape(id);
    if (freshShape === void 0 || !isShapeId(freshShape.parentId))
      return void 0;
    return this.store.get(freshShape.parentId);
  }
  getShapeNearestSibling(siblingShape, targetShape) {
    if (!targetShape) {
      return void 0;
    }
    if (targetShape.parentId === siblingShape.parentId) {
      return targetShape;
    }
    const ancestor = this.findShapeAncestor(targetShape, (ancestor2) => ancestor2.parentId === siblingShape.parentId);
    return ancestor;
  }
  isShapeInPage(shape, pageId = this.getCurrentPageId()) {
    const id = typeof shape === "string" ? shape : shape.id;
    const shapeToCheck = this.getShape(id);
    if (!shapeToCheck)
      return false;
    let shapeIsInPage = false;
    if (shapeToCheck.parentId === pageId) {
      shapeIsInPage = true;
    } else {
      let parent = this.getShape(shapeToCheck.parentId);
      isInPageSearch:
        while (parent) {
          if (parent.parentId === pageId) {
            shapeIsInPage = true;
            break isInPageSearch;
          }
          parent = this.getShape(parent.parentId);
        }
    }
    return shapeIsInPage;
  }
  getAncestorPageId(shape) {
    const id = typeof shape === "string" ? shape : shape == null ? void 0 : shape.id;
    const _shape = id && this.getShape(id);
    if (!_shape)
      return void 0;
    if (isPageId(_shape.parentId)) {
      return _shape.parentId;
    } else {
      return this.getAncestorPageId(this.getShape(_shape.parentId));
    }
  }
  reparentShapes(shapes, parentId, insertIndex) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length === 0)
      return this;
    const changes = [];
    const parentTransform = isPageId(parentId) ? Mat.Identity() : this.getShapePageTransform(parentId);
    const parentPageRotation = parentTransform.rotation();
    let indices = [];
    const sibs = compact(this.getSortedChildIdsForParent(parentId).map((id) => this.getShape(id)));
    if (insertIndex) {
      const sibWithInsertIndex = sibs.find((s) => s.index === insertIndex);
      if (sibWithInsertIndex) {
        const sibAbove = sibs[sibs.indexOf(sibWithInsertIndex) + 1];
        if (sibAbove) {
          indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
        } else {
          indices = getIndicesAbove(insertIndex, ids.length);
        }
      } else {
        const sibAbove = sibs.sort(sortByIndex).find((s) => s.index > insertIndex);
        if (sibAbove) {
          indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
        } else {
          indices = getIndicesAbove(insertIndex, ids.length);
        }
      }
    } else {
      const sib = sibs.length && sibs[sibs.length - 1];
      indices = sib ? getIndicesAbove(sib.index, ids.length) : getIndices(ids.length);
    }
    const invertedParentTransform = parentTransform.clone().invert();
    const shapesToReparent = compact(ids.map((id) => this.getShape(id)));
    const lockedShapes = shapesToReparent.filter((shape) => shape.isLocked);
    if (lockedShapes.length) {
      this.updateShapes(lockedShapes.map(({ id, type }) => ({ id, type, isLocked: false })));
    }
    for (let i = 0; i < shapesToReparent.length; i++) {
      const shape = shapesToReparent[i];
      const pageTransform = this.getShapePageTransform(shape);
      if (!pageTransform)
        continue;
      const pagePoint = pageTransform.point();
      if (!pagePoint)
        continue;
      const newPoint = invertedParentTransform.applyToPoint(pagePoint);
      const newRotation = pageTransform.rotation() - parentPageRotation;
      changes.push({
        id: shape.id,
        type: shape.type,
        parentId,
        x: newPoint.x,
        y: newPoint.y,
        rotation: newRotation,
        index: indices[i],
        isLocked: shape.isLocked
      });
    }
    this.updateShapes(changes);
    return this;
  }
  getHighestIndexForParent(parent) {
    const parentId = typeof parent === "string" ? parent : parent.id;
    const children = this._parentIdsToChildIds.get()[parentId];
    if (!children || children.length === 0) {
      return "a1";
    }
    const shape = this.getShape(children[children.length - 1]);
    return getIndexAbove(shape.index);
  }
  getSortedChildIdsForParent(parent) {
    const parentId = typeof parent === "string" ? parent : parent.id;
    const ids = this._parentIdsToChildIds.get()[parentId];
    if (!ids)
      return EMPTY_ARRAY;
    return this._childIdsCache.get(ids, () => ids);
  }
  visitDescendants(parent, visitor) {
    const parentId = typeof parent === "string" ? parent : parent.id;
    const children = this.getSortedChildIdsForParent(parentId);
    for (const id of children) {
      if (visitor(id) === false)
        continue;
      this.visitDescendants(id, visitor);
    }
    return this;
  }
  getShapeAndDescendantIds(ids) {
    const idsToInclude = /* @__PURE__ */ new Set();
    const idsToCheck = [...ids];
    while (idsToCheck.length > 0) {
      const id = idsToCheck.pop();
      if (!id)
        break;
      if (idsToInclude.has(id))
        continue;
      idsToInclude.add(id);
      for (const childId of this.getSortedChildIdsForParent(id)) {
        idsToCheck.push(childId);
      }
    }
    return idsToInclude;
  }
  getDroppingOverShape(point, droppingShapes = []) {
    const currentPageShapesSorted = this.getCurrentPageShapesSorted();
    for (let i = currentPageShapesSorted.length - 1; i >= 0; i--) {
      const shape = currentPageShapesSorted[i];
      if (this.getSelectedShapeIds().includes(shape.id) || !this.getShapeUtil(shape).canDropShapes(shape, droppingShapes) || droppingShapes.find((s) => s.id === shape.id || this.hasAncestor(shape, s.id))) {
        continue;
      }
      const maskedPageBounds = this.getShapeMaskedPageBounds(shape.id);
      if (maskedPageBounds && maskedPageBounds.containsPoint(point) && this.getShapeGeometry(shape).hitTestPoint(this.getPointInShapeSpace(shape, point), 0, true)) {
        return shape;
      }
    }
  }
  getOutermostSelectableShape(shape, filter2) {
    var _a2;
    const id = typeof shape === "string" ? shape : shape.id;
    const freshShape = this.getShape(id);
    let match = freshShape;
    let node = freshShape;
    const focusedGroup = this.getFocusedGroup();
    while (node) {
      if (this.isShapeOfType(node, "group") && (focusedGroup == null ? void 0 : focusedGroup.id) !== node.id && !this.hasAncestor(focusedGroup, node.id) && ((_a2 = filter2 == null ? void 0 : filter2(node)) != null ? _a2 : true)) {
        match = node;
      } else if ((focusedGroup == null ? void 0 : focusedGroup.id) === node.id) {
        break;
      }
      node = this.getShapeParent(node);
    }
    return match;
  }
  rotateShapesBy(shapes, delta) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length <= 0)
      return this;
    const snapshot = getRotationSnapshot({ editor: this });
    if (!snapshot)
      return this;
    applyRotationToSnapshotShapes({ delta, snapshot, editor: this, stage: "one-off" });
    return this;
  }
  getChangesToTranslateShape(initialShape, newShapeCoords) {
    var _a2, _b2, _c, _d, _e, _f;
    let workingShape = initialShape;
    const util = this.getShapeUtil(initialShape);
    workingShape = applyPartialToShape(workingShape, (_b2 = (_a2 = util.onTranslateStart) == null ? void 0 : _a2.call(util, workingShape)) != null ? _b2 : void 0);
    workingShape = applyPartialToShape(workingShape, {
      id: initialShape.id,
      type: initialShape.type,
      x: newShapeCoords.x,
      y: newShapeCoords.y
    });
    workingShape = applyPartialToShape(workingShape, (_d = (_c = util.onTranslate) == null ? void 0 : _c.call(util, initialShape, workingShape)) != null ? _d : void 0);
    workingShape = applyPartialToShape(workingShape, (_f = (_e = util.onTranslateEnd) == null ? void 0 : _e.call(util, initialShape, workingShape)) != null ? _f : void 0);
    return workingShape;
  }
  nudgeShapes(shapes, offset4, historyOptions) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length <= 0)
      return this;
    const changes = [];
    for (const id of ids) {
      const shape = this.getShape(id);
      const localDelta = Vec.From(offset4);
      const parentTransform = this.getShapeParentTransform(shape);
      if (parentTransform)
        localDelta.rot(-parentTransform.rotation());
      changes.push(this.getChangesToTranslateShape(shape, localDelta.add(shape)));
    }
    this.updateShapes(changes, {
      squashing: true,
      ...historyOptions
    });
    return this;
  }
  duplicateShapes(shapes, offset4) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length <= 0)
      return this;
    const initialIds = new Set(ids);
    const idsToCreate = [];
    const idsToCheck = [...ids];
    while (idsToCheck.length > 0) {
      const id = idsToCheck.pop();
      if (!id)
        break;
      idsToCreate.push(id);
      this.getSortedChildIdsForParent(id).forEach((childId) => idsToCheck.push(childId));
    }
    idsToCreate.reverse();
    const idsMap = new Map(idsToCreate.map((id) => [id, createShapeId()]));
    const shapesToCreate = compact(idsToCreate.map((id) => {
      var _a2;
      const shape = this.getShape(id);
      if (!shape) {
        return null;
      }
      const createId = idsMap.get(id);
      let ox = 0;
      let oy = 0;
      if (offset4 && initialIds.has(id)) {
        const parentTransform = this.getShapeParentTransform(shape);
        const vec = new Vec(offset4.x, offset4.y).rot(-parentTransform.rotation());
        ox = vec.x;
        oy = vec.y;
      }
      const parentId = (_a2 = shape.parentId) != null ? _a2 : this.getCurrentPageId();
      const siblings = this.getSortedChildIdsForParent(parentId);
      const currentIndex = siblings.indexOf(shape.id);
      const siblingAboveId = siblings[currentIndex + 1];
      const siblingAbove = siblingAboveId ? this.getShape(siblingAboveId) : null;
      const index2 = siblingAbove ? getIndexBetween(shape.index, siblingAbove.index) : getIndexAbove(shape.index);
      let newShape = structuredClone(shape);
      if (this.isShapeOfType(shape, "arrow") && this.isShapeOfType(newShape, "arrow")) {
        const info = this.getArrowInfo(shape);
        let newStartShapeId = void 0;
        let newEndShapeId = void 0;
        if (shape.props.start.type === "binding") {
          newStartShapeId = idsMap.get(shape.props.start.boundShapeId);
          if (!newStartShapeId) {
            if (info == null ? void 0 : info.isValid) {
              const { x, y } = info.start.point;
              newShape.props.start = {
                type: "point",
                x,
                y
              };
            } else {
              const { start } = getArrowTerminalsInArrowSpace(this, shape);
              newShape.props.start = {
                type: "point",
                x: start.x,
                y: start.y
              };
            }
          }
        }
        if (shape.props.end.type === "binding") {
          newEndShapeId = idsMap.get(shape.props.end.boundShapeId);
          if (!newEndShapeId) {
            if (info == null ? void 0 : info.isValid) {
              const { x, y } = info.end.point;
              newShape.props.end = {
                type: "point",
                x,
                y
              };
            } else {
              const { end } = getArrowTerminalsInArrowSpace(this, shape);
              newShape.props.start = {
                type: "point",
                x: end.x,
                y: end.y
              };
            }
          }
        }
        const infoAfter = getIsArrowStraight(newShape) ? getStraightArrowInfo(this, newShape) : getCurvedArrowInfo(this, newShape);
        if ((info == null ? void 0 : info.isValid) && (infoAfter == null ? void 0 : infoAfter.isValid) && !getIsArrowStraight(shape)) {
          const mpA = Vec.Med(info.start.handle, info.end.handle);
          const distA = Vec.Dist(info.middle, mpA);
          const distB = Vec.Dist(infoAfter.middle, mpA);
          if (newShape.props.bend < 0) {
            newShape.props.bend += distB - distA;
          } else {
            newShape.props.bend -= distB - distA;
          }
        }
        if (newShape.props.start.type === "binding" && newStartShapeId) {
          newShape.props.start.boundShapeId = newStartShapeId;
        }
        if (newShape.props.end.type === "binding" && newEndShapeId) {
          newShape.props.end.boundShapeId = newEndShapeId;
        }
      }
      newShape = { ...newShape, id: createId, x: shape.x + ox, y: shape.y + oy, index: index2 };
      return newShape;
    }));
    shapesToCreate.forEach((shape) => {
      if (isShapeId(shape.parentId)) {
        if (idsMap.has(shape.parentId)) {
          shape.parentId = idsMap.get(shape.parentId);
        }
      }
    });
    this.history.batch(() => {
      const maxShapesReached = shapesToCreate.length + this.getCurrentPageShapeIds().size > MAX_SHAPES_PER_PAGE;
      if (maxShapesReached) {
        alertMaxShapes(this);
      }
      const newShapes = maxShapesReached ? shapesToCreate.slice(0, MAX_SHAPES_PER_PAGE - this.getCurrentPageShapeIds().size) : shapesToCreate;
      const ids2 = newShapes.map((s) => s.id);
      this.createShapes(newShapes);
      this.setSelectedShapes(ids2);
      if (offset4 !== void 0) {
        const selectionPageBounds = this.getSelectionPageBounds();
        const viewportPageBounds = this.getViewportPageBounds();
        if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
          this.centerOnPoint(selectionPageBounds.center, {
            duration: ANIMATION_MEDIUM_MS
          });
        }
      }
    });
    return this;
  }
  moveShapesToPage(shapes, pageId) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length === 0)
      return this;
    if (this.getInstanceState().isReadonly)
      return this;
    const currentPageId = this.getCurrentPageId();
    if (pageId === currentPageId)
      return this;
    if (!this.store.has(pageId))
      return this;
    const content = this.getContentFromCurrentPage(ids);
    if (!content)
      return this;
    if (this.getPageShapeIds(pageId).size + content.shapes.length > MAX_SHAPES_PER_PAGE) {
      alertMaxShapes(this, pageId);
      return this;
    }
    const fromPageZ = this.getCamera().z;
    this.history.batch(() => {
      this.deleteShapes(ids);
      this.setCurrentPage(pageId);
      this.setFocusedGroup(null);
      this.selectNone();
      this.putContentOntoCurrentPage(content, {
        select: true,
        preserveIds: true,
        preservePosition: true
      });
      this.setCamera({ ...this.getCamera(), z: fromPageZ });
      this.centerOnPoint(this.getSelectionRotatedPageBounds().center);
    });
    return this;
  }
  toggleLock(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly || ids.length === 0)
      return this;
    let allLocked = true, allUnlocked = true;
    const shapesToToggle = [];
    for (const id of ids) {
      const shape = this.getShape(id);
      if (shape) {
        shapesToToggle.push(shape);
        if (shape.isLocked) {
          allUnlocked = false;
        } else {
          allLocked = false;
        }
      }
    }
    this.batch(() => {
      if (allUnlocked) {
        this.updateShapes(shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: true })));
        this.setSelectedShapes([]);
      } else if (allLocked) {
        this.updateShapes(shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: false })));
      } else {
        this.updateShapes(shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: true })));
      }
    });
    return this;
  }
  sendToBack(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    const changes = getReorderingShapesChanges(this, "toBack", ids);
    if (changes)
      this.updateShapes(changes);
    return this;
  }
  sendBackward(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    const changes = getReorderingShapesChanges(this, "backward", ids);
    if (changes)
      this.updateShapes(changes);
    return this;
  }
  bringForward(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    const changes = getReorderingShapesChanges(this, "forward", ids);
    if (changes)
      this.updateShapes(changes);
    return this;
  }
  bringToFront(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    const changes = getReorderingShapesChanges(this, "toFront", ids);
    if (changes)
      this.updateShapes(changes);
    return this;
  }
  flipShapes(shapes, operation) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    let shapesToFlip = compact(ids.map((id) => this.getShape(id)));
    if (!shapesToFlip.length)
      return this;
    shapesToFlip = compact(shapesToFlip.map((shape) => {
      if (this.isShapeOfType(shape, "group")) {
        return this.getSortedChildIdsForParent(shape.id).map((id) => this.getShape(id));
      }
      return shape;
    }).flat());
    const scaleOriginPage = Box.Common(compact(shapesToFlip.map((id) => this.getShapePageBounds(id)))).center;
    this.batch(() => {
      for (const shape of shapesToFlip) {
        const bounds = this.getShapeGeometry(shape).bounds;
        const initialPageTransform = this.getShapePageTransform(shape.id);
        if (!initialPageTransform)
          continue;
        this.resizeShape(shape.id, { x: operation === "horizontal" ? -1 : 1, y: operation === "vertical" ? -1 : 1 }, {
          initialBounds: bounds,
          initialPageTransform,
          initialShape: shape,
          mode: "scale_shape",
          scaleOrigin: scaleOriginPage,
          scaleAxisRotation: 0
        });
      }
    });
    return this;
  }
  stackShapes(shapes, operation, gap) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    const shapesToStack = compact(ids.map((id) => this.getShape(id)).filter((shape) => {
      if (!shape)
        return false;
      if (this.isShapeOfType(shape, "arrow")) {
        if (shape.props.start.type === "binding" || shape.props.end.type === "binding") {
          return false;
        }
      }
      return true;
    }));
    const len = shapesToStack.length;
    if (gap === 0 && len < 3 || len < 2)
      return this;
    const pageBounds = Object.fromEntries(shapesToStack.map((shape) => [shape.id, this.getShapePageBounds(shape)]));
    let val;
    let min3;
    let max2;
    let dim;
    if (operation === "horizontal") {
      val = "x";
      min3 = "minX";
      max2 = "maxX";
      dim = "width";
    } else {
      val = "y";
      min3 = "minY";
      max2 = "maxY";
      dim = "height";
    }
    let shapeGap;
    if (gap === 0) {
      const gaps = [];
      shapesToStack.sort((a, b) => pageBounds[a.id][min3] - pageBounds[b.id][min3]);
      for (let i = 0; i < len - 1; i++) {
        const shape = shapesToStack[i];
        const nextShape = shapesToStack[i + 1];
        const bounds = pageBounds[shape.id];
        const nextBounds = pageBounds[nextShape.id];
        const gap2 = nextBounds[min3] - bounds[max2];
        const current2 = gaps.find((g) => g.gap === gap2);
        if (current2) {
          current2.count++;
        } else {
          gaps.push({ gap: gap2, count: 1 });
        }
      }
      let maxCount = 0;
      gaps.forEach((g) => {
        if (g.count > maxCount) {
          maxCount = g.count;
          shapeGap = g.gap;
        }
      });
      if (maxCount === 1) {
        shapeGap = Math.max(0, gaps.reduce((a, c) => a + c.gap * c.count, 0) / (len - 1));
      }
    } else {
      shapeGap = gap;
    }
    const changes = [];
    let v = pageBounds[shapesToStack[0].id][max2];
    shapesToStack.forEach((shape, i) => {
      var _a2, _b2;
      if (i === 0)
        return;
      const delta = { x: 0, y: 0 };
      delta[val] = v + shapeGap - pageBounds[shape.id][val];
      const parent = this.getShapeParent(shape);
      const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).decompose().rotation) : delta;
      const translateStartChanges = (_b2 = (_a2 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a2, shape);
      changes.push(translateStartChanges ? {
        ...translateStartChanges,
        [val]: shape[val] + localDelta[val]
      } : {
        id: shape.id,
        type: shape.type,
        [val]: shape[val] + localDelta[val]
      });
      v += pageBounds[shape.id][dim] + shapeGap;
    });
    this.updateShapes(changes);
    return this;
  }
  packShapes(shapes, gap) {
    var _a2, _b2;
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    if (ids.length < 2)
      return this;
    const shapesToPack = compact(ids.map((id) => this.getShape(id)).filter((shape2) => {
      if (!shape2)
        return false;
      if (this.isShapeOfType(shape2, "arrow")) {
        if (shape2.props.start.type === "binding" || shape2.props.end.type === "binding") {
          return false;
        }
      }
      return true;
    }));
    const shapePageBounds = {};
    const nextShapePageBounds = {};
    let shape, bounds, area = 0;
    for (let i = 0; i < shapesToPack.length; i++) {
      shape = shapesToPack[i];
      bounds = this.getShapePageBounds(shape);
      shapePageBounds[shape.id] = bounds;
      nextShapePageBounds[shape.id] = bounds.clone();
      area += bounds.width * bounds.height;
    }
    const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
    const maxWidth2 = commonBounds.width;
    shapesToPack.sort((a, b) => shapePageBounds[b.id].height - shapePageBounds[a.id].height);
    const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth2);
    const spaces = [new Box(commonBounds.x, commonBounds.y, startWidth, Infinity)];
    let width = 0;
    let height = 0;
    let space;
    let last3;
    for (let i = 0; i < shapesToPack.length; i++) {
      shape = shapesToPack[i];
      bounds = nextShapePageBounds[shape.id];
      for (let i2 = spaces.length - 1; i2 >= 0; i2--) {
        space = spaces[i2];
        if (bounds.width > space.width || bounds.height > space.height)
          continue;
        bounds.x = space.x;
        bounds.y = space.y;
        height = Math.max(height, bounds.maxY);
        width = Math.max(width, bounds.maxX);
        if (bounds.width === space.width && bounds.height === space.height) {
          last3 = spaces.pop();
          if (i2 < spaces.length)
            spaces[i2] = last3;
        } else if (bounds.height === space.height) {
          space.x += bounds.width + gap;
          space.width -= bounds.width + gap;
        } else if (bounds.width === space.width) {
          space.y += bounds.height + gap;
          space.height -= bounds.height + gap;
        } else {
          spaces.push(new Box(space.x + (bounds.width + gap), space.y, space.width - (bounds.width + gap), bounds.height));
          space.y += bounds.height + gap;
          space.height -= bounds.height + gap;
        }
        break;
      }
    }
    const commonAfter = Box.Common(Object.values(nextShapePageBounds));
    const centerDelta = Vec.Sub(commonBounds.center, commonAfter.center);
    let nextBounds;
    const changes = [];
    for (let i = 0; i < shapesToPack.length; i++) {
      shape = shapesToPack[i];
      bounds = shapePageBounds[shape.id];
      nextBounds = nextShapePageBounds[shape.id];
      const delta = Vec.Sub(nextBounds.point, bounds.point).add(centerDelta);
      const parentTransform = this.getShapeParentTransform(shape);
      if (parentTransform)
        delta.rot(-parentTransform.rotation());
      const change = {
        id: shape.id,
        type: shape.type,
        x: shape.x + delta.x,
        y: shape.y + delta.y
      };
      const translateStartChange = (_b2 = (_a2 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a2, {
        ...shape,
        ...change
      });
      if (translateStartChange) {
        changes.push({ ...change, ...translateStartChange });
      } else {
        changes.push(change);
      }
    }
    if (changes.length) {
      this.updateShapes(changes);
    }
    return this;
  }
  alignShapes(shapes, operation) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    if (ids.length < 2)
      return this;
    const shapesToAlign = compact(ids.map((id) => this.getShape(id)));
    const shapePageBounds = Object.fromEntries(shapesToAlign.map((shape) => [shape.id, this.getShapePageBounds(shape)]));
    const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
    const changes = [];
    shapesToAlign.forEach((shape) => {
      const pageBounds = shapePageBounds[shape.id];
      if (!pageBounds)
        return;
      const delta = { x: 0, y: 0 };
      switch (operation) {
        case "top": {
          delta.y = commonBounds.minY - pageBounds.minY;
          break;
        }
        case "center-vertical": {
          delta.y = commonBounds.midY - pageBounds.minY - pageBounds.height / 2;
          break;
        }
        case "bottom": {
          delta.y = commonBounds.maxY - pageBounds.minY - pageBounds.height;
          break;
        }
        case "left": {
          delta.x = commonBounds.minX - pageBounds.minX;
          break;
        }
        case "center-horizontal": {
          delta.x = commonBounds.midX - pageBounds.minX - pageBounds.width / 2;
          break;
        }
        case "right": {
          delta.x = commonBounds.maxX - pageBounds.minX - pageBounds.width;
          break;
        }
      }
      const parent = this.getShapeParent(shape);
      const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).decompose().rotation) : delta;
      changes.push(this.getChangesToTranslateShape(shape, Vec.Add(shape, localDelta)));
    });
    this.updateShapes(changes);
    return this;
  }
  distributeShapes(shapes, operation) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    if (ids.length < 3)
      return this;
    const len = ids.length;
    const shapesToDistribute = compact(ids.map((id) => this.getShape(id)));
    const pageBounds = Object.fromEntries(shapesToDistribute.map((shape) => [shape.id, this.getShapePageBounds(shape)]));
    let val;
    let min3;
    let max2;
    let mid;
    let dim;
    if (operation === "horizontal") {
      val = "x";
      min3 = "minX";
      max2 = "maxX";
      mid = "midX";
      dim = "width";
    } else {
      val = "y";
      min3 = "minY";
      max2 = "maxY";
      mid = "midY";
      dim = "height";
    }
    const changes = [];
    const first = shapesToDistribute.sort((a, b) => pageBounds[a.id][min3] - pageBounds[b.id][min3])[0];
    const last3 = shapesToDistribute.sort((a, b) => pageBounds[b.id][max2] - pageBounds[a.id][max2])[0];
    const midFirst = pageBounds[first.id][mid];
    const step = (pageBounds[last3.id][mid] - midFirst) / (len - 1);
    const v = midFirst + step;
    shapesToDistribute.filter((shape) => shape !== first && shape !== last3).sort((a, b) => pageBounds[a.id][mid] - pageBounds[b.id][mid]).forEach((shape, i) => {
      const delta = { x: 0, y: 0 };
      delta[val] = v + step * i - pageBounds[shape.id][dim] / 2 - pageBounds[shape.id][val];
      const parent = this.getShapeParent(shape);
      const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).rotation()) : delta;
      changes.push(this.getChangesToTranslateShape(shape, Vec.Add(shape, localDelta)));
    });
    this.updateShapes(changes);
    return this;
  }
  stretchShapes(shapes, operation) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    if (ids.length < 2)
      return this;
    const shapesToStretch = compact(ids.map((id) => this.getShape(id)));
    const shapeBounds = Object.fromEntries(ids.map((id) => [id, this.getShapeGeometry(id).bounds]));
    const shapePageBounds = Object.fromEntries(ids.map((id) => [id, this.getShapePageBounds(id)]));
    const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
    switch (operation) {
      case "vertical": {
        this.batch(() => {
          for (const shape of shapesToStretch) {
            const pageRotation = this.getShapePageTransform(shape).rotation();
            if (pageRotation % PI2)
              continue;
            const bounds = shapeBounds[shape.id];
            const pageBounds = shapePageBounds[shape.id];
            const localOffset = new Vec(0, commonBounds.minY - pageBounds.minY);
            const parentTransform = this.getShapeParentTransform(shape);
            if (parentTransform)
              localOffset.rot(-parentTransform.rotation());
            const { x, y } = Vec.Add(localOffset, shape);
            this.updateShapes([{ id: shape.id, type: shape.type, x, y }], { squashing: true });
            const scale = new Vec(1, commonBounds.height / pageBounds.height);
            this.resizeShape(shape.id, scale, {
              initialBounds: bounds,
              scaleOrigin: new Vec(pageBounds.center.x, commonBounds.minY),
              scaleAxisRotation: 0
            });
          }
        });
        break;
      }
      case "horizontal": {
        this.batch(() => {
          for (const shape of shapesToStretch) {
            const bounds = shapeBounds[shape.id];
            const pageBounds = shapePageBounds[shape.id];
            const pageRotation = this.getShapePageTransform(shape).rotation();
            if (pageRotation % PI2)
              continue;
            const localOffset = new Vec(commonBounds.minX - pageBounds.minX, 0);
            const parentTransform = this.getShapeParentTransform(shape);
            if (parentTransform)
              localOffset.rot(-parentTransform.rotation());
            const { x, y } = Vec.Add(localOffset, shape);
            this.updateShapes([{ id: shape.id, type: shape.type, x, y }], { squashing: true });
            const scale = new Vec(commonBounds.width / pageBounds.width, 1);
            this.resizeShape(shape.id, scale, {
              initialBounds: bounds,
              scaleOrigin: new Vec(commonBounds.minX, pageBounds.center.y),
              scaleAxisRotation: 0
            });
          }
        });
        break;
      }
    }
    return this;
  }
  resizeShape(shape, scale, options = {}) {
    var _a2, _b2, _c, _d, _e, _f, _g;
    const id = typeof shape === "string" ? shape : shape.id;
    if (this.getInstanceState().isReadonly)
      return this;
    if (!Number.isFinite(scale.x))
      scale = new Vec(1, scale.y);
    if (!Number.isFinite(scale.y))
      scale = new Vec(scale.x, 1);
    const initialShape = (_a2 = options.initialShape) != null ? _a2 : this.getShape(id);
    if (!initialShape)
      return this;
    const scaleOrigin = (_c = options.scaleOrigin) != null ? _c : (_b2 = this.getShapePageBounds(id)) == null ? void 0 : _b2.center;
    if (!scaleOrigin)
      return this;
    const pageTransform = options.initialPageTransform ? Mat.Cast(options.initialPageTransform) : this.getShapePageTransform(id);
    if (!pageTransform)
      return this;
    const pageRotation = pageTransform.rotation();
    if (pageRotation == null)
      return this;
    const scaleAxisRotation = (_d = options.scaleAxisRotation) != null ? _d : pageRotation;
    const initialBounds = (_e = options.initialBounds) != null ? _e : this.getShapeGeometry(id).bounds;
    if (!initialBounds)
      return this;
    if (!areAnglesCompatible(pageRotation, scaleAxisRotation)) {
      return this._resizeUnalignedShape(id, scale, {
        ...options,
        initialBounds,
        scaleOrigin,
        scaleAxisRotation,
        initialPageTransform: pageTransform,
        initialShape
      });
    }
    const util = this.getShapeUtil(initialShape);
    if (util.isAspectRatioLocked(initialShape)) {
      if (Math.abs(scale.x) > Math.abs(scale.y)) {
        scale = new Vec(scale.x, Math.sign(scale.y) * Math.abs(scale.x));
      } else {
        scale = new Vec(Math.sign(scale.x) * Math.abs(scale.y), scale.y);
      }
    }
    if (util.onResize && util.canResize(initialShape)) {
      const newPagePoint = this._scalePagePoint(Mat.applyToPoint(pageTransform, new Vec(0, 0)), scaleOrigin, scale, scaleAxisRotation);
      const newLocalPoint = this.getPointInParentSpace(initialShape.id, newPagePoint);
      const myScale = new Vec(scale.x, scale.y);
      const areWidthAndHeightAlignedWithCorrectAxis = approximately((pageRotation - scaleAxisRotation) % Math.PI, 0);
      myScale.x = areWidthAndHeightAlignedWithCorrectAxis ? scale.x : scale.y;
      myScale.y = areWidthAndHeightAlignedWithCorrectAxis ? scale.y : scale.x;
      const initialPagePoint = Mat.applyToPoint(pageTransform, new Vec());
      const { x, y } = this.getPointInParentSpace(initialShape.id, initialPagePoint);
      this.updateShapes([
        {
          id,
          type: initialShape.type,
          x: newLocalPoint.x,
          y: newLocalPoint.y,
          ...util.onResize({ ...initialShape, x, y }, {
            newPoint: newLocalPoint,
            handle: (_f = options.dragHandle) != null ? _f : "bottom_right",
            mode: (_g = options.mode) != null ? _g : "scale_shape",
            scaleX: myScale.x,
            scaleY: myScale.y,
            initialBounds,
            initialShape
          })
        }
      ], { squashing: true });
    } else {
      const initialPageCenter = Mat.applyToPoint(pageTransform, initialBounds.center);
      const newPageCenter = this._scalePagePoint(initialPageCenter, scaleOrigin, scale, scaleAxisRotation);
      const initialPageCenterInParentSpace = this.getPointInParentSpace(initialShape.id, initialPageCenter);
      const newPageCenterInParentSpace = this.getPointInParentSpace(initialShape.id, newPageCenter);
      const delta = Vec.Sub(newPageCenterInParentSpace, initialPageCenterInParentSpace);
      this.updateShapes([
        {
          id,
          type: initialShape.type,
          x: initialShape.x + delta.x,
          y: initialShape.y + delta.y
        }
      ], { squashing: true });
    }
    return this;
  }
  _scalePagePoint(point, scaleOrigin, scale, scaleAxisRotation) {
    const relativePoint = Vec.RotWith(point, scaleOrigin, -scaleAxisRotation).sub(scaleOrigin);
    const newRelativePagePoint = Vec.MulV(relativePoint, scale);
    const destination = Vec.Add(newRelativePagePoint, scaleOrigin).rotWith(scaleOrigin, scaleAxisRotation);
    return destination;
  }
  _resizeUnalignedShape(id, scale, options) {
    const { type } = options.initialShape;
    const shapeScale = new Vec(scale.x, scale.y);
    if (Math.abs(scale.x) > Math.abs(scale.y)) {
      shapeScale.x = Math.sign(scale.x) * Math.abs(scale.y);
    } else {
      shapeScale.y = Math.sign(scale.y) * Math.abs(scale.x);
    }
    this.resizeShape(id, shapeScale, {
      initialShape: options.initialShape,
      initialBounds: options.initialBounds
    });
    if (Math.sign(scale.x) * Math.sign(scale.y) < 0) {
      let { rotation } = Mat.Decompose(options.initialPageTransform);
      rotation -= 2 * rotation;
      this.updateShapes([{ id, type, rotation }], { squashing: true });
    }
    const preScaleShapePageCenter = Mat.applyToPoint(options.initialPageTransform, options.initialBounds.center);
    const postScaleShapePageCenter = this._scalePagePoint(preScaleShapePageCenter, options.scaleOrigin, scale, options.scaleAxisRotation);
    const pageBounds = this.getShapePageBounds(id);
    const pageTransform = this.getShapePageTransform(id);
    const currentPageCenter = pageBounds.center;
    const shapePageTransformOrigin = pageTransform.point();
    if (!currentPageCenter || !shapePageTransformOrigin)
      return this;
    const pageDelta = Vec.Sub(postScaleShapePageCenter, currentPageCenter);
    const postScaleShapePagePoint = Vec.Add(shapePageTransformOrigin, pageDelta);
    const { x, y } = this.getPointInParentSpace(id, postScaleShapePagePoint);
    this.updateShapes([{ id, type, x, y }], { squashing: true });
    return this;
  }
  getInitialMetaForShape(_shape) {
    return {};
  }
  createShape(shape) {
    this._createShapes([shape]);
    return this;
  }
  createShapes(shapes) {
    if (!Array.isArray(shapes)) {
      throw Error("Editor.createShapes: must provide an array of shapes or shape partials");
    }
    this._createShapes(shapes);
    return this;
  }
  animateShape(partial, animationOptions) {
    return this.animateShapes([partial], animationOptions);
  }
  animateShapes(partials, animationOptions = {}) {
    const { duration = 500, easing = EASINGS.linear } = animationOptions;
    const animationId = uniqueId();
    let remaining = duration;
    let t2;
    const animations = [];
    let partial, result;
    for (let i = 0, n = partials.length; i < n; i++) {
      partial = partials[i];
      if (!partial)
        continue;
      result = {
        partial,
        values: []
      };
      const shape = this.getShape(partial.id);
      if (!shape)
        continue;
      for (const key of ["x", "y", "rotation"]) {
        if (partial[key] !== void 0 && shape[key] !== partial[key]) {
          result.values.push({ prop: key, from: shape[key], to: partial[key] });
        }
      }
      animations.push(result);
      this.animatingShapes.set(shape.id, animationId);
    }
    let value;
    const handleTick = (elapsed) => {
      remaining -= elapsed;
      if (remaining < 0) {
        const { animatingShapes: animatingShapes2 } = this;
        const partialsToUpdate = partials.filter((p) => p && animatingShapes2.get(p.id) === animationId);
        if (partialsToUpdate.length) {
          this.updateShapes(partialsToUpdate, { squashing: false });
        }
        this.removeListener("tick", handleTick);
        return;
      }
      t2 = easing(1 - remaining / duration);
      const { animatingShapes } = this;
      const updates = [];
      let animationIdForShape;
      for (let i = 0, n = animations.length; i < n; i++) {
        value = animations[i];
        animationIdForShape = animatingShapes.get(value.partial.id);
        if (animationIdForShape !== animationId)
          continue;
        updates.push({
          id: value.partial.id,
          type: value.partial.type,
          ...value.values.reduce((acc, { prop, from, to }) => {
            acc[prop] = from + (to - from) * t2;
            return acc;
          }, {})
        });
      }
      this._updateShapes(updates, { squashing: true });
    };
    this.addListener("tick", handleTick);
    return this;
  }
  groupShapes(shapes, groupId = createShapeId()) {
    var _a2, _b2;
    if (!Array.isArray(shapes)) {
      throw Error("Editor.groupShapes: must provide an array of shapes or shape ids");
    }
    if (this.getInstanceState().isReadonly)
      return this;
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (ids.length <= 1)
      return this;
    const shapesToGroup = compact(this._getUnlockedShapeIds(ids).map((id) => this.getShape(id)));
    const sortedShapeIds = shapesToGroup.sort(sortByIndex).map((s) => s.id);
    const pageBounds = Box.Common(compact(shapesToGroup.map((id) => this.getShapePageBounds(id))));
    const { x, y } = pageBounds.point;
    const parentId = (_a2 = this.findCommonAncestor(shapesToGroup)) != null ? _a2 : this.getCurrentPageId();
    if (this.getCurrentToolId() !== "select")
      return this;
    if (!this.isIn("select.idle")) {
      this.cancel();
    }
    const shapesWithRootParent = shapesToGroup.filter((shape) => shape.parentId === parentId).sort(sortByIndex);
    const highestIndex = (_b2 = shapesWithRootParent[shapesWithRootParent.length - 1]) == null ? void 0 : _b2.index;
    this.batch(() => {
      this.createShapes([
        {
          id: groupId,
          type: "group",
          parentId,
          index: highestIndex,
          x,
          y,
          opacity: 1,
          props: {}
        }
      ]);
      this.reparentShapes(sortedShapeIds, groupId);
      this.select(groupId);
    });
    return this;
  }
  ungroupShapes(_ids) {
    const ids = typeof _ids[0] === "string" ? _ids : _ids.map((s) => s.id);
    if (this.getInstanceState().isReadonly)
      return this;
    if (ids.length === 0)
      return this;
    if (this.getCurrentToolId() !== "select")
      return this;
    if (!this.isIn("select.idle")) {
      this.cancel();
    }
    const idsToSelect = /* @__PURE__ */ new Set();
    const shapes = compact(ids.map((id) => this.getShape(id)));
    const groups = [];
    shapes.forEach((shape) => {
      if (this.isShapeOfType(shape, "group")) {
        groups.push(shape);
      } else {
        idsToSelect.add(shape.id);
      }
    });
    if (groups.length === 0)
      return this;
    this.batch(() => {
      let group;
      for (let i = 0, n = groups.length; i < n; i++) {
        group = groups[i];
        const childIds = this.getSortedChildIdsForParent(group.id);
        for (let j = 0, n2 = childIds.length; j < n2; j++) {
          idsToSelect.add(childIds[j]);
        }
        this.reparentShapes(childIds, group.parentId, group.index);
      }
      this.deleteShapes(groups.map((group2) => group2.id));
      this.select(...idsToSelect);
    });
    return this;
  }
  updateShape(partial, historyOptions) {
    this.updateShapes([partial], historyOptions);
    return this;
  }
  updateShapes(partials, historyOptions) {
    const compactedPartials = Array(partials.length);
    for (let i = 0, n = partials.length; i < n; i++) {
      const partial = partials[i];
      if (!partial)
        continue;
      const shape = this.getShape(partial.id);
      if (!shape)
        continue;
      if (this.isShapeOrAncestorLocked(shape) && !Object.hasOwn(partial, "isLocked"))
        continue;
      this.animatingShapes.delete(partial.id);
      compactedPartials.push(partial);
    }
    this._updateShapes(compactedPartials, historyOptions);
    return this;
  }
  _getUnlockedShapeIds(ids) {
    return ids.filter((id) => {
      var _a2;
      return !((_a2 = this.getShape(id)) == null ? void 0 : _a2.isLocked);
    });
  }
  deleteShapes(_ids) {
    if (!Array.isArray(_ids)) {
      throw Error("Editor.deleteShapes: must provide an array of shapes or shapeIds");
    }
    this._deleteShapes(this._getUnlockedShapeIds(typeof _ids[0] === "string" ? _ids : _ids.map((s) => s.id)));
    return this;
  }
  deleteShape(_id) {
    this.deleteShapes([typeof _id === "string" ? _id : _id.id]);
    return this;
  }
  _extractSharedStyles(shape, sharedStyleMap) {
    if (this.isShapeOfType(shape, "group")) {
      const childIds = this._parentIdsToChildIds.get()[shape.id];
      if (!childIds)
        return;
      for (let i = 0, n = childIds.length; i < n; i++) {
        this._extractSharedStyles(this.getShape(childIds[i]), sharedStyleMap);
      }
    } else {
      for (const [style, propKey] of this.styleProps[shape.type]) {
        sharedStyleMap.applyValue(style, getOwnProperty(shape.props, propKey));
      }
    }
  }
  _getSelectionSharedStyles() {
    const selectedShapes = this.getSelectedShapes();
    const sharedStyles = new SharedStyleMap();
    for (const selectedShape of selectedShapes) {
      this._extractSharedStyles(selectedShape, sharedStyles);
    }
    return sharedStyles;
  }
  getStyleForNextShape(style) {
    const value = this.getInstanceState().stylesForNextShape[style.id];
    return value === void 0 ? style.defaultValue : value;
  }
  getShapeStyleIfExists(shape, style) {
    const styleKey = this.styleProps[shape.type].get(style);
    if (styleKey === void 0)
      return void 0;
    return getOwnProperty(shape.props, styleKey);
  }
  getSharedStyles() {
    if (this.isIn("select") && this.getSelectedShapeIds().length > 0) {
      return this._getSelectionSharedStyles();
    }
    const currentTool = this.root.getCurrent();
    const styles = new SharedStyleMap();
    if (!currentTool)
      return styles;
    if (currentTool.shapeType) {
      for (const style of this.styleProps[currentTool.shapeType].keys()) {
        styles.applyValue(style, this.getStyleForNextShape(style));
      }
    }
    return styles;
  }
  getSharedOpacity() {
    if (this.isIn("select") && this.getSelectedShapeIds().length > 0) {
      const shapesToCheck = [];
      const addShape = (shapeId) => {
        const shape = this.getShape(shapeId);
        if (!shape)
          return;
        if (this.isShapeOfType(shape, "group")) {
          for (const childId of this.getSortedChildIdsForParent(shape.id)) {
            addShape(childId);
          }
        } else {
          shapesToCheck.push(shape);
        }
      };
      for (const shapeId of this.getSelectedShapeIds()) {
        addShape(shapeId);
      }
      let opacity = null;
      for (const shape of shapesToCheck) {
        if (opacity === null) {
          opacity = shape.opacity;
        } else if (opacity !== shape.opacity) {
          return { type: "mixed" };
        }
      }
      if (opacity !== null)
        return { type: "shared", value: opacity };
    }
    return { type: "shared", value: this.getInstanceState().opacityForNextShape };
  }
  setOpacityForNextShapes(opacity, historyOptions) {
    this.updateInstanceState({ opacityForNextShape: opacity }, historyOptions);
    return this;
  }
  setOpacityForSelectedShapes(opacity, historyOptions) {
    const selectedShapes = this.getSelectedShapes();
    if (selectedShapes.length > 0) {
      const shapesToUpdate = [];
      const addShapeById = (shape) => {
        if (this.isShapeOfType(shape, "group")) {
          const childIds = this.getSortedChildIdsForParent(shape);
          for (const childId of childIds) {
            addShapeById(this.getShape(childId));
          }
        } else {
          shapesToUpdate.push(shape);
        }
      };
      for (const id of selectedShapes) {
        addShapeById(id);
      }
      this.updateShapes(shapesToUpdate.map((shape) => {
        return {
          id: shape.id,
          type: shape.type,
          opacity
        };
      }), historyOptions);
    }
    return this;
  }
  setStyleForNextShapes(style, value, historyOptions) {
    const stylesForNextShape = this.getInstanceState().stylesForNextShape;
    this.updateInstanceState({ stylesForNextShape: { ...stylesForNextShape, [style.id]: value } }, historyOptions);
    return this;
  }
  setStyleForSelectedShapes(style, value, historyOptions) {
    const selectedShapes = this.getSelectedShapes();
    if (selectedShapes.length > 0) {
      const updates = [];
      const addShapeById = (shape) => {
        if (this.isShapeOfType(shape, "group")) {
          const childIds = this.getSortedChildIdsForParent(shape.id);
          for (const childId of childIds) {
            addShapeById(this.getShape(childId));
          }
        } else {
          const util = this.getShapeUtil(shape);
          const stylePropKey = this.styleProps[shape.type].get(style);
          if (stylePropKey) {
            const shapePartial = {
              id: shape.id,
              type: shape.type,
              props: { [stylePropKey]: value }
            };
            updates.push({
              util,
              originalShape: shape,
              updatePartial: shapePartial
            });
          }
        }
      };
      for (const shape of selectedShapes) {
        addShapeById(shape);
      }
      this.updateShapes(updates.map(({ updatePartial }) => updatePartial), historyOptions);
    }
    return this;
  }
  registerExternalAssetHandler(type, handler) {
    this.externalAssetContentHandlers[type] = handler;
    return this;
  }
  async getAssetForExternalContent(info) {
    var _a2, _b2;
    return await ((_b2 = (_a2 = this.externalAssetContentHandlers)[info.type]) == null ? void 0 : _b2.call(_a2, info));
  }
  registerExternalContentHandler(type, handler) {
    this.externalContentHandlers[type] = handler;
    return this;
  }
  async putExternalContent(info) {
    var _a2, _b2;
    return (_b2 = (_a2 = this.externalContentHandlers)[info.type]) == null ? void 0 : _b2.call(_a2, info);
  }
  getContentFromCurrentPage(shapes) {
    const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
    if (!ids)
      return;
    if (ids.length === 0)
      return;
    const pageTransforms = {};
    let shapesForContent = dedupe(ids.map((id) => this.getShape(id)).sort(sortByIndex).flatMap((shape) => {
      const allShapes = [shape];
      this.visitDescendants(shape.id, (descendant) => {
        allShapes.push(this.getShape(descendant));
      });
      return allShapes;
    }));
    shapesForContent = shapesForContent.map((shape) => {
      pageTransforms[shape.id] = this.getShapePageTransform(shape.id);
      shape = structuredClone(shape);
      if (this.isShapeOfType(shape, "arrow")) {
        const startBindingId = shape.props.start.type === "binding" ? shape.props.start.boundShapeId : void 0;
        const endBindingId = shape.props.end.type === "binding" ? shape.props.end.boundShapeId : void 0;
        const info = this.getArrowInfo(shape);
        if (shape.props.start.type === "binding") {
          if (!shapesForContent.some((s) => s.id === startBindingId)) {
            if (info == null ? void 0 : info.isValid) {
              const { x, y } = info.start.point;
              shape.props.start = {
                type: "point",
                x,
                y
              };
            } else {
              const { start } = getArrowTerminalsInArrowSpace(this, shape);
              shape.props.start = {
                type: "point",
                x: start.x,
                y: start.y
              };
            }
          }
        }
        if (shape.props.end.type === "binding") {
          if (!shapesForContent.some((s) => s.id === endBindingId)) {
            if (info == null ? void 0 : info.isValid) {
              const { x, y } = info.end.point;
              shape.props.end = {
                type: "point",
                x,
                y
              };
            } else {
              const { end } = getArrowTerminalsInArrowSpace(this, shape);
              shape.props.end = {
                type: "point",
                x: end.x,
                y: end.y
              };
            }
          }
        }
        const infoAfter = getIsArrowStraight(shape) ? getStraightArrowInfo(this, shape) : getCurvedArrowInfo(this, shape);
        if ((info == null ? void 0 : info.isValid) && (infoAfter == null ? void 0 : infoAfter.isValid) && !getIsArrowStraight(shape)) {
          const mpA = Vec.Med(info.start.handle, info.end.handle);
          const distA = Vec.Dist(info.middle, mpA);
          const distB = Vec.Dist(infoAfter.middle, mpA);
          if (shape.props.bend < 0) {
            shape.props.bend += distB - distA;
          } else {
            shape.props.bend -= distB - distA;
          }
        }
        return shape;
      }
      return shape;
    });
    const rootShapeIds = [];
    shapesForContent.forEach((shape) => {
      if (shapesForContent.find((s) => s.id === shape.parentId) === void 0) {
        const pageTransform = this.getShapePageTransform(shape.id);
        const pagePoint = pageTransform.point();
        const pageRotation = pageTransform.rotation();
        shape.x = pagePoint.x;
        shape.y = pagePoint.y;
        shape.rotation = pageRotation;
        shape.parentId = this.getCurrentPageId();
        rootShapeIds.push(shape.id);
      }
    });
    const assetsSet = /* @__PURE__ */ new Set();
    shapesForContent.forEach((shape) => {
      if ("assetId" in shape.props) {
        if (shape.props.assetId !== null) {
          assetsSet.add(shape.props.assetId);
        }
      }
    });
    return {
      shapes: shapesForContent,
      rootShapeIds,
      schema: this.store.schema.serialize(),
      assets: compact(Array.from(assetsSet).map((id) => this.getAsset(id)))
    };
  }
  putContentOntoCurrentPage(content, options = {}) {
    var _a2;
    if (this.getInstanceState().isReadonly)
      return this;
    if (!content.schema) {
      throw Error("Could not put content:\ncontent is missing a schema.");
    }
    const { select = false, preserveIds = false, preservePosition = false } = options;
    let { point = void 0 } = options;
    const currentPageId = this.getCurrentPageId();
    const { rootShapeIds } = content;
    const assets = [];
    const shapes = [];
    const store2 = {
      store: {
        ...Object.fromEntries(content.assets.map((asset) => [asset.id, asset])),
        ...Object.fromEntries(content.shapes.map((asset) => [asset.id, asset]))
      },
      schema: content.schema
    };
    const result = this.store.schema.migrateStoreSnapshot(store2);
    if (result.type === "error") {
      throw Error("Could not put content: could not migrate content");
    }
    for (const record of Object.values(result.value)) {
      switch (record.typeName) {
        case "asset": {
          assets.push(record);
          break;
        }
        case "shape": {
          shapes.push(record);
          break;
        }
      }
    }
    const idMap = new Map(shapes.map((shape) => [shape.id, createShapeId()]));
    let pasteParentId = this.getCurrentPageId();
    let lowestDepth = Infinity;
    let lowestAncestors = [];
    for (const shape of this.getSelectedShapes()) {
      if (lowestDepth === 0)
        break;
      const isFrame = this.isShapeOfType(shape, "frame");
      const ancestors = this.getShapeAncestors(shape);
      if (isFrame)
        ancestors.push(shape);
      const depth = isFrame ? ancestors.length + 1 : ancestors.length;
      if (depth < lowestDepth) {
        lowestDepth = depth;
        lowestAncestors = ancestors;
        pasteParentId = isFrame ? shape.id : shape.parentId;
      } else if (depth === lowestDepth) {
        if (lowestAncestors.length !== ancestors.length) {
          throw Error(`Ancestors: ${lowestAncestors.length} !== ${ancestors.length}`);
        }
        if (lowestAncestors.length === 0) {
          pasteParentId = currentPageId;
          break;
        } else {
          pasteParentId = currentPageId;
          for (let i = 0; i < lowestAncestors.length; i++) {
            if (ancestors[i] !== lowestAncestors[i])
              break;
            pasteParentId = ancestors[i].id;
          }
        }
      }
    }
    let isDuplicating = false;
    if (!isPageId(pasteParentId)) {
      const parent = this.getShape(pasteParentId);
      if (parent) {
        if (!this.getViewportPageBounds().includes(this.getShapePageBounds(parent))) {
          pasteParentId = currentPageId;
        } else {
          if (rootShapeIds.length === 1) {
            const rootShape = shapes.find((s) => s.id === rootShapeIds[0]);
            if (this.isShapeOfType(parent, "frame") && this.isShapeOfType(rootShape, "frame") && rootShape.props.w === (parent == null ? void 0 : parent.props.w) && rootShape.props.h === (parent == null ? void 0 : parent.props.h)) {
              isDuplicating = true;
            }
          }
        }
      } else {
        pasteParentId = currentPageId;
      }
    }
    if (!isDuplicating) {
      isDuplicating = idMap.has(pasteParentId);
    }
    if (isDuplicating) {
      pasteParentId = this.getShape(pasteParentId).parentId;
    }
    let index2 = this.getHighestIndexForParent(pasteParentId);
    const rootShapes = [];
    const newShapes = shapes.map((shape) => {
      let newShape;
      if (preserveIds) {
        newShape = structuredClone(shape);
        idMap.set(shape.id, shape.id);
      } else {
        const id = idMap.get(shape.id);
        newShape = structuredClone({ ...shape, id });
      }
      if (rootShapeIds.includes(shape.id)) {
        newShape.parentId = currentPageId;
        rootShapes.push(newShape);
      }
      if (idMap.has(newShape.parentId)) {
        newShape.parentId = idMap.get(shape.parentId);
      } else {
        rootShapeIds.push(newShape.id);
        newShape.index = index2;
        index2 = getIndexAbove(index2);
      }
      if (this.isShapeOfType(newShape, "arrow")) {
        if (newShape.props.start.type === "binding") {
          const mappedId = idMap.get(newShape.props.start.boundShapeId);
          newShape.props.start = mappedId ? { ...newShape.props.start, boundShapeId: mappedId } : {
            type: "point",
            x: 0,
            y: 0
          };
        }
        if (newShape.props.end.type === "binding") {
          const mappedId = idMap.get(newShape.props.end.boundShapeId);
          newShape.props.end = mappedId ? { ...newShape.props.end, boundShapeId: mappedId } : {
            type: "point",
            x: 0,
            y: 0
          };
        }
      }
      return newShape;
    });
    if (newShapes.length + this.getCurrentPageShapeIds().size > MAX_SHAPES_PER_PAGE) {
      alertMaxShapes(this);
      return this;
    }
    const assetsToCreate = [];
    const assetsToUpdate = [];
    for (const asset of assets) {
      if (this.store.has(asset.id)) {
        continue;
      }
      if ((asset.type === "image" || asset.type === "video") && ((_a2 = asset.props.src) == null ? void 0 : _a2.startsWith("data:image"))) {
        assetsToUpdate.push(structuredClone(asset));
        asset.props.src = null;
      }
      assetsToCreate.push(asset);
    }
    Promise.allSettled(assetsToUpdate.map(async (asset) => {
      var _a3;
      const file = await dataUrlToFile(asset.props.src, asset.props.name, (_a3 = asset.props.mimeType) != null ? _a3 : "image/png");
      const newAsset = await this.getAssetForExternalContent({ type: "file", file });
      if (!newAsset) {
        this.deleteAssets([asset.id]);
        return;
      }
      this.updateAssets([{ ...newAsset, id: asset.id }]);
    }));
    this.batch(() => {
      if (assetsToCreate.length > 0) {
        this.createAssets(assetsToCreate);
      }
      this.createShapes(newShapes);
      if (select) {
        this.select(...rootShapes.map((s) => s.id));
      }
      if (pasteParentId !== currentPageId) {
        this.reparentShapes(rootShapes.map((s) => s.id), pasteParentId);
      }
      const newCreatedShapes = newShapes.map((s) => this.getShape(s.id));
      const bounds = Box.Common(newCreatedShapes.map((s) => this.getShapePageBounds(s)));
      if (point === void 0) {
        if (!isPageId(pasteParentId)) {
          const shape = this.getShape(pasteParentId);
          point = Mat.applyToPoint(this.getShapePageTransform(shape), this.getShapeGeometry(shape).bounds.center);
        } else {
          const viewportPageBounds = this.getViewportPageBounds();
          if (preservePosition || viewportPageBounds.includes(Box.From(bounds))) {
            point = bounds.center;
          } else {
            point = viewportPageBounds.center;
          }
        }
      }
      if (rootShapes.length === 1) {
        const onlyRoot = rootShapes[0];
        if (this.isShapeOfType(onlyRoot, "frame")) {
          while (this.getShapesAtPoint(point).some((shape) => this.isShapeOfType(shape, "frame") && shape.props.w === onlyRoot.props.w && shape.props.h === onlyRoot.props.h)) {
            point.x += bounds.w + 16;
          }
        }
      }
      const pageCenter = Box.Common(compact(rootShapes.map(({ id }) => this.getShapePageBounds(id)))).center;
      const offset4 = Vec.Sub(point, pageCenter);
      this.updateShapes(rootShapes.map(({ id }) => {
        const s = this.getShape(id);
        const localRotation = this.getShapeParentTransform(id).decompose().rotation;
        const localDelta = Vec.Rot(offset4, -localRotation);
        return { id: s.id, type: s.type, x: s.x + localDelta.x, y: s.y + localDelta.y };
      }));
    });
    return this;
  }
  async getSvgElement(shapes, opts = {}) {
    const result = await getSvgJsx(this, shapes, opts);
    if (!result)
      return void 0;
    const fragment = document.createDocumentFragment();
    const root = (0, import_client.createRoot)(fragment);
    (0, import_react_dom.flushSync)(() => {
      root.render(result.jsx);
    });
    const svg = fragment.firstElementChild;
    assert(svg instanceof SVGSVGElement, "Expected an SVG element");
    root.unmount();
    return { svg, width: result.width, height: result.height };
  }
  async getSvgString(shapes, opts = {}) {
    const result = await this.getSvgElement(shapes, opts);
    if (!result)
      return void 0;
    const serializer = new XMLSerializer();
    return {
      svg: serializer.serializeToString(result.svg),
      width: result.width,
      height: result.height
    };
  }
  async getSvg(shapes, opts = {}) {
    const result = await this.getSvgElement(shapes, opts);
    if (!result)
      return void 0;
    return result.svg;
  }
  _updateInputsFromEvent(info) {
    var _a2, _b2, _c;
    const {
      pointerVelocity,
      previousScreenPoint,
      previousPagePoint,
      currentScreenPoint,
      currentPagePoint
    } = this.inputs;
    const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
    const { x: cx, y: cy, z: cz } = this.store.unsafeGetWithoutCapture(this.getCameraId());
    const sx = info.point.x - screenBounds.x;
    const sy = info.point.y - screenBounds.y;
    const sz = (_a2 = info.point.z) != null ? _a2 : 0.5;
    previousScreenPoint.setTo(currentScreenPoint);
    previousPagePoint.setTo(currentPagePoint);
    currentScreenPoint.set(sx, sy);
    const nx = sx / cz - cx;
    const ny = sy / cz - cy;
    if (isFinite(nx) && isFinite(ny)) {
      currentPagePoint.set(nx, ny, sz);
    }
    this.inputs.isPen = info.type === "pointer" && info.isPen;
    if (info.name === "pointer_down" || this.inputs.isPinching) {
      pointerVelocity.set(0, 0);
    }
    this.store.put([
      {
        id: TLPOINTER_ID,
        typeName: "pointer",
        x: currentPagePoint.x,
        y: currentPagePoint.y,
        lastActivityTimestamp: info.type === "pointer" && info.pointerId === INTERNAL_POINTER_IDS.CAMERA_MOVE ? (_c = (_b2 = this.store.unsafeGetWithoutCapture(TLPOINTER_ID)) == null ? void 0 : _b2.lastActivityTimestamp) != null ? _c : this._tickManager.now : this._tickManager.now,
        meta: {}
      }
    ]);
  }
  cancel() {
    this.dispatch({ type: "misc", name: "cancel" });
    return this;
  }
  interrupt() {
    this.dispatch({ type: "misc", name: "interrupt" });
    return this;
  }
  complete() {
    this.dispatch({ type: "misc", name: "complete" });
    return this;
  }
  cancelDoubleClick() {
    this._clickManager.cancelDoubleClickTimeout();
  }
  _flushEventsForTick(elapsed) {
    this.batch(() => {
      if (this._pendingEventsForNextTick.length > 0) {
        const events = [...this._pendingEventsForNextTick];
        this._pendingEventsForNextTick.length = 0;
        for (const info of events) {
          this._flushEventForTick(info);
        }
      }
      if (elapsed > 0) {
        this.root.handleEvent({ type: "misc", name: "tick", elapsed });
      }
      this.scribbles.tick(elapsed);
    });
  }
};
__decorateClass5([
  computed
], Editor.prototype, "getCanUndo", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCanRedo", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getArrowBindingsIndex", 1);
__decorateClass5([
  computed
], Editor.prototype, "getArrowInfoCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "getPath", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentTool", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentToolId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getDocumentSettings", 1);
__decorateClass5([
  computed
], Editor.prototype, "getInstanceState", 1);
__decorateClass5([
  computed
], Editor.prototype, "getOpenMenus", 1);
__decorateClass5([
  computed
], Editor.prototype, "getIsMenuOpen", 1);
__decorateClass5([
  computed
], Editor.prototype, "getPageStates", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getPageStatesQuery", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageState", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getCurrentPageStateId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectedShapeIds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectedShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "getOnlySelectedShapeId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getOnlySelectedShape", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectionPageBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectionRotation", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectionRotatedPageBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSelectionRotatedScreenBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getFocusedGroupId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getFocusedGroup", 1);
__decorateClass5([
  computed
], Editor.prototype, "getEditingShapeId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getEditingShape", 1);
__decorateClass5([
  computed
], Editor.prototype, "getHoveredShapeId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getHoveredShape", 1);
__decorateClass5([
  computed
], Editor.prototype, "getHintingShapeIds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getHintingShape", 1);
__decorateClass5([
  computed
], Editor.prototype, "getErasingShapeIds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getErasingShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCameraId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCamera", 1);
__decorateClass5([
  computed
], Editor.prototype, "getZoomLevel", 1);
__decorateClass5([
  computed
], Editor.prototype, "getViewportScreenBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getViewportScreenCenter", 1);
__decorateClass5([
  computed
], Editor.prototype, "getViewportPageBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getViewportPageCenter", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getCollaboratorsQuery", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCollaborators", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCollaboratorsOnCurrentPage", 1);
__decorateClass5([
  computed
], Editor.prototype, "getRenderingShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getAllPagesQuery", 1);
__decorateClass5([
  computed
], Editor.prototype, "getPages", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageId", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageShapeIdsSorted", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getAllAssetsQuery", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapeGeometryCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapeHandlesCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapePageTransformCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapePageBoundsCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapeClipPathCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapeMaskCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getShapeMaskedPageBoundsCache", 1);
__decorateClass5([
  computed
], Editor.prototype, "_notVisibleShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCulledShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageBounds", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageShapes", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageShapesSorted", 1);
__decorateClass5([
  computed
], Editor.prototype, "getCurrentPageRenderingShapesSorted", 1);
__decorateClass5([
  computed
], Editor.prototype, "_getSelectionSharedStyles", 1);
__decorateClass5([
  computed({ isEqual: (a, b) => a.equals(b) })
], Editor.prototype, "getSharedStyles", 1);
__decorateClass5([
  computed
], Editor.prototype, "getSharedOpacity", 1);
function alertMaxShapes(editor, pageId = editor.getCurrentPageId()) {
  const name = editor.getPage(pageId).name;
  editor.emit("max-shapes", { name, pageId, count: MAX_SHAPES_PER_PAGE });
}
function applyPartialToShape(prev, partial) {
  if (!partial)
    return prev;
  let next = null;
  const entries = Object.entries(partial);
  for (let i = 0, n = entries.length; i < n; i++) {
    const [k, v] = entries[i];
    if (v === void 0)
      continue;
    if (k === "id" || k === "type" || k === "typeName")
      continue;
    if (v === prev[k])
      continue;
    if (!next)
      next = { ...prev };
    if (k === "props" || k === "meta") {
      next[k] = { ...prev[k] };
      for (const [nextKey, nextValue] of Object.entries(v)) {
        if (nextValue !== void 0) {
          ;
          next[k][nextKey] = nextValue;
        }
      }
      continue;
    }
    ;
    next[k] = v;
  }
  if (!next)
    return prev;
  return next;
}
function pushShapeWithDescendants(editor, id, result) {
  const shape = editor.getShape(id);
  if (!shape)
    return;
  result.push(shape);
  const childIds = editor.getSortedChildIdsForParent(id);
  for (let i = 0, n = childIds.length; i < n; i++) {
    pushShapeWithDescendants(editor, childIds[i], result);
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsDarkMode.mjs
function useIsDarkMode() {
  const editor = useEditor();
  const exportContext = useSvgExportContext();
  return useValue("isDarkMode", () => {
    var _a2;
    return (_a2 = exportContext == null ? void 0 : exportContext.isDarkMode) != null ? _a2 : editor.user.getIsDarkMode();
  }, [
    exportContext,
    editor
  ]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useCursor.mjs
var CORNER_SVG = `<path d='m19.7432 17.0869-4.072 4.068 2.829 2.828-8.473-.013-.013-8.47 2.841 2.842 4.075-4.068 1.414-1.415-2.844-2.842h8.486v8.484l-2.83-2.827z' fill='%23fff'/><path d='m18.6826 16.7334-4.427 4.424 1.828 1.828-5.056-.016-.014-5.054 1.842 1.841 4.428-4.422 2.474-2.475-1.844-1.843h5.073v5.071l-1.83-1.828z' fill='%23000'/>`;
var EDGE_SVG = `<path d='m9 17.9907v.005l5.997 5.996.001-3.999h1.999 2.02v4l5.98-6.001-5.98-5.999.001 4.019-2.021.002h-2l.001-4.022zm1.411.003 3.587-3.588-.001 2.587h3.5 2.521v-2.585l3.565 3.586-3.564 3.585-.001-2.585h-2.521l-3.499-.001-.001 2.586z' fill='%23fff'/><path d='m17.4971 18.9932h2.521v2.586l3.565-3.586-3.565-3.585v2.605h-2.521-3.5v-2.607l-3.586 3.587 3.586 3.586v-2.587z' fill='%23000'/>`;
var ROTATE_CORNER_SVG = `<path d="M22.4789 9.45728L25.9935 12.9942L22.4789 16.5283V14.1032C18.126 14.1502 14.6071 17.6737 14.5675 22.0283H17.05L13.513 25.543L9.97889 22.0283H12.5674C12.6071 16.5691 17.0214 12.1503 22.4789 12.1031L22.4789 9.45728Z" fill="black"/><path fill-rule="evenodd" clip-rule="evenodd" d="M21.4789 7.03223L27.4035 12.9945L21.4789 18.9521V15.1868C18.4798 15.6549 16.1113 18.0273 15.649 21.0284H19.475L13.5128 26.953L7.55519 21.0284H11.6189C12.1243 15.8155 16.2679 11.6677 21.4789 11.1559L21.4789 7.03223ZM22.4789 12.1031C17.0214 12.1503 12.6071 16.5691 12.5674 22.0284H9.97889L13.513 25.543L17.05 22.0284H14.5675C14.5705 21.6896 14.5947 21.3558 14.6386 21.0284C15.1157 17.4741 17.9266 14.6592 21.4789 14.1761C21.8063 14.1316 22.1401 14.1069 22.4789 14.1032V16.5284L25.9935 12.9942L22.4789 9.45729L22.4789 12.1031Z" fill="white"/>`;
function getCursorCss(svg, r, tr, f, color, hotspotX = 16, hotspotY = 16) {
  const a = (-tr - r) * (PI / 180);
  const s = Math.sin(a);
  const c = Math.cos(a);
  const dx = 1 * c - 1 * s;
  const dy = 1 * s + 1 * c;
  return `url("data:image/svg+xml,<svg height='32' width='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg' style='color: ${color};'><defs><filter id='shadow' y='-40%' x='-40%' width='180px' height='180%' color-interpolation-filters='sRGB'><feDropShadow dx='${dx}' dy='${dy}' stdDeviation='1.2' flood-opacity='.5'/></filter></defs><g fill='none' transform='rotate(${r + tr} 16 16)${f ? ` scale(-1,-1) translate(0, -32)` : ""}' filter='url(%23shadow)'>` + svg.replaceAll(`"`, `'`) + `</g></svg>") ${hotspotX} ${hotspotY}, pointer`;
}
var STATIC_CURSORS = [
  "default",
  "pointer",
  "cross",
  "move",
  "grab",
  "grabbing",
  "text",
  "zoom-in",
  "zoom-out"
];
var CURSORS = {
  none: () => "none",
  "ew-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 0, f, c),
  "ns-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 90, f, c),
  "nesw-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 0, f, c),
  "nwse-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 90, f, c),
  "nwse-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 0, f, c),
  "nesw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 90, f, c),
  "senw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 180, f, c),
  "swne-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 270, f, c)
};
function getCursor(cursor, rotation = 0, color = "black") {
  return CURSORS[cursor](radiansToDegrees(rotation), false, color);
}
function useCursor() {
  const editor = useEditor();
  const container = useContainer();
  const isDarkMode = useIsDarkMode();
  useQuickReactor("useCursor", () => {
    const { type, rotation } = editor.getInstanceState().cursor;
    if (STATIC_CURSORS.includes(type)) {
      container.style.setProperty("--tl-cursor", `var(--tl-cursor-${type})`);
      return;
    }
    container.style.setProperty("--tl-cursor", getCursor(type, rotation, isDarkMode ? "white" : "black"));
  }, [editor, container, isDarkMode]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useDarkMode.mjs
var import_react32 = __toESM(require_react(), 1);
function useDarkMode() {
  const editor = useEditor();
  const container = useContainer();
  const isDarkMode = useIsDarkMode();
  const forceSrgb = useValue(debugFlags.forceSrgb);
  import_react32.default.useEffect(() => {
    if (isDarkMode) {
      container.setAttribute("data-color-mode", "dark");
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    } else {
      container.setAttribute("data-color-mode", "light");
      container.classList.remove("tl-theme__dark");
      container.classList.add("tl-theme__light");
    }
    if (forceSrgb) {
      container.classList.add("tl-theme__force-sRGB");
    } else {
      container.classList.remove("tl-theme__force-sRGB");
    }
  }, [editor, container, forceSrgb, isDarkMode]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useEvent.mjs
var import_react33 = __toESM(require_react(), 1);
function useEvent(handler) {
  const handlerRef = (0, import_react33.useRef)();
  (0, import_react33.useLayoutEffect)(() => {
    handlerRef.current = handler;
  });
  (0, import_react33.useDebugValue)(handler);
  return (0, import_react33.useCallback)((...args) => {
    const fn = handlerRef.current;
    assert(fn, "fn does not exist");
    return fn(...args);
  }, []);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useFocusEvents.mjs
var import_react34 = __toESM(require_react(), 1);
function useFocusEvents(autoFocus) {
  const editor = useEditor();
  const container = useContainer();
  (0, import_react34.useLayoutEffect)(() => {
    if (autoFocus) {
      if (!editor.getInstanceState().isFocused) {
        editor.updateInstanceState({ isFocused: true });
      }
      editor.getContainer().focus();
    } else {
      if (editor.getInstanceState().isFocused) {
        editor.updateInstanceState({ isFocused: false });
      }
    }
  }, [editor, container, autoFocus]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useForceUpdate.mjs
var import_react35 = __toESM(require_react(), 1);
function useForceUpdate() {
  const [_, ss] = (0, import_react35.useState)(0);
  (0, import_react35.useEffect)(() => ss((s) => s + 1), []);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useLocalStore.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/config/TLSessionStateSnapshot.mjs
var tabIdKey = "TLDRAW_TAB_ID_v2";
var window2 = globalThis.window;
function iOS() {
  if (!window2)
    return false;
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(window2.navigator.platform) || window2.navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
var _a, _b;
var TAB_ID = window2 ? (_b = (_a = window2[tabIdKey]) != null ? _a : getFromSessionStorage(tabIdKey)) != null ? _b : `TLDRAW_INSTANCE_STATE_V1_` + uniqueId() : "<error>";
if (window2) {
  window2[tabIdKey] = TAB_ID;
  if (iOS()) {
    setInSessionStorage(tabIdKey, TAB_ID);
  } else {
    deleteFromSessionStorage(tabIdKey);
  }
}
window2 == null ? void 0 : window2.addEventListener("beforeunload", () => {
  setInSessionStorage(tabIdKey, TAB_ID);
});
var Versions13 = {
  Initial: 0
};
var CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Math.max(...Object.values(Versions13));
function migrate(snapshot) {
  if (snapshot.version < Versions13.Initial) {
  }
  snapshot.version = CURRENT_SESSION_STATE_SNAPSHOT_VERSION;
}
var sessionStateSnapshotValidator = validation_exports.object({
  version: validation_exports.number,
  currentPageId: pageIdValidator,
  isFocusMode: validation_exports.boolean,
  exportBackground: validation_exports.boolean,
  isDebugMode: validation_exports.boolean,
  isToolLocked: validation_exports.boolean,
  isGridMode: validation_exports.boolean,
  pageStates: validation_exports.arrayOf(validation_exports.object({
    pageId: pageIdValidator,
    camera: validation_exports.object({
      x: validation_exports.number,
      y: validation_exports.number,
      z: validation_exports.number
    }),
    selectedShapeIds: validation_exports.arrayOf(shapeIdValidator),
    focusedGroupId: shapeIdValidator.nullable()
  }))
});
function migrateAndValidateSessionStateSnapshot(state) {
  if (!state || typeof state !== "object") {
    console.warn("Invalid instance state");
    return null;
  }
  if (!("version" in state) || typeof state.version !== "number") {
    console.warn("No version in instance state");
    return null;
  }
  if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
    state = structuredClone(state);
    migrate(state);
  }
  try {
    return sessionStateSnapshotValidator.validate(state);
  } catch (e) {
    console.warn(e);
    return null;
  }
}
function createSessionStateSnapshotSignal(store2) {
  const $allPageIds = store2.query.ids("page");
  return computed("sessionStateSnapshot", () => {
    const instanceState = store2.get(TLINSTANCE_ID);
    if (!instanceState)
      return null;
    const allPageIds = [...$allPageIds.get()];
    return {
      version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
      currentPageId: instanceState.currentPageId,
      exportBackground: instanceState.exportBackground,
      isFocusMode: instanceState.isFocusMode,
      isDebugMode: instanceState.isDebugMode,
      isToolLocked: instanceState.isToolLocked,
      isGridMode: instanceState.isGridMode,
      pageStates: allPageIds.map((id) => {
        var _a2, _b2, _c, _d, _e;
        const ps = store2.get(InstancePageStateRecordType.createId(id));
        const camera = store2.get(CameraRecordType.createId(id));
        return {
          pageId: id,
          camera: {
            x: (_a2 = camera == null ? void 0 : camera.x) != null ? _a2 : 0,
            y: (_b2 = camera == null ? void 0 : camera.y) != null ? _b2 : 0,
            z: (_c = camera == null ? void 0 : camera.z) != null ? _c : 1
          },
          selectedShapeIds: (_d = ps == null ? void 0 : ps.selectedShapeIds) != null ? _d : [],
          focusedGroupId: (_e = ps == null ? void 0 : ps.focusedGroupId) != null ? _e : null
        };
      })
    };
  });
}
function loadSessionStateSnapshotIntoStore(store2, snapshot) {
  const res = migrateAndValidateSessionStateSnapshot(snapshot);
  if (!res)
    return;
  const allPageStatesAndCameras = store2.allRecords().filter((r) => r.typeName === "instance_page_state" || r.typeName === "camera");
  const removeDiff = {
    added: {},
    updated: {},
    removed: {
      ...objectMapFromEntries(allPageStatesAndCameras.map((r) => [r.id, r]))
    }
  };
  if (store2.has(TLINSTANCE_ID)) {
    removeDiff.removed[TLINSTANCE_ID] = store2.get(TLINSTANCE_ID);
  }
  const addDiff = {
    removed: {},
    updated: {},
    added: {
      [TLINSTANCE_ID]: store2.schema.types.instance.create({
        id: TLINSTANCE_ID,
        currentPageId: res.currentPageId,
        isDebugMode: res.isDebugMode,
        isFocusMode: res.isFocusMode,
        isToolLocked: res.isToolLocked,
        isGridMode: res.isGridMode,
        exportBackground: res.exportBackground
      })
    }
  };
  for (const ps of res.pageStates) {
    const cameraId = CameraRecordType.createId(ps.pageId);
    const pageStateId = InstancePageStateRecordType.createId(ps.pageId);
    addDiff.added[cameraId] = CameraRecordType.create({
      id: CameraRecordType.createId(ps.pageId),
      x: ps.camera.x,
      y: ps.camera.y,
      z: ps.camera.z
    });
    addDiff.added[pageStateId] = InstancePageStateRecordType.create({
      id: InstancePageStateRecordType.createId(ps.pageId),
      pageId: ps.pageId,
      selectedShapeIds: ps.selectedShapeIds,
      focusedGroupId: ps.focusedGroupId
    });
  }
  transact(() => {
    store2.applyDiff(squashRecordDiffs([removeDiff, addDiff]));
    store2.ensureStoreIsUsable();
  });
}
function extractSessionStateFromLegacySnapshot(store2) {
  var _a2;
  const instanceRecords = [];
  for (const record of Object.values(store2)) {
    if ((_a2 = record.typeName) == null ? void 0 : _a2.match(/^(instance.*|pointer|camera)$/)) {
      instanceRecords.push(record);
    }
  }
  const oldInstance = instanceRecords.filter((r) => r.typeName === "instance" && r.id !== TLINSTANCE_ID)[0];
  if (!oldInstance)
    return null;
  const result = {
    version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
    currentPageId: oldInstance.currentPageId,
    exportBackground: !!oldInstance.exportBackground,
    isFocusMode: !!oldInstance.isFocusMode,
    isDebugMode: !!oldInstance.isDebugMode,
    isToolLocked: !!oldInstance.isToolLocked,
    isGridMode: false,
    pageStates: instanceRecords.filter((r) => r.typeName === "instance_page_state" && r.instanceId === oldInstance.id).map((ps) => {
      var _a3;
      const camera = (_a3 = store2[ps.cameraId]) != null ? _a3 : { x: 0, y: 0, z: 1 };
      return {
        pageId: ps.pageId,
        camera: {
          x: camera.x,
          y: camera.y,
          z: camera.z
        },
        selectedShapeIds: ps.selectedShapeIds,
        focusedGroupId: ps.focusedGroupId
      };
    })
  };
  try {
    sessionStateSnapshotValidator.validate(result);
    return result;
  } catch (e) {
    return null;
  }
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/sync/alerts.mjs
function showCantWriteToIndexDbAlert() {
  window.alert(`Oops! We could not save changes to your browser's storage. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.
\u2022 If your hard disk is full, try clearing up some space and then reload the page.`);
}
function showCantReadFromIndexDbAlert() {
  window.alert(`Oops! We could not access your browser's storage\u2014and the app won't work correctly without that. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.`);
}

// node_modules/idb/build/wrap-idb-value.js
var instanceOfAny = (object2, constructors) => constructors.some((c) => object2 instanceof c);
var idbProxyableTypes;
var cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var cursorRequestMap = /* @__PURE__ */ new WeakMap();
var transactionDoneMap = /* @__PURE__ */ new WeakMap();
var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
var transformCache = /* @__PURE__ */ new WeakMap();
var reverseTransformCache = /* @__PURE__ */ new WeakMap();
function promisifyRequest(request2) {
  const promise = new Promise((resolve, reject) => {
    const unlisten = () => {
      request2.removeEventListener("success", success);
      request2.removeEventListener("error", error);
    };
    const success = () => {
      resolve(wrap(request2.result));
      unlisten();
    };
    const error = () => {
      reject(request2.error);
      unlisten();
    };
    request2.addEventListener("success", success);
    request2.addEventListener("error", error);
  });
  promise.then((value) => {
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request2);
    }
  }).catch(() => {
  });
  reverseTransformCache.set(promise, request2);
  return promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  const done = new Promise((resolve, reject) => {
    const unlisten = () => {
      tx.removeEventListener("complete", complete);
      tx.removeEventListener("error", error);
      tx.removeEventListener("abort", error);
    };
    const complete = () => {
      resolve();
      unlisten();
    };
    const error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError"));
      unlisten();
    };
    tx.addEventListener("complete", complete);
    tx.addEventListener("error", error);
    tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "objectStoreNames") {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      }
      if (prop === "store") {
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    }
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has(target, prop) {
    if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
      return true;
    }
    return prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
    return function(storeNames, ...args) {
      const tx = func.call(unwrap(this), storeNames, ...args);
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap(tx);
    };
  }
  if (getCursorAdvanceMethods().includes(func)) {
    return function(...args) {
      func.apply(unwrap(this), args);
      return wrap(cursorRequestMap.get(this));
    };
  }
  return function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  if (typeof value === "function")
    return wrapFunction(value);
  if (value instanceof IDBTransaction)
    cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes()))
    return new Proxy(value, idbProxyTraps);
  return value;
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  const newValue = transformCachableValue(value);
  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }
  return newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);

// node_modules/idb/build/index.js
function openDB(name, version2, { blocked, upgrade, blocking, terminated } = {}) {
  const request2 = indexedDB.open(name, version2);
  const openPromise = wrap(request2);
  if (upgrade) {
    request2.addEventListener("upgradeneeded", (event) => {
      upgrade(wrap(request2.result), event.oldVersion, event.newVersion, wrap(request2.transaction), event);
    });
  }
  if (blocked) {
    request2.addEventListener("blocked", (event) => blocked(event.oldVersion, event.newVersion, event));
  }
  openPromise.then((db) => {
    if (terminated)
      db.addEventListener("close", () => terminated());
    if (blocking) {
      db.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
    }
  }).catch(() => {
  });
  return openPromise;
}
function deleteDB(name, { blocked } = {}) {
  const request2 = indexedDB.deleteDatabase(name);
  if (blocked) {
    request2.addEventListener("blocked", (event) => blocked(event.oldVersion, event));
  }
  return wrap(request2).then(() => void 0);
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
var writeMethods = ["put", "add", "delete", "clear"];
var cachedMethods = /* @__PURE__ */ new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
    return;
  }
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  const targetFuncName = prop.replace(/FromIndex$/, "");
  const useIndex = prop !== targetFuncName;
  const isWrite = writeMethods.includes(targetFuncName);
  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
    return;
  }
  const method = async function(storeName, ...args) {
    const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
    let target2 = tx.store;
    if (useIndex)
      target2 = target2.index(args.shift());
    return (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  cachedMethods.set(prop, method);
  return method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

// node_modules/@tldraw/editor/dist-esm/lib/utils/sync/indexedDb.mjs
var STORE_PREFIX = "TLDRAW_DOCUMENT_v2";
var dbNameIndexKey = "TLDRAW_DB_NAME_INDEX_v2";
var Table = {
  Records: "records",
  Schema: "schema",
  SessionState: "session_state"
};
async function withDb(storeId, cb) {
  addDbName(storeId);
  const db = await openDB(storeId, 3, {
    upgrade(database) {
      if (!database.objectStoreNames.contains(Table.Records)) {
        database.createObjectStore(Table.Records);
      }
      if (!database.objectStoreNames.contains(Table.Schema)) {
        database.createObjectStore(Table.Schema);
      }
      if (!database.objectStoreNames.contains(Table.SessionState)) {
        database.createObjectStore(Table.SessionState);
      }
    }
  });
  try {
    return await cb(db);
  } finally {
    db.close();
  }
}
async function loadDataFromStore({
  persistenceKey,
  sessionId,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  if (!getAllIndexDbNames().includes(storeId))
    return void 0;
  await pruneSessionState({ persistenceKey, didCancel });
  return await withDb(storeId, async (db) => {
    var _a2, _b2;
    if (didCancel == null ? void 0 : didCancel())
      return void 0;
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readonly");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    let sessionStateSnapshot = sessionId ? (_a2 = await sessionStateStore.get(sessionId)) == null ? void 0 : _a2.snapshot : null;
    if (!sessionStateSnapshot) {
      const all = await sessionStateStore.getAll();
      sessionStateSnapshot = (_b2 = all.sort((a, b) => a.updatedAt - b.updatedAt).pop()) == null ? void 0 : _b2.snapshot;
    }
    const result = {
      records: await recordsStore.getAll(),
      schema: await schemaStore.get(Table.Schema),
      sessionStateSnapshot
    };
    if (didCancel == null ? void 0 : didCancel()) {
      tx.abort();
      return void 0;
    }
    await tx.done;
    return result;
  });
}
async function storeChangesInIndexedDb({
  persistenceKey,
  schema,
  changes,
  sessionId,
  sessionStateSnapshot,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readwrite");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    for (const [id, record] of Object.entries(changes.added)) {
      await recordsStore.put(record, id);
    }
    for (const [_prev, updated] of Object.values(changes.updated)) {
      await recordsStore.put(updated, updated.id);
    }
    for (const id of Object.keys(changes.removed)) {
      await recordsStore.delete(id);
    }
    schemaStore.put(schema.serialize(), Table.Schema);
    if (sessionStateSnapshot && sessionId) {
      sessionStateStore.put({
        snapshot: sessionStateSnapshot,
        updatedAt: Date.now(),
        id: sessionId
      }, sessionId);
    } else if (sessionStateSnapshot || sessionId) {
      console.error("sessionStateSnapshot and instanceId must be provided together");
    }
    if (didCancel == null ? void 0 : didCancel())
      return tx.abort();
    await tx.done;
  });
}
async function storeSnapshotInIndexedDb({
  persistenceKey,
  schema,
  snapshot,
  sessionId,
  sessionStateSnapshot,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readwrite");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    await recordsStore.clear();
    for (const [id, record] of Object.entries(snapshot)) {
      await recordsStore.put(record, id);
    }
    schemaStore.put(schema.serialize(), Table.Schema);
    if (sessionStateSnapshot && sessionId) {
      sessionStateStore.put({
        snapshot: sessionStateSnapshot,
        updatedAt: Date.now(),
        id: sessionId
      }, sessionId);
    } else if (sessionStateSnapshot || sessionId) {
      console.error("sessionStateSnapshot and instanceId must be provided together");
    }
    if (didCancel == null ? void 0 : didCancel())
      return tx.abort();
    await tx.done;
  });
}
async function pruneSessionState({
  persistenceKey,
  didCancel
}) {
  await withDb(STORE_PREFIX + persistenceKey, async (db) => {
    const tx = db.transaction([Table.SessionState], "readwrite");
    const sessionStateStore = tx.objectStore(Table.SessionState);
    const all = (await sessionStateStore.getAll()).sort((a, b) => a.updatedAt - b.updatedAt);
    if (all.length < 10) {
      await tx.done;
      return;
    }
    const toDelete = all.slice(0, all.length - 10);
    for (const { id } of toDelete) {
      await sessionStateStore.delete(id);
    }
    if (didCancel == null ? void 0 : didCancel())
      return tx.abort();
    await tx.done;
  });
}
function getAllIndexDbNames() {
  var _a2;
  const result = (_a2 = JSON.parse(getFromLocalStorage(dbNameIndexKey) || "[]")) != null ? _a2 : [];
  if (!Array.isArray(result)) {
    return [];
  }
  return result;
}
function addDbName(name) {
  const all = new Set(getAllIndexDbNames());
  all.add(name);
  setInLocalStorage(dbNameIndexKey, JSON.stringify([...all]));
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/sync/TLLocalSyncClient.mjs
var PERSIST_THROTTLE_MS = 350;
var PERSIST_RETRY_THROTTLE_MS = 1e4;
var UPDATE_INSTANCE_STATE = Symbol("UPDATE_INSTANCE_STATE");
var msg = (msg2) => msg2;
var BroadcastChannelMock = class {
  constructor(_name) {
    __publicField(this, "onmessage");
  }
  postMessage(_msg) {
  }
  close() {
  }
};
var BC = typeof BroadcastChannel === "undefined" ? BroadcastChannelMock : BroadcastChannel;
var TLLocalSyncClient = class {
  constructor(store2, {
    persistenceKey,
    sessionId = TAB_ID,
    onLoad,
    onLoadError
  }, channel2 = new BC(`tldraw-tab-sync-${persistenceKey}`)) {
    __publicField(this, "disposables", /* @__PURE__ */ new Set());
    __publicField(this, "diffQueue", []);
    __publicField(this, "didDispose", false);
    __publicField(this, "shouldDoFullDBWrite", true);
    __publicField(this, "isReloading", false);
    __publicField(this, "persistenceKey");
    __publicField(this, "sessionId");
    __publicField(this, "serializedSchema");
    __publicField(this, "isDebugging", false);
    __publicField(this, "documentTypes");
    __publicField(this, "$sessionStateSnapshot");
    __publicField(this, "initTime", Date.now());
    __publicField(this, "isPersisting", false);
    __publicField(this, "didLastWriteError", false);
    __publicField(this, "scheduledPersistTimeout", null);
    this.store = store2;
    this.channel = channel2;
    if (typeof window !== "undefined") {
      ;
      window.tlsync = this;
    }
    this.persistenceKey = persistenceKey;
    this.sessionId = sessionId;
    this.serializedSchema = this.store.schema.serialize();
    this.$sessionStateSnapshot = createSessionStateSnapshotSignal(this.store);
    this.disposables.add(store2.listen(({ changes }) => {
      this.diffQueue.push(changes);
      this.channel.postMessage(msg({
        type: "diff",
        storeId: this.store.id,
        changes,
        schema: this.serializedSchema
      }));
      this.schedulePersist();
    }, { source: "user", scope: "document" }));
    this.disposables.add(store2.listen(() => {
      this.diffQueue.push(UPDATE_INSTANCE_STATE);
      this.schedulePersist();
    }, { scope: "session" }));
    this.connect(onLoad, onLoadError);
    this.documentTypes = new Set(Object.values(this.store.schema.types).filter((t2) => t2.scope === "document").map((t2) => t2.typeName));
  }
  debug(...args) {
    if (this.isDebugging) {
      console.debug(...args);
    }
  }
  async connect(onLoad, onLoadError) {
    var _a2, _b2;
    this.debug("connecting");
    let data;
    try {
      data = await loadDataFromStore({
        persistenceKey: this.persistenceKey,
        sessionId: this.sessionId,
        didCancel: () => this.didDispose
      });
    } catch (error) {
      onLoadError(error);
      showCantReadFromIndexDbAlert();
      if (typeof window !== "undefined") {
        window.location.reload();
      }
      return;
    }
    this.debug("loaded data from store", data, "didDispose", this.didDispose);
    if (this.didDispose)
      return;
    try {
      if (data) {
        const documentSnapshot = Object.fromEntries(data.records.map((r) => [r.id, r]));
        const sessionStateSnapshot = (_a2 = data.sessionStateSnapshot) != null ? _a2 : extractSessionStateFromLegacySnapshot(documentSnapshot);
        const migrationResult = this.store.schema.migrateStoreSnapshot({
          store: documentSnapshot,
          schema: (_b2 = data.schema) != null ? _b2 : this.store.schema.serializeEarliestVersion()
        });
        if (migrationResult.type === "error") {
          console.error("failed to migrate store", migrationResult);
          onLoadError(new Error(`Failed to migrate store: ${migrationResult.reason}`));
          return;
        }
        this.store.mergeRemoteChanges(() => {
          this.store.put(Object.values(migrationResult.value).filter((r) => this.documentTypes.has(r.typeName)), "initialize");
        });
        if (sessionStateSnapshot) {
          loadSessionStateSnapshotIntoStore(this.store, sessionStateSnapshot);
        }
      }
      this.channel.onmessage = ({ data: data2 }) => {
        var _a3, _b3;
        this.debug("got message", data2);
        const msg2 = data2;
        const res = this.store.schema.getMigrationsSince(msg2.schema);
        if (!res.ok) {
          const timeSinceInit = Date.now() - this.initTime;
          if (timeSinceInit < 5e3) {
            onLoadError(new Error("Schema mismatch, please close other tabs and reload the page"));
            return;
          }
          this.debug("reloading");
          this.isReloading = true;
          (_b3 = (_a3 = window == null ? void 0 : window.location) == null ? void 0 : _a3.reload) == null ? void 0 : _b3.call(_a3);
          return;
        } else if (res.value.length > 0) {
          this.debug("telling them to reload");
          this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
          this.shouldDoFullDBWrite = true;
          this.persistIfNeeded();
          return;
        }
        if (msg2.type === "diff") {
          this.debug("applying diff");
          transact(() => {
            this.store.mergeRemoteChanges(() => {
              this.store.applyDiff(msg2.changes);
              this.store.ensureStoreIsUsable();
            });
          });
        }
      };
      this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
      this.disposables.add(() => {
        this.channel.close();
      });
      onLoad(this);
    } catch (e) {
      this.debug("error loading data from store", e);
      if (this.didDispose)
        return;
      onLoadError(e);
      return;
    }
  }
  close() {
    this.debug("closing");
    this.didDispose = true;
    this.disposables.forEach((d) => d());
  }
  schedulePersist() {
    this.debug("schedulePersist", this.scheduledPersistTimeout);
    if (this.scheduledPersistTimeout)
      return;
    this.scheduledPersistTimeout = setTimeout(() => {
      this.scheduledPersistTimeout = null;
      this.persistIfNeeded();
    }, this.didLastWriteError ? PERSIST_RETRY_THROTTLE_MS : PERSIST_THROTTLE_MS);
  }
  persistIfNeeded() {
    this.debug("persistIfNeeded", {
      isPersisting: this.isPersisting,
      isReloading: this.isReloading,
      shouldDoFullDBWrite: this.shouldDoFullDBWrite,
      diffQueueLength: this.diffQueue.length,
      storeIsPossiblyCorrupt: this.store.isPossiblyCorrupted()
    });
    if (this.scheduledPersistTimeout) {
      clearTimeout(this.scheduledPersistTimeout);
      this.scheduledPersistTimeout = null;
    }
    if (this.isPersisting)
      return;
    if (this.isReloading)
      return;
    if (this.store.isPossiblyCorrupted())
      return;
    if (this.shouldDoFullDBWrite || this.diffQueue.length > 0) {
      this.doPersist();
    }
  }
  async doPersist() {
    assert(!this.isPersisting, "persist already in progress");
    this.isPersisting = true;
    this.debug("doPersist start");
    const diffQueue = this.diffQueue;
    this.diffQueue = [];
    try {
      if (this.shouldDoFullDBWrite) {
        this.shouldDoFullDBWrite = false;
        await storeSnapshotInIndexedDb({
          persistenceKey: this.persistenceKey,
          schema: this.store.schema,
          snapshot: this.store.serialize(),
          didCancel: () => this.didDispose,
          sessionId: this.sessionId,
          sessionStateSnapshot: this.$sessionStateSnapshot.get()
        });
      } else {
        const diffs = squashRecordDiffs(diffQueue.filter((d) => d !== UPDATE_INSTANCE_STATE));
        await storeChangesInIndexedDb({
          persistenceKey: this.persistenceKey,
          changes: diffs,
          schema: this.store.schema,
          didCancel: () => this.didDispose,
          sessionId: this.sessionId,
          sessionStateSnapshot: this.$sessionStateSnapshot.get()
        });
      }
      this.didLastWriteError = false;
    } catch (e) {
      this.shouldDoFullDBWrite = true;
      this.didLastWriteError = true;
      console.error("failed to store changes in indexed db", e);
      showCantWriteToIndexDbAlert();
      if (typeof window !== "undefined") {
        window.location.reload();
      }
    }
    this.isPersisting = false;
    this.debug("doPersist end");
    this.schedulePersist();
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useTLStore.mjs
var import_react36 = __toESM(require_react(), 1);

// node_modules/@tldraw/editor/dist-esm/lib/config/createTLStore.mjs
function createTLStore({ initialData, defaultName = "", ...rest }) {
  const schema = "schema" in rest && rest.schema ? rest.schema : createTLSchema({
    shapes: currentPageShapesToShapeMap(checkShapesAndAddCore("shapeUtils" in rest && rest.shapeUtils ? rest.shapeUtils : [])),
    migrations: "migrations" in rest ? rest.migrations : []
  });
  return new Store({
    schema,
    initialData,
    props: {
      defaultName
    }
  });
}
function currentPageShapesToShapeMap(shapeUtils) {
  return Object.fromEntries(shapeUtils.map((s) => [
    s.type,
    {
      props: s.props,
      migrations: s.migrations
    }
  ]));
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useTLStore.mjs
function createStore(opts) {
  const store2 = createTLStore(opts);
  if (opts.snapshot) {
    store2.loadSnapshot(opts.snapshot);
  }
  return { store: store2, opts };
}
function useTLStore(opts) {
  const [current2, setCurrent] = (0, import_react36.useState)(() => createStore(opts));
  if (!areObjectsShallowEqual(current2.opts, opts)) {
    const next = createStore(opts);
    setCurrent(next);
    return next.store;
  }
  return current2.store;
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useLocalStore.mjs
function useLocalStore({
  persistenceKey,
  sessionId,
  ...rest
}) {
  var _a2;
  const [state, setState] = (0, import_react37.useState)(null);
  const store2 = useTLStore(rest);
  (0, import_react37.useEffect)(() => {
    const id = uniqueId();
    if (!persistenceKey) {
      setState({
        id,
        storeWithStatus: { status: "not-synced", store: store2 }
      });
      return;
    }
    setState({
      id,
      storeWithStatus: { status: "loading" }
    });
    const setStoreWithStatus = (storeWithStatus) => {
      setState((prev) => {
        if ((prev == null ? void 0 : prev.id) === id) {
          return { id, storeWithStatus };
        }
        return prev;
      });
    };
    const client = new TLLocalSyncClient(store2, {
      sessionId,
      persistenceKey,
      onLoad() {
        setStoreWithStatus({ store: store2, status: "synced-local" });
      },
      onLoadError(err) {
        setStoreWithStatus({ status: "error", error: err });
      }
    });
    return () => {
      setState((prevState) => (prevState == null ? void 0 : prevState.id) === id ? null : prevState);
      client.close();
    };
  }, [persistenceKey, store2, sessionId]);
  return (_a2 = state == null ? void 0 : state.storeWithStatus) != null ? _a2 : { status: "loading" };
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useSafariFocusOutFix.mjs
var React10 = __toESM(require_react(), 1);
var isMobileSafari = false;
if (typeof window !== "undefined") {
  const ua = window.navigator.userAgent;
  const iOS2 = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
  const webkit = !!ua.match(/WebKit/i);
  isMobileSafari = iOS2 && webkit && !ua.match(/CriOS/i);
}
function useSafariFocusOutFix() {
  const editor = useEditor();
  React10.useEffect(() => {
    if (!isMobileSafari)
      return;
    function handleFocusOut(e) {
      if (e.target instanceof HTMLInputElement && e.target.type === "text" || e.target instanceof HTMLTextAreaElement) {
        editor.complete();
      }
    }
    document.addEventListener("focusout", handleFocusOut);
    return () => document.removeEventListener("focusout", handleFocusOut);
  }, [editor]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useZoomCss.mjs
var React11 = __toESM(require_react(), 1);
function useZoomCss() {
  const editor = useEditor();
  const container = useContainer();
  React11.useEffect(() => {
    const setScale = (s) => container.style.setProperty("--tl-zoom", s.toString());
    const setScaleDebounced = debounce(setScale, 100);
    const scheduler = new EffectScheduler("useZoomCss", () => {
      const numShapes = editor.getCurrentPageShapeIds().size;
      if (numShapes < 300) {
        setScale(editor.getZoomLevel());
      } else {
        setScaleDebounced(editor.getZoomLevel());
      }
    });
    scheduler.attach();
    scheduler.execute();
    return () => {
      scheduler.detach();
    };
  }, [editor, container]);
}

// node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
var EMPTY_SHAPE_UTILS_ARRAY = [];
var EMPTY_TOOLS_ARRAY = [];
var TldrawEditor = (0, import_react38.memo)(function TldrawEditor2({
  store: store2,
  components,
  className,
  user: _user,
  ...rest
}) {
  var _a2, _b2;
  const [container, setContainer] = import_react38.default.useState(null);
  const user = (0, import_react38.useMemo)(() => _user != null ? _user : createTLUser(), [_user]);
  const ErrorFallback = (components == null ? void 0 : components.ErrorFallback) === void 0 ? DefaultErrorFallback : components == null ? void 0 : components.ErrorFallback;
  const withDefaults = {
    ...rest,
    shapeUtils: (_a2 = rest.shapeUtils) != null ? _a2 : EMPTY_SHAPE_UTILS_ARRAY,
    tools: (_b2 = rest.tools) != null ? _b2 : EMPTY_TOOLS_ARRAY,
    components
  };
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", {
    ref: setContainer,
    draggable: false,
    className: (0, import_classnames11.default)("tl-container tl-theme__light", className),
    onPointerDown: stopEventPropagation,
    tabIndex: -1,
    children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(OptionalErrorBoundary, {
      fallback: ErrorFallback,
      onError: (error) => annotateError(error, { tags: { origin: "react.tldraw-before-app" } }),
      children: container && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ContainerProvider, { container, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(EditorComponentsProvider, { overrides: components, children: store2 ? store2 instanceof Store ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TldrawEditorWithReadyStore, { ...withDefaults, store: store2, user }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TldrawEditorWithLoadingStore, { ...withDefaults, store: store2, user }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TldrawEditorWithOwnStore, { ...withDefaults, store: store2, user }) }) })
    })
  });
});
function TldrawEditorWithOwnStore(props) {
  const { defaultName, snapshot, initialData, shapeUtils, persistenceKey, sessionId, user } = props;
  const syncedStore = useLocalStore({
    shapeUtils,
    initialData,
    persistenceKey,
    sessionId,
    defaultName,
    snapshot
  });
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TldrawEditorWithLoadingStore, { ...props, store: syncedStore, user });
}
var TldrawEditorWithLoadingStore = (0, import_react38.memo)(function TldrawEditorBeforeLoading({
  store: store2,
  user,
  ...rest
}) {
  const container = useContainer();
  (0, import_react38.useLayoutEffect)(() => {
    if (user.userPreferences.get().isDarkMode) {
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    }
  }, [container, user]);
  const { LoadingScreen: LoadingScreen2 } = useEditorComponents();
  switch (store2.status) {
    case "error": {
      throw store2.error;
    }
    case "loading": {
      return LoadingScreen2 ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(LoadingScreen2, {}) : null;
    }
    case "not-synced": {
      break;
    }
    case "synced-local": {
      break;
    }
    case "synced-remote": {
      break;
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TldrawEditorWithReadyStore, { ...rest, store: store2.store, user });
});
function TldrawEditorWithReadyStore({
  onMount,
  children,
  store: store2,
  tools,
  shapeUtils,
  user,
  initialState: initialState2,
  autoFocus = true,
  inferDarkMode
}) {
  const { ErrorFallback } = useEditorComponents();
  const container = useContainer();
  const [editor, setEditor] = (0, import_react38.useState)(null);
  (0, import_react38.useLayoutEffect)(() => {
    const editor2 = new Editor({
      store: store2,
      shapeUtils,
      tools,
      getContainer: () => container,
      user,
      initialState: initialState2,
      inferDarkMode
    });
    setEditor(editor2);
    return () => {
      editor2.dispose();
    };
  }, [container, shapeUtils, tools, store2, user, initialState2, inferDarkMode]);
  const crashingError = (0, import_react38.useSyncExternalStore)((0, import_react38.useCallback)((onStoreChange) => {
    if (editor) {
      editor.on("crash", onStoreChange);
      return () => editor.off("crash", onStoreChange);
    }
    return () => {
    };
  }, [editor]), () => {
    var _a2;
    return (_a2 = editor == null ? void 0 : editor.getCrashingError()) != null ? _a2 : null;
  });
  const { Canvas } = useEditorComponents();
  if (!editor) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(OptionalErrorBoundary, {
    fallback: ErrorFallback,
    onError: (error) => editor.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
    children: crashingError ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Crash, { crashingError }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Layout, { autoFocus, onMount, children: children != null ? children : Canvas ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Canvas, {}) : null }) })
  });
}
function Layout({
  children,
  onMount,
  autoFocus
}) {
  useZoomCss();
  useCursor();
  useDarkMode();
  useSafariFocusOutFix();
  useForceUpdate();
  useFocusEvents(autoFocus);
  useOnMount(onMount);
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_jsx_runtime29.Fragment, { children });
}
function Crash({ crashingError }) {
  throw crashingError;
}
function LoadingScreen({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "tl-loading", children });
}
function ErrorScreen({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "tl-loading", children });
}
function useOnMount(onMount) {
  const editor = useEditor();
  const onMountEvent = useEvent((editor2) => {
    const teardown = onMount == null ? void 0 : onMount(editor2);
    editor2.emit("mount");
    window.tldrawReady = true;
    return teardown;
  });
  import_react38.default.useLayoutEffect(() => {
    if (editor)
      return onMountEvent == null ? void 0 : onMountEvent(editor);
  }, [editor, onMountEvent]);
}

// node_modules/@tldraw/editor/dist-esm/lib/components/HTMLContainer.mjs
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var import_classnames12 = __toESM(require_classnames(), 1);
function HTMLContainer({ children, className = "", ...rest }) {
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { ...rest, className: (0, import_classnames12.default)("tl-html-container", className), children });
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/resizeBox.mjs
function resizeBox(shape, info, opts = {}) {
  const { newPoint, handle, scaleX, scaleY } = info;
  const { minWidth = 1, maxWidth: maxWidth2 = Infinity, minHeight = 1, maxHeight: maxHeight2 = Infinity } = opts;
  let w = shape.props.w * scaleX;
  let h = shape.props.h * scaleY;
  const offset4 = new Vec(0, 0);
  if (w > 0) {
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset4.x = w - minWidth;
          break;
        }
        case "top":
        case "bottom": {
          offset4.x = (w - minWidth) / 2;
          break;
        }
        default: {
          offset4.x = 0;
        }
      }
      w = minWidth;
    }
  } else {
    offset4.x = w;
    w = -w;
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset4.x = -w;
          break;
        }
        default: {
          offset4.x = -minWidth;
        }
      }
      w = minWidth;
    }
  }
  if (h > 0) {
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset4.y = h - minHeight;
          break;
        }
        case "right":
        case "left": {
          offset4.y = (h - minHeight) / 2;
          break;
        }
        default: {
          offset4.y = 0;
        }
      }
      h = minHeight;
    }
  } else {
    offset4.y = h;
    h = -h;
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset4.y = -h;
          break;
        }
        default: {
          offset4.y = -minHeight;
        }
      }
      h = minHeight;
    }
  }
  const { x, y } = offset4.rot(shape.rotation).add(newPoint);
  return {
    x,
    y,
    props: {
      w: Math.min(maxWidth2, w),
      h: Math.min(maxHeight2, h)
    }
  };
}

// node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/BaseBoxShapeUtil.mjs
var BaseBoxShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "onResize", (shape, info) => {
      return resizeBox(shape, info);
    });
  }
  getGeometry(shape) {
    return new Rectangle2d({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: true
    });
  }
  getHandleSnapGeometry(shape) {
    return {
      points: this.getGeometry(shape).bounds.cornersAndCenter
    };
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Idle.mjs
var Idle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle, "id", "idle");

// node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Pointing.mjs
var Pointing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "markId", "");
    __publicField(this, "wasFocusedOnEnter", false);
    __publicField(this, "onEnter", () => {
      this.wasFocusedOnEnter = !this.editor.getIsMenuOpen();
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        const { originPagePoint } = this.editor.inputs;
        const shapeType = this.parent.shapeType;
        const id = createShapeId();
        this.markId = `creating:${id}`;
        this.editor.mark(this.markId);
        this.editor.createShapes([
          {
            id,
            type: shapeType,
            x: originPagePoint.x,
            y: originPagePoint.y,
            props: {
              w: 1,
              h: 1
            }
          }
        ]).select(id);
        this.editor.setCurrentTool("select.resizing", {
          ...info,
          target: "selection",
          handle: "bottom_right",
          isCreating: true,
          creationCursorOffset: { x: 1, y: 1 },
          onInteractionEnd: this.parent.id,
          onCreate: this.parent.onCreate
        });
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  complete() {
    const { originPagePoint } = this.editor.inputs;
    if (!this.wasFocusedOnEnter) {
      return;
    }
    this.editor.mark(this.markId);
    const shapeType = this.parent.shapeType;
    const id = createShapeId();
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: shapeType,
        x: originPagePoint.x,
        y: originPagePoint.y
      }
    ]);
    const shape = this.editor.getShape(id);
    const { w, h } = this.editor.getShapeUtil(shape).getDefaultProps();
    const delta = new Vec(w / 2, h / 2);
    const parentTransform = this.editor.getShapeParentTransform(shape);
    if (parentTransform)
      delta.rot(-parentTransform.rotation());
    this.editor.updateShapes([
      {
        id,
        type: shapeType,
        x: shape.x - delta.x,
        y: shape.y - delta.y
      }
    ]);
    this.editor.setSelectedShapes([id]);
    if (this.editor.getInstanceState().isToolLocked) {
      this.parent.transition("idle");
    } else {
      this.editor.setCurrentTool("select.idle");
    }
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(Pointing, "id", "pointing");

// node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/BaseBoxShapeTool.mjs
var BaseBoxShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onCreate");
  }
};
__publicField(BaseBoxShapeTool, "id", "box");
__publicField(BaseBoxShapeTool, "initial", "idle");
__publicField(BaseBoxShapeTool, "children", () => [Idle, Pointing]);

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsEditing.mjs
function useIsEditing(shapeId) {
  const editor = useEditor();
  return useValue("isEditing", () => editor.getEditingShapeId() === shapeId, [editor, shapeId]);
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useSafeId.mjs
var import_react39 = __toESM(require_react(), 1);
function useSafeId() {
  return (0, import_react39.useId)().replace(/:/g, "_");
}

// node_modules/@tldraw/editor/dist-esm/lib/hooks/useSelectionEvents.mjs
var import_react40 = __toESM(require_react(), 1);
function useSelectionEvents(handle) {
  const editor = useEditor();
  const events = (0, import_react40.useMemo)(function selectionEvents() {
    const onPointerDown = (e) => {
      if (e.isKilled)
        return;
      if (e.button === 2) {
        editor.dispatch({
          type: "pointer",
          target: "selection",
          handle,
          name: "right_click",
          ...getPointerInfo(e)
        });
        return;
      }
      if (e.button !== 0)
        return;
      const elm = loopToHtmlElement(e.currentTarget);
      function releaseCapture() {
        elm.removeEventListener("pointerup", releaseCapture);
        releasePointerCapture(elm, e);
      }
      setPointerCapture(elm, e);
      elm.addEventListener("pointerup", releaseCapture);
      editor.dispatch({
        name: "pointer_down",
        type: "pointer",
        target: "selection",
        handle,
        ...getPointerInfo(e)
      });
      stopEventPropagation(e);
    };
    let lastX, lastY;
    function onPointerMove(e) {
      if (e.isKilled)
        return;
      if (e.button !== 0)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      editor.dispatch({
        name: "pointer_move",
        type: "pointer",
        target: "selection",
        handle,
        ...getPointerInfo(e)
      });
    }
    const onPointerUp = (e) => {
      if (e.isKilled)
        return;
      if (e.button !== 0)
        return;
      editor.dispatch({
        name: "pointer_up",
        type: "pointer",
        target: "selection",
        handle,
        ...getPointerInfo(e)
      });
    };
    return {
      onPointerDown,
      onPointerMove,
      onPointerUp
    };
  }, [editor, handle]);
  return events;
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/geometry-constants.mjs
var SPACING = 20;
var MIN_COUNT = 8;
function getVerticesCountForLength(length, spacing = SPACING) {
  return Math.max(MIN_COUNT, Math.ceil(length / spacing));
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Arc2d.mjs
var Arc2d = class extends Geometry2d {
  constructor(config) {
    super({ ...config, isFilled: false, isClosed: false });
    __publicField(this, "_center");
    __publicField(this, "radius");
    __publicField(this, "start");
    __publicField(this, "end");
    __publicField(this, "measure");
    __publicField(this, "length");
    __publicField(this, "angleStart");
    __publicField(this, "angleEnd");
    const { center, radius, sweepFlag, largeArcFlag, start, end } = config;
    if (start.equals(end))
      throw Error(`Arc must have different start and end points.`);
    this.angleStart = Vec.Angle(center, start);
    this.angleEnd = Vec.Angle(center, end);
    this.measure = getArcMeasure(this.angleStart, this.angleEnd, sweepFlag, largeArcFlag);
    this.length = this.measure * radius;
    this.start = start;
    this.end = end;
    this._center = center;
    this.radius = radius;
  }
  nearestPoint(point) {
    const { _center, measure, radius, angleEnd, angleStart, start: A, end: B } = this;
    const t2 = getPointInArcT(measure, angleStart, angleEnd, _center.angle(point));
    if (t2 <= 0)
      return A;
    if (t2 >= 1)
      return B;
    const P = _center.clone().add(point.clone().sub(_center).uni().mul(radius));
    let nearest;
    let dist = Infinity;
    let d;
    for (const p of [A, B, P]) {
      d = Vec.Dist2(point, p);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B) {
    const { _center, radius, measure, angleStart, angleEnd } = this;
    const intersection = intersectLineSegmentCircle(A, B, _center, radius);
    if (intersection === null)
      return false;
    return intersection.some((p) => {
      const result = getPointInArcT(measure, angleStart, angleEnd, _center.angle(p));
      return result >= 0 && result <= 1;
    });
  }
  getVertices() {
    const { _center, measure, length, radius, angleStart } = this;
    const vertices = [];
    for (let i = 0, n = getVerticesCountForLength(Math.abs(length)); i < n + 1; i++) {
      const t2 = i / n * measure;
      const angle = angleStart + t2;
      vertices.push(getPointOnCircle(_center, radius, angle));
    }
    return vertices;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Circle2d.mjs
var Circle2d = class extends Geometry2d {
  constructor(config) {
    super({ isClosed: true, ...config });
    __publicField(this, "_center");
    __publicField(this, "radius");
    __publicField(this, "x");
    __publicField(this, "y");
    this.config = config;
    const { x = 0, y = 0, radius } = config;
    this.x = x;
    this.y = y;
    this._center = new Vec(radius + x, radius + y);
    this.radius = radius;
  }
  getBounds() {
    return new Box(this.x, this.y, this.radius * 2, this.radius * 2);
  }
  getVertices() {
    const { _center, radius } = this;
    const perimeter = PI2 * radius;
    const vertices = [];
    for (let i = 0, n = getVerticesCountForLength(perimeter); i < n; i++) {
      const angle = i / n * PI2;
      vertices.push(getPointOnCircle(_center, radius, angle));
    }
    return vertices;
  }
  nearestPoint(point) {
    const { _center, radius } = this;
    if (_center.equals(point))
      return Vec.AddXY(_center, radius, 0);
    return _center.clone().add(point.clone().sub(_center).uni().mul(radius));
  }
  hitTestLineSegment(A, B, distance = 0) {
    const { _center, radius } = this;
    return intersectLineSegmentCircle(A, B, _center, radius + distance) !== null;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicBezier2d.mjs
var CubicBezier2d = class extends Polyline2d {
  constructor(config) {
    const { start: a, cp1: b, cp2: c, end: d } = config;
    super({ ...config, points: [a, d] });
    __publicField(this, "a");
    __publicField(this, "b");
    __publicField(this, "c");
    __publicField(this, "d");
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  getVertices() {
    const vertices = [];
    const { a, b, c, d } = this;
    for (let i = 0, n = 10; i <= n; i++) {
      const t2 = i / n;
      vertices.push(new Vec((1 - t2) * (1 - t2) * (1 - t2) * a.x + 3 * ((1 - t2) * (1 - t2)) * t2 * b.x + 3 * (1 - t2) * (t2 * t2) * c.x + t2 * t2 * t2 * d.x, (1 - t2) * (1 - t2) * (1 - t2) * a.y + 3 * ((1 - t2) * (1 - t2)) * t2 * b.y + 3 * (1 - t2) * (t2 * t2) * c.y + t2 * t2 * t2 * d.y));
    }
    return vertices;
  }
  midPoint() {
    return getAtT(this, 0.5);
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    let d;
    let p;
    for (const edge of this.segments) {
      p = edge.nearestPoint(A);
      d = Vec.Dist2(p, A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
};
function getAtT(segment, t2) {
  const { a, b, c, d } = segment;
  return new Vec((1 - t2) * (1 - t2) * (1 - t2) * a.x + 3 * ((1 - t2) * (1 - t2)) * t2 * b.x + 3 * (1 - t2) * (t2 * t2) * c.x + t2 * t2 * t2 * d.x, (1 - t2) * (1 - t2) * (1 - t2) * a.y + 3 * ((1 - t2) * (1 - t2)) * t2 * b.y + 3 * (1 - t2) * (t2 * t2) * c.y + t2 * t2 * t2 * d.y);
}

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicSpline2d.mjs
var CubicSpline2d = class extends Geometry2d {
  constructor(config) {
    super({ ...config, isClosed: false, isFilled: false });
    __publicField(this, "points");
    __publicField(this, "_segments");
    __publicField(this, "_length");
    const { points } = config;
    this.points = points;
  }
  get segments() {
    if (!this._segments) {
      this._segments = [];
      const { points } = this;
      const len = points.length;
      const last3 = len - 2;
      const k = 1.25;
      for (let i = 0; i < len - 1; i++) {
        const p0 = i === 0 ? points[0] : points[i - 1];
        const p1 = points[i];
        const p2 = points[i + 1];
        const p3 = i === last3 ? p2 : points[i + 2];
        const start = p1, cp1 = i === 0 ? p0 : new Vec(p1.x + (p2.x - p0.x) / 6 * k, p1.y + (p2.y - p0.y) / 6 * k), cp2 = i === last3 ? p2 : new Vec(p2.x - (p3.x - p1.x) / 6 * k, p2.y - (p3.y - p1.y) / 6 * k), end = p2;
        this._segments.push(new CubicBezier2d({ start, cp1, cp2, end }));
      }
    }
    return this._segments;
  }
  get length() {
    if (!this._length) {
      this._length = this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    return this._length;
  }
  getVertices() {
    const vertices = this.segments.reduce((acc, segment) => {
      return acc.concat(segment.vertices);
    }, []);
    vertices.push(this.points[this.points.length - 1]);
    return vertices;
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    let d;
    let p;
    for (const segment of this.segments) {
      p = segment.nearestPoint(A);
      d = Vec.Dist2(p, A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B) {
    return this.segments.some((segment) => segment.hitTestLineSegment(A, B));
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Ellipse2d.mjs
var Ellipse2d = class extends Geometry2d {
  constructor(config) {
    super({ ...config, isClosed: true });
    __publicField(this, "w");
    __publicField(this, "h");
    __publicField(this, "_edges");
    this.config = config;
    const { width, height } = config;
    this.w = width;
    this.h = height;
  }
  get edges() {
    if (!this._edges) {
      const { vertices } = this;
      this._edges = [];
      for (let i = 0, n = vertices.length; i < n; i++) {
        const start = vertices[i];
        const end = vertices[(i + 1) % n];
        this._edges.push(new Edge2d({ start, end }));
      }
    }
    return this._edges;
  }
  getVertices() {
    const w = Math.max(1, this.w);
    const h = Math.max(1, this.h);
    const cx = w / 2;
    const cy = h / 2;
    const q = Math.pow(cx - cy, 2) / Math.pow(cx + cy, 2);
    const p = PI * (cx + cy) * (1 + 3 * q / (10 + Math.sqrt(4 - 3 * q)));
    const len = getVerticesCountForLength(p);
    const step = PI2 / len;
    const a = Math.cos(step);
    const b = Math.sin(step);
    let sin = 0;
    let cos = 1;
    let ts = 0;
    let tc = 1;
    const vertices = Array(len);
    for (let i = 0; i < len; i++) {
      vertices[i] = new Vec(cx + cx * cos, cy + cy * sin);
      ts = b * cos + a * sin;
      tc = a * cos - b * sin;
      sin = ts;
      cos = tc;
    }
    return vertices;
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    let d;
    let p;
    for (const edge of this.edges) {
      p = edge.nearestPoint(A);
      d = Vec.Dist2(p, A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B) {
    return this.edges.some((edge) => edge.hitTestLineSegment(A, B));
  }
  getBounds() {
    return new Box(0, 0, this.w, this.h);
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Stadium2d.mjs
var STADIUM_VERTICES_LENGTH = 18;
var Stadium2d = class extends Ellipse2d {
  constructor(config) {
    super({ ...config });
    this.config = config;
  }
  getVertices() {
    const w = Math.max(1, this.w);
    const h = Math.max(1, this.h);
    const cx = w / 2;
    const cy = h / 2;
    const points = Array(STADIUM_VERTICES_LENGTH);
    let t1, t2;
    if (h > w) {
      for (let i = 0; i < STADIUM_VERTICES_LENGTH - 1; i++) {
        t1 = -PI + PI * i / (STADIUM_VERTICES_LENGTH - 2);
        t2 = PI * i / (STADIUM_VERTICES_LENGTH - 2);
        points[i] = new Vec(cx + cx * Math.cos(t1), cx + cx * Math.sin(t1));
        points[i + (STADIUM_VERTICES_LENGTH - 1)] = new Vec(cx + cx * Math.cos(t2), h - cx + cx * Math.sin(t2));
      }
    } else {
      for (let i = 0; i < STADIUM_VERTICES_LENGTH - 1; i++) {
        t1 = -HALF_PI + PI * i / (STADIUM_VERTICES_LENGTH - 2);
        t2 = HALF_PI + PI * -i / (STADIUM_VERTICES_LENGTH - 2);
        points[i] = new Vec(w - cy + cy * Math.cos(t1), h - cy + cy * Math.sin(t1));
        points[i + (STADIUM_VERTICES_LENGTH - 1)] = new Vec(cy - cy * Math.cos(t2), h - cy + cy * Math.sin(t2));
      }
    }
    return points;
  }
};

// node_modules/@tldraw/editor/dist-esm/lib/utils/edgeScrolling.mjs
function getEdgeProximityFactor(position, dimension, isCoarse, insetStart, insetEnd) {
  const dist = EDGE_SCROLL_DISTANCE;
  const pw = isCoarse ? COARSE_POINTER_WIDTH : 0;
  const pMin = position - pw;
  const pMax = position + pw;
  const min3 = insetStart ? 0 : dist;
  const max2 = insetEnd ? dimension : dimension - dist;
  if (pMin < min3) {
    return Math.min(1, (min3 - pMin) / dist);
  } else if (pMax > max2) {
    return -Math.min(1, (pMax - max2) / dist);
  }
  return 0;
}
function moveCameraWhenCloseToEdge(editor) {
  if (!editor.inputs.isDragging || editor.inputs.isPanning || !editor.getInstanceState().canMoveCamera)
    return;
  const {
    inputs: {
      currentScreenPoint: { x, y }
    }
  } = editor;
  const zoomLevel = editor.getZoomLevel();
  const screenBounds = editor.getViewportScreenBounds();
  const screenSizeFactorX = screenBounds.w < 1e3 ? 0.612 : 1;
  const screenSizeFactorY = screenBounds.h < 1e3 ? 0.612 : 1;
  const {
    isCoarsePointer,
    insets: [t2, r, b, l]
  } = editor.getInstanceState();
  const proximityFactorX = getEdgeProximityFactor(x, screenBounds.w, isCoarsePointer, l, r);
  const proximityFactorY = getEdgeProximityFactor(y, screenBounds.h, isCoarsePointer, t2, b);
  if (proximityFactorX === 0 && proximityFactorY === 0)
    return;
  const pxSpeed = editor.user.getEdgeScrollSpeed() * EDGE_SCROLL_SPEED;
  const scrollDeltaX = pxSpeed * proximityFactorX * screenSizeFactorX / zoomLevel;
  const scrollDeltaY = pxSpeed * proximityFactorY * screenSizeFactorY / zoomLevel;
  const camera = editor.getCamera();
  editor.setCamera({
    x: camera.x + scrollDeltaX,
    y: camera.y + scrollDeltaY
  });
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/sync/hardReset.mjs
async function hardReset({ shouldReload = true } = {}) {
  clearSessionStorage();
  await Promise.all(getAllIndexDbNames().map((db) => deleteDB(db)));
  clearLocalStorage();
  if (shouldReload) {
    window.location.reload();
  }
}
if (typeof window !== "undefined") {
  if (true) {
    ;
    window.hardReset = hardReset;
  }
  ;
  window.__tldraw__hardReset = hardReset;
}

// node_modules/@tldraw/editor/dist-esm/lib/utils/window-open.mjs
function openWindow(url, target = "_blank") {
  runtime.openWindow(url, target);
}

// node_modules/@tldraw/editor/dist-esm/index.mjs
var import_at = __toESM(require_at2(), 1);
var import_flat_map = __toESM(require_flat_map2(), 1);
var import_flat = __toESM(require_flat2(), 1);
var import_at2 = __toESM(require_at4(), 1);
var import_replace_all = __toESM(require_replace_all2(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/menu-hooks.mjs
function shapesWithUnboundArrows(editor) {
  const selectedShapeIds = editor.getSelectedShapeIds();
  const selectedShapes = selectedShapeIds.map((id) => {
    return editor.getShape(id);
  });
  return selectedShapes.filter((shape) => {
    if (!shape)
      return false;
    if (editor.isShapeOfType(shape, "arrow") && shape.props.start.type === "binding") {
      return false;
    }
    if (editor.isShapeOfType(shape, "arrow") && shape.props.end.type === "binding") {
      return false;
    }
    return true;
  });
}
var useThreeStackableItems = () => {
  const editor = useEditor();
  return useValue("threeStackableItems", () => shapesWithUnboundArrows(editor).length > 2, [editor]);
};
var useAllowGroup = () => {
  const editor = useEditor();
  return useValue("allow group", () => {
    const selectedShapes = editor.getSelectedShapes();
    if (selectedShapes.length < 2)
      return false;
    for (const shape of selectedShapes) {
      if (editor.isShapeOfType(shape, "arrow")) {
        const { start, end } = shape.props;
        if (start.type === "binding") {
          if (!selectedShapes.some((s) => s.id === start.boundShapeId)) {
            return false;
          }
        }
        if (end.type === "binding") {
          if (!selectedShapes.some((s) => s.id === end.boundShapeId)) {
            return false;
          }
        }
      }
    }
    return true;
  }, [editor]);
};
var useAllowUngroup = () => {
  const editor = useEditor();
  return useValue("allowUngroup", () => editor.getSelectedShapeIds().some((id) => {
    var _a2;
    return ((_a2 = editor.getShape(id)) == null ? void 0 : _a2.type) === "group";
  }), [editor]);
};
var showMenuPaste = typeof window !== "undefined" && "navigator" in window && Boolean(navigator.clipboard) && Boolean(navigator.clipboard.read);
function useAnySelectedShapesCount(min3, max2) {
  const editor = useEditor();
  return useValue("selectedShapes", () => {
    const len = editor.getSelectedShapes().length;
    if (min3 === void 0) {
      if (max2 === void 0) {
        return len;
      } else {
        return len <= max2;
      }
    } else {
      if (max2 === void 0) {
        return len >= min3;
      } else {
        return len >= min3 && len <= max2;
      }
    }
  }, [editor, min3, max2]);
}
function useUnlockedSelectedShapesCount(min3, max2) {
  const editor = useEditor();
  return useValue("selectedShapes", () => {
    const len = editor.getSelectedShapes().filter((s) => !editor.isShapeOrAncestorLocked(s)).length;
    if (min3 === void 0) {
      if (max2 === void 0) {
        return len;
      } else {
        return len <= max2;
      }
    } else {
      if (max2 === void 0) {
        return len >= min3;
      } else {
        return len >= min3 && len <= max2;
      }
    }
  }, [editor]);
}
function useShowAutoSizeToggle() {
  const editor = useEditor();
  return useValue("showAutoSizeToggle", () => {
    const selectedShapes = editor.getSelectedShapes();
    return selectedShapes.length === 1 && editor.isShapeOfType(selectedShapes[0], "text") && selectedShapes[0].props.autoSize === false;
  }, [editor]);
}
function useHasLinkShapeSelected() {
  const editor = useEditor();
  return useValue("hasLinkShapeSelected", () => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    return !!(onlySelectedShape && onlySelectedShape.type !== "embed" && "url" in onlySelectedShape.props && !onlySelectedShape.isLocked);
  }, [editor]);
}
function useOnlyFlippableShape() {
  const editor = useEditor();
  return useValue("onlyFlippableShape", () => {
    const shape = editor.getOnlySelectedShape();
    return shape && (editor.isShapeOfType(shape, "group") || editor.isShapeOfType(shape, "arrow") || editor.isShapeOfType(shape, "line") || editor.isShapeOfType(shape, "draw"));
  }, [editor]);
}
function useCanRedo() {
  const editor = useEditor();
  return useValue("useCanRedo", () => editor.getCanRedo(), [editor]);
}
function useCanUndo() {
  const editor = useEditor();
  return useValue("useCanUndo", () => editor.getCanUndo(), [editor]);
}

// node_modules/tldraw/dist-esm/lib/Tldraw.mjs
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
var import_react132 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/canvas/TldrawHandles.mjs
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
function TldrawHandles({ children }) {
  const editor = useEditor();
  const shouldDisplayHandles = useValue("shouldDisplayHandles", () => {
    if (editor.isInAny("select.idle", "select.pointing_handle", "select.pointing_shape")) {
      return true;
    }
    if (editor.isInAny("select.editing_shape")) {
      const onlySelectedShape = editor.getOnlySelectedShape();
      return onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "note");
    }
    return false;
  }, [editor]);
  if (!shouldDisplayHandles)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
}

// node_modules/tldraw/dist-esm/lib/canvas/TldrawScribble.mjs
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var import_classnames13 = __toESM(require_classnames(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokeOutlinePoints.mjs
var { PI: PI3 } = Math;
var FIXED_PI = PI3 + 1e-4;
function getStrokeOutlineTracks(strokePoints, options = {}) {
  const { size: size4 = 16, smoothing = 0.5 } = options;
  if (strokePoints.length === 0 || size4 <= 0) {
    return { left: [], right: [] };
  }
  const firstStrokePoint = strokePoints[0];
  const lastStrokePoint = strokePoints[strokePoints.length - 1];
  const totalLength = lastStrokePoint.runningLength;
  const minDistance = Math.pow(size4 * smoothing, 2);
  const leftPts = [];
  const rightPts = [];
  let prevVector = strokePoints[0].vector;
  let pl = strokePoints[0].point;
  let pr = pl;
  let tl = pl;
  let tr = pr;
  let isPrevPointSharpCorner = false;
  let strokePoint;
  for (let i = 0; i < strokePoints.length; i++) {
    strokePoint = strokePoints[i];
    const { point, vector } = strokePoints[i];
    const prevDpr = strokePoint.vector.dpr(prevVector);
    const nextVector = (i < strokePoints.length - 1 ? strokePoints[i + 1] : strokePoints[i]).vector;
    const nextDpr = i < strokePoints.length - 1 ? nextVector.dpr(strokePoint.vector) : 1;
    const isPointSharpCorner = prevDpr < 0 && !isPrevPointSharpCorner;
    const isNextPointSharpCorner = nextDpr !== null && nextDpr < 0.2;
    if (isPointSharpCorner || isNextPointSharpCorner) {
      if (nextDpr > -0.62 && totalLength - strokePoint.runningLength > strokePoint.radius) {
        const offset22 = prevVector.clone().mul(strokePoint.radius);
        const cpr = prevVector.clone().cpr(nextVector);
        if (cpr < 0) {
          tl = Vec.Add(point, offset22);
          tr = Vec.Sub(point, offset22);
        } else {
          tl = Vec.Sub(point, offset22);
          tr = Vec.Add(point, offset22);
        }
        leftPts.push(tl);
        rightPts.push(tr);
      } else {
        const offset22 = prevVector.clone().mul(strokePoint.radius).per();
        const start = Vec.Sub(strokePoint.input, offset22);
        for (let step = 1 / 13, t2 = 0; t2 < 1; t2 += step) {
          tl = Vec.RotWith(start, strokePoint.input, FIXED_PI * t2);
          leftPts.push(tl);
          tr = Vec.RotWith(start, strokePoint.input, FIXED_PI + FIXED_PI * -t2);
          rightPts.push(tr);
        }
      }
      pl = tl;
      pr = tr;
      if (isNextPointSharpCorner) {
        isPrevPointSharpCorner = true;
      }
      continue;
    }
    isPrevPointSharpCorner = false;
    if (strokePoint === firstStrokePoint || strokePoint === lastStrokePoint) {
      const offset22 = Vec.Per(vector).mul(strokePoint.radius);
      leftPts.push(Vec.Sub(point, offset22));
      rightPts.push(Vec.Add(point, offset22));
      continue;
    }
    const offset4 = Vec.Lrp(nextVector, vector, nextDpr).per().mul(strokePoint.radius);
    tl = Vec.Sub(point, offset4);
    if (i <= 1 || Vec.Dist2(pl, tl) > minDistance) {
      leftPts.push(tl);
      pl = tl;
    }
    tr = Vec.Add(point, offset4);
    if (i <= 1 || Vec.Dist2(pr, tr) > minDistance) {
      rightPts.push(tr);
      pr = tr;
    }
    prevVector = vector;
    continue;
  }
  return {
    left: leftPts,
    right: rightPts
  };
}
function getStrokeOutlinePoints(strokePoints, options = {}) {
  const { size: size4 = 16, start = {}, end = {}, last: isComplete = false } = options;
  const { cap: capStart = true } = start;
  const { cap: capEnd = true } = end;
  if (strokePoints.length === 0 || size4 <= 0) {
    return [];
  }
  const firstStrokePoint = strokePoints[0];
  const lastStrokePoint = strokePoints[strokePoints.length - 1];
  const totalLength = lastStrokePoint.runningLength;
  const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size4, totalLength) : start.taper;
  const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size4, totalLength) : end.taper;
  const { left: leftPts, right: rightPts } = getStrokeOutlineTracks(strokePoints, options);
  const firstPoint = firstStrokePoint.point;
  const lastPoint = strokePoints.length > 1 ? strokePoints[strokePoints.length - 1].point : Vec.AddXY(firstStrokePoint.point, 1, 1);
  if (strokePoints.length === 1) {
    if (!(taperStart || taperEnd) || isComplete) {
      const start2 = Vec.Add(firstPoint, Vec.Sub(firstPoint, lastPoint).uni().per().mul(-firstStrokePoint.radius));
      const dotPts = [];
      for (let step = 1 / 13, t2 = step; t2 <= 1; t2 += step) {
        dotPts.push(Vec.RotWith(start2, firstPoint, FIXED_PI * 2 * t2));
      }
      return dotPts;
    }
  }
  const startCap = [];
  if (taperStart || taperEnd && strokePoints.length === 1) {
  } else if (capStart) {
    for (let step = 1 / 8, t2 = step; t2 <= 1; t2 += step) {
      const pt = Vec.RotWith(rightPts[0], firstPoint, FIXED_PI * t2);
      startCap.push(pt);
    }
  } else {
    const cornersVector = Vec.Sub(leftPts[0], rightPts[0]);
    const offsetA = Vec.Mul(cornersVector, 0.5);
    const offsetB = Vec.Mul(cornersVector, 0.51);
    startCap.push(Vec.Sub(firstPoint, offsetA), Vec.Sub(firstPoint, offsetB), Vec.Add(firstPoint, offsetB), Vec.Add(firstPoint, offsetA));
  }
  const endCap = [];
  const direction = lastStrokePoint.vector.clone().per().neg();
  if (taperEnd || taperStart && strokePoints.length === 1) {
    endCap.push(lastPoint);
  } else if (capEnd) {
    const start2 = Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius));
    for (let step = 1 / 29, t2 = step; t2 < 1; t2 += step) {
      endCap.push(Vec.RotWith(start2, lastPoint, FIXED_PI * 3 * t2));
    }
  } else {
    endCap.push(Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius)), Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius * 0.99)), Vec.Sub(lastPoint, Vec.Mul(direction, lastStrokePoint.radius * 0.99)), Vec.Sub(lastPoint, Vec.Mul(direction, lastStrokePoint.radius)));
  }
  return leftPts.concat(endCap, rightPts.reverse(), startCap);
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokePoints.mjs
var MIN_START_PRESSURE = 0.025;
var MIN_END_PRESSURE = 0.01;
function getStrokePoints(rawInputPoints, options = {}) {
  var _a2;
  const { streamline = 0.5, size: size4 = 16, simulatePressure = false } = options;
  if (rawInputPoints.length === 0)
    return [];
  const t2 = 0.15 + (1 - streamline) * 0.85;
  let pts = rawInputPoints.map(Vec.From);
  let pointsRemovedFromNearEnd = 0;
  if (!simulatePressure) {
    let pt2 = pts[0];
    while (pt2) {
      if (pt2.z >= MIN_START_PRESSURE)
        break;
      pts.shift();
      pt2 = pts[0];
    }
  }
  if (!simulatePressure) {
    let pt2 = pts[pts.length - 1];
    while (pt2) {
      if (pt2.z >= MIN_END_PRESSURE)
        break;
      pts.pop();
      pt2 = pts[pts.length - 1];
    }
  }
  if (pts.length === 0)
    return [
      {
        point: Vec.From(rawInputPoints[0]),
        input: Vec.From(rawInputPoints[0]),
        pressure: simulatePressure ? 0.5 : 0.15,
        vector: new Vec(1, 1),
        distance: 0,
        runningLength: 0,
        radius: 1
      }
    ];
  let pt = pts[1];
  while (pt) {
    if (Vec.Dist2(pt, pts[0]) > (size4 / 3) ** 2)
      break;
    pts[0].z = Math.max(pts[0].z, pt.z);
    pts.splice(1, 1);
    pt = pts[1];
  }
  const last3 = pts.pop();
  pt = pts[pts.length - 1];
  while (pt) {
    if (Vec.Dist2(pt, last3) > (size4 / 3) ** 2)
      break;
    pts.pop();
    pt = pts[pts.length - 1];
    pointsRemovedFromNearEnd++;
  }
  pts.push(last3);
  const isComplete = options.last || !options.simulatePressure || pts.length > 1 && Vec.Dist2(pts[pts.length - 1], pts[pts.length - 2]) < size4 ** 2 || pointsRemovedFromNearEnd > 0;
  if (pts.length === 2 && options.simulatePressure) {
    const last22 = pts[1];
    pts = pts.slice(0, -1);
    for (let i = 1; i < 5; i++) {
      const next = Vec.Lrp(pts[0], last22, i / 4);
      next.z = (pts[0].z + (last22.z - pts[0].z)) * i / 4;
      pts.push(next);
    }
  }
  const strokePoints = [
    {
      point: pts[0],
      input: pts[0],
      pressure: simulatePressure ? 0.5 : pts[0].z,
      vector: new Vec(1, 1),
      distance: 0,
      runningLength: 0,
      radius: 1
    }
  ];
  let totalLength = 0;
  let prev = strokePoints[0];
  let point, distance;
  if (isComplete && streamline > 0) {
    pts.push(pts[pts.length - 1].clone());
  }
  for (let i = 1, n = pts.length; i < n; i++) {
    point = !t2 || options.last && i === n - 1 ? pts[i].clone() : pts[i].clone().lrp(prev.point, 1 - t2);
    if (prev.point.equals(point))
      continue;
    distance = Vec.Dist(point, prev.point);
    totalLength += distance;
    if (i < 4 && totalLength < size4) {
      continue;
    }
    prev = {
      input: pts[i],
      point,
      pressure: simulatePressure ? 0.5 : pts[i].z,
      vector: Vec.Sub(prev.point, point).uni(),
      distance,
      runningLength: totalLength,
      radius: 1
    };
    strokePoints.push(prev);
  }
  if ((_a2 = strokePoints[1]) == null ? void 0 : _a2.vector) {
    strokePoints[0].vector = strokePoints[1].vector.clone();
  }
  if (totalLength < 1) {
    const maxPressureAmongPoints = Math.max(0.5, ...strokePoints.map((s) => s.pressure));
    strokePoints.forEach((s) => s.pressure = maxPressureAmongPoints);
  }
  return strokePoints;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/setStrokePointRadii.mjs
var { min } = Math;
var RATE_OF_PRESSURE_CHANGE = 0.275;
function setStrokePointRadii(strokePoints, options) {
  const {
    size: size4 = 16,
    thinning = 0.5,
    simulatePressure = true,
    easing = (t2) => t2,
    start = {},
    end = {}
  } = options;
  const { easing: taperStartEase = EASINGS.easeOutQuad } = start;
  const { easing: taperEndEase = EASINGS.easeOutCubic } = end;
  const totalLength = strokePoints[strokePoints.length - 1].runningLength;
  let firstRadius;
  let prevPressure = strokePoints[0].pressure;
  let strokePoint;
  if (!simulatePressure && totalLength < size4) {
    const max2 = strokePoints.reduce((max22, curr) => Math.max(max22, curr.pressure), 0.5);
    strokePoints.forEach((sp) => {
      sp.pressure = max2;
      sp.radius = size4 * easing(0.5 - thinning * (0.5 - sp.pressure));
    });
    return strokePoints;
  } else {
    let p;
    for (let i = 0, n = strokePoints.length; i < n; i++) {
      strokePoint = strokePoints[i];
      if (strokePoint.runningLength > size4 * 5)
        break;
      const sp = min(1, strokePoint.distance / size4);
      if (simulatePressure) {
        const rp = min(1, 1 - sp);
        p = min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
      } else {
        p = min(1, prevPressure + (strokePoint.pressure - prevPressure) * 0.5);
      }
      prevPressure = prevPressure + (p - prevPressure) * 0.5;
    }
    for (let i = 0; i < strokePoints.length; i++) {
      strokePoint = strokePoints[i];
      if (thinning) {
        let { pressure } = strokePoint;
        const sp = min(1, strokePoint.distance / size4);
        if (simulatePressure) {
          const rp = min(1, 1 - sp);
          pressure = min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
        } else {
          pressure = min(1, prevPressure + (pressure - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
        }
        strokePoint.radius = size4 * easing(0.5 - thinning * (0.5 - pressure));
        prevPressure = pressure;
      } else {
        strokePoint.radius = size4 / 2;
      }
      if (firstRadius === void 0) {
        firstRadius = strokePoint.radius;
      }
    }
  }
  const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size4, totalLength) : start.taper;
  const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size4, totalLength) : end.taper;
  if (taperStart || taperEnd) {
    for (let i = 0; i < strokePoints.length; i++) {
      strokePoint = strokePoints[i];
      const { runningLength } = strokePoint;
      const ts = runningLength < taperStart ? taperStartEase(runningLength / taperStart) : 1;
      const te = totalLength - runningLength < taperEnd ? taperEndEase((totalLength - runningLength) / taperEnd) : 1;
      strokePoint.radius = Math.max(0.01, strokePoint.radius * Math.min(ts, te));
    }
  }
  return strokePoints;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStroke.mjs
function getStroke(points, options = {}) {
  return getStrokeOutlinePoints(setStrokePointRadii(getStrokePoints(points, options), options), options);
}

// node_modules/tldraw/dist-esm/lib/canvas/TldrawScribble.mjs
function TldrawScribble({ scribble, zoom, color, opacity, className }) {
  if (!scribble.points.length)
    return null;
  const stroke = getStroke(scribble.points, {
    size: scribble.size / zoom,
    start: { taper: scribble.taper, easing: EASINGS.linear },
    last: scribble.state === "stopping",
    simulatePressure: false,
    streamline: 0.32
  });
  let d;
  if (stroke.length < 4) {
    const r = scribble.size / zoom / 2;
    const { x, y } = scribble.points[scribble.points.length - 1];
    d = `M ${x - r},${y} a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 ${-r * 2},0`;
  } else {
    d = getSvgPathFromPoints(stroke);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("svg", { className: className ? (0, import_classnames13.default)("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("path", {
    className: "tl-scribble",
    d,
    fill: color != null ? color : `var(--color-${scribble.color})`,
    opacity: opacity != null ? opacity : scribble.opacity
  }) });
}

// node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionBackground.mjs
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var TldrawSelectionBackground = ({ bounds, rotation }) => {
  const editor = useEditor();
  const shouldDisplay = useValue("should display", () => editor.isInAny("select.idle", "select.brushing", "select.scribble_brushing", "select.pointing_shape", "select.pointing_selection", "text.resizing"), [editor]);
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(DefaultSelectionBackground, { bounds, rotation });
};

// node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionForeground.mjs
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var import_classnames15 = __toESM(require_classnames(), 1);
var import_react41 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/useReadonly.mjs
function useReadonly() {
  const editor = useEditor();
  return useValue("isReadonlyMode", () => editor.getInstanceState().isReadonly, [editor]);
}

// node_modules/tldraw/dist-esm/lib/canvas/TldrawCropHandles.mjs
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var import_classnames14 = __toESM(require_classnames(), 1);
function TldrawCropHandles({
  size: size4,
  width,
  height,
  hideAlternateHandles
}) {
  const cropStrokeWidth = toDomPrecision(size4 / 3);
  const offset4 = cropStrokeWidth / 2;
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("svg", { className: "tl-overlays__item", children: [
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("polyline", {
      className: "tl-corner-crop-handle",
      points: `
						${toDomPrecision(0 - offset4)},${toDomPrecision(size4)} 
						${toDomPrecision(0 - offset4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(size4)},${toDomPrecision(0 - offset4)}`,
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.top_left",
      "aria-label": "top_left handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("line", {
      className: (0, import_classnames14.default)("tl-corner-crop-edge-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      x1: toDomPrecision(width / 2 - size4),
      y1: toDomPrecision(0 - offset4),
      x2: toDomPrecision(width / 2 + size4),
      y2: toDomPrecision(0 - offset4),
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.top",
      "aria-label": "top handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("polyline", {
      className: (0, import_classnames14.default)("tl-corner-crop-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      points: `
						${toDomPrecision(width - size4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(size4)}`,
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.top_right",
      "aria-label": "top_right handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("line", {
      className: (0, import_classnames14.default)("tl-corner-crop-edge-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      x1: toDomPrecision(width + offset4),
      y1: toDomPrecision(height / 2 - size4),
      x2: toDomPrecision(width + offset4),
      y2: toDomPrecision(height / 2 + size4),
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.right",
      "aria-label": "right handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("polyline", {
      className: "tl-corner-crop-handle",
      points: `
						${toDomPrecision(width + offset4)},${toDomPrecision(height - size4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(height + offset4)}
						${toDomPrecision(width - size4)},${toDomPrecision(height + offset4)}`,
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.bottom_right",
      "aria-label": "bottom_right handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("line", {
      className: (0, import_classnames14.default)("tl-corner-crop-edge-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      x1: toDomPrecision(width / 2 - size4),
      y1: toDomPrecision(height + offset4),
      x2: toDomPrecision(width / 2 + size4),
      y2: toDomPrecision(height + offset4),
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.bottom",
      "aria-label": "bottom handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("polyline", {
      className: (0, import_classnames14.default)("tl-corner-crop-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      points: `
						${toDomPrecision(0 + size4)},${toDomPrecision(height + offset4)} 
						${toDomPrecision(0 - offset4)},${toDomPrecision(height + offset4)}
						${toDomPrecision(0 - offset4)},${toDomPrecision(height - size4)}`,
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.bottom_left",
      "aria-label": "bottom_left handle"
    }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("line", {
      className: (0, import_classnames14.default)("tl-corner-crop-edge-handle", {
        "tl-hidden": hideAlternateHandles
      }),
      x1: toDomPrecision(0 - offset4),
      y1: toDomPrecision(height / 2 - size4),
      x2: toDomPrecision(0 - offset4),
      y2: toDomPrecision(height / 2 + size4),
      strokeWidth: cropStrokeWidth,
      "data-testid": "selection.crop.left",
      "aria-label": "left handle"
    })
  ] });
}

// node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionForeground.mjs
var TldrawSelectionForeground = track(function TldrawSelectionForeground2({
  bounds,
  rotation
}) {
  const editor = useEditor();
  const rSvg = (0, import_react41.useRef)(null);
  const isReadonlyMode = useReadonly();
  const topEvents = useSelectionEvents("top");
  const rightEvents = useSelectionEvents("right");
  const bottomEvents = useSelectionEvents("bottom");
  const leftEvents = useSelectionEvents("left");
  const topLeftEvents = useSelectionEvents("top_left");
  const topRightEvents = useSelectionEvents("top_right");
  const bottomRightEvents = useSelectionEvents("bottom_right");
  const bottomLeftEvents = useSelectionEvents("bottom_left");
  const isDefaultCursor = !editor.getIsMenuOpen() && editor.getInstanceState().cursor.type === "default";
  const isCoarsePointer = editor.getInstanceState().isCoarsePointer;
  const onlyShape = editor.getOnlySelectedShape();
  const isLockedShape = onlyShape && editor.isShapeOrAncestorLocked(onlyShape);
  const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
  useTransform(rSvg, bounds == null ? void 0 : bounds.x, bounds == null ? void 0 : bounds.y, 1, editor.getSelectionRotation(), {
    x: -expandOutlineBy,
    y: -expandOutlineBy
  });
  if (!bounds)
    return null;
  bounds = bounds.clone().expandBy(expandOutlineBy).zeroFix();
  const zoom = editor.getZoomLevel();
  const isChangingStyle = editor.getInstanceState().isChangingStyle;
  const width = bounds.width;
  const height = bounds.height;
  const size4 = 8 / zoom;
  const isTinyX = width < size4 * 2;
  const isTinyY = height < size4 * 2;
  const isSmallX = width < size4 * 4;
  const isSmallY = height < size4 * 4;
  const isSmallCropX = width < size4 * 5;
  const isSmallCropY = height < size4 * 5;
  const mobileHandleMultiplier = isCoarsePointer ? 1.75 : 1;
  const targetSize = 6 / zoom * mobileHandleMultiplier;
  const targetSizeX = (isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
  const targetSizeY = (isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
  const showSelectionBounds = (onlyShape ? !editor.getShapeUtil(onlyShape).hideSelectionBoundsFg(onlyShape) : true) && !isChangingStyle;
  let shouldDisplayBox = showSelectionBounds && editor.isInAny("select.idle", "select.brushing", "select.scribble_brushing", "select.pointing_canvas", "select.pointing_selection", "select.pointing_shape", "select.crop.idle", "select.crop.pointing_crop", "select.pointing_resize_handle", "select.pointing_crop_handle") || showSelectionBounds && editor.isIn("select.resizing") && onlyShape && editor.isShapeOfType(onlyShape, "text");
  if (onlyShape && shouldDisplayBox) {
    if (editor.environment.isFirefox && editor.isShapeOfType(onlyShape, "embed")) {
      shouldDisplayBox = false;
    }
  }
  const showCropHandles = editor.isInAny("select.pointing_crop_handle", "select.crop.idle", "select.crop.pointing_crop") && !isChangingStyle && !isReadonlyMode;
  const shouldDisplayControls = editor.isInAny("select.idle", "select.pointing_selection", "select.pointing_shape", "select.crop.idle") && !isChangingStyle && !isReadonlyMode;
  const showCornerRotateHandles = !isCoarsePointer && !(isTinyX || isTinyY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
  const showMobileRotateHandle = isCoarsePointer && (!isSmallX || !isSmallY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
  const showResizeHandles = shouldDisplayControls && (onlyShape ? editor.getShapeUtil(onlyShape).canResize(onlyShape) && !editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape) : true) && !showCropHandles && !isLockedShape;
  const hideAlternateCornerHandles = isTinyX || isTinyY;
  const showOnlyOneHandle = isTinyX && isTinyY;
  const hideAlternateCropHandles = isSmallCropX || isSmallCropY;
  const showHandles = showResizeHandles || showCropHandles;
  const hideRotateCornerHandles = !showCornerRotateHandles;
  const hideMobileRotateHandle = !shouldDisplayControls || !showMobileRotateHandle;
  const hideTopLeftCorner = !shouldDisplayControls || !showHandles;
  const hideTopRightCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
  const hideBottomLeftCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
  const hideBottomRightCorner = !shouldDisplayControls || !showHandles || showOnlyOneHandle && !showCropHandles;
  let hideVerticalEdgeTargets = true;
  let hideHorizontalEdgeTargets = true;
  if (showCropHandles) {
    hideVerticalEdgeTargets = hideAlternateCropHandles;
    hideHorizontalEdgeTargets = hideAlternateCropHandles;
  } else if (showResizeHandles) {
    hideVerticalEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || isCoarsePointer;
    const isMobileAndTextShape = isCoarsePointer && onlyShape && onlyShape.type === "text";
    hideHorizontalEdgeTargets = hideVerticalEdgeTargets && !isMobileAndTextShape;
  }
  const textHandleHeight = Math.min(24 / zoom, height - targetSizeY * 3);
  const showTextResizeHandles = shouldDisplayControls && isCoarsePointer && onlyShape && editor.isShapeOfType(onlyShape, "text") && textHandleHeight * zoom >= 4;
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("svg", { className: "tl-overlays__item tl-selection__fg", "data-testid": "selection-foreground", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("g", { ref: rSvg, children: [
    shouldDisplayBox && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: "tl-selection__fg__outline",
      width: toDomPrecision(width),
      height: toDomPrecision(height)
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(RotateCornerHandle, {
      "data-testid": "selection.rotate.top-left",
      cx: 0,
      cy: 0,
      targetSize,
      corner: "top_left_rotate",
      cursor: isDefaultCursor ? getCursor("nwse-rotate", rotation) : void 0,
      isHidden: hideRotateCornerHandles
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(RotateCornerHandle, {
      "data-testid": "selection.rotate.top-right",
      cx: width + targetSize * 3,
      cy: 0,
      targetSize,
      corner: "top_right_rotate",
      cursor: isDefaultCursor ? getCursor("nesw-rotate", rotation) : void 0,
      isHidden: hideRotateCornerHandles
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(RotateCornerHandle, {
      "data-testid": "selection.rotate.bottom-left",
      cx: 0,
      cy: height + targetSize * 3,
      targetSize,
      corner: "bottom_left_rotate",
      cursor: isDefaultCursor ? getCursor("swne-rotate", rotation) : void 0,
      isHidden: hideRotateCornerHandles
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(RotateCornerHandle, {
      "data-testid": "selection.rotate.bottom-right",
      cx: width + targetSize * 3,
      cy: height + targetSize * 3,
      targetSize,
      corner: "bottom_right_rotate",
      cursor: isDefaultCursor ? getCursor("senw-rotate", rotation) : void 0,
      isHidden: hideRotateCornerHandles
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(MobileRotateHandle, {
      "data-testid": "selection.rotate.mobile",
      cx: isSmallX ? -targetSize * 1.5 : width / 2,
      cy: isSmallX ? height / 2 : -targetSize * 1.5,
      size: size4,
      isHidden: hideMobileRotateHandle
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideVerticalEdgeTargets
      }),
      "data-testid": "selection.resize.top",
      "aria-label": "top target",
      pointerEvents: "all",
      x: 0,
      y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY)),
      width: toDomPrecision(width),
      height: toDomPrecision(Math.max(1, targetSizeY * 2)),
      style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0,
      ...topEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideHorizontalEdgeTargets
      }),
      "data-testid": "selection.resize.right",
      "aria-label": "right target",
      pointerEvents: "all",
      x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX)),
      y: 0,
      height: toDomPrecision(height),
      width: toDomPrecision(Math.max(1, targetSizeX * 2)),
      style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0,
      ...rightEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideVerticalEdgeTargets
      }),
      "data-testid": "selection.resize.bottom",
      "aria-label": "bottom target",
      pointerEvents: "all",
      x: 0,
      y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY)),
      width: toDomPrecision(width),
      height: toDomPrecision(Math.max(1, targetSizeY * 2)),
      style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0,
      ...bottomEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideHorizontalEdgeTargets
      }),
      "data-testid": "selection.resize.left",
      "aria-label": "left target",
      pointerEvents: "all",
      x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX)),
      y: 0,
      height: toDomPrecision(height),
      width: toDomPrecision(Math.max(1, targetSizeX * 2)),
      style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0,
      ...leftEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideTopLeftCorner
      }),
      "data-testid": "selection.target.top-left",
      "aria-label": "top-left target",
      pointerEvents: "all",
      x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5)),
      y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
      width: toDomPrecision(targetSizeX * 3),
      height: toDomPrecision(targetSizeY * 3),
      style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0,
      ...topLeftEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideTopRightCorner
      }),
      "data-testid": "selection.target.top-right",
      "aria-label": "top-right target",
      pointerEvents: "all",
      x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX * 1.5)),
      y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
      width: toDomPrecision(targetSizeX * 3),
      height: toDomPrecision(targetSizeY * 3),
      style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0,
      ...topRightEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideBottomRightCorner
      }),
      "data-testid": "selection.target.bottom-right",
      "aria-label": "bottom-right target",
      pointerEvents: "all",
      x: toDomPrecision(width - (isSmallX ? targetSizeX : targetSizeX * 1.5)),
      y: toDomPrecision(height - (isSmallY ? targetSizeY : targetSizeY * 1.5)),
      width: toDomPrecision(targetSizeX * 3),
      height: toDomPrecision(targetSizeY * 3),
      style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0,
      ...bottomRightEvents
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
      className: (0, import_classnames15.default)("tl-transparent", {
        "tl-hidden": hideBottomLeftCorner
      }),
      "data-testid": "selection.target.bottom-left",
      "aria-label": "bottom-left target",
      pointerEvents: "all",
      x: toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5)),
      y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5)),
      width: toDomPrecision(targetSizeX * 3),
      height: toDomPrecision(targetSizeY * 3),
      style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0,
      ...bottomLeftEvents
    }),
    showResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.resize.top-left",
        className: (0, import_classnames15.default)("tl-corner-handle", {
          "tl-hidden": hideTopLeftCorner
        }),
        "aria-label": "top_left handle",
        x: toDomPrecision(0 - size4 / 2),
        y: toDomPrecision(0 - size4 / 2),
        width: toDomPrecision(size4),
        height: toDomPrecision(size4)
      }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.resize.top-right",
        className: (0, import_classnames15.default)("tl-corner-handle", {
          "tl-hidden": hideTopRightCorner
        }),
        "aria-label": "top_right handle",
        x: toDomPrecision(width - size4 / 2),
        y: toDomPrecision(0 - size4 / 2),
        width: toDomPrecision(size4),
        height: toDomPrecision(size4)
      }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.resize.bottom-right",
        className: (0, import_classnames15.default)("tl-corner-handle", {
          "tl-hidden": hideBottomRightCorner
        }),
        "aria-label": "bottom_right handle",
        x: toDomPrecision(width - size4 / 2),
        y: toDomPrecision(height - size4 / 2),
        width: toDomPrecision(size4),
        height: toDomPrecision(size4)
      }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.resize.bottom-left",
        className: (0, import_classnames15.default)("tl-corner-handle", {
          "tl-hidden": hideBottomLeftCorner
        }),
        "aria-label": "bottom_left handle",
        x: toDomPrecision(0 - size4 / 2),
        y: toDomPrecision(height - size4 / 2),
        width: toDomPrecision(size4),
        height: toDomPrecision(size4)
      })
    ] }),
    showTextResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.text-resize.left.handle",
        className: "tl-text-handle",
        "aria-label": "bottom_left handle",
        x: toDomPrecision(0 - size4 / 4),
        y: toDomPrecision(height / 2 - textHandleHeight / 2),
        rx: size4 / 4,
        width: toDomPrecision(size4 / 2),
        height: toDomPrecision(textHandleHeight)
      }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
        "data-testid": "selection.text-resize.right.handle",
        className: "tl-text-handle",
        "aria-label": "bottom_left handle",
        rx: size4 / 4,
        x: toDomPrecision(width - size4 / 4),
        y: toDomPrecision(height / 2 - textHandleHeight / 2),
        width: toDomPrecision(size4 / 2),
        height: toDomPrecision(textHandleHeight)
      })
    ] }),
    showCropHandles && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TldrawCropHandles, {
      ...{
        size: size4,
        width,
        height,
        hideAlternateHandles: hideAlternateCropHandles
      }
    })
  ] }) });
});
var RotateCornerHandle = function RotateCornerHandle2({
  cx,
  cy,
  targetSize,
  corner,
  cursor,
  isHidden,
  "data-testid": testId
}) {
  const events = useSelectionEvents(corner);
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("rect", {
    className: (0, import_classnames15.default)("tl-transparent", "tl-rotate-corner", { "tl-hidden": isHidden }),
    "data-testid": testId,
    "aria-label": `${corner} target`,
    pointerEvents: "all",
    x: toDomPrecision(cx - targetSize * 3),
    y: toDomPrecision(cy - targetSize * 3),
    width: toDomPrecision(Math.max(1, targetSize * 3)),
    height: toDomPrecision(Math.max(1, targetSize * 3)),
    cursor,
    ...events
  });
};
var SQUARE_ROOT_PI = Math.sqrt(Math.PI);
var MobileRotateHandle = function RotateHandle({
  cx,
  cy,
  size: size4,
  isHidden,
  "data-testid": testId
}) {
  const events = useSelectionEvents("mobile_rotate");
  const editor = useEditor();
  const zoom = useValue("zoom level", () => editor.getZoomLevel(), [editor]);
  const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom));
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("g", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("circle", {
      "data-testid": testId,
      pointerEvents: "all",
      className: (0, import_classnames15.default)("tl-transparent", "tl-mobile-rotate__bg", { "tl-hidden": isHidden }),
      cx,
      cy,
      r: bgRadius,
      ...events
    }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("circle", {
      className: (0, import_classnames15.default)("tl-mobile-rotate__fg", { "tl-hidden": isHidden }),
      cx,
      cy,
      r: size4 / SQUARE_ROOT_PI
    })
  ] });
};

// node_modules/tldraw/dist-esm/lib/shapes/shared/default-shape-constants.mjs
var TEXT_PROPS = {
  lineHeight: 1.35,
  fontWeight: "normal",
  fontVariant: "normal",
  fontStyle: "normal",
  padding: "0px"
};
var STROKE_SIZES2 = {
  s: 2,
  m: 3.5,
  l: 5,
  xl: 10
};
var FONT_SIZES = {
  s: 18,
  m: 24,
  l: 36,
  xl: 44
};
var LABEL_FONT_SIZES = {
  s: 18,
  m: 22,
  l: 26,
  xl: 32
};
var ARROW_LABEL_FONT_SIZES = {
  s: 18,
  m: 20,
  l: 24,
  xl: 28
};
var FONT_FAMILIES = {
  draw: "var(--tl-font-draw)",
  sans: "var(--tl-font-sans)",
  serif: "var(--tl-font-serif)",
  mono: "var(--tl-font-mono)"
};
var LABEL_TO_ARROW_PADDING = 20;
var ARROW_LABEL_PADDING = 4.25;
var LABEL_PADDING = 16;

// node_modules/canvas-size/dist/canvas-size.esm.js
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, i === 0) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && _i.return != null && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function canvasTest(settings) {
  var size4 = settings.sizes.shift();
  var width = Math.max(Math.ceil(size4[0]), 1);
  var height = Math.max(Math.ceil(size4[1]), 1);
  var fill = [width - 1, height - 1, 1, 1];
  var job = Date.now();
  var isWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
  var cropCvs, testCvs;
  if (isWorker) {
    cropCvs = new OffscreenCanvas(1, 1);
    testCvs = new OffscreenCanvas(width, height);
  } else {
    cropCvs = document.createElement("canvas");
    cropCvs.width = 1;
    cropCvs.height = 1;
    testCvs = document.createElement("canvas");
    testCvs.width = width;
    testCvs.height = height;
  }
  var cropCtx = cropCvs.getContext("2d");
  var testCtx = testCvs.getContext("2d");
  if (testCtx) {
    testCtx.fillRect.apply(testCtx, fill);
    cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);
  }
  var isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;
  var benchmark = Date.now() - job;
  [cropCvs, testCvs].forEach(function(cvs) {
    cvs.height = 0;
    cvs.width = 0;
  });
  if (isWorker) {
    postMessage({
      width,
      height,
      benchmark,
      isTestPass
    });
    if (!isTestPass && settings.sizes.length) {
      canvasTest(settings);
    }
  } else if (isTestPass) {
    settings.onSuccess(width, height, benchmark);
  } else {
    settings.onError(width, height, benchmark);
    if (settings.sizes.length) {
      canvasTest(settings);
    }
  }
  return isTestPass;
}
var testSizes = {
  area: [16384, 14188, 11402, 11180, 10836, 8192, 4096, 1],
  height: [8388607, 65535, 32767, 16384, 8192, 4096, 1],
  width: [4194303, 65535, 32767, 16384, 8192, 4096, 1]
};
var _excluded = ["onError", "onSuccess"];
var defaults = {
  max: null,
  min: 1,
  sizes: [],
  step: 1024,
  usePromise: false,
  useWorker: false,
  onError: Function.prototype,
  onSuccess: Function.prototype
};
var workerJobs = {};
function createSizesArray(settings) {
  var isArea = settings.width === settings.height;
  var isWidth = settings.height === 1;
  var isHeight = settings.width === 1;
  var sizes = [];
  if (!settings.width || !settings.height) {
    settings.sizes.forEach(function(testSize2) {
      var width2 = isArea || isWidth ? testSize2 : 1;
      var height2 = isArea || isHeight ? testSize2 : 1;
      sizes.push([width2, height2]);
    });
  } else {
    var testMin = settings.min || defaults.min;
    var testStep = settings.step || defaults.step;
    var testSize = Math.max(settings.width, settings.height);
    while (testSize >= testMin) {
      var width = isArea || isWidth ? testSize : 1;
      var height = isArea || isHeight ? testSize : 1;
      sizes.push([width, height]);
      testSize -= testStep;
    }
  }
  return sizes;
}
function handleMethod(settings) {
  var hasCanvasSupport = window && "HTMLCanvasElement" in window;
  var hasOffscreenCanvasSupport = window && "OffscreenCanvas" in window;
  var jobID = Date.now();
  var _onError = settings.onError, _onSuccess = settings.onSuccess, settingsWithoutCallbacks = _objectWithoutProperties(settings, _excluded);
  var worker = null;
  if (!hasCanvasSupport) {
    return false;
  }
  if (settings.useWorker && hasOffscreenCanvasSupport) {
    var js = "\n            var canvasTest = ".concat(canvasTest.toString(), ";\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        ");
    var blob = new Blob([js], {
      type: "application/javascript"
    });
    var blobURL = URL.createObjectURL(blob);
    worker = new Worker(blobURL);
    URL.revokeObjectURL(blobURL);
    worker.onmessage = function(e) {
      var _e$data = e.data, width = _e$data.width, height = _e$data.height, benchmark = _e$data.benchmark, isTestPass = _e$data.isTestPass;
      if (isTestPass) {
        workerJobs[jobID].onSuccess(width, height, benchmark);
        delete workerJobs[jobID];
      } else {
        workerJobs[jobID].onError(width, height, benchmark);
      }
    };
  }
  if (settings.usePromise) {
    return new Promise(function(resolve, reject) {
      var promiseSettings = _objectSpread2(_objectSpread2({}, settings), {}, {
        onError: function onError2(width, height, benchmark) {
          var isLastTest;
          if (settings.sizes.length === 0) {
            isLastTest = true;
          } else {
            var _settings$sizes$slice = settings.sizes.slice(-1), _settings$sizes$slice2 = _slicedToArray(_settings$sizes$slice, 1), _settings$sizes$slice3 = _slicedToArray(_settings$sizes$slice2[0], 2), lastWidth = _settings$sizes$slice3[0], lastHeight = _settings$sizes$slice3[1];
            isLastTest = width === lastWidth && height === lastHeight;
          }
          _onError(width, height, benchmark);
          if (isLastTest) {
            reject({
              width,
              height,
              benchmark
            });
          }
        },
        onSuccess: function onSuccess2(width, height, benchmark) {
          _onSuccess(width, height, benchmark);
          resolve({
            width,
            height,
            benchmark
          });
        }
      });
      if (worker) {
        var onError = promiseSettings.onError, onSuccess = promiseSettings.onSuccess;
        workerJobs[jobID] = {
          onError,
          onSuccess
        };
        worker.postMessage(settingsWithoutCallbacks);
      } else {
        canvasTest(promiseSettings);
      }
    });
  } else {
    if (worker) {
      workerJobs[jobID] = {
        onError: _onError,
        onSuccess: _onSuccess
      };
      worker.postMessage(settingsWithoutCallbacks);
    } else {
      return canvasTest(settings);
    }
  }
}
var canvasSize = {
  maxArea: function maxArea() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var sizes = createSizesArray({
      width: options.max,
      height: options.max,
      min: options.min,
      step: options.step,
      sizes: _toConsumableArray(testSizes.area)
    });
    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
      sizes
    });
    return handleMethod(settings);
  },
  maxHeight: function maxHeight() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var sizes = createSizesArray({
      width: 1,
      height: options.max,
      min: options.min,
      step: options.step,
      sizes: _toConsumableArray(testSizes.height)
    });
    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
      sizes
    });
    return handleMethod(settings);
  },
  maxWidth: function maxWidth() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var sizes = createSizesArray({
      width: options.max,
      height: 1,
      min: options.min,
      step: options.step,
      sizes: _toConsumableArray(testSizes.width)
    });
    var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
      sizes
    });
    return handleMethod(settings);
  },
  test: function test() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var settings = _objectSpread2(_objectSpread2({}, defaults), options);
    settings.sizes = _toConsumableArray(settings.sizes);
    if (settings.width && settings.height) {
      settings.sizes = [[settings.width, settings.height]];
    }
    return handleMethod(settings);
  }
};

// node_modules/tldraw/dist-esm/lib/shapes/shared/getBrowserCanvasMaxSize.mjs
var maxSizePromise = null;
function getBrowserCanvasMaxSize() {
  if (!maxSizePromise) {
    maxSizePromise = calculateBrowserCanvasMaxSize();
  }
  return maxSizePromise;
}
async function calculateBrowserCanvasMaxSize() {
  const maxWidth2 = await canvasSize.maxWidth({ usePromise: true });
  const maxHeight2 = await canvasSize.maxHeight({ usePromise: true });
  const maxArea2 = await canvasSize.maxArea({ usePromise: true });
  return {
    maxWidth: maxWidth2.width,
    maxHeight: maxHeight2.height,
    maxArea: maxArea2.width * maxArea2.height
  };
}
var MAX_SAFE_CANVAS_DIMENSION = 8192;
var MAX_SAFE_CANVAS_AREA = 4096 * 4096;
async function clampToBrowserMaxCanvasSize(width, height) {
  if (width <= MAX_SAFE_CANVAS_DIMENSION && height <= MAX_SAFE_CANVAS_DIMENSION && width * height <= MAX_SAFE_CANVAS_AREA) {
    return [width, height];
  }
  const { maxWidth: maxWidth2, maxHeight: maxHeight2, maxArea: maxArea2 } = await getBrowserCanvasMaxSize();
  const aspectRatio = width / height;
  if (width > maxWidth2) {
    width = maxWidth2;
    height = width / aspectRatio;
  }
  if (height > maxHeight2) {
    height = maxHeight2;
    width = height * aspectRatio;
  }
  if (width * height > maxArea2) {
    const ratio = Math.sqrt(maxArea2 / (width * height));
    width *= ratio;
    height *= ratio;
  }
  return [width, height];
}

// node_modules/tldraw/dist-esm/lib/utils/assets/is-gif-animated.mjs
function getDataBlocksLength(buffer, offset4) {
  let length = 0;
  while (buffer[offset4 + length]) {
    length += buffer[offset4 + length] + 1;
  }
  return length + 1;
}
function isGIF(buffer) {
  const enc = new TextDecoder("ascii");
  const header = enc.decode(buffer.slice(0, 3));
  return header === "GIF";
}
function isAnimated(buffer) {
  const view = new Uint8Array(buffer);
  let hasColorTable, colorTableSize;
  let offset4 = 0;
  let imagesCount = 0;
  if (!isGIF(buffer)) {
    return false;
  }
  hasColorTable = view[10] & 128;
  colorTableSize = view[10] & 7;
  offset4 += 6;
  offset4 += 7;
  offset4 += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
  while (imagesCount < 2 && offset4 < view.length) {
    switch (view[offset4]) {
      case 44:
        imagesCount += 1;
        hasColorTable = view[offset4 + 9] & 128;
        colorTableSize = view[offset4 + 9] & 7;
        offset4 += 10;
        offset4 += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
        offset4 += getDataBlocksLength(view, offset4 + 1) + 1;
        break;
      case 33:
        offset4 += 2;
        offset4 += getDataBlocksLength(view, offset4);
        break;
      case 59:
        offset4 = view.length;
        break;
      default:
        offset4 = view.length;
        break;
    }
  }
  return imagesCount > 1;
}

// node_modules/tldraw/dist-esm/lib/utils/assets/assets.mjs
function containBoxSize(originalSize, containBoxSize2) {
  const overByXScale = originalSize.w / containBoxSize2.w;
  const overByYScale = originalSize.h / containBoxSize2.h;
  if (overByXScale <= 1 && overByYScale <= 1) {
    return originalSize;
  } else if (overByXScale > overByYScale) {
    return {
      w: originalSize.w / overByXScale,
      h: originalSize.h / overByXScale
    };
  } else {
    return {
      w: originalSize.w / overByYScale,
      h: originalSize.h / overByYScale
    };
  }
}
async function downsizeImage(blob, width, height, opts = {}) {
  const image = await MediaHelpers.usingObjectURL(blob, MediaHelpers.loadImage);
  const { type = blob.type, quality = 0.92 } = opts;
  const [desiredWidth, desiredHeight] = await clampToBrowserMaxCanvasSize(Math.min(width * 2, image.naturalWidth), Math.min(height * 2, image.naturalHeight));
  const canvas = document.createElement("canvas");
  canvas.width = desiredWidth;
  canvas.height = desiredHeight;
  const ctx = assertExists(canvas.getContext("2d", { willReadFrequently: true }), "Could not get canvas context");
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = "high";
  ctx.drawImage(image, 0, 0, desiredWidth, desiredHeight);
  return new Promise((resolve, reject) => {
    canvas.toBlob((blob2) => {
      if (blob2) {
        resolve(blob2);
      } else {
        reject(new Error("Could not resize image"));
      }
    }, type, quality);
  });
}
async function isGifAnimated(file) {
  return isAnimated(await file.arrayBuffer());
}

// node_modules/tldraw/dist-esm/lib/utils/embeds/embeds.mjs
function escapeStringRegexp(string2) {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function matchEmbedUrl(url) {
  const host = new URL(url).host.replace("www.", "");
  for (const localEmbedDef of EMBED_DEFINITIONS) {
    if (checkHostnames(localEmbedDef.hostnames, host)) {
      const originalUrl = localEmbedDef.fromEmbedUrl(url);
      if (originalUrl) {
        return {
          definition: localEmbedDef,
          url: originalUrl,
          embedUrl: url
        };
      }
    }
  }
}
var globlikeRegExp = (input) => {
  return input.split("*").map((str) => escapeStringRegexp(str)).join(".+");
};
var checkHostnames = (hostnames, targetHostname) => {
  return !!hostnames.find((hostname) => {
    const re = new RegExp(globlikeRegExp(hostname));
    return targetHostname.match(re);
  });
};
function matchUrl(url) {
  const host = new URL(url).host.replace("www.", "");
  for (const localEmbedDef of EMBED_DEFINITIONS) {
    if (checkHostnames(localEmbedDef.hostnames, host)) {
      const embedUrl = localEmbedDef.toEmbedUrl(url);
      if (embedUrl) {
        return {
          definition: localEmbedDef,
          embedUrl,
          url
        };
      }
    }
  }
}
function getEmbedInfoUnsafely(inputUrl) {
  var _a2;
  const result = (_a2 = matchUrl(inputUrl)) != null ? _a2 : matchEmbedUrl(inputUrl);
  return result;
}
function getEmbedInfo(inputUrl) {
  try {
    return getEmbedInfoUnsafely(inputUrl);
  } catch (e) {
    console.error(e);
  }
  return void 0;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/TextHelpers.mjs
var INDENT = "  ";
var _TextHelpers = class {
  static insertTextFirefox(field, text) {
    field.setRangeText(text, field.selectionStart || 0, field.selectionEnd || 0, "end");
    field.dispatchEvent(new InputEvent("input", {
      data: text,
      inputType: "insertText",
      isComposing: false
    }));
  }
  static insert(field, text) {
    const document2 = field.ownerDocument;
    const initialFocus = document2.activeElement;
    if (initialFocus !== field) {
      field.focus();
    }
    if (!document2.execCommand("insertText", false, text)) {
      _TextHelpers.insertTextFirefox(field, text);
    }
    if (initialFocus === document2.body) {
      field.blur();
    } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
      initialFocus.focus();
    }
  }
  static set(field, text) {
    field.select();
    _TextHelpers.insert(field, text);
  }
  static getSelection(field) {
    const { selectionStart, selectionEnd } = field;
    return field.value.slice(selectionStart ? selectionStart : void 0, selectionEnd ? selectionEnd : void 0);
  }
  static wrapSelection(field, wrap2, wrapEnd) {
    const { selectionStart, selectionEnd } = field;
    const selection = _TextHelpers.getSelection(field);
    _TextHelpers.insert(field, wrap2 + selection + (wrapEnd != null ? wrapEnd : wrap2));
    field.selectionStart = (selectionStart || 0) + wrap2.length;
    field.selectionEnd = (selectionEnd || 0) + wrap2.length;
  }
  static replace(field, searchValue, replacer) {
    let drift = 0;
    field.value.replace(searchValue, (...args) => {
      const matchStart = drift + args[args.length - 2];
      const matchLength = args[0].length;
      field.selectionStart = matchStart;
      field.selectionEnd = matchStart + matchLength;
      const replacement = typeof replacer === "string" ? replacer : replacer(...args);
      _TextHelpers.insert(field, replacement);
      field.selectionStart = matchStart;
      drift += replacement.length - matchLength;
      return replacement;
    });
  }
  static findLineEnd(value, currentEnd) {
    const lastLineStart = value.lastIndexOf("\n", currentEnd - 1) + 1;
    if (value.charAt(lastLineStart) !== "	") {
      return currentEnd;
    }
    return lastLineStart + 1;
  }
  static indent(element) {
    var _a2;
    const { selectionStart, selectionEnd, value } = element;
    const selectedContrast = value.slice(selectionStart, selectionEnd);
    const lineBreakCount = (_a2 = /\n/g.exec(selectedContrast)) == null ? void 0 : _a2.length;
    if (lineBreakCount && lineBreakCount > 0) {
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const newSelection = element.value.slice(firstLineStart, selectionEnd - 1);
      const indentedText = newSelection.replace(/^|\n/g, `$&${INDENT}`);
      const replacementsCount = indentedText.length - newSelection.length;
      element.setSelectionRange(firstLineStart, selectionEnd - 1);
      _TextHelpers.insert(element, indentedText);
      element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount);
    } else {
      _TextHelpers.insert(element, INDENT);
    }
  }
  static unindent(element) {
    const { selectionStart, selectionEnd, value } = element;
    const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
    const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
    const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd);
    const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
    const replacementsCount = newSelection.length - indentedText.length;
    element.setSelectionRange(firstLineStart, minimumSelectionEnd);
    _TextHelpers.insert(element, indentedText);
    const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
    const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
    const newSelectionStart = selectionStart - difference;
    element.setSelectionRange(selectionStart - difference, Math.max(newSelectionStart, selectionEnd - replacementsCount));
  }
  static indentCE(element) {
    var _a2, _b2, _c;
    const selection = window.getSelection();
    const value = element.innerText;
    const selectionStart = (_a2 = getCaretIndex(element)) != null ? _a2 : 0;
    const selectionEnd = (_b2 = getCaretIndex(element)) != null ? _b2 : 0;
    const selectedContrast = value.slice(selectionStart, selectionEnd);
    const lineBreakCount = (_c = /\n/g.exec(selectedContrast)) == null ? void 0 : _c.length;
    if (lineBreakCount && lineBreakCount > 0) {
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const newSelection = value.slice(firstLineStart, selectionEnd - 1);
      const indentedText = newSelection.replace(/^|\n/g, `$&${INDENT}`);
      const replacementsCount = indentedText.length - newSelection.length;
      if (selection) {
        selection.setBaseAndExtent(element, selectionStart + 1, element, selectionEnd + replacementsCount);
      }
    } else {
      const selection2 = window.getSelection();
      element.innerText = value.slice(0, selectionStart) + INDENT + value.slice(selectionStart);
      selection2 == null ? void 0 : selection2.setBaseAndExtent(element, selectionStart + 1, element, selectionStart + 2);
    }
  }
  static unindentCE(element) {
    var _a2, _b2;
    const selection = window.getSelection();
    const value = element.innerText;
    const selectionStart = (_a2 = getCaretIndex(element)) != null ? _a2 : 0;
    const selectionEnd = (_b2 = getCaretIndex(element)) != null ? _b2 : 0;
    const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
    const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
    const newSelection = value.slice(firstLineStart, minimumSelectionEnd);
    const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
    const replacementsCount = newSelection.length - indentedText.length;
    if (selection) {
      selection.setBaseAndExtent(element, firstLineStart, element, minimumSelectionEnd);
      const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
      const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
      const newSelectionStart = selectionStart - difference;
      selection.setBaseAndExtent(element, selectionStart - difference, element, Math.max(newSelectionStart, selectionEnd - replacementsCount));
    }
  }
  static normalizeText(text) {
    return text.replace(_TextHelpers.fixNewLines, "\n");
  }
  static normalizeTextForDom(text) {
    return text.replace(_TextHelpers.fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
  }
};
var TextHelpers = _TextHelpers;
__publicField(TextHelpers, "fixNewLines", /\r?\n|\r/g);
function getCaretIndex(element) {
  if (typeof window.getSelection === "undefined")
    return;
  const selection = window.getSelection();
  if (!selection)
    return;
  let position = 0;
  if (selection.rangeCount !== 0) {
    const range = selection.getRangeAt(0);
    const preCaretRange = range.cloneRange();
    preCaretRange.selectNodeContents(element);
    preCaretRange.setEnd(range.endContainer, range.endOffset);
    position = preCaretRange.toString().length;
  }
  return position;
}

// node_modules/tldraw/dist-esm/lib/utils/text/text.mjs
var rtlRegex = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
function isRightToLeftLanguage(text) {
  return rtlRegex.test(text);
}
function replaceTabsWithSpaces(text) {
  return text.replace(/\t/g, INDENT);
}
function stripCommonMinimumIndentation(text) {
  const lines = text.split("\n");
  while (lines[0] && lines[0].trim().length === 0) {
    lines.shift();
  }
  let minIndentation = Infinity;
  for (const line of lines) {
    if (line.trim().length > 0) {
      const indentation = line.length - line.trimStart().length;
      minIndentation = Math.min(minIndentation, indentation);
    }
  }
  return lines.map((line) => line.slice(minIndentation)).join("\n");
}
function stripTrailingWhitespace(text) {
  return text.replace(/[ \t]+$/gm, "").replace(/\n+$/, "");
}
function cleanupText(text) {
  return stripTrailingWhitespace(stripCommonMinimumIndentation(replaceTabsWithSpaces(text)));
}
var truncateStringWithEllipsis = (str, maxLength) => {
  return str.length <= maxLength ? str : str.substring(0, maxLength - 3) + "...";
};

// node_modules/tldraw/dist-esm/lib/defaultExternalContentHandlers.mjs
function registerDefaultExternalContentHandlers(editor, {
  maxImageDimension,
  maxAssetSize,
  acceptedImageMimeTypes,
  acceptedVideoMimeTypes
}, { toasts, msg: msg2 }) {
  editor.registerExternalAssetHandler("file", async ({ file: _file }) => {
    const name = _file.name;
    let file = _file;
    const isImageType = acceptedImageMimeTypes.includes(file.type);
    const isVideoType = acceptedVideoMimeTypes.includes(file.type);
    assert(isImageType || isVideoType, `File type not allowed: ${file.type}`);
    assert(file.size <= maxAssetSize, `File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`);
    if (file.type === "video/quicktime") {
      file = new Blob([file], { type: "video/mp4" });
    }
    let size4 = isImageType ? await MediaHelpers.getImageSize(file) : await MediaHelpers.getVideoSize(file);
    const isAnimated2 = file.type === "image/gif" ? await isGifAnimated(file) : isVideoType;
    const hash = await getHashForBuffer(await file.arrayBuffer());
    if (isFinite(maxImageDimension)) {
      const resizedSize = containBoxSize(size4, { w: maxImageDimension, h: maxImageDimension });
      if (size4 !== resizedSize && (file.type === "image/jpeg" || file.type === "image/png")) {
        size4 = resizedSize;
      }
    }
    if (file.type === "image/jpeg" || file.type === "image/png") {
      file = await downsizeImage(file, size4.w, size4.h, {
        type: file.type,
        quality: 0.92
      });
    }
    const assetId = AssetRecordType.createId(hash);
    const asset = AssetRecordType.create({
      id: assetId,
      type: isImageType ? "image" : "video",
      typeName: "asset",
      props: {
        name,
        src: await FileHelpers.blobToDataUrl(file),
        w: size4.w,
        h: size4.h,
        mimeType: file.type,
        isAnimated: isAnimated2
      }
    });
    return asset;
  });
  editor.registerExternalAssetHandler("url", async ({ url }) => {
    var _a2, _b2, _c, _d, _e, _f;
    let meta;
    try {
      const resp = await fetch(url, { method: "GET", mode: "no-cors" });
      const html = await resp.text();
      const doc = new DOMParser().parseFromString(html, "text/html");
      meta = {
        image: (_b2 = (_a2 = doc.head.querySelector('meta[property="og:image"]')) == null ? void 0 : _a2.getAttribute("content")) != null ? _b2 : "",
        title: (_d = (_c = doc.head.querySelector('meta[property="og:title"]')) == null ? void 0 : _c.getAttribute("content")) != null ? _d : truncateStringWithEllipsis(url, 32),
        description: (_f = (_e = doc.head.querySelector('meta[property="og:description"]')) == null ? void 0 : _e.getAttribute("content")) != null ? _f : ""
      };
    } catch (error) {
      console.error(error);
      toasts.addToast({
        title: msg2("assets.url.failed"),
        severity: "error"
      });
      meta = { image: "", title: truncateStringWithEllipsis(url, 32), description: "" };
    }
    return {
      id: AssetRecordType.createId(getHashForString(url)),
      typeName: "asset",
      type: "bookmark",
      props: {
        src: url,
        description: meta.description,
        image: meta.image,
        title: meta.title
      },
      meta: {}
    };
  });
  editor.registerExternalContentHandler("svg-text", async ({ point, text }) => {
    const position = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter();
    const svg = new DOMParser().parseFromString(text, "image/svg+xml").querySelector("svg");
    if (!svg) {
      throw new Error("No <svg/> element present");
    }
    let width = parseFloat(svg.getAttribute("width") || "0");
    let height = parseFloat(svg.getAttribute("height") || "0");
    if (!(width && height)) {
      document.body.appendChild(svg);
      const box = svg.getBoundingClientRect();
      document.body.removeChild(svg);
      width = box.width;
      height = box.height;
    }
    const asset = await editor.getAssetForExternalContent({
      type: "file",
      file: new File([text], "asset.svg", { type: "image/svg+xml" })
    });
    if (!asset)
      throw Error("Could not create an asset");
    createShapesForAssets(editor, [asset], position);
  });
  editor.registerExternalContentHandler("embed", ({ point, url, embed }) => {
    const position = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter();
    const { width, height } = embed;
    const id = createShapeId();
    const shapePartial = {
      id,
      type: "embed",
      x: position.x - (width || 450) / 2,
      y: position.y - (height || 450) / 2,
      props: {
        w: width,
        h: height,
        url
      }
    };
    editor.createShapes([shapePartial]).select(id);
  });
  editor.registerExternalContentHandler("files", async ({ point, files }) => {
    const position = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter();
    const pagePoint = new Vec(position.x, position.y);
    const assets = [];
    await Promise.all(files.map(async (file, i) => {
      if (file.size > maxAssetSize) {
        console.warn(`File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`);
        return null;
      }
      if (!file.type) {
        throw new Error("No mime type");
      }
      if (!acceptedImageMimeTypes.concat(acceptedVideoMimeTypes).includes(file.type)) {
        console.warn(`${file.name} not loaded - Extension not allowed.`);
        return null;
      }
      try {
        const asset = await editor.getAssetForExternalContent({ type: "file", file });
        if (!asset) {
          throw Error("Could not create an asset");
        }
        assets[i] = asset;
      } catch (error) {
        toasts.addToast({
          title: msg2("assets.files.upload-failed"),
          severity: "error"
        });
        console.error(error);
        return null;
      }
    }));
    createShapesForAssets(editor, compact(assets), pagePoint);
  });
  editor.registerExternalContentHandler("text", async ({ point, text }) => {
    const p = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter();
    const defaultProps = editor.getShapeUtil("text").getDefaultProps();
    const textToPaste = cleanupText(text);
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (onlySelectedShape && "text" in onlySelectedShape.props) {
      editor.updateShapes([
        {
          id: onlySelectedShape.id,
          type: onlySelectedShape.type,
          props: {
            text: textToPaste
          }
        }
      ]);
      return;
    }
    let w;
    let h;
    let autoSize;
    let align = "middle";
    const isMultiLine = textToPaste.split("\n").length > 1;
    const isRtl = isRightToLeftLanguage(textToPaste);
    if (isMultiLine) {
      align = isMultiLine ? isRtl ? "end" : "start" : "middle";
    }
    const rawSize = editor.textMeasure.measureText(textToPaste, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[defaultProps.font],
      fontSize: FONT_SIZES[defaultProps.size],
      maxWidth: null
    });
    const minWidth = Math.min(isMultiLine ? editor.getViewportPageBounds().width * 0.9 : 920, Math.max(200, editor.getViewportPageBounds().width * 0.9));
    if (rawSize.w > minWidth) {
      const shrunkSize = editor.textMeasure.measureText(textToPaste, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[defaultProps.font],
        fontSize: FONT_SIZES[defaultProps.size],
        maxWidth: minWidth
      });
      w = shrunkSize.w;
      h = shrunkSize.h;
      autoSize = false;
      align = isRtl ? "end" : "start";
    } else {
      w = rawSize.w;
      h = rawSize.h;
      autoSize = true;
    }
    if (p.y - h / 2 < editor.getViewportPageBounds().minY + 40) {
      p.y = editor.getViewportPageBounds().minY + 40 + h / 2;
    }
    editor.createShapes([
      {
        id: createShapeId(),
        type: "text",
        x: p.x - w / 2,
        y: p.y - h / 2,
        props: {
          text: textToPaste,
          align,
          autoSize,
          w
        }
      }
    ]);
  });
  editor.registerExternalContentHandler("url", async ({ point, url }) => {
    const embedInfo = getEmbedInfo(url);
    if (embedInfo) {
      return editor.putExternalContent({
        type: "embed",
        url: embedInfo.url,
        point,
        embed: embedInfo.definition
      });
    }
    const position = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter();
    const assetId = AssetRecordType.createId(getHashForString(url));
    const shape = createEmptyBookmarkShape(editor, url, position);
    let asset = editor.getAsset(assetId);
    let shouldAlsoCreateAsset = false;
    if (!asset) {
      shouldAlsoCreateAsset = true;
      try {
        const bookmarkAsset = await editor.getAssetForExternalContent({ type: "url", url });
        if (!bookmarkAsset)
          throw Error("Could not create an asset");
        asset = bookmarkAsset;
      } catch (e) {
        toasts.addToast({
          title: msg2("assets.url.failed"),
          severity: "error"
        });
        return;
      }
    }
    editor.batch(() => {
      if (shouldAlsoCreateAsset) {
        editor.createAssets([asset]);
      }
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: {
            assetId: asset.id
          }
        }
      ]);
    });
  });
}
async function createShapesForAssets(editor, assets, position) {
  if (!assets.length)
    return [];
  const currentPoint = Vec.From(position);
  const partials = [];
  for (const asset of assets) {
    switch (asset.type) {
      case "bookmark": {
        partials.push({
          id: createShapeId(),
          type: "bookmark",
          x: currentPoint.x - 150,
          y: currentPoint.y - 160,
          opacity: 1,
          props: {
            assetId: asset.id,
            url: asset.props.src
          }
        });
        currentPoint.x += 300;
        break;
      }
      case "image": {
        partials.push({
          id: createShapeId(),
          type: "image",
          x: currentPoint.x - asset.props.w / 2,
          y: currentPoint.y - asset.props.h / 2,
          opacity: 1,
          props: {
            assetId: asset.id,
            w: asset.props.w,
            h: asset.props.h
          }
        });
        currentPoint.x += asset.props.w;
        break;
      }
      case "video": {
        partials.push({
          id: createShapeId(),
          type: "video",
          x: currentPoint.x - asset.props.w / 2,
          y: currentPoint.y - asset.props.h / 2,
          opacity: 1,
          props: {
            assetId: asset.id,
            w: asset.props.w,
            h: asset.props.h
          }
        });
        currentPoint.x += asset.props.w;
      }
    }
  }
  editor.batch(() => {
    const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id));
    if (assetsToCreate.length) {
      editor.createAssets(assetsToCreate);
    }
    editor.createShapes(partials).select(...partials.map((p) => p.id));
    centerSelectionAroundPoint(editor, position);
  });
  return partials.map((p) => p.id);
}
function centerSelectionAroundPoint(editor, position) {
  const viewportPageBounds = editor.getViewportPageBounds();
  let selectionPageBounds = editor.getSelectionPageBounds();
  if (selectionPageBounds) {
    const offset4 = selectionPageBounds.center.sub(position);
    editor.updateShapes(editor.getSelectedShapes().map((shape) => {
      const localRotation = editor.getShapeParentTransform(shape).decompose().rotation;
      const localDelta = Vec.Rot(offset4, -localRotation);
      return {
        id: shape.id,
        type: shape.type,
        x: shape.x - localDelta.x,
        y: shape.y - localDelta.y
      };
    }));
  }
  selectionPageBounds = editor.getSelectionPageBounds();
  if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
    editor.zoomToSelection();
  }
}
function createEmptyBookmarkShape(editor, url, position) {
  const partial = {
    id: createShapeId(),
    type: "bookmark",
    x: position.x - 150,
    y: position.y - 160,
    opacity: 1,
    props: {
      assetId: null,
      url
    }
  };
  editor.batch(() => {
    editor.createShapes([partial]).select(partial.id);
    centerSelectionAroundPoint(editor, position);
  });
  return editor.getShape(partial.id);
}

// node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Idle.mjs
var Idle2 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
    __publicField(this, "onKeyUp", (info) => {
      var _a2;
      if (info.key === "Enter") {
        if (this.editor.getInstanceState().isReadonly)
          return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          (_a2 = this.editor.root.getCurrent()) == null ? void 0 : _a2.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    });
  }
};
__publicField(Idle2, "id", "idle");

// node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Pointing.mjs
var Pointing2 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shape");
    __publicField(this, "markId", "");
    __publicField(this, "onEnter", () => {
      this.didTimeout = false;
      const target = this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
        filter: (targetShape) => {
          return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
        },
        margin: 0,
        hitInside: true,
        renderingOnly: true
      });
      if (!target) {
        this.createArrowShape();
      } else {
        this.editor.setHintingShapes([target.id]);
      }
      this.startPreciseTimeout();
    });
    __publicField(this, "onExit", () => {
      this.shape = void 0;
      this.editor.setHintingShapes([]);
      this.clearPreciseTimeout();
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        if (!this.shape) {
          this.createArrowShape();
        }
        if (!this.shape)
          throw Error(`expected shape`);
        this.updateArrowShapeEndHandle();
        this.editor.setCurrentTool("select.dragging_handle", {
          shape: this.shape,
          handle: this.editor.getShapeHandles(this.shape).find((h) => h.id === "end"),
          isCreating: true,
          onInteractionEnd: "arrow"
        });
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.cancel();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
    __publicField(this, "preciseTimeout", -1);
    __publicField(this, "didTimeout", false);
  }
  cancel() {
    if (this.shape) {
      this.editor.bailToMark(this.markId);
    }
    this.editor.setHintingShapes([]);
    this.parent.transition("idle");
  }
  createArrowShape() {
    var _a2, _b2;
    const { originPagePoint } = this.editor.inputs;
    const id = createShapeId();
    this.markId = `creating:${id}`;
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: "arrow",
        x: originPagePoint.x,
        y: originPagePoint.y
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      throw Error(`expected shape`);
    const handles = this.editor.getShapeHandles(shape);
    if (!handles)
      throw Error(`expected handles for arrow`);
    const util = this.editor.getShapeUtil("arrow");
    const initial = this.shape;
    const startHandle = handles.find((h) => h.id === "start");
    const change = (_a2 = util.onHandleDrag) == null ? void 0 : _a2.call(util, shape, {
      handle: { ...startHandle, x: 0, y: 0 },
      isPrecise: true,
      initial
    });
    if (change) {
      const startTerminal = (_b2 = change.props) == null ? void 0 : _b2.start;
      if ((startTerminal == null ? void 0 : startTerminal.type) === "binding") {
        this.editor.setHintingShapes([startTerminal.boundShapeId]);
      }
      this.editor.updateShapes([change], { squashing: true });
    }
    this.shape = this.editor.getShape(id);
    this.editor.select(id);
  }
  updateArrowShapeEndHandle() {
    var _a2, _b2, _c;
    const shape = this.shape;
    if (!shape)
      throw Error(`expected shape`);
    const handles = this.editor.getShapeHandles(shape);
    if (!handles)
      throw Error(`expected handles for arrow`);
    const shapeWithOutEndOffset = {
      ...shape,
      props: { ...shape.props, end: { ...shape.props.end, x: 0, y: 0 } }
    };
    {
      const util = this.editor.getShapeUtil("arrow");
      const initial = this.shape;
      const point = this.editor.getPointInShapeSpace(shape, this.editor.inputs.currentPagePoint);
      const endHandle = handles.find((h) => h.id === "end");
      const change = (_a2 = util.onHandleDrag) == null ? void 0 : _a2.call(util, shapeWithOutEndOffset, {
        handle: { ...endHandle, x: point.x, y: point.y },
        isPrecise: false,
        initial
      });
      if (change) {
        const endTerminal = (_b2 = change.props) == null ? void 0 : _b2.end;
        if ((endTerminal == null ? void 0 : endTerminal.type) === "binding") {
          this.editor.setHintingShapes([endTerminal.boundShapeId]);
        }
        this.editor.updateShapes([change], { squashing: true });
      }
    }
    {
      const util = this.editor.getShapeUtil("arrow");
      const initial = this.shape;
      const startHandle = handles.find((h) => h.id === "start");
      const change = (_c = util.onHandleDrag) == null ? void 0 : _c.call(util, shapeWithOutEndOffset, {
        handle: { ...startHandle, x: 0, y: 0 },
        isPrecise: this.didTimeout,
        initial
      });
      if (change) {
        this.editor.updateShapes([change], { squashing: true });
      }
    }
    this.shape = this.editor.getShape(shape.id);
  }
  startPreciseTimeout() {
    this.preciseTimeout = window.setTimeout(() => {
      if (!this.getIsActive())
        return;
      this.didTimeout = true;
    }, 320);
  }
  clearPreciseTimeout() {
    clearTimeout(this.preciseTimeout);
  }
};
__publicField(Pointing2, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeTool.mjs
var ArrowShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "arrow");
  }
};
__publicField(ArrowShapeTool, "id", "arrow");
__publicField(ArrowShapeTool, "initial", "idle");
__publicField(ArrowShapeTool, "children", () => [Idle2, Pointing2]);

// node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Drawing.mjs
var Drawing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "initialShape");
    __publicField(this, "shapeType", this.parent.id === "highlight" ? "highlight" : "draw");
    __publicField(this, "util", this.editor.getShapeUtil(this.shapeType));
    __publicField(this, "isPen", false);
    __publicField(this, "segmentMode", "free");
    __publicField(this, "didJustShiftClickToExtendPreviousShapeLine", false);
    __publicField(this, "pagePointWhereCurrentSegmentChanged", {});
    __publicField(this, "pagePointWhereNextSegmentChanged", null);
    __publicField(this, "lastRecordedPoint", {});
    __publicField(this, "mergeNextPoint", false);
    __publicField(this, "currentLineLength", 0);
    __publicField(this, "canDraw", false);
    __publicField(this, "markId", null);
    __publicField(this, "onEnter", (info) => {
      this.markId = null;
      this.info = info;
      this.canDraw = !this.editor.getIsMenuOpen();
      this.lastRecordedPoint = this.editor.inputs.currentPagePoint.clone();
      if (this.canDraw) {
        this.startShape();
      }
    });
    __publicField(this, "onPointerMove", () => {
      const { inputs } = this.editor;
      if (this.isPen !== inputs.isPen) {
        if (this.markId) {
          this.editor.bailToMark(this.markId);
          this.startShape();
          return;
        }
      } else {
        if (!this.canDraw && inputs.isDragging) {
          this.startShape();
          this.canDraw = true;
        }
      }
      if (this.canDraw) {
        if (inputs.isPen) {
          if (Vec.Dist(inputs.currentPagePoint, this.lastRecordedPoint) >= 1 / this.editor.getZoomLevel()) {
            this.lastRecordedPoint = inputs.currentPagePoint.clone();
            this.mergeNextPoint = false;
          } else {
            this.mergeNextPoint = true;
          }
        } else {
          this.mergeNextPoint = false;
        }
        this.updateDrawingShape();
      }
    });
    __publicField(this, "onKeyDown", (info) => {
      if (info.key === "Shift") {
        switch (this.segmentMode) {
          case "free": {
            this.segmentMode = "starting_straight";
            this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
            break;
          }
          case "starting_free": {
            this.segmentMode = "starting_straight";
          }
        }
      }
      this.updateDrawingShape();
    });
    __publicField(this, "onKeyUp", (info) => {
      if (info.key === "Shift") {
        this.editor.snaps.clearIndicators();
        switch (this.segmentMode) {
          case "straight": {
            this.segmentMode = "starting_free";
            this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
            break;
          }
          case "starting_straight": {
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "free";
            break;
          }
        }
      }
      this.updateDrawingShape();
    });
    __publicField(this, "onExit", () => {
      this.editor.snaps.clearIndicators();
      this.pagePointWhereCurrentSegmentChanged = this.editor.inputs.currentPagePoint.clone();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      if (this.editor.inputs.isDragging) {
        return;
      }
      if (this.markId) {
        this.editor.bailToMark(this.markId);
      }
      this.cancel();
    });
  }
  canClose() {
    return this.shapeType !== "highlight";
  }
  getIsClosed(segments, size4) {
    if (!this.canClose())
      return false;
    const strokeWidth = STROKE_SIZES2[size4];
    const firstPoint = segments[0].points[0];
    const lastSegment = segments[segments.length - 1];
    const lastPoint = lastSegment.points[lastSegment.points.length - 1];
    return firstPoint !== lastPoint && this.currentLineLength > strokeWidth * 4 && Vec.DistMin(firstPoint, lastPoint, strokeWidth * 2);
  }
  startShape() {
    const {
      inputs: { originPagePoint, isPen }
    } = this.editor;
    this.markId = "draw start " + uniqueId();
    this.editor.mark(this.markId);
    this.isPen = isPen;
    const pressure = this.isPen ? this.info.point.z * 1.25 : 0.5;
    this.segmentMode = this.editor.inputs.shiftKey ? "straight" : "free";
    this.didJustShiftClickToExtendPreviousShapeLine = false;
    this.lastRecordedPoint = originPagePoint.clone();
    if (this.initialShape) {
      const shape = this.editor.getShape(this.initialShape.id);
      if (shape && this.segmentMode === "straight") {
        this.didJustShiftClickToExtendPreviousShapeLine = true;
        const prevSegment = last(shape.props.segments);
        if (!prevSegment)
          throw Error("Expected a previous segment!");
        const prevPoint = last(prevSegment.points);
        if (!prevPoint)
          throw Error("Expected a previous point!");
        const { x, y } = this.editor.getPointInShapeSpace(shape, originPagePoint).toFixed();
        const pressure2 = this.isPen ? this.info.point.z * 1.25 : 0.5;
        const newSegment = {
          type: this.segmentMode,
          points: [
            {
              x: prevPoint.x,
              y: prevPoint.y,
              z: +pressure2.toFixed(2)
            },
            {
              x,
              y,
              z: +pressure2.toFixed(2)
            }
          ]
        };
        const prevPointPageSpace = Mat.applyToPoint(this.editor.getShapePageTransform(shape.id), prevPoint);
        this.pagePointWhereCurrentSegmentChanged = prevPointPageSpace;
        this.pagePointWhereNextSegmentChanged = null;
        const segments = [...shape.props.segments, newSegment];
        if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
          this.currentLineLength = this.getLineLength(segments);
        }
        const shapePartial = {
          id: shape.id,
          type: this.shapeType,
          props: {
            segments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(segments, shape.props.size);
        }
        this.editor.updateShapes([shapePartial]);
        return;
      }
    }
    this.pagePointWhereCurrentSegmentChanged = originPagePoint.clone();
    const id = createShapeId();
    this.editor.createShapes([
      {
        id,
        type: this.shapeType,
        x: originPagePoint.x,
        y: originPagePoint.y,
        props: {
          isPen: this.isPen,
          segments: [
            {
              type: this.segmentMode,
              points: [
                {
                  x: 0,
                  y: 0,
                  z: +pressure.toFixed(2)
                }
              ]
            }
          ]
        }
      }
    ]);
    this.currentLineLength = 0;
    this.initialShape = this.editor.getShape(id);
  }
  updateDrawingShape() {
    const { initialShape } = this;
    const { inputs } = this.editor;
    if (!initialShape)
      return;
    const {
      id,
      props: { size: size4 }
    } = initialShape;
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const { segments } = shape.props;
    const { x, y, z } = this.editor.getPointInShapeSpace(shape, inputs.currentPagePoint).toFixed();
    const newPoint = { x, y, z: this.isPen ? +(z * 1.25).toFixed(2) : 0.5 };
    switch (this.segmentMode) {
      case "starting_straight": {
        const { pagePointWhereNextSegmentChanged } = this;
        if (pagePointWhereNextSegmentChanged === null) {
          throw Error("We should have a point where the segment changed");
        }
        const hasMovedFarEnough = Vec.Dist2(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > DRAG_DISTANCE;
        if (hasMovedFarEnough) {
          this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
          this.pagePointWhereNextSegmentChanged = null;
          this.segmentMode = "straight";
          const prevSegment = last(segments);
          if (!prevSegment)
            throw Error("Expected a previous segment!");
          const prevLastPoint = last(prevSegment.points);
          if (!prevLastPoint)
            throw Error("Expected a previous last point!");
          let newSegment;
          const newLastPoint = this.editor.getPointInShapeSpace(shape, this.pagePointWhereCurrentSegmentChanged).toFixed().toJson();
          if (prevSegment.type === "straight") {
            this.currentLineLength += Vec.Dist(prevLastPoint, newLastPoint);
            newSegment = {
              type: "straight",
              points: [{ ...prevLastPoint }, newLastPoint]
            };
            const transform = this.editor.getShapePageTransform(shape);
            this.pagePointWhereCurrentSegmentChanged = Mat.applyToPoint(transform, prevLastPoint);
          } else {
            newSegment = {
              type: "straight",
              points: [newLastPoint, newPoint]
            };
          }
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: [...segments, newSegment]
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(segments, size4);
          }
          this.editor.updateShapes([shapePartial], {
            squashing: true
          });
        }
        break;
      }
      case "starting_free": {
        const { pagePointWhereNextSegmentChanged } = this;
        if (pagePointWhereNextSegmentChanged === null) {
          throw Error("We should have a point where the segment changed");
        }
        const hasMovedFarEnough = Vec.Dist2(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > DRAG_DISTANCE;
        if (hasMovedFarEnough) {
          this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
          this.pagePointWhereNextSegmentChanged = null;
          this.segmentMode = "free";
          const newSegments = segments.slice();
          const prevStraightSegment = newSegments[newSegments.length - 1];
          const prevPoint = last(prevStraightSegment.points);
          if (!prevPoint) {
            throw Error("No previous point!");
          }
          const newFreeSegment = {
            type: "free",
            points: [...Vec.PointsBetween(prevPoint, newPoint, 6).map((p) => p.toFixed().toJson())]
          };
          const finalSegments = [...newSegments, newFreeSegment];
          if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
            this.currentLineLength = this.getLineLength(finalSegments);
          }
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: finalSegments
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(finalSegments, size4);
          }
          this.editor.updateShapes([shapePartial], { squashing: true });
        }
        break;
      }
      case "straight": {
        const newSegments = segments.slice();
        const newSegment = newSegments[newSegments.length - 1];
        const { pagePointWhereCurrentSegmentChanged } = this;
        const { ctrlKey, currentPagePoint } = this.editor.inputs;
        if (!pagePointWhereCurrentSegmentChanged)
          throw Error("We should have a point where the segment changed");
        let pagePoint;
        let shouldSnapToAngle = false;
        if (this.didJustShiftClickToExtendPreviousShapeLine) {
          if (this.editor.inputs.isDragging) {
            shouldSnapToAngle = !ctrlKey;
            this.didJustShiftClickToExtendPreviousShapeLine = false;
          } else {
          }
        } else {
          shouldSnapToAngle = !ctrlKey;
        }
        let newPoint2 = this.editor.getPointInShapeSpace(shape, currentPagePoint).toFixed().toJson();
        let didSnap = false;
        let snapSegment = void 0;
        const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
        if (shouldSnap) {
          if (newSegments.length > 2) {
            let nearestPoint = void 0;
            let minDistance = 8 / this.editor.getZoomLevel();
            for (let i = 0, n = segments.length - 2; i < n; i++) {
              const segment = segments[i];
              if (!segment)
                break;
              if (segment.type === "free")
                continue;
              const first = segment.points[0];
              const lastPoint = last(segment.points);
              if (!(first && lastPoint))
                continue;
              const nearestPointOnSegment = Vec.NearestPointOnLineSegment(first, lastPoint, newPoint2);
              if (Vec.DistMin(nearestPointOnSegment, newPoint2, minDistance)) {
                nearestPoint = nearestPointOnSegment.toFixed().toJson();
                minDistance = Vec.Dist(nearestPointOnSegment, newPoint2);
                snapSegment = segment;
                break;
              }
            }
            if (nearestPoint) {
              didSnap = true;
              newPoint2 = nearestPoint;
            }
          }
        }
        if (didSnap && snapSegment) {
          const transform = this.editor.getShapePageTransform(shape);
          const first = snapSegment.points[0];
          const lastPoint = last(snapSegment.points);
          if (!lastPoint)
            throw Error("Expected a last point!");
          const A = Mat.applyToPoint(transform, first);
          const B = Mat.applyToPoint(transform, lastPoint);
          const snappedPoint = Mat.applyToPoint(transform, newPoint2);
          this.editor.snaps.setIndicators([
            {
              id: uniqueId(),
              type: "points",
              points: [A, snappedPoint, B]
            }
          ]);
        } else {
          this.editor.snaps.clearIndicators();
          if (shouldSnapToAngle) {
            const currentAngle = Vec.Angle(pagePointWhereCurrentSegmentChanged, currentPagePoint);
            const snappedAngle = snapAngle(currentAngle, 24);
            const angleDiff = snappedAngle - currentAngle;
            pagePoint = Vec.RotWith(currentPagePoint, pagePointWhereCurrentSegmentChanged, angleDiff);
          } else {
            pagePoint = currentPagePoint;
          }
          newPoint2 = this.editor.getPointInShapeSpace(shape, pagePoint).toFixed().toJson();
        }
        this.currentLineLength += Vec.Dist(newSegment.points[0], newPoint2);
        newSegments[newSegments.length - 1] = {
          ...newSegment,
          type: "straight",
          points: [newSegment.points[0], newPoint2]
        };
        const shapePartial = {
          id,
          type: this.shapeType,
          props: {
            segments: newSegments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(segments, size4);
        }
        this.editor.updateShapes([shapePartial], { squashing: true });
        break;
      }
      case "free": {
        const newSegments = segments.slice();
        const newSegment = newSegments[newSegments.length - 1];
        const newPoints = [...newSegment.points];
        if (newPoints.length && this.mergeNextPoint) {
          const { z: z2 } = newPoints[newPoints.length - 1];
          newPoints[newPoints.length - 1] = {
            x: newPoint.x,
            y: newPoint.y,
            z: z2 ? Math.max(z2, newPoint.z) : newPoint.z
          };
        } else {
          this.currentLineLength += Vec.Dist(newPoints[newPoints.length - 1], newPoint);
          newPoints.push(newPoint);
        }
        newSegments[newSegments.length - 1] = {
          ...newSegment,
          points: newPoints
        };
        if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
          this.currentLineLength = this.getLineLength(newSegments);
        }
        const shapePartial = {
          id,
          type: this.shapeType,
          props: {
            segments: newSegments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(newSegments, size4);
        }
        this.editor.updateShapes([shapePartial], { squashing: true });
        if (newPoints.length > 500) {
          this.editor.updateShapes([{ id, type: this.shapeType, props: { isComplete: true } }]);
          const newShapeId = createShapeId();
          this.editor.createShapes([
            {
              id: newShapeId,
              type: this.shapeType,
              x: toFixed(inputs.currentPagePoint.x),
              y: toFixed(inputs.currentPagePoint.y),
              props: {
                isPen: this.isPen,
                segments: [
                  {
                    type: "free",
                    points: [{ x: 0, y: 0, z: this.isPen ? +(z * 1.25).toFixed() : 0.5 }]
                  }
                ]
              }
            }
          ]);
          this.initialShape = structuredClone(this.editor.getShape(newShapeId));
          this.mergeNextPoint = false;
          this.lastRecordedPoint = inputs.currentPagePoint.clone();
          this.currentLineLength = 0;
        }
        break;
      }
    }
  }
  getLineLength(segments) {
    let length = 0;
    for (const segment of segments) {
      for (let i = 0; i < segment.points.length - 1; i++) {
        const A = segment.points[i];
        const B = segment.points[i + 1];
        length += Vec.Dist2(B, A);
      }
    }
    return Math.sqrt(length);
  }
  complete() {
    if (!this.canDraw) {
      this.cancel();
      return;
    }
    const { initialShape } = this;
    if (!initialShape)
      return;
    this.editor.updateShapes([
      { id: initialShape.id, type: initialShape.type, props: { isComplete: true } }
    ]);
    this.parent.transition("idle");
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
};
__publicField(Drawing, "id", "drawing");

// node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Idle.mjs
var Idle3 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("drawing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle3, "id", "idle");

// node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeTool.mjs
var DrawShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "draw");
    __publicField(this, "onExit", () => {
      const drawingState = this.children["drawing"];
      drawingState.initialShape = void 0;
    });
  }
};
__publicField(DrawShapeTool, "id", "draw");
__publicField(DrawShapeTool, "initial", "idle");
__publicField(DrawShapeTool, "children", () => [Idle3, Drawing]);

// node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeTool.mjs
var FrameShapeTool = class extends BaseBoxShapeTool {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "frame");
    __publicField(this, "onCreate", (shape) => {
      if (!shape)
        return;
      const bounds = this.editor.getShapePageBounds(shape);
      const shapesToAddToFrame = [];
      const ancestorIds = this.editor.getShapeAncestors(shape).map((shape2) => shape2.id);
      this.editor.getSortedChildIdsForParent(shape.parentId).map((siblingShapeId) => {
        const siblingShape = this.editor.getShape(siblingShapeId);
        if (!siblingShape)
          return;
        if (siblingShape.id === shape.id)
          return;
        if (siblingShape.isLocked)
          return;
        const pageShapeBounds = this.editor.getShapePageBounds(siblingShape);
        if (!pageShapeBounds)
          return;
        if (bounds.contains(pageShapeBounds)) {
          if (canEnclose(siblingShape, ancestorIds, shape)) {
            shapesToAddToFrame.push(siblingShape.id);
          }
        }
      });
      this.editor.reparentShapes(shapesToAddToFrame, shape.id);
      if (this.editor.getInstanceState().isToolLocked) {
        this.editor.setCurrentTool("frame");
      } else {
        this.editor.setCurrentTool("select.idle");
      }
    });
  }
};
__publicField(FrameShapeTool, "id", "frame");
__publicField(FrameShapeTool, "initial", "idle");
function canEnclose(shape, ancestorIds, frame2) {
  if (ancestorIds.includes(shape.id)) {
    return false;
  }
  if (shape.parentId === frame2.parentId) {
    return true;
  }
  return false;
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Idle.mjs
var Idle4 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onKeyUp", (info) => {
      var _a2;
      if (info.key === "Enter") {
        if (this.editor.getInstanceState().isReadonly)
          return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          (_a2 = this.editor.root.getCurrent()) == null ? void 0 : _a2.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle4, "id", "idle");

// node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Pointing.mjs
var Pointing3 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "markId", "");
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        const { originPagePoint } = this.editor.inputs;
        const id = createShapeId();
        this.markId = `creating:${id}`;
        this.editor.mark(this.markId);
        this.editor.createShapes([
          {
            id,
            type: "geo",
            x: originPagePoint.x,
            y: originPagePoint.y,
            props: {
              w: 1,
              h: 1,
              geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle)
            }
          }
        ]).select(id).setCurrentTool("select.resizing", {
          ...info,
          target: "selection",
          handle: "bottom_right",
          isCreating: true,
          creationCursorOffset: { x: 1, y: 1 },
          onInteractionEnd: "geo"
        });
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  complete() {
    const { originPagePoint } = this.editor.inputs;
    const id = createShapeId();
    this.markId = `creating:${id}`;
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: "geo",
        x: originPagePoint.x,
        y: originPagePoint.y,
        props: {
          geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle),
          w: 1,
          h: 1
        }
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const bounds = shape.props.geo === "star" ? new Box(0, 0, 200, 190) : shape.props.geo === "cloud" ? new Box(0, 0, 300, 180) : new Box(0, 0, 200, 200);
    const delta = bounds.center;
    const parentTransform = this.editor.getShapeParentTransform(shape);
    if (parentTransform)
      delta.rot(-parentTransform.rotation());
    this.editor.select(id);
    this.editor.updateShapes([
      {
        id: shape.id,
        type: "geo",
        x: shape.x - delta.x,
        y: shape.y - delta.y,
        props: {
          geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle),
          w: bounds.width,
          h: bounds.height
        }
      }
    ]);
    if (this.editor.getInstanceState().isToolLocked) {
      this.parent.transition("idle");
    } else {
      this.editor.setCurrentTool("select", {});
    }
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(Pointing3, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeTool.mjs
var GeoShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "geo");
  }
};
__publicField(GeoShapeTool, "id", "geo");
__publicField(GeoShapeTool, "initial", "idle");
__publicField(GeoShapeTool, "children", () => [Idle4, Pointing3]);

// node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeTool.mjs
var HighlightShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "highlight");
    __publicField(this, "onExit", () => {
      const drawingState = this.children["drawing"];
      drawingState.initialShape = void 0;
    });
  }
};
__publicField(HighlightShapeTool, "id", "highlight");
__publicField(HighlightShapeTool, "initial", "idle");
__publicField(HighlightShapeTool, "children", () => [Idle3, Drawing]);

// node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Idle.mjs
var Idle5 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeId", "");
    __publicField(this, "onEnter", (info) => {
      this.shapeId = info.shapeId;
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onPointerDown", () => {
      this.parent.transition("pointing", { shapeId: this.shapeId });
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle5, "id", "idle");

// node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Pointing.mjs
var MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES = 2;
var Pointing4 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shape", {});
    __publicField(this, "markId");
    __publicField(this, "onEnter", (info) => {
      const { inputs } = this.editor;
      const { currentPagePoint } = inputs;
      this.markId = void 0;
      const shape = info.shapeId && this.editor.getShape(info.shapeId);
      if (shape && inputs.shiftKey) {
        this.markId = `creating:${shape.id}`;
        this.editor.mark(this.markId);
        this.shape = shape;
        const handles = this.editor.getShapeHandles(this.shape);
        if (!handles)
          return;
        const vertexHandles = handles.filter((h) => h.type === "vertex").sort(sortByIndex);
        const endHandle = vertexHandles[vertexHandles.length - 1];
        const prevEndHandle = vertexHandles[vertexHandles.length - 2];
        const shapePagePoint = Mat.applyToPoint(this.editor.getShapeParentTransform(this.shape), new Vec(this.shape.x, this.shape.y));
        const nextPoint = Vec.Sub(currentPagePoint, shapePagePoint).addXY(0.1, 0.1);
        const points = structuredClone(this.shape.props.points);
        if (Vec.DistMin(endHandle, prevEndHandle, MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES) || Vec.DistMin(nextPoint, endHandle, MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES)) {
          points[endHandle.id] = {
            id: endHandle.id,
            index: endHandle.index,
            x: nextPoint.x,
            y: nextPoint.y
          };
        } else {
          const nextIndex = getIndexAbove(endHandle.index);
          points[nextIndex] = {
            id: nextIndex,
            index: nextIndex,
            x: nextPoint.x,
            y: nextPoint.y
          };
        }
        this.editor.updateShapes([
          {
            id: this.shape.id,
            type: this.shape.type,
            props: {
              points
            }
          }
        ]);
      } else {
        const id = createShapeId();
        this.markId = `creating:${id}`;
        this.editor.mark(this.markId);
        this.editor.createShapes([
          {
            id,
            type: "line",
            x: currentPagePoint.x,
            y: currentPagePoint.y
          }
        ]);
        this.editor.select(id);
        this.shape = this.editor.getShape(id);
      }
    });
    __publicField(this, "onPointerMove", () => {
      if (!this.shape)
        return;
      if (this.editor.inputs.isDragging) {
        const handles = this.editor.getShapeHandles(this.shape);
        if (!handles) {
          if (this.markId)
            this.editor.bailToMark(this.markId);
          throw Error("No handles found");
        }
        const lastHandle = last(handles);
        this.editor.setCurrentTool("select.dragging_handle", {
          shape: this.shape,
          isCreating: true,
          handle: { ...lastHandle, x: lastHandle.x - 0.1, y: lastHandle.y - 0.1 },
          onInteractionEnd: "line"
        });
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.parent.transition("idle");
      if (this.markId)
        this.editor.bailToMark(this.markId);
      this.editor.snaps.clearIndicators();
    });
  }
  complete() {
    this.parent.transition("idle", { shapeId: this.shape.id });
    this.editor.snaps.clearIndicators();
  }
  cancel() {
    if (this.markId)
      this.editor.bailToMark(this.markId);
    this.parent.transition("idle", { shapeId: this.shape.id });
    this.editor.snaps.clearIndicators();
  }
};
__publicField(Pointing4, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeTool.mjs
var LineShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "line");
  }
};
__publicField(LineShapeTool, "id", "line");
__publicField(LineShapeTool, "initial", "idle");
__publicField(LineShapeTool, "children", () => [Idle5, Pointing4]);

// node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Idle.mjs
var Idle6 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle6, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/selectHelpers.mjs
function kickoutOccludedShapes(editor, shapeIds) {
  var _a2;
  const parentsToCheck = /* @__PURE__ */ new Set();
  for (const id of shapeIds) {
    const shape = editor.getShape(id);
    if (!shape)
      continue;
    if (editor.getShapeUtil(shape).onDragShapesOut) {
      parentsToCheck.add(shape);
    }
    const parent = editor.getShape(shape.parentId);
    if (!parent)
      continue;
    if (editor.getShapeUtil(parent).onDragShapesOut) {
      parentsToCheck.add(parent);
    }
  }
  const parentsWithKickedOutChildren = /* @__PURE__ */ new Map();
  for (const parent of parentsToCheck) {
    const occludedChildren = getOccludedChildren(editor, parent);
    if (occludedChildren.length) {
      parentsWithKickedOutChildren.set(parent, occludedChildren);
    }
  }
  for (const [parent, kickedOutChildrenIds] of parentsWithKickedOutChildren) {
    const shapeUtil = editor.getShapeUtil(parent);
    const kickedOutChildren = compact(kickedOutChildrenIds.map((id) => editor.getShape(id)));
    (_a2 = shapeUtil.onDragShapesOut) == null ? void 0 : _a2.call(shapeUtil, parent, kickedOutChildren);
  }
}
function getOccludedChildren(editor, parent) {
  const childIds = editor.getSortedChildIdsForParent(parent.id);
  if (childIds.length === 0)
    return [];
  const parentPageBounds = editor.getShapePageBounds(parent);
  if (!parentPageBounds)
    return [];
  let parentGeometry;
  let parentPageTransform;
  let parentPageCorners;
  const results = [];
  for (const childId of childIds) {
    const shapePageBounds = editor.getShapePageBounds(childId);
    if (!shapePageBounds) {
      continue;
    }
    if (!parentPageBounds.includes(shapePageBounds)) {
      results.push(childId);
      continue;
    }
    parentGeometry != null ? parentGeometry : parentGeometry = editor.getShapeGeometry(parent);
    parentPageTransform != null ? parentPageTransform : parentPageTransform = editor.getShapePageTransform(parent);
    parentPageCorners != null ? parentPageCorners : parentPageCorners = parentPageTransform.applyToPoints(parentGeometry.vertices);
    const parentCornersInShapeSpace = editor.getShapePageTransform(childId).clone().invert().applyToPoints(parentPageCorners);
    const { vertices, isClosed } = editor.getShapeGeometry(childId);
    if (vertices.some((v) => pointInPolygon(v, parentCornersInShapeSpace))) {
      continue;
    }
    if (isClosed) {
      if (polygonsIntersect(parentCornersInShapeSpace, vertices)) {
        continue;
      }
    } else if (polygonIntersectsPolyline(parentCornersInShapeSpace, vertices)) {
      continue;
    }
    results.push(childId);
  }
  return results;
}
function startEditingShapeWithLabel(editor, shape, selectAll = false) {
  editor.select(shape);
  editor.setEditingShape(shape);
  editor.setCurrentTool("select.editing_shape", {
    target: "shape",
    shape
  });
  if (selectAll) {
    editor.emit("select-all-text", { shapeId: shape.id });
  }
  zoomToShapeIfOffscreen(editor);
}
var ZOOM_TO_SHAPE_PADDING = 16;
function zoomToShapeIfOffscreen(editor) {
  const selectionPageBounds = editor.getSelectionPageBounds();
  const viewportPageBounds = editor.getViewportPageBounds();
  if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
    const eb = selectionPageBounds.clone().expandBy(ZOOM_TO_SHAPE_PADDING / editor.getZoomLevel()).expand(viewportPageBounds);
    const nextBounds = viewportPageBounds.clone().translate({
      x: (eb.center.x - viewportPageBounds.center.x) * 2,
      y: (eb.center.y - viewportPageBounds.center.y) * 2
    });
    editor.zoomToBounds(nextBounds, {
      duration: ANIMATION_MEDIUM_MS,
      inset: 0
    });
  }
}

// node_modules/tldraw/dist-esm/lib/shapes/note/noteHelpers.mjs
var ADJACENT_NOTE_MARGIN = 20;
var CLONE_HANDLE_MARGIN = 0;
var NOTE_SIZE = 200;
var NOTE_CENTER_OFFSET = { x: NOTE_SIZE / 2, y: NOTE_SIZE / 2 };
var NOTE_PIT_RADIUS = 10;
var DEFAULT_PITS = {
  ["a1"]: new Vec(NOTE_SIZE * 0.5, NOTE_SIZE * -0.5 - ADJACENT_NOTE_MARGIN),
  ["a2"]: new Vec(NOTE_SIZE * 1.5 + ADJACENT_NOTE_MARGIN, NOTE_SIZE * 0.5),
  ["a3"]: new Vec(NOTE_SIZE * 0.5, NOTE_SIZE * 1.5 + ADJACENT_NOTE_MARGIN),
  ["a4"]: new Vec(NOTE_SIZE * -0.5 - ADJACENT_NOTE_MARGIN, NOTE_SIZE * 0.5)
};
function getNoteAdjacentPositions(pagePoint, pageRotation, growY, extraHeight) {
  return Object.fromEntries(Object.entries(DEFAULT_PITS).map(([id, v], i) => {
    const point = v.clone();
    if (i === 0 && extraHeight) {
      point.y -= extraHeight;
    } else if (i === 2 && growY) {
      point.y += growY;
    }
    return [id, point.rot(pageRotation).add(pagePoint)];
  }));
}
function getAvailableNoteAdjacentPositions(editor, rotation, extraHeight) {
  const selectedShapeIds = new Set(editor.getSelectedShapeIds());
  const minSize = (NOTE_SIZE + ADJACENT_NOTE_MARGIN + extraHeight) ** 2;
  const allCenters = /* @__PURE__ */ new Map();
  const positions = [];
  for (const shape of editor.getCurrentPageShapes()) {
    if (!editor.isShapeOfType(shape, "note") || selectedShapeIds.has(shape.id)) {
      continue;
    }
    const transform = editor.getShapePageTransform(shape.id);
    if (rotation !== transform.rotation())
      continue;
    allCenters.set(shape, editor.getShapePageBounds(shape).center);
    positions.push(...Object.values(getNoteAdjacentPositions(transform.point(), rotation, shape.props.growY, extraHeight)));
  }
  const len = positions.length;
  let position;
  for (const [shape, center] of allCenters) {
    for (let i = 0; i < len; i++) {
      position = positions[i];
      if (!position)
        continue;
      if (Vec.Dist2(center, position) > minSize)
        continue;
      if (editor.isPointInShape(shape, position)) {
        positions[i] = void 0;
      }
    }
  }
  return compact(positions);
}
function getNoteShapeForAdjacentPosition(editor, shape, center, pageRotation, forceNew = false) {
  let nextNote;
  const allShapesOnPage = editor.getCurrentPageShapesSorted();
  const minDistance = NOTE_SIZE + ADJACENT_NOTE_MARGIN ** 2;
  for (let i = allShapesOnPage.length - 1; i >= 0; i--) {
    const otherNote = allShapesOnPage[i];
    if (otherNote.type === "note" && otherNote.id !== shape.id) {
      const otherBounds = editor.getShapePageBounds(otherNote);
      if (otherBounds && Vec.Dist2(otherBounds.center, center) < minDistance && editor.isPointInShape(otherNote, center)) {
        nextNote = otherNote;
        break;
      }
    }
  }
  editor.complete();
  if (!nextNote || forceNew) {
    editor.mark("creating note shape");
    const id = createShapeId();
    editor.createShape({
      id,
      type: "note",
      x: center.x,
      y: center.y,
      rotation: pageRotation,
      opacity: shape.opacity,
      props: {
        ...shape.props,
        text: "",
        growY: 0,
        fontSizeAdjustment: 0,
        url: ""
      }
    });
    const createdShape = editor.getShape(id);
    const topLeft = editor.getPointInParentSpace(createdShape, Vec.Sub(center, Vec.Rot(NOTE_CENTER_OFFSET, pageRotation)));
    editor.updateShape({
      id,
      type: "note",
      x: topLeft.x,
      y: topLeft.y
    });
    nextNote = editor.getShape(id);
  }
  zoomToShapeIfOffscreen(editor);
  return nextNote;
}

// node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Pointing.mjs
var Pointing5 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "dragged", false);
    __publicField(this, "info", {});
    __publicField(this, "wasFocusedOnEnter", false);
    __publicField(this, "markId", "");
    __publicField(this, "shape", {});
    __publicField(this, "onEnter", () => {
      const { editor } = this;
      this.wasFocusedOnEnter = !editor.getIsMenuOpen();
      if (this.wasFocusedOnEnter) {
        const id = createShapeId();
        this.markId = `creating:${id}`;
        editor.mark(this.markId);
        const center = this.editor.inputs.originPagePoint.clone();
        const offset4 = getNotePitOffset(this.editor, center);
        if (offset4) {
          center.sub(offset4);
        }
        this.shape = createSticky(this.editor, id, center);
      }
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        if (!this.wasFocusedOnEnter) {
          const id = createShapeId();
          const center = this.editor.inputs.originPagePoint.clone();
          const offset4 = getNotePitOffset(this.editor, center);
          if (offset4) {
            center.sub(offset4);
          }
          this.shape = createSticky(this.editor, id, center);
        }
        this.editor.setCurrentTool("select.translating", {
          ...info,
          target: "shape",
          shape: this.shape,
          onInteractionEnd: "note",
          isCreating: true,
          onCreate: () => {
            this.editor.setEditingShape(this.shape.id);
            this.editor.setCurrentTool("select.editing_shape");
          }
        });
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
  }
  complete() {
    if (this.wasFocusedOnEnter) {
      if (this.editor.getInstanceState().isToolLocked) {
        this.parent.transition("idle");
      } else {
        this.editor.setEditingShape(this.shape.id);
        this.editor.setCurrentTool("select.editing_shape", {
          ...this.info,
          target: "shape",
          shape: this.shape
        });
      }
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.parent.transition("idle", this.info);
  }
};
__publicField(Pointing5, "id", "pointing");
function getNotePitOffset(editor, center) {
  let min3 = NOTE_PIT_RADIUS / editor.getZoomLevel();
  let offset4;
  for (const pit of getAvailableNoteAdjacentPositions(editor, 0, 0)) {
    const deltaToPit = Vec.Sub(center, pit);
    const dist = deltaToPit.len();
    if (dist < min3) {
      min3 = dist;
      offset4 = deltaToPit;
    }
  }
  return offset4;
}
function createSticky(editor, id, center) {
  editor.createShape({
    id,
    type: "note",
    x: center.x,
    y: center.y
  }).select(id);
  const shape = editor.getShape(id);
  const bounds = editor.getShapeGeometry(shape).bounds;
  editor.updateShapes([
    {
      id,
      type: "note",
      x: shape.x - bounds.width / 2,
      y: shape.y - bounds.height / 2
    }
  ]);
  return editor.getShape(id);
}

// node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeTool.mjs
var NoteShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "note");
  }
};
__publicField(NoteShapeTool, "id", "note");
__publicField(NoteShapeTool, "initial", "idle");
__publicField(NoteShapeTool, "children", () => [Idle6, Pointing5]);

// node_modules/tldraw/dist-esm/lib/tools/selection-logic/updateHoveredId.mjs
function _updateHoveredId(editor) {
  const hitShape = editor.getShapeAtPoint(editor.inputs.currentPagePoint, {
    hitInside: false,
    hitLabels: false,
    margin: HIT_TEST_MARGIN / editor.getZoomLevel(),
    renderingOnly: true
  });
  if (!hitShape)
    return editor.setHoveredShape(null);
  let shapeToHover = void 0;
  const outermostShape = editor.getOutermostSelectableShape(hitShape);
  if (outermostShape === hitShape) {
    shapeToHover = hitShape;
  } else {
    if (outermostShape.id === editor.getFocusedGroupId() || editor.getSelectedShapeIds().includes(outermostShape.id)) {
      shapeToHover = hitShape;
    } else {
      shapeToHover = outermostShape;
    }
  }
  return editor.setHoveredShape(shapeToHover.id);
}
var updateHoveredId = false ? _updateHoveredId : throttle(_updateHoveredId, 32);

// node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Idle.mjs
var Idle7 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerMove", (info) => {
      switch (info.target) {
        case "shape":
        case "canvas": {
          updateHoveredId(this.editor);
        }
      }
    });
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
    __publicField(this, "onKeyDown", (info) => {
      var _a2;
      if (info.key === "Enter") {
        if (this.editor.getInstanceState().isReadonly)
          return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          (_a2 = this.editor.root.getCurrent()) == null ? void 0 : _a2.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle7, "id", "idle");

// node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Pointing.mjs
var Pointing6 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shape");
    __publicField(this, "markId", "");
    __publicField(this, "onExit", () => {
      this.editor.setHintingShapes([]);
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        const {
          inputs: { originPagePoint }
        } = this.editor;
        const id = createShapeId();
        this.markId = `creating:${id}`;
        this.editor.mark(this.markId);
        this.editor.createShapes([
          {
            id,
            type: "text",
            x: originPagePoint.x,
            y: originPagePoint.y,
            props: {
              text: "",
              autoSize: false,
              w: 20
            }
          }
        ]);
        this.editor.select(id);
        this.shape = this.editor.getShape(id);
        if (!this.shape)
          return;
        const { shape } = this;
        this.editor.setCurrentTool("select.resizing", {
          ...info,
          target: "selection",
          handle: "right",
          isCreating: true,
          creationCursorOffset: { x: 1, y: 1 },
          onInteractionEnd: "text",
          onCreate: () => {
            this.editor.setEditingShape(shape.id);
            this.editor.setCurrentTool("select.editing_shape");
          }
        });
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  complete() {
    var _a2;
    this.editor.mark("creating text shape");
    const id = createShapeId();
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.createShapes([
      {
        id,
        type: "text",
        x,
        y,
        props: {
          text: "",
          autoSize: true
        }
      }
    ]).select(id);
    this.editor.setEditingShape(id);
    this.editor.setCurrentTool("select");
    (_a2 = this.editor.root.getCurrent()) == null ? void 0 : _a2.transition("editing_shape");
  }
  cancel() {
    this.parent.transition("idle");
    this.editor.bailToMark(this.markId);
  }
};
__publicField(Pointing6, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeTool.mjs
var TextShapeTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeType", "text");
  }
};
__publicField(TextShapeTool, "id", "text");
__publicField(TextShapeTool, "initial", "idle");
__publicField(TextShapeTool, "children", () => [Idle7, Pointing6]);

// node_modules/tldraw/dist-esm/lib/defaultShapeTools.mjs
var defaultShapeTools = [
  TextShapeTool,
  DrawShapeTool,
  GeoShapeTool,
  NoteShapeTool,
  LineShapeTool,
  FrameShapeTool,
  ArrowShapeTool,
  HighlightShapeTool
];

// node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeUtil.mjs
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var import_react47 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/ShapeFill.mjs
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var import_react42 = __toESM(require_react(), 1);
function useDefaultColorTheme() {
  return getDefaultColorTheme({ isDarkMode: useIsDarkMode() });
}
var ShapeFill = import_react42.default.memo(function ShapeFill2({ theme, d, color, fill }) {
  switch (fill) {
    case "none": {
      return null;
    }
    case "solid": {
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("path", { fill: theme[color].semi, d });
    }
    case "semi": {
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("path", { fill: theme.solid, d });
    }
    case "pattern": {
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(PatternFill, { theme, color, fill, d });
    }
  }
});
var PatternFill = function PatternFill2({ d, color, theme }) {
  const editor = useEditor();
  const svgExport = useSvgExportContext();
  const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const intZoom = Math.ceil(zoomLevel);
  const teenyTiny = editor.getZoomLevel() <= 0.18;
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(import_jsx_runtime36.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("path", { fill: theme[color].pattern, d }),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("path", {
      fill: svgExport ? `url(#${HASH_PATTERN_ZOOM_NAMES[`1_${theme.id}`]})` : teenyTiny ? theme[color].semi : `url(#${HASH_PATTERN_ZOOM_NAMES[`${intZoom}_${theme.id}`]})`,
      d
    })
  ] });
};

// node_modules/tldraw/dist-esm/lib/shapes/shared/SvgTextLabel.mjs
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/createTextJsxFromSpans.mjs
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
function correctSpacesToNbsp(input) {
  return input.replace(/\s/g, "\xA0");
}
function createTextJsxFromSpans(editor, spans, opts) {
  var _a2, _b2;
  const { padding = 0 } = opts;
  if (spans.length === 0)
    return null;
  const bounds = Box.From(spans[0].box);
  for (const { box } of spans) {
    bounds.union(box);
  }
  const offsetX = padding + ((_a2 = opts.offsetX) != null ? _a2 : 0);
  const offsetY = ((_b2 = opts.offsetY) != null ? _b2 : 0) + opts.fontSize / 2 + (opts.verticalTextAlign === "start" ? padding : opts.verticalTextAlign === "end" ? opts.height - padding - bounds.height : (Math.ceil(opts.height) - bounds.height) / 2);
  let currentLineTop = null;
  const children = [];
  for (const { text, box } of spans) {
    const didBreakLine = currentLineTop !== null && box.y > currentLineTop;
    if (didBreakLine) {
      children.push(/* @__PURE__ */ (0, import_jsx_runtime37.jsx)("tspan", {
        alignmentBaseline: "mathematical",
        x: offsetX,
        y: box.y + offsetY,
        children: "\n"
      }, children.length));
    }
    children.push(/* @__PURE__ */ (0, import_jsx_runtime37.jsx)("tspan", {
      alignmentBaseline: "mathematical",
      x: box.x + offsetX,
      y: box.y + offsetY,
      children: correctSpacesToNbsp(text)
    }, children.length));
    currentLineTop = box.y;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("text", {
    fontSize: opts.fontSize,
    fontFamily: opts.fontFamily,
    fontStyle: opts.fontFamily,
    fontWeight: opts.fontWeight,
    dominantBaseline: "mathematical",
    alignmentBaseline: "mathematical",
    stroke: opts.stroke,
    strokeWidth: opts.strokeWidth,
    fill: opts.fill,
    children
  });
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/legacyProps.mjs
function getLegacyOffsetX(align, padding, spans, totalWidth) {
  if ((align === "start-legacy" || align === "end-legacy") && spans.length !== 0) {
    const spansBounds = Box.From(spans[0].box);
    for (const { box } of spans) {
      spansBounds.union(box);
    }
    if (align === "start-legacy") {
      return (totalWidth - 2 * padding - spansBounds.width) / 2;
    } else if (align === "end-legacy") {
      return -(totalWidth - 2 * padding - spansBounds.width) / 2;
    }
  }
}
function isLegacyAlign(align) {
  return align === "start-legacy" || align === "middle-legacy" || align === "end-legacy";
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/SvgTextLabel.mjs
function SvgTextLabel({
  fontSize,
  font,
  align,
  verticalAlign,
  text,
  labelColor,
  bounds,
  padding = 16,
  stroke = true
}) {
  const editor = useEditor();
  const theme = useDefaultColorTheme();
  const opts = {
    fontSize,
    fontFamily: DefaultFontFamilies[font],
    textAlign: align,
    verticalTextAlign: verticalAlign,
    width: Math.ceil(bounds.width),
    height: Math.ceil(bounds.height),
    padding,
    lineHeight: TEXT_PROPS.lineHeight,
    fontStyle: "normal",
    fontWeight: "normal",
    overflow: "wrap",
    offsetX: 0,
    offsetY: 0,
    fill: labelColor,
    stroke: void 0,
    strokeWidth: void 0
  };
  const spans = editor.textMeasure.measureTextSpans(text, opts);
  const offsetX = getLegacyOffsetX(align, padding, spans, bounds.width);
  if (offsetX) {
    opts.offsetX = offsetX;
  }
  opts.offsetX += bounds.x;
  opts.offsetY += bounds.y;
  const mainSpans = createTextJsxFromSpans(editor, spans, opts);
  let outlineSpans = null;
  if (stroke) {
    opts.fill = theme.background;
    opts.stroke = theme.background;
    opts.strokeWidth = 2;
    outlineSpans = createTextJsxFromSpans(editor, spans, opts);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(import_jsx_runtime38.Fragment, { children: [
    outlineSpans,
    mainSpans
  ] });
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/defaultStyleDefs.mjs
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var import_react43 = __toESM(require_react(), 1);
function getFontDefForExport(fontStyle) {
  return {
    key: `${DefaultFontStyle.id}:${fontStyle}`,
    getElement: async () => {
      const font = findFont(fontStyle);
      if (!font)
        return null;
      const url = font.$$_url;
      const fontFaceRule = font.$$_fontface;
      if (!url || !fontFaceRule)
        return null;
      const fontFile = await (await fetch(url)).blob();
      const base64FontFile = await FileHelpers.blobToDataUrl(fontFile);
      const newFontFaceRule = fontFaceRule.replace(url, base64FontFile);
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("style", { children: newFontFaceRule });
    }
  };
}
function findFont(name) {
  const fontFamily = DefaultFontFamilies[name];
  for (const font of document.fonts) {
    if (fontFamily.includes(font.family)) {
      return font;
    }
  }
  return null;
}
function getFillDefForExport(fill) {
  return {
    key: `${DefaultFontStyle.id}:${fill}`,
    getElement: async () => {
      if (fill !== "pattern")
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(HashPatternForExport, {});
    }
  };
}
function HashPatternForExport() {
  const theme = useDefaultColorTheme();
  const t2 = 8 / 12;
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(import_jsx_runtime39.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("mask", { id: "hash_pattern_mask", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("rect", { x: "0", y: "0", width: "8", height: "8", fill: "white" }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("g", { strokeLinecap: "round", stroke: "black", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("line", { x1: t2 * 1, y1: t2 * 3, x2: t2 * 3, y2: t2 * 1 }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("line", { x1: t2 * 5, y1: t2 * 7, x2: t2 * 7, y2: t2 * 5 }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("line", { x1: t2 * 9, y1: t2 * 11, x2: t2 * 11, y2: t2 * 9 })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("pattern", {
      id: HASH_PATTERN_ZOOM_NAMES[`1_${theme.id}`],
      width: "8",
      height: "8",
      patternUnits: "userSpaceOnUse",
      children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("rect", { x: "0", y: "0", width: "8", height: "8", fill: theme.solid, mask: "url(#hash_pattern_mask)" })
    })
  ] });
}
function getFillDefForCanvas() {
  return {
    key: `${DefaultFontStyle.id}:pattern`,
    component: PatternFillDefForCanvas
  };
}
var TILE_PATTERN_SIZE = 8;
var generateImage = (dpr, currentZoom, darkMode) => {
  return new Promise((resolve, reject) => {
    const size4 = TILE_PATTERN_SIZE * currentZoom * dpr;
    const canvasEl = document.createElement("canvas");
    canvasEl.width = size4;
    canvasEl.height = size4;
    const ctx = canvasEl.getContext("2d");
    if (!ctx)
      return;
    ctx.fillStyle = darkMode ? "#212529" : "#f8f9fa";
    ctx.fillRect(0, 0, size4, size4);
    ctx.globalCompositeOperation = "destination-out";
    ctx.lineCap = "round";
    ctx.lineWidth = 1.25 * currentZoom * dpr;
    const t2 = 8 / 12;
    const s = (v) => v * currentZoom * dpr;
    ctx.beginPath();
    ctx.moveTo(s(t2 * 1), s(t2 * 3));
    ctx.lineTo(s(t2 * 3), s(t2 * 1));
    ctx.moveTo(s(t2 * 5), s(t2 * 7));
    ctx.lineTo(s(t2 * 7), s(t2 * 5));
    ctx.moveTo(s(t2 * 9), s(t2 * 11));
    ctx.lineTo(s(t2 * 11), s(t2 * 9));
    ctx.stroke();
    canvasEl.toBlob((blob) => {
      if (!blob || debugFlags.throwToBlob.get()) {
        reject();
      } else {
        resolve(blob);
      }
    });
  });
};
var canvasBlob = (size4, fn) => {
  const canvas = document.createElement("canvas");
  canvas.width = size4[0];
  canvas.height = size4[1];
  const ctx = canvas.getContext("2d");
  if (!ctx)
    return "";
  fn(ctx);
  return canvas.toDataURL();
};
var getDefaultPatterns = () => {
  const defaultPatterns = [];
  for (let i = 1; i <= Math.ceil(MAX_ZOOM); i++) {
    const whitePixelBlob = canvasBlob([1, 1], (ctx) => {
      ctx.fillStyle = DefaultColorThemePalette.lightMode.black.semi;
      ctx.fillRect(0, 0, 1, 1);
    });
    const blackPixelBlob = canvasBlob([1, 1], (ctx) => {
      ctx.fillStyle = DefaultColorThemePalette.darkMode.black.semi;
      ctx.fillRect(0, 0, 1, 1);
    });
    defaultPatterns.push({
      zoom: i,
      url: whitePixelBlob,
      darkMode: false
    });
    defaultPatterns.push({
      zoom: i,
      url: blackPixelBlob,
      darkMode: true
    });
  }
  return defaultPatterns;
};
function usePattern() {
  const editor = useEditor();
  const dpr = editor.getInstanceState().devicePixelRatio;
  const [isReady, setIsReady] = (0, import_react43.useState)(false);
  const defaultPatterns = (0, import_react43.useMemo)(() => getDefaultPatterns(), []);
  const [backgroundUrls, setBackgroundUrls] = (0, import_react43.useState)(defaultPatterns);
  (0, import_react43.useEffect)(() => {
    if (false) {
      setIsReady(true);
      return;
    }
    const promises = [];
    for (let i = 1; i <= Math.ceil(MAX_ZOOM); i++) {
      promises.push(generateImage(dpr, i, false).then((blob) => ({
        zoom: i,
        url: URL.createObjectURL(blob),
        darkMode: false
      })));
      promises.push(generateImage(dpr, i, true).then((blob) => ({
        zoom: i,
        url: URL.createObjectURL(blob),
        darkMode: true
      })));
    }
    let isCancelled = false;
    Promise.all(promises).then((urls) => {
      if (isCancelled)
        return;
      setBackgroundUrls(urls);
      setIsReady(true);
    });
    return () => {
      isCancelled = true;
      setIsReady(false);
    };
  }, [dpr]);
  const defs = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(import_jsx_runtime39.Fragment, { children: backgroundUrls.map((item) => {
    const key = item.zoom + (item.darkMode ? "_dark" : "_light");
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("pattern", {
      id: HASH_PATTERN_ZOOM_NAMES[key],
      width: TILE_PATTERN_SIZE,
      height: TILE_PATTERN_SIZE,
      patternUnits: "userSpaceOnUse",
      children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("image", { href: item.url, width: TILE_PATTERN_SIZE, height: TILE_PATTERN_SIZE })
    }, key);
  }) });
  return { defs, isReady };
}
function PatternFillDefForCanvas() {
  const editor = useEditor();
  const containerRef = (0, import_react43.useRef)(null);
  const { defs, isReady } = usePattern();
  (0, import_react43.useEffect)(() => {
    if (isReady && editor.environment.isSafari) {
      const htmlLayer = findHtmlLayerParent(containerRef.current);
      if (htmlLayer) {
        requestAnimationFrame(() => {
          htmlLayer.style.display = "none";
          requestAnimationFrame(() => {
            htmlLayer.style.display = "";
          });
        });
      }
    }
  }, [editor, isReady]);
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("g", { ref: containerRef, "data-testid": isReady ? "ready-pattern-fill-defs" : void 0, children: defs });
}
function findHtmlLayerParent(element) {
  if (element.classList.contains("tl-html-layer"))
    return element;
  if (element.parentElement)
    return findHtmlLayerParent(element.parentElement);
  return null;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/getPerfectDashProps.mjs
function getPerfectDashProps2(totalLength, strokeWidth, opts = {}) {
  const {
    closed = false,
    snap = 1,
    start = "outset",
    end = "outset",
    lengthRatio = 2,
    style = "dashed"
  } = opts;
  let dashLength = 0;
  let dashCount = 0;
  let ratio = 1;
  let gapLength = 0;
  let strokeDashoffset = 0;
  switch (style) {
    case "dashed": {
      ratio = 1;
      dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
      break;
    }
    case "dotted": {
      ratio = 100;
      dashLength = strokeWidth / ratio;
      break;
    }
    default: {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
  }
  if (!closed) {
    if (start === "outset") {
      totalLength += dashLength / 2;
      strokeDashoffset += dashLength / 2;
    } else if (start === "skip") {
      totalLength -= dashLength;
      strokeDashoffset -= dashLength;
    }
    if (end === "outset") {
      totalLength += dashLength / 2;
    } else if (end === "skip") {
      totalLength -= dashLength;
    }
  }
  dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
  dashCount -= dashCount % snap;
  if (dashCount < 3 && style === "dashed") {
    if (totalLength / strokeWidth < 5) {
      dashLength = totalLength;
      dashCount = 1;
      gapLength = 0;
    } else {
      dashLength = totalLength * 0.333;
      gapLength = totalLength * 0.333;
    }
  } else {
    dashCount = Math.max(dashCount, 3);
    dashLength = totalLength / dashCount / (2 * ratio);
    if (closed) {
      strokeDashoffset = dashLength / 2;
      gapLength = (totalLength - dashCount * dashLength) / dashCount;
    } else {
      gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
    }
  }
  return {
    strokeDasharray: [dashLength, gapLength].join(" "),
    strokeDashoffset: strokeDashoffset.toString()
  };
}

// node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowLabel.mjs
var labelSizeCache = /* @__PURE__ */ new WeakMap();
function getArrowLabelSize(editor, shape) {
  const cachedSize = labelSizeCache.get(shape);
  if (cachedSize)
    return cachedSize;
  const info = editor.getArrowInfo(shape);
  let width = 0;
  let height = 0;
  const bodyGeom = info.isStraight ? new Edge2d({
    start: Vec.From(info.start.point),
    end: Vec.From(info.end.point)
  }) : new Arc2d({
    center: Vec.Cast(info.handleArc.center),
    radius: info.handleArc.radius,
    start: Vec.Cast(info.start.point),
    end: Vec.Cast(info.end.point),
    sweepFlag: info.bodyArc.sweepFlag,
    largeArcFlag: info.bodyArc.largeArcFlag
  });
  if (shape.props.text.trim()) {
    const bodyBounds = bodyGeom.bounds;
    const { w, h } = editor.textMeasure.measureText(shape.props.text, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[shape.props.font],
      fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
      maxWidth: null
    });
    width = w;
    height = h;
    if (bodyBounds.width > bodyBounds.height) {
      width = Math.max(Math.min(w, 64), Math.min(bodyBounds.width - 64, w));
      const { w: squishedWidth, h: squishedHeight } = editor.textMeasure.measureText(shape.props.text, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[shape.props.font],
        fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
        maxWidth: width
      });
      width = squishedWidth;
      height = squishedHeight;
    }
    if (width > 16 * ARROW_LABEL_FONT_SIZES[shape.props.size]) {
      width = 16 * ARROW_LABEL_FONT_SIZES[shape.props.size];
      const { w: squishedWidth, h: squishedHeight } = editor.textMeasure.measureText(shape.props.text, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[shape.props.font],
        fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
        maxWidth: width
      });
      width = squishedWidth;
      height = squishedHeight;
    }
  }
  const size4 = new Vec(width, height).addScalar(ARROW_LABEL_PADDING * 2);
  labelSizeCache.set(shape, size4);
  return size4;
}
function getLabelToArrowPadding(editor, shape) {
  const strokeWidth = STROKE_SIZES2[shape.props.size];
  const labelToArrowPadding = LABEL_TO_ARROW_PADDING + (strokeWidth - STROKE_SIZES2.s) * 2 + (strokeWidth === STROKE_SIZES2.xl ? 20 : 0);
  return labelToArrowPadding;
}
function getStraightArrowLabelRange(editor, shape, info) {
  const labelSize = getArrowLabelSize(editor, shape);
  const labelToArrowPadding = getLabelToArrowPadding(editor, shape);
  const startOffset = Vec.Nudge(info.start.point, info.end.point, labelToArrowPadding);
  const endOffset = Vec.Nudge(info.end.point, info.start.point, labelToArrowPadding);
  const intersectionPoints = intersectLineSegmentPolygon(startOffset, endOffset, Box.FromCenter(info.middle, labelSize).corners);
  if (!intersectionPoints || intersectionPoints.length !== 2) {
    return { start: 0.5, end: 0.5 };
  }
  let [startIntersect, endIntersect] = intersectionPoints;
  if (Vec.Dist2(startIntersect, startOffset) > Vec.Dist2(endIntersect, startOffset)) {
    ;
    [endIntersect, startIntersect] = intersectionPoints;
  }
  const startConstrained = startOffset.add(Vec.Sub(info.middle, startIntersect));
  const endConstrained = endOffset.add(Vec.Sub(info.middle, endIntersect));
  const start = Vec.Dist(info.start.point, startConstrained) / info.length;
  const end = Vec.Dist(info.start.point, endConstrained) / info.length;
  return { start, end };
}
function getCurvedArrowLabelRange(editor, shape, info) {
  var _a2, _b2;
  const labelSize = getArrowLabelSize(editor, shape);
  const labelToArrowPadding = getLabelToArrowPadding(editor, shape);
  const direction = Math.sign(shape.props.bend);
  const labelToArrowPaddingRad = labelToArrowPadding / info.handleArc.radius * direction;
  const startOffsetAngle = Vec.Angle(info.bodyArc.center, info.start.point) - labelToArrowPaddingRad;
  const endOffsetAngle = Vec.Angle(info.bodyArc.center, info.end.point) + labelToArrowPaddingRad;
  const startOffset = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, startOffsetAngle);
  const endOffset = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, endOffsetAngle);
  const dbg = [];
  const startIntersections = intersectArcPolygon(info.bodyArc.center, info.bodyArc.radius, startOffsetAngle, endOffsetAngle, direction, Box.FromCenter(startOffset, labelSize).corners);
  dbg.push(new Polygon2d({
    points: Box.FromCenter(startOffset, labelSize).corners,
    debugColor: "lime",
    isFilled: false,
    ignore: true
  }));
  const endIntersections = intersectArcPolygon(info.bodyArc.center, info.bodyArc.radius, startOffsetAngle, endOffsetAngle, direction, Box.FromCenter(endOffset, labelSize).corners);
  dbg.push(new Polygon2d({
    points: Box.FromCenter(endOffset, labelSize).corners,
    debugColor: "lime",
    isFilled: false,
    ignore: true
  }));
  for (const pt of [
    ...startIntersections != null ? startIntersections : [],
    ...endIntersections != null ? endIntersections : [],
    startOffset,
    endOffset
  ]) {
    dbg.push(new Circle2d({
      x: pt.x - 3,
      y: pt.y - 3,
      radius: 3,
      isFilled: false,
      debugColor: "magenta",
      ignore: true
    }));
  }
  const startConstrained = (_a2 = startIntersections && furthest(info.start.point, startIntersections)) != null ? _a2 : info.middle;
  const endConstrained = (_b2 = endIntersections && furthest(info.end.point, endIntersections)) != null ? _b2 : info.middle;
  const startAngle = Vec.Angle(info.bodyArc.center, info.start.point);
  const endAngle = Vec.Angle(info.bodyArc.center, info.end.point);
  const constrainedStartAngle = Vec.Angle(info.bodyArc.center, startConstrained);
  const constrainedEndAngle = Vec.Angle(info.bodyArc.center, endConstrained);
  if (angleDistance(startAngle, constrainedStartAngle, direction) > angleDistance(startAngle, constrainedEndAngle, direction)) {
    return { start: 0.5, end: 0.5, dbg };
  }
  const fullDistance = angleDistance(startAngle, endAngle, direction);
  const start = angleDistance(startAngle, constrainedStartAngle, direction) / fullDistance;
  const end = angleDistance(startAngle, constrainedEndAngle, direction) / fullDistance;
  return { start, end, dbg };
}
function getArrowLabelPosition(editor, shape) {
  let labelCenter;
  const debugGeom = [];
  const info = editor.getArrowInfo(shape);
  const hasStartBinding = shape.props.start.type === "binding";
  const hasEndBinding = shape.props.end.type === "binding";
  const hasStartArrowhead = info.start.arrowhead !== "none";
  const hasEndArrowhead = info.end.arrowhead !== "none";
  if (info.isStraight) {
    const range = getStraightArrowLabelRange(editor, shape, info);
    let clampedPosition = clamp(shape.props.labelPosition, hasStartArrowhead || hasStartBinding ? range.start : 0, hasEndArrowhead || hasEndBinding ? range.end : 1);
    clampedPosition = clampedPosition >= 0.48 && clampedPosition <= 0.52 ? 0.5 : clampedPosition;
    labelCenter = Vec.Lrp(info.start.point, info.end.point, clampedPosition);
  } else {
    const range = getCurvedArrowLabelRange(editor, shape, info);
    if (range.dbg)
      debugGeom.push(...range.dbg);
    let clampedPosition = clamp(shape.props.labelPosition, hasStartArrowhead || hasStartBinding ? range.start : 0, hasEndArrowhead || hasEndBinding ? range.end : 1);
    clampedPosition = clampedPosition >= 0.48 && clampedPosition <= 0.52 ? 0.5 : clampedPosition;
    const labelAngle = interpolateArcAngles(Vec.Angle(info.bodyArc.center, info.start.point), Vec.Angle(info.bodyArc.center, info.end.point), Math.sign(shape.props.bend), clampedPosition);
    labelCenter = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, labelAngle);
  }
  const labelSize = getArrowLabelSize(editor, shape);
  return { box: Box.FromCenter(labelCenter, labelSize), debugGeom };
}
function intersectArcPolygon(center, radius, angleStart, angleEnd, direction, polygon) {
  const intersections = intersectCirclePolygon(center, radius, polygon);
  const fullArcDistance = angleDistance(angleStart, angleEnd, direction);
  return intersections == null ? void 0 : intersections.filter((pt) => {
    const pDistance = angleDistance(angleStart, Vec.Angle(center, pt), direction);
    return pDistance >= 0 && pDistance <= fullArcDistance;
  });
}
function furthest(from, candidates) {
  let furthest2 = null;
  let furthestDist = -Infinity;
  for (const candidate of candidates) {
    const dist = Vec.Dist2(from, candidate);
    if (dist > furthestDist) {
      furthest2 = candidate;
      furthestDist = dist;
    }
  }
  return furthest2;
}
function interpolateArcAngles(angleStart, angleEnd, direction, t2) {
  const dist = angleDistance(angleStart, angleEnd, direction);
  return angleStart + dist * t2 * direction * -1;
}

// node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowheads.mjs
function getArrowPoints(info, side, strokeWidth) {
  const PT = side === "end" ? info.end.point : info.start.point;
  const PB = side === "end" ? info.start.point : info.end.point;
  const compareLength = info.isStraight ? Vec.Dist(PB, PT) : Math.abs(info.bodyArc.length);
  const length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);
  let P0;
  if (info.isStraight) {
    P0 = Vec.Nudge(PT, PB, length);
  } else {
    const ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius);
    P0 = side === "end" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];
  }
  if (Vec.IsNaN(P0)) {
    P0 = info.start.point;
  }
  return {
    point: PT,
    int: P0
  };
}
function getArrowhead({ point, int }) {
  const PL = Vec.RotWith(int, point, PI / 6);
  const PR = Vec.RotWith(int, point, -PI / 6);
  return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y}`;
}
function getTriangleHead({ point, int }) {
  const PL = Vec.RotWith(int, point, PI / 6);
  const PR = Vec.RotWith(int, point, -PI / 6);
  return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`;
}
function getInvertedTriangleHead({ point, int }) {
  const d = Vec.Sub(int, point).div(2);
  const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));
  const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));
  return `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`;
}
function getDotHead({ point, int }) {
  const A = Vec.Lrp(point, int, 0.45);
  const r = Vec.Dist(A, point);
  return `M ${A.x - r},${A.y}
  a ${r},${r} 0 1,0 ${r * 2},0
  a ${r},${r} 0 1,0 -${r * 2},0 `;
}
function getDiamondHead({ point, int }) {
  const PB = Vec.Lrp(point, int, 0.75);
  const PL = Vec.RotWith(PB, point, PI / 4);
  const PR = Vec.RotWith(PB, point, -PI / 4);
  const PQ = Vec.Lrp(PL, PR, 0.5);
  PQ.add(Vec.Sub(PQ, point));
  return `M ${PQ.x} ${PQ.y} L ${PL.x} ${PL.y} ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`;
}
function getSquareHead({ int, point }) {
  const PB = Vec.Lrp(point, int, 0.85);
  const d = Vec.Sub(PB, point).div(2);
  const PL1 = Vec.Add(point, Vec.Rot(d, HALF_PI));
  const PR1 = Vec.Sub(point, Vec.Rot(d, HALF_PI));
  const PL2 = Vec.Add(PB, Vec.Rot(d, HALF_PI));
  const PR2 = Vec.Sub(PB, Vec.Rot(d, HALF_PI));
  return `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`;
}
function getBarHead({ int, point }) {
  const d = Vec.Sub(int, point).div(2);
  const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));
  const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));
  return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`;
}
function getArrowheadPathForType(info, side, strokeWidth) {
  const type = side === "end" ? info.end.arrowhead : info.start.arrowhead;
  if (type === "none")
    return;
  const points = getArrowPoints(info, side, strokeWidth);
  if (!points)
    return;
  switch (type) {
    case "bar":
      return getBarHead(points);
    case "square":
      return getSquareHead(points);
    case "diamond":
      return getDiamondHead(points);
    case "dot":
      return getDotHead(points);
    case "inverted":
      return getInvertedTriangleHead(points);
    case "arrow":
      return getArrowhead(points);
    case "triangle":
      return getTriangleHead(points);
  }
  return "";
}

// node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowpaths.mjs
function getCurvedArrowHandlePath(info) {
  const {
    start,
    end,
    handleArc: { radius, largeArcFlag, sweepFlag }
  } = info;
  return `M${start.handle.x},${start.handle.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.handle.x},${end.handle.y}`;
}
function getSolidCurvedArrowPath(info) {
  const {
    start,
    end,
    bodyArc: { radius, largeArcFlag, sweepFlag }
  } = info;
  return `M${start.point.x},${start.point.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.point.x},${end.point.y}`;
}
function getArrowPath(start, end) {
  return `M${start.x},${start.y}L${end.x},${end.y}`;
}
function getStraightArrowHandlePath(info) {
  return getArrowPath(info.start.handle, info.end.handle);
}
function getSolidStraightArrowPath(info) {
  return getArrowPath(info.start.point, info.end.point);
}

// node_modules/tldraw/dist-esm/lib/shapes/arrow/components/ArrowTextLabel.mjs
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var React15 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/TextLabel.mjs
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var import_react46 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/text/TextArea.mjs
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var import_react44 = __toESM(require_react(), 1);
var TextArea = (0, import_react44.forwardRef)(function TextArea2({
  isEditing,
  text,
  handleFocus,
  handleChange,
  handleKeyDown,
  handleBlur,
  handleInputPointerDown,
  handleDoubleClick
}, ref) {
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("textarea", {
    ref,
    className: "tl-text tl-text-input",
    name: "text",
    tabIndex: -1,
    readOnly: !isEditing,
    autoComplete: "off",
    autoCapitalize: "off",
    autoCorrect: "off",
    autoSave: "off",
    placeholder: "",
    spellCheck: "true",
    wrap: "off",
    dir: "auto",
    datatype: "wysiwyg",
    defaultValue: text,
    onFocus: handleFocus,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    onTouchEnd: stopEventPropagation,
    onContextMenu: isEditing ? stopEventPropagation : void 0,
    onPointerDown: handleInputPointerDown,
    onDoubleClick: handleDoubleClick,
    onDragStart: preventDefault
  });
});

// node_modules/tldraw/dist-esm/lib/shapes/shared/useEditableText.mjs
var import_react45 = __toESM(require_react(), 1);
function useEditableText(id, type, text) {
  const editor = useEditor();
  const rInput = (0, import_react45.useRef)(null);
  const rSelectionRanges = (0, import_react45.useRef)();
  const isEditing = useValue("isEditing", () => editor.getEditingShapeId() === id, [editor]);
  const isEditingAnything = useValue("isEditingAnything", () => !!editor.getEditingShapeId(), [
    editor
  ]);
  (0, import_react45.useEffect)(() => {
    function selectAllIfEditing({ shapeId }) {
      requestAnimationFrame(() => {
        if (shapeId === id) {
          const elm = rInput.current;
          if (elm) {
            if (document.activeElement !== elm) {
              elm.focus();
            }
            elm.select();
          }
        }
      });
    }
    editor.on("select-all-text", selectAllIfEditing);
    return () => {
      editor.off("select-all-text", selectAllIfEditing);
    };
  }, [editor, id]);
  (0, import_react45.useEffect)(() => {
    if (!isEditing)
      return;
    const elm = rInput.current;
    if (!elm)
      return;
    if (document.activeElement !== elm) {
      elm.focus();
      if (editor.getInstanceState().isCoarsePointer) {
        elm.select();
      }
    } else {
      if (editor.environment.isSafari) {
        elm.blur();
        elm.focus();
      }
    }
    function updateSelection() {
      var _a2, _b2;
      const selection = (_a2 = window.getSelection) == null ? void 0 : _a2.call(window);
      if (selection && selection.type !== "None") {
        const ranges = [];
        for (let i = 0; i < selection.rangeCount; i++) {
          ranges.push((_b2 = selection.getRangeAt) == null ? void 0 : _b2.call(selection, i));
        }
        rSelectionRanges.current = ranges;
      }
    }
    document.addEventListener("selectionchange", updateSelection);
    return () => {
      document.removeEventListener("selectionchange", updateSelection);
    };
  }, [editor, isEditing]);
  const handleBlur = (0, import_react45.useCallback)(() => {
    const ranges = rSelectionRanges.current;
    requestAnimationFrame(() => {
      var _a2;
      const elm = rInput.current;
      const editingShapeId = editor.getEditingShapeId();
      if (editingShapeId) {
        if (elm && editingShapeId === id) {
          elm.focus();
          if (ranges && ranges.length) {
            const selection = window.getSelection();
            if (selection) {
              ranges.forEach((range) => selection.addRange(range));
            }
          }
        }
      } else {
        (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
      }
    });
  }, [editor, id]);
  const handleKeyDown = (0, import_react45.useCallback)((e) => {
    if (editor.getEditingShapeId() !== id)
      return;
    switch (e.key) {
      case "Enter": {
        if (e.ctrlKey || e.metaKey) {
          editor.complete();
        }
        break;
      }
    }
  }, [editor, id]);
  const handleChange = (0, import_react45.useCallback)((e) => {
    if (editor.getEditingShapeId() !== id)
      return;
    let text2 = TextHelpers.normalizeText(e.currentTarget.value);
    const untabbedText = text2.replace(/\t/g, INDENT);
    if (untabbedText !== text2) {
      const selectionStart = e.currentTarget.selectionStart;
      e.currentTarget.value = untabbedText;
      e.currentTarget.selectionStart = selectionStart + (untabbedText.length - text2.length);
      e.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text2.length);
      text2 = untabbedText;
    }
    editor.updateShape({
      id,
      type,
      props: { text: text2 }
    });
  }, [editor, id, type]);
  const handleInputPointerDown = (0, import_react45.useCallback)((e) => {
    editor.dispatch({
      ...getPointerInfo(e),
      type: "pointer",
      name: "pointer_down",
      target: "shape",
      shape: editor.getShape(id)
    });
    stopEventPropagation(e);
  }, [editor, id]);
  return {
    rInput,
    handleFocus: noop3,
    handleBlur,
    handleKeyDown,
    handleChange,
    handleInputPointerDown,
    handleDoubleClick: stopEventPropagation,
    isEmpty: text.trim().length === 0,
    isEditing,
    isEditingAnything
  };
}
function noop3() {
  return;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/TextLabel.mjs
var TextLabel = import_react46.default.memo(function TextLabel2({
  id,
  type,
  text,
  labelColor,
  font,
  fontSize,
  lineHeight,
  align,
  verticalAlign,
  wrap: wrap2,
  isSelected,
  onKeyDown: handleKeyDownCustom,
  classNamePrefix,
  style,
  textWidth,
  textHeight
}) {
  const { rInput, isEmpty, isEditing, isEditingAnything, ...editableTextRest } = useEditableText(id, type, text);
  const [initialText, setInitialText] = (0, import_react46.useState)(text);
  (0, import_react46.useEffect)(() => {
    if (!isEditing)
      setInitialText(text);
  }, [isEditing, text]);
  const finalText = TextHelpers.normalizeTextForDom(text);
  const hasText = finalText.length > 0;
  const legacyAlign = isLegacyAlign(align);
  if (!isEditing && !hasText) {
    return null;
  }
  const cssPrefix = classNamePrefix || "tl-text";
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", {
    className: `${cssPrefix}-label tl-text-wrapper`,
    "data-font": font,
    "data-align": align,
    "data-hastext": !isEmpty,
    "data-isediting": isEditing,
    "data-iseditinganything": isEditingAnything,
    "data-textwrap": !!wrap2,
    "data-isselected": isSelected,
    style: {
      justifyContent: align === "middle" || legacyAlign ? "center" : align,
      alignItems: verticalAlign === "middle" ? "center" : verticalAlign,
      ...style
    },
    children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", {
      className: `${cssPrefix}-label__inner tl-text-content__wrapper`,
      style: {
        fontSize,
        lineHeight: fontSize * lineHeight + "px",
        minHeight: lineHeight + 32,
        minWidth: textWidth || 0,
        color: labelColor,
        width: textWidth,
        height: textHeight
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: `${cssPrefix} tl-text tl-text-content`, dir: "ltr", children: finalText }),
        (isEditingAnything || isSelected) && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TextArea, {
          ref: rInput,
          text,
          isEditing,
          ...editableTextRest,
          handleKeyDown: handleKeyDownCustom != null ? handleKeyDownCustom : editableTextRest.handleKeyDown
        }, initialText)
      ]
    })
  });
});

// node_modules/tldraw/dist-esm/lib/shapes/arrow/components/ArrowTextLabel.mjs
var ArrowTextLabel = React15.memo(function ArrowTextLabel2({
  id,
  text,
  size: size4,
  font,
  position,
  width,
  isSelected,
  labelColor
}) {
  const theme = useDefaultColorTheme();
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(TextLabel, {
    id,
    classNamePrefix: "tl-arrow",
    type: "arrow",
    font,
    fontSize: ARROW_LABEL_FONT_SIZES[size4],
    lineHeight: TEXT_PROPS.lineHeight,
    align: "middle",
    verticalAlign: "middle",
    text,
    labelColor: theme[labelColor].solid,
    textWidth: width,
    isSelected,
    style: {
      transform: `translate(${position.x}px, ${position.y}px)`
    }
  });
});

// node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeUtil.mjs
var globalRenderIndex = 0;
var ArrowShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "canBind", () => false);
    __publicField(this, "canSnap", () => false);
    __publicField(this, "hideResizeHandles", () => true);
    __publicField(this, "hideRotateHandle", () => true);
    __publicField(this, "hideSelectionBoundsBg", () => true);
    __publicField(this, "hideSelectionBoundsFg", () => true);
    __publicField(this, "onHandleDrag", (shape, { handle, isPrecise }) => {
      const handleId = handle.id;
      if (handleId === "middle") {
        const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape);
        const delta = Vec.Sub(end, start);
        const v = Vec.Per(delta);
        const med = Vec.Med(end, start);
        const A = Vec.Sub(med, v);
        const B = Vec.Add(med, v);
        const point2 = Vec.NearestPointOnLineSegment(A, B, handle, false);
        let bend = Vec.Dist(point2, med);
        if (Vec.Clockwise(point2, end, med))
          bend *= -1;
        return { id: shape.id, type: shape.type, props: { bend } };
      }
      const next = structuredClone(shape);
      if (this.editor.inputs.ctrlKey) {
        next.props[handleId] = {
          type: "point",
          x: handle.x,
          y: handle.y
        };
        return next;
      }
      const point = this.editor.getShapePageTransform(shape.id).applyToPoint(handle);
      const target = this.editor.getShapeAtPoint(point, {
        hitInside: true,
        hitFrameInside: true,
        margin: 0,
        filter: (targetShape) => {
          return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
        }
      });
      if (!target) {
        next.props[handleId] = {
          type: "point",
          x: handle.x,
          y: handle.y
        };
        return next;
      }
      const targetGeometry = this.editor.getShapeGeometry(target);
      const targetBounds = Box.ZeroFix(targetGeometry.bounds);
      const pageTransform = this.editor.getShapePageTransform(next.id);
      const pointInPageSpace = pageTransform.applyToPoint(handle);
      const pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace);
      let precise3 = isPrecise;
      if (!precise3) {
        const prevHandle = next.props[handleId];
        if (prevHandle.type === "point" || prevHandle.type === "binding" && target.id !== prevHandle.boundShapeId) {
          precise3 = this.editor.inputs.pointerVelocity.len() < 0.5;
        }
      }
      if (!isPrecise) {
        if (!targetGeometry.isClosed) {
          precise3 = true;
        }
        const otherHandle = next.props[handleId === "start" ? "end" : "start"];
        if (otherHandle.type === "binding" && target.id === otherHandle.boundShapeId && otherHandle.isPrecise) {
          precise3 = true;
        }
      }
      const normalizedAnchor = {
        x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
        y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
      };
      if (precise3) {
        if (Vec.Dist(pointInTargetSpace, targetBounds.center) < Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) / this.editor.getZoomLevel()) {
          normalizedAnchor.x = 0.5;
          normalizedAnchor.y = 0.5;
        }
      }
      next.props[handleId] = {
        type: "binding",
        boundShapeId: target.id,
        normalizedAnchor,
        isPrecise: precise3,
        isExact: this.editor.inputs.altKey
      };
      if (next.props.start.type === "binding" && next.props.end.type === "binding") {
        if (next.props.start.boundShapeId === next.props.end.boundShapeId) {
          if (Vec.Equals(next.props.start.normalizedAnchor, next.props.end.normalizedAnchor)) {
            next.props.end.normalizedAnchor.x += 0.05;
          }
        }
      }
      return next;
    });
    __publicField(this, "onTranslateStart", (shape) => {
      const startBindingId = shape.props.start.type === "binding" ? shape.props.start.boundShapeId : null;
      const endBindingId = shape.props.end.type === "binding" ? shape.props.end.boundShapeId : null;
      const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(this.editor, shape);
      const shapePageTransform = this.editor.getShapePageTransform(shape.id);
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const shapesToCheck = /* @__PURE__ */ new Set();
      if (startBindingId) {
        shapesToCheck.add(startBindingId);
        this.editor.getShapeAncestors(startBindingId).forEach((a) => shapesToCheck.add(a.id));
      }
      if (endBindingId) {
        shapesToCheck.add(endBindingId);
        this.editor.getShapeAncestors(endBindingId).forEach((a) => shapesToCheck.add(a.id));
      }
      for (const id of selectedShapeIds) {
        if (shapesToCheck.has(id))
          return;
      }
      let result = shape;
      shapeAtTranslationStart.set(shape, {
        pagePosition: shapePageTransform.applyToPoint(shape),
        terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
          const terminal = shape.props[terminalName];
          if (terminal.type !== "binding")
            return null;
          return {
            binding: terminal,
            shapePosition: point,
            pagePosition: shapePageTransform.applyToPoint(point)
          };
        })
      });
      for (const handleName of ["start", "end"]) {
        const terminal = shape.props[handleName];
        if (terminal.type !== "binding")
          continue;
        result = {
          ...shape,
          props: { ...shape.props, [handleName]: { ...terminal, isPrecise: true } }
        };
      }
      return result;
    });
    __publicField(this, "onTranslate", (initialShape, shape) => {
      const atTranslationStart = shapeAtTranslationStart.get(initialShape);
      if (!atTranslationStart)
        return;
      const shapePageTransform = this.editor.getShapePageTransform(shape.id);
      const pageDelta = Vec.Sub(shapePageTransform.applyToPoint(shape), atTranslationStart.pagePosition);
      let result = shape;
      for (const [terminalName, terminalBinding] of objectMapEntries(atTranslationStart.terminalBindings)) {
        if (!terminalBinding)
          continue;
        const newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5));
        const newTarget = this.editor.getShapeAtPoint(newPagePoint, {
          hitInside: true,
          hitFrameInside: true,
          margin: 0,
          filter: (targetShape) => {
            return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
          }
        });
        if ((newTarget == null ? void 0 : newTarget.id) === terminalBinding.binding.boundShapeId) {
          const targetBounds = Box.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds);
          const pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint);
          const normalizedAnchor = {
            x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
            y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
          };
          result = {
            ...result,
            props: {
              ...result.props,
              [terminalName]: { ...terminalBinding.binding, isPrecise: true, normalizedAnchor }
            }
          };
        } else {
          result = {
            ...result,
            props: {
              ...result.props,
              [terminalName]: {
                type: "point",
                x: terminalBinding.shapePosition.x,
                y: terminalBinding.shapePosition.y
              }
            }
          };
        }
      }
      return result;
    });
    __publicField(this, "onResize", (shape, info) => {
      const { scaleX, scaleY } = info;
      const terminals = getArrowTerminalsInArrowSpace(this.editor, shape);
      const { start, end } = structuredClone(shape.props);
      let { bend } = shape.props;
      if (start.type === "point") {
        start.x = terminals.start.x * scaleX;
        start.y = terminals.start.y * scaleY;
      }
      if (end.type === "point") {
        end.x = terminals.end.x * scaleX;
        end.y = terminals.end.y * scaleY;
      }
      const mx = Math.abs(scaleX);
      const my = Math.abs(scaleY);
      if (scaleX < 0 && scaleY >= 0) {
        if (bend !== 0) {
          bend *= -1;
          bend *= Math.max(mx, my);
        }
        if (start.type === "binding") {
          start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
        }
        if (end.type === "binding") {
          end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
        }
      } else if (scaleX >= 0 && scaleY < 0) {
        if (bend !== 0) {
          bend *= -1;
          bend *= Math.max(mx, my);
        }
        if (start.type === "binding") {
          start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
        }
        if (end.type === "binding") {
          end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
        }
      } else if (scaleX >= 0 && scaleY >= 0) {
        if (bend !== 0) {
          bend *= Math.max(mx, my);
        }
      } else if (scaleX < 0 && scaleY < 0) {
        if (bend !== 0) {
          bend *= Math.max(mx, my);
        }
        if (start.type === "binding") {
          start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
          start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
        }
        if (end.type === "binding") {
          end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
          end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
        }
      }
      const next = {
        props: {
          start,
          end,
          bend
        }
      };
      return next;
    });
    __publicField(this, "onDoubleClickHandle", (shape, handle) => {
      switch (handle.id) {
        case "start": {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              ...shape.props,
              arrowheadStart: shape.props.arrowheadStart === "none" ? "arrow" : "none"
            }
          };
        }
        case "end": {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              ...shape.props,
              arrowheadEnd: shape.props.arrowheadEnd === "none" ? "arrow" : "none"
            }
          };
        }
      }
    });
    __publicField(this, "onEditEnd", (shape) => {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    });
  }
  getDefaultProps() {
    return {
      dash: "draw",
      size: "m",
      fill: "none",
      color: "black",
      labelColor: "black",
      bend: 0,
      start: { type: "point", x: 0, y: 0 },
      end: { type: "point", x: 2, y: 0 },
      arrowheadStart: "none",
      arrowheadEnd: "arrow",
      text: "",
      labelPosition: 0.5,
      font: "draw"
    };
  }
  getGeometry(shape) {
    const info = this.editor.getArrowInfo(shape);
    const debugGeom = [];
    const bodyGeom = info.isStraight ? new Edge2d({
      start: Vec.From(info.start.point),
      end: Vec.From(info.end.point)
    }) : new Arc2d({
      center: Vec.Cast(info.handleArc.center),
      radius: info.handleArc.radius,
      start: Vec.Cast(info.start.point),
      end: Vec.Cast(info.end.point),
      sweepFlag: info.bodyArc.sweepFlag,
      largeArcFlag: info.bodyArc.largeArcFlag
    });
    let labelGeom;
    if (shape.props.text.trim()) {
      const labelPosition = getArrowLabelPosition(this.editor, shape);
      debugGeom.push(...labelPosition.debugGeom);
      labelGeom = new Rectangle2d({
        x: labelPosition.box.x,
        y: labelPosition.box.y,
        width: labelPosition.box.w,
        height: labelPosition.box.h,
        isFilled: true,
        isLabel: true
      });
    }
    return new Group2d({
      children: [...labelGeom ? [bodyGeom, labelGeom] : [bodyGeom], ...debugGeom]
    });
  }
  getHandles(shape) {
    const info = this.editor.getArrowInfo(shape);
    return [
      {
        id: "start",
        type: "vertex",
        index: "a0",
        x: info.start.handle.x,
        y: info.start.handle.y,
        canBind: true
      },
      {
        id: "middle",
        type: "virtual",
        index: "a2",
        x: info.middle.x,
        y: info.middle.y,
        canBind: false
      },
      {
        id: "end",
        type: "vertex",
        index: "a3",
        x: info.end.handle.x,
        y: info.end.handle.y,
        canBind: true
      }
    ].filter(Boolean);
  }
  component(shape) {
    const onlySelectedShape = this.editor.getOnlySelectedShape();
    const shouldDisplayHandles = this.editor.isInAny("select.idle", "select.pointing_handle", "select.dragging_handle", "select.translating", "arrow.dragging") && !this.editor.getInstanceState().isReadonly;
    const info = this.editor.getArrowInfo(shape);
    if (!(info == null ? void 0 : info.isValid))
      return null;
    const labelPosition = getArrowLabelPosition(this.editor, shape);
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    const isEditing = this.editor.getEditingShapeId() === shape.id;
    const showArrowLabel = isEditing || shape.props.text;
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(import_jsx_runtime43.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(SVGContainer, { id: shape.id, style: { minWidth: 50, minHeight: 50 }, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArrowSvg, {
        shape,
        shouldDisplayHandles: shouldDisplayHandles && onlySelectedShape === shape
      }) }),
      showArrowLabel && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArrowTextLabel, {
        id: shape.id,
        text: shape.props.text,
        font: shape.props.font,
        size: shape.props.size,
        position: labelPosition.box.center,
        width: labelPosition.box.w,
        isSelected,
        labelColor: shape.props.labelColor
      })
    ] });
  }
  indicator(shape) {
    const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape);
    const info = this.editor.getArrowInfo(shape);
    const geometry = this.editor.getShapeGeometry(shape);
    const bounds = geometry.bounds;
    const labelGeometry = shape.props.text.trim() ? geometry.children[1] : null;
    const isEditing = useIsEditing(shape.id);
    if (!info)
      return null;
    if (Vec.Equals(start, end))
      return null;
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
    const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
    const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
    const includeMask = as && info.start.arrowhead !== "arrow" || ae && info.end.arrowhead !== "arrow" || !!labelGeometry;
    const maskId = (shape.id + "_clip").replace(":", "_");
    if (isEditing && labelGeometry) {
      return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
        x: toDomPrecision(labelGeometry.x),
        y: toDomPrecision(labelGeometry.y),
        width: labelGeometry.w,
        height: labelGeometry.h,
        rx: 3.5,
        ry: 3.5
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("g", { children: [
      includeMask && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("mask", { id: maskId, children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
          x: bounds.minX - 100,
          y: bounds.minY - 100,
          width: bounds.w + 200,
          height: bounds.h + 200,
          fill: "white"
        }),
        labelGeometry && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
          x: toDomPrecision(labelGeometry.x),
          y: toDomPrecision(labelGeometry.y),
          width: labelGeometry.w,
          height: labelGeometry.h,
          fill: "black",
          rx: 3.5,
          ry: 3.5
        }),
        as && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", {
          d: as,
          fill: info.start.arrowhead === "arrow" ? "none" : "black",
          stroke: "none"
        }),
        ae && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", {
          d: ae,
          fill: info.end.arrowhead === "arrow" ? "none" : "black",
          stroke: "none"
        })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("g", { ...includeMask ? { mask: `url(#${maskId})` } : void 0, children: [
        includeMask && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
          x: bounds.minX - 100,
          y: bounds.minY - 100,
          width: bounds.width + 200,
          height: bounds.height + 200,
          opacity: 0
        }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: path })
      ] }),
      as && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: as }),
      ae && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: ae }),
      labelGeometry && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
        x: toDomPrecision(labelGeometry.x),
        y: toDomPrecision(labelGeometry.y),
        width: labelGeometry.w,
        height: labelGeometry.h,
        rx: 3.5,
        ry: 3.5
      })
    ] });
  }
  toSvg(shape, ctx) {
    ctx.addExportDef(getFillDefForExport(shape.props.fill));
    if (shape.props.text)
      ctx.addExportDef(getFontDefForExport(shape.props.font));
    const theme = getDefaultColorTheme(ctx);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(import_jsx_runtime43.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ArrowSvg, { shape, shouldDisplayHandles: false }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(SvgTextLabel, {
        fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
        font: shape.props.font,
        align: "middle",
        verticalAlign: "middle",
        text: shape.props.text,
        labelColor: theme[shape.props.labelColor].solid,
        bounds: getArrowLabelPosition(this.editor, shape).box,
        padding: 4
      })
    ] });
  }
  getCanvasSvgDefs() {
    return [
      getFillDefForCanvas(),
      {
        key: `arrow:dot`,
        component: ArrowheadDotDef
      },
      {
        key: `arrow:cross`,
        component: ArrowheadCrossDef
      }
    ];
  }
};
__publicField(ArrowShapeUtil, "type", "arrow");
__publicField(ArrowShapeUtil, "props", arrowShapeProps);
__publicField(ArrowShapeUtil, "migrations", arrowShapeMigrations);
function getLength(editor, shape) {
  const info = editor.getArrowInfo(shape);
  return info.isStraight ? Vec.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length);
}
var ArrowSvg = track(function ArrowSvg2({
  shape,
  shouldDisplayHandles
}) {
  const editor = useEditor();
  const theme = useDefaultColorTheme();
  const info = editor.getArrowInfo(shape);
  const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds);
  const changeIndex = import_react47.default.useMemo(() => {
    return editor.environment.isSafari ? globalRenderIndex += 1 : 0;
  }, [shape]);
  if (!(info == null ? void 0 : info.isValid))
    return null;
  const strokeWidth = STROKE_SIZES2[shape.props.size];
  const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
  const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
  const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
  let handlePath = null;
  if (shouldDisplayHandles) {
    const sw = 2;
    const { strokeDasharray: strokeDasharray2, strokeDashoffset: strokeDashoffset2 } = getPerfectDashProps2(getLength(editor, shape), sw, {
      end: "skip",
      start: "skip",
      lengthRatio: 2.5
    });
    handlePath = shape.props.start.type === "binding" || shape.props.end.type === "binding" ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", {
      className: "tl-arrow-hint",
      d: info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info),
      strokeDasharray: strokeDasharray2,
      strokeDashoffset: strokeDashoffset2,
      strokeWidth: sw,
      markerStart: shape.props.start.type === "binding" ? shape.props.start.isExact ? "" : shape.props.start.isPrecise ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
      markerEnd: shape.props.end.type === "binding" ? shape.props.end.isExact ? "" : shape.props.end.isPrecise ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
      opacity: 0.16
    }) : null;
  }
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(info.isStraight ? info.length : Math.abs(info.bodyArc.length), strokeWidth, {
    style: shape.props.dash
  });
  const labelPosition = getArrowLabelPosition(editor, shape);
  const maskStartArrowhead = !(info.start.arrowhead === "none" || info.start.arrowhead === "arrow");
  const maskEndArrowhead = !(info.end.arrowhead === "none" || info.end.arrowhead === "arrow");
  const maskId = (shape.id + "_clip_" + changeIndex).replace(":", "_");
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(import_jsx_runtime43.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("mask", { id: maskId, children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
        x: toDomPrecision(-100 + bounds.minX),
        y: toDomPrecision(-100 + bounds.minY),
        width: toDomPrecision(bounds.width + 200),
        height: toDomPrecision(bounds.height + 200),
        fill: "white"
      }),
      shape.props.text.trim() && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
        x: labelPosition.box.x,
        y: labelPosition.box.y,
        width: labelPosition.box.w,
        height: labelPosition.box.h,
        fill: "black",
        rx: 4,
        ry: 4
      }),
      as && maskStartArrowhead && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: as, fill: info.start.arrowhead === "arrow" ? "none" : "black", stroke: "none" }),
      ae && maskEndArrowhead && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: ae, fill: info.end.arrowhead === "arrow" ? "none" : "black", stroke: "none" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("g", {
      fill: "none",
      stroke: theme[shape.props.color].solid,
      strokeWidth,
      strokeLinejoin: "round",
      strokeLinecap: "round",
      pointerEvents: "none",
      children: [
        handlePath,
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("g", { mask: `url(#${maskId})`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("rect", {
            x: toDomPrecision(bounds.minX - 100),
            y: toDomPrecision(bounds.minY - 100),
            width: toDomPrecision(bounds.width + 200),
            height: toDomPrecision(bounds.height + 200),
            opacity: 0
          }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: path, strokeDasharray, strokeDashoffset })
        ] }),
        as && maskStartArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ShapeFill, { theme, d: as, color: shape.props.color, fill: shape.props.fill }),
        ae && maskEndArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ShapeFill, { theme, d: ae, color: shape.props.color, fill: shape.props.fill }),
        as && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: as }),
        ae && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: ae })
      ]
    })
  ] });
});
var shapeAtTranslationStart = /* @__PURE__ */ new WeakMap();
function ArrowheadDotDef() {
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("marker", { id: "arrowhead-dot", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
}
function ArrowheadCrossDef() {
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("marker", { id: "arrowhead-cross", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
    /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
  ] });
}

// node_modules/tldraw/dist-esm/lib/shapes/bookmark/BookmarkShapeUtil.mjs
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/HyperlinkButton.mjs
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var import_classnames16 = __toESM(require_classnames(), 1);
var LINK_ICON = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' fill='none'%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 5H7a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6M19 5h6m0 0v6m0-6L13 17'/%3E%3C/svg%3E";
function HyperlinkButton({ url, zoomLevel }) {
  return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("a", {
    className: (0, import_classnames16.default)("tl-hyperlink-button", {
      "tl-hyperlink-button__hidden": zoomLevel < 0.32
    }),
    href: url,
    target: "_blank",
    rel: "noopener noreferrer",
    onPointerDown: stopEventPropagation,
    onPointerUp: stopEventPropagation,
    title: url,
    draggable: false,
    children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", {
      className: "tl-hyperlink-button__icon",
      style: {
        mask: `url("${LINK_ICON}") center 100% / 100% no-repeat`,
        WebkitMask: `url("${LINK_ICON}") center 100% / 100% no-repeat`
      }
    })
  });
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/rotated-box-shadow.mjs
var ROTATING_BOX_SHADOWS = [
  {
    offsetX: 0,
    offsetY: 2,
    blur: 4,
    spread: 0,
    color: "#00000029"
  },
  {
    offsetX: 0,
    offsetY: 3,
    blur: 6,
    spread: 0,
    color: "#0000001f"
  }
];
function getRotatedBoxShadow(rotation) {
  const cssStrings = ROTATING_BOX_SHADOWS.map((shadow) => {
    const { offsetX, offsetY, blur, spread, color } = shadow;
    const vec = new Vec(offsetX, offsetY);
    const { x, y } = vec.rot(-rotation);
    return `${x}px ${y}px ${blur}px ${spread}px ${color}`;
  });
  return cssStrings.join(", ");
}

// node_modules/tldraw/dist-esm/lib/shapes/bookmark/BookmarkShapeUtil.mjs
var BookmarkShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canResize", () => false);
    __publicField(this, "hideSelectionBoundsFg", () => true);
    __publicField(this, "onBeforeCreate", (shape) => {
      updateBookmarkAssetOnUrlChange(this.editor, shape);
    });
    __publicField(this, "onBeforeUpdate", (prev, shape) => {
      if (prev.props.url !== shape.props.url) {
        if (!validation_exports.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: prev.props.url } };
        } else {
          updateBookmarkAssetOnUrlChange(this.editor, shape);
        }
      }
    });
  }
  getDefaultProps() {
    return {
      url: "",
      w: 300,
      h: 320,
      assetId: null
    };
  }
  component(shape) {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : null;
    const pageRotation = this.editor.getShapePageTransform(shape).rotation();
    const address = getHumanReadableAddress(shape);
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(HTMLContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", {
      className: "tl-bookmark__container",
      style: {
        boxShadow: getRotatedBoxShadow(pageRotation)
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "tl-bookmark__image_container", children: [
          (asset == null ? void 0 : asset.props.image) ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("img", {
            className: "tl-bookmark__image",
            draggable: false,
            src: asset == null ? void 0 : asset.props.image,
            alt: (asset == null ? void 0 : asset.props.title) || ""
          }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "tl-bookmark__placeholder" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "tl-bookmark__copy_container", children: [
          (asset == null ? void 0 : asset.props.title) && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h2", { className: "tl-bookmark__heading", children: truncateStringWithEllipsis((asset == null ? void 0 : asset.props.title) || "", 54) }),
          (asset == null ? void 0 : asset.props.description) && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "tl-bookmark__description", children: truncateStringWithEllipsis((asset == null ? void 0 : asset.props.description) || "", 128) }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("a", {
            className: "tl-bookmark__link",
            href: shape.props.url || "",
            target: "_blank",
            rel: "noopener noreferrer",
            onPointerDown: stopEventPropagation,
            onPointerUp: stopEventPropagation,
            onClick: stopEventPropagation,
            children: truncateStringWithEllipsis(address, 45)
          })
        ] })
      ]
    }) });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("rect", {
      width: toDomPrecision(shape.props.w),
      height: toDomPrecision(shape.props.h),
      rx: "6",
      ry: "6"
    });
  }
};
__publicField(BookmarkShapeUtil, "type", "bookmark");
__publicField(BookmarkShapeUtil, "props", bookmarkShapeProps);
__publicField(BookmarkShapeUtil, "migrations", bookmarkShapeMigrations);
var getHumanReadableAddress = (shape) => {
  try {
    const url = new URL(shape.props.url);
    const path = url.pathname.replace(/\/*$/, "");
    return `${url.hostname}${path}`;
  } catch (e) {
    return shape.props.url;
  }
};
function updateBookmarkAssetOnUrlChange(editor, shape) {
  const { url } = shape.props;
  const assetId = AssetRecordType.createId(getHashForString(url));
  if (editor.getAsset(assetId)) {
    if (shape.props.assetId !== assetId) {
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: { assetId }
        }
      ]);
    }
  } else {
    editor.updateShapes([
      {
        id: shape.id,
        type: shape.type,
        props: { assetId: null }
      }
    ]);
    createBookmarkAssetOnUrlChange(editor, shape);
  }
}
var createBookmarkAssetOnUrlChange = debounce(async (editor, shape) => {
  const { url } = shape.props;
  const asset = await editor.getAssetForExternalContent({ type: "url", url });
  if (!asset) {
    return;
  }
  editor.batch(() => {
    editor.createAssets([asset]);
    editor.updateShapes([
      {
        id: shape.id,
        type: shape.type,
        props: { assetId: asset.id }
      }
    ]);
  });
}, 500);

// node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeUtil.mjs
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svg.mjs
function getSvgPathFromStrokePoints(points, closed = false) {
  const len = points.length;
  if (len < 2) {
    return "";
  }
  let a = points[0].point;
  let b = points[1].point;
  if (len === 2) {
    return `M${precise(a)}L${precise(b)}`;
  }
  let result = "";
  for (let i = 2, max2 = len - 1; i < max2; i++) {
    a = points[i].point;
    b = points[i + 1].point;
    result += average(a, b);
  }
  if (closed) {
    return `M${average(points[0].point, points[1].point)}Q${precise(points[1].point)}${average(points[1].point, points[2].point)}T${result}${average(points[len - 1].point, points[0].point)}${average(points[0].point, points[1].point)}Z`;
  } else {
    return `M${precise(points[0].point)}Q${precise(points[1].point)}${average(points[1].point, points[2].point)}${points.length > 3 ? "T" : ""}${result}L${precise(points[len - 1].point)}`;
  }
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svgInk.mjs
function svgInk(rawInputPoints, options = {}) {
  const { start = {}, end = {} } = options;
  const { cap: capStart = true } = start;
  const { cap: capEnd = true } = end;
  assert(!start.taper && !end.taper, "cap taper not supported here");
  assert(!start.easing && !end.easing, "cap easing not supported here");
  assert(capStart && capEnd, "cap must be true");
  const points = getStrokePoints(rawInputPoints, options);
  setStrokePointRadii(points, options);
  const partitions = partitionAtElbows(points);
  let svg = "";
  for (const partition2 of partitions) {
    svg += renderPartition(partition2, options);
  }
  return svg;
}
function partitionAtElbows(points) {
  if (points.length <= 2)
    return [points];
  const result = [];
  let currentPartition = [points[0]];
  let prevV = Vec.Sub(points[1].point, points[0].point).uni();
  let nextV;
  let dpr;
  let prevPoint, thisPoint, nextPoint;
  for (let i = 1, n = points.length; i < n - 1; i++) {
    prevPoint = points[i - 1];
    thisPoint = points[i];
    nextPoint = points[i + 1];
    nextV = Vec.Sub(nextPoint.point, thisPoint.point).uni();
    dpr = Vec.Dpr(prevV, nextV);
    prevV = nextV;
    if (dpr < -0.8) {
      const elbowPoint = {
        ...thisPoint,
        point: thisPoint.input
      };
      currentPartition.push(elbowPoint);
      result.push(cleanUpPartition(currentPartition));
      currentPartition = [elbowPoint];
      continue;
    }
    currentPartition.push(thisPoint);
    if (dpr > 0.7) {
      continue;
    }
    if ((Vec.Dist2(prevPoint.point, thisPoint.point) + Vec.Dist2(thisPoint.point, nextPoint.point)) / ((prevPoint.radius + thisPoint.radius + nextPoint.radius) / 3) ** 2 < 1.5) {
      currentPartition.push(thisPoint);
      result.push(cleanUpPartition(currentPartition));
      currentPartition = [thisPoint];
      continue;
    }
  }
  currentPartition.push(points[points.length - 1]);
  result.push(cleanUpPartition(currentPartition));
  return result;
}
function cleanUpPartition(partition2) {
  const startPoint = partition2[0];
  let nextPoint;
  while (partition2.length > 2) {
    nextPoint = partition2[1];
    if (Vec.Dist2(startPoint.point, nextPoint.point) < ((startPoint.radius + nextPoint.radius) / 2 * 0.5) ** 2) {
      partition2.splice(1, 1);
    } else {
      break;
    }
  }
  const endPoint = partition2[partition2.length - 1];
  let prevPoint;
  while (partition2.length > 2) {
    prevPoint = partition2[partition2.length - 2];
    if (Vec.Dist2(endPoint.point, prevPoint.point) < ((endPoint.radius + prevPoint.radius) / 2 * 0.5) ** 2) {
      partition2.splice(partition2.length - 2, 1);
    } else {
      break;
    }
  }
  if (partition2.length > 1) {
    partition2[0] = {
      ...partition2[0],
      vector: Vec.Sub(partition2[0].point, partition2[1].point).uni()
    };
    partition2[partition2.length - 1] = {
      ...partition2[partition2.length - 1],
      vector: Vec.Sub(partition2[partition2.length - 2].point, partition2[partition2.length - 1].point).uni()
    };
  }
  return partition2;
}
function circlePath(cx, cy, r) {
  return "M " + cx + " " + cy + " m -" + r + ", 0 a " + r + "," + r + " 0 1,1 " + r * 2 + ",0 a " + r + "," + r + " 0 1,1 -" + r * 2 + ",0";
}
function renderPartition(strokePoints, options = {}) {
  if (strokePoints.length === 0)
    return "";
  if (strokePoints.length === 1) {
    return circlePath(strokePoints[0].point.x, strokePoints[0].point.y, strokePoints[0].radius);
  }
  const { left, right } = getStrokeOutlineTracks(strokePoints, options);
  right.reverse();
  let svg = `M${precise(left[0])}T`;
  for (let i = 1; i < left.length; i++) {
    svg += average(left[i - 1], left[i]);
  }
  {
    const point = strokePoints[strokePoints.length - 1];
    const radius = point.radius;
    const direction = point.vector.clone().per().neg();
    const arcStart = Vec.Add(point.point, Vec.Mul(direction, radius));
    const arcEnd = Vec.Add(point.point, Vec.Mul(direction, -radius));
    svg += `${precise(arcStart)}A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 0 1 ${precise(arcEnd)}T`;
  }
  for (let i = 1; i < right.length; i++) {
    svg += average(right[i - 1], right[i]);
  }
  {
    const point = strokePoints[0];
    const radius = point.radius;
    const direction = point.vector.clone().per();
    const arcStart = Vec.Add(point.point, Vec.Mul(direction, radius));
    const arcEnd = Vec.Add(point.point, Vec.Mul(direction, -radius));
    svg += `${precise(arcStart)}A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 0 1 ${precise(arcEnd)}Z`;
  }
  return svg;
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/useForceSolid.mjs
function useForceSolid() {
  const editor = useEditor();
  return useValue("zoom", () => editor.getZoomLevel() < 0.35, [editor]);
}

// node_modules/tldraw/dist-esm/lib/shapes/draw/getPath.mjs
var PEN_EASING = (t2) => t2 * 0.65 + SIN(t2 * PI / 2) * 0.35;
var simulatePressureSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth,
    thinning: 0.5,
    streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
    smoothing: 0.62,
    easing: EASINGS.easeOutSine,
    simulatePressure: true
  };
};
var realPressureSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth * 1.2,
    thinning: 0.62,
    streamline: 0.62,
    smoothing: 0.62,
    simulatePressure: false,
    easing: PEN_EASING
  };
};
var solidSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth,
    thinning: 0,
    streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
    smoothing: 0.62,
    simulatePressure: false,
    easing: EASINGS.linear
  };
};
function getHighlightFreehandSettings({
  strokeWidth,
  showAsComplete
}) {
  return {
    size: 1 + strokeWidth,
    thinning: 0,
    streamline: 0.5,
    smoothing: 0.5,
    simulatePressure: false,
    easing: EASINGS.easeOutSine,
    last: showAsComplete
  };
}
function getFreehandOptions(shapeProps, strokeWidth, forceComplete, forceSolid) {
  return {
    ...forceSolid ? solidSettings(strokeWidth) : shapeProps.dash === "draw" ? shapeProps.isPen ? realPressureSettings(strokeWidth) : simulatePressureSettings(strokeWidth) : solidSettings(strokeWidth),
    last: shapeProps.isComplete || forceComplete
  };
}
function getPointsFromSegments(segments) {
  const points = [];
  for (const segment of segments) {
    if (segment.type === "free" || segment.points.length < 2) {
      points.push(...segment.points.map(Vec.Cast));
    } else {
      const pointsToInterpolate = Math.max(4, Math.floor(Vec.Dist(segment.points[0], segment.points[1]) / 16));
      points.push(...Vec.PointsBetween(segment.points[0], segment.points[1], pointsToInterpolate));
    }
  }
  return points;
}
function getDrawShapeStrokeDashArray(shape, strokeWidth) {
  return {
    draw: "none",
    solid: `none`,
    dotted: `0.1 ${strokeWidth * 2}`,
    dashed: `${strokeWidth * 2} ${strokeWidth * 2}`
  }[shape.props.dash];
}

// node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeUtil.mjs
var DrawShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "hideResizeHandles", (shape) => getIsDot(shape));
    __publicField(this, "hideRotateHandle", (shape) => getIsDot(shape));
    __publicField(this, "hideSelectionBoundsFg", (shape) => getIsDot(shape));
    __publicField(this, "onResize", (shape, info) => {
      const { scaleX, scaleY } = info;
      const newSegments = [];
      for (const segment of shape.props.segments) {
        newSegments.push({
          ...segment,
          points: segment.points.map(({ x, y, z }) => {
            return {
              x: toFixed(scaleX * x),
              y: toFixed(scaleY * y),
              z
            };
          })
        });
      }
      return {
        props: {
          segments: newSegments
        }
      };
    });
  }
  getDefaultProps() {
    return {
      segments: [],
      color: "black",
      fill: "none",
      dash: "draw",
      size: "m",
      isComplete: false,
      isClosed: false,
      isPen: false
    };
  }
  getGeometry(shape) {
    const points = getPointsFromSegments(shape.props.segments);
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    if (shape.props.segments.length === 1) {
      const box = Box.FromPoints(points);
      if (box.width < strokeWidth * 2 && box.height < strokeWidth * 2) {
        return new Circle2d({
          x: -strokeWidth,
          y: -strokeWidth,
          radius: strokeWidth,
          isFilled: true
        });
      }
    }
    const strokePoints = getStrokePoints(points, getFreehandOptions(shape.props, strokeWidth, true, true)).map((p) => p.point);
    if (shape.props.isClosed) {
      return new Polygon2d({
        points: strokePoints,
        isFilled: shape.props.fill !== "none"
      });
    }
    return new Polyline2d({
      points: strokePoints
    });
  }
  component(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SVGContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(DrawShapeSvg, { shape, forceSolid: useForceSolid() }) });
  }
  indicator(shape) {
    var _a2;
    const forceSolid = useForceSolid();
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const showAsComplete = shape.props.isComplete || ((_a2 = last(shape.props.segments)) == null ? void 0 : _a2.type) === "straight";
    const options = getFreehandOptions(shape.props, sw, showAsComplete, true);
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { d: solidStrokePath });
  }
  toSvg(shape, ctx) {
    ctx.addExportDef(getFillDefForExport(shape.props.fill));
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(DrawShapeSvg, { shape, forceSolid: false });
  }
  getCanvasSvgDefs() {
    return [getFillDefForCanvas()];
  }
  expandSelectionOutlinePx(shape) {
    const multiplier = shape.props.dash === "draw" ? 1.6 : 1;
    return STROKE_SIZES2[shape.props.size] * multiplier / 2;
  }
};
__publicField(DrawShapeUtil, "type", "draw");
__publicField(DrawShapeUtil, "props", drawShapeProps);
__publicField(DrawShapeUtil, "migrations", drawShapeMigrations);
function getDot(point, sw) {
  const r = (sw + 1) * 0.5;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getIsDot(shape) {
  return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
}
function DrawShapeSvg({ shape, forceSolid }) {
  var _a2;
  const theme = useDefaultColorTheme();
  const strokeWidth = STROKE_SIZES2[shape.props.size];
  const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
  const showAsComplete = shape.props.isComplete || ((_a2 = last(shape.props.segments)) == null ? void 0 : _a2.type) === "straight";
  let sw = strokeWidth;
  if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
    sw += rng(shape.id)() * (strokeWidth / 6);
  }
  const options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid);
  if (!forceSolid && shape.props.dash === "draw") {
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, { children: [
      shape.props.isClosed && shape.props.fill && allPointsFromSegments.length > 1 ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ShapeFill, {
        theme,
        fill: shape.props.isClosed ? shape.props.fill : "none",
        color: shape.props.color,
        d: getSvgPathFromStrokePoints(getStrokePoints(allPointsFromSegments, options), shape.props.isClosed)
      }) : null,
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", {
        d: svgInk(allPointsFromSegments, options),
        strokeLinecap: "round",
        fill: theme[shape.props.color].solid
      })
    ] });
  }
  const strokePoints = getStrokePoints(allPointsFromSegments, options);
  const isDot = strokePoints.length < 2;
  const solidStrokePath = isDot ? getDot(allPointsFromSegments[0], 0) : getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed);
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ShapeFill, {
      theme,
      color: shape.props.color,
      fill: isDot || shape.props.isClosed ? shape.props.fill : "none",
      d: solidStrokePath
    }),
    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", {
      d: solidStrokePath,
      strokeLinecap: "round",
      fill: isDot ? theme[shape.props.color].solid : "none",
      stroke: theme[shape.props.color].solid,
      strokeWidth,
      strokeDasharray: isDot ? "none" : getDrawShapeStrokeDashArray(shape, strokeWidth),
      strokeDashoffset: "0"
    })
  ] });
}

// node_modules/tldraw/dist-esm/lib/shapes/embed/EmbedShapeUtil.mjs
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var import_react48 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/resizeBox.mjs
function resizeBox2(shape, info, opts = {}) {
  const { newPoint, handle, scaleX, scaleY } = info;
  const { minWidth = 1, maxWidth: maxWidth2 = Infinity, minHeight = 1, maxHeight: maxHeight2 = Infinity } = opts;
  let w = shape.props.w * scaleX;
  let h = shape.props.h * scaleY;
  const offset4 = new Vec(0, 0);
  if (w > 0) {
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset4.x = w - minWidth;
          break;
        }
        case "top":
        case "bottom": {
          offset4.x = (w - minWidth) / 2;
          break;
        }
        default: {
          offset4.x = 0;
        }
      }
      w = minWidth;
    }
  } else {
    offset4.x = w;
    w = -w;
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset4.x = -w;
          break;
        }
        default: {
          offset4.x = -minWidth;
        }
      }
      w = minWidth;
    }
  }
  if (h > 0) {
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset4.y = h - minHeight;
          break;
        }
        case "right":
        case "left": {
          offset4.y = (h - minHeight) / 2;
          break;
        }
        default: {
          offset4.y = 0;
        }
      }
      h = minHeight;
    }
  } else {
    offset4.y = h;
    h = -h;
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset4.y = -h;
          break;
        }
        default: {
          offset4.y = -minHeight;
        }
      }
      h = minHeight;
    }
  }
  const { x, y } = offset4.rot(shape.rotation).add(newPoint);
  return {
    x,
    y,
    props: {
      w: Math.min(maxWidth2, w),
      h: Math.min(maxHeight2, h)
    }
  };
}

// node_modules/tldraw/dist-esm/lib/shapes/embed/EmbedShapeUtil.mjs
var getSandboxPermissions = (permissions) => {
  return Object.entries(permissions).filter(([_perm, isEnabled]) => isEnabled).map(([perm]) => perm).join(" ");
};
var EmbedShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "hideSelectionBoundsFg", (shape) => !this.canResize(shape));
    __publicField(this, "canEdit", () => true);
    __publicField(this, "canResize", (shape) => {
      var _a2, _b2;
      return !!((_b2 = (_a2 = getEmbedInfo(shape.props.url)) == null ? void 0 : _a2.definition) == null ? void 0 : _b2.doesResize);
    });
    __publicField(this, "canEditInReadOnly", () => true);
    __publicField(this, "isAspectRatioLocked", (shape) => {
      var _a2;
      const embedInfo = getEmbedInfo(shape.props.url);
      return (_a2 = embedInfo == null ? void 0 : embedInfo.definition.isAspectRatioLocked) != null ? _a2 : false;
    });
    __publicField(this, "onResize", (shape, info) => {
      var _a2, _b2;
      const isAspectRatioLocked = this.isAspectRatioLocked(shape);
      const embedInfo = getEmbedInfo(shape.props.url);
      let minWidth = (_a2 = embedInfo == null ? void 0 : embedInfo.definition.minWidth) != null ? _a2 : 200;
      let minHeight = (_b2 = embedInfo == null ? void 0 : embedInfo.definition.minHeight) != null ? _b2 : 200;
      if (isAspectRatioLocked) {
        const aspectRatio = shape.props.w / shape.props.h;
        if (aspectRatio > 1) {
          minWidth *= aspectRatio;
        } else {
          minHeight /= aspectRatio;
        }
      }
      return resizeBox2(shape, info, { minWidth, minHeight });
    });
  }
  getDefaultProps() {
    return {
      w: 300,
      h: 300,
      url: ""
    };
  }
  component(shape) {
    var _a2, _b2;
    const { w, h, url } = shape.props;
    const isEditing = useIsEditing(shape.id);
    const embedInfo = (0, import_react48.useMemo)(() => getEmbedInfoUnsafely(url), [url]);
    const isHoveringWhileEditingSameShape = useValue("is hovering", () => {
      const { editingShapeId, hoveredShapeId } = this.editor.getCurrentPageState();
      if (editingShapeId && hoveredShapeId !== editingShapeId) {
        const editingShape = this.editor.getShape(editingShapeId);
        if (editingShape && this.editor.isShapeOfType(editingShape, "embed")) {
          return true;
        }
      }
      return false;
    }, []);
    const pageRotation = this.editor.getShapePageTransform(shape).rotation();
    const isInteractive = isEditing || isHoveringWhileEditingSameShape;
    if ((embedInfo == null ? void 0 : embedInfo.definition.type) === "github_gist") {
      const idFromGistUrl = embedInfo.url.split("/").pop();
      if (!idFromGistUrl)
        throw Error("No gist id!");
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Gist, {
        id: idFromGistUrl,
        width: toDomPrecision(w),
        height: toDomPrecision(h),
        isInteractive,
        pageRotation
      }) });
    }
    const sandbox = getSandboxPermissions({
      ...embedShapePermissionDefaults,
      ...(_a2 = embedInfo == null ? void 0 : embedInfo.definition.overridePermissions) != null ? _a2 : {}
    });
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: (embedInfo == null ? void 0 : embedInfo.definition) ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("iframe", {
      className: "tl-embed",
      sandbox,
      src: embedInfo.embedUrl,
      width: toDomPrecision(w),
      height: toDomPrecision(h),
      draggable: false,
      frameBorder: "0",
      referrerPolicy: "no-referrer-when-downgrade",
      style: {
        border: 0,
        pointerEvents: isInteractive ? "auto" : "none",
        zIndex: isInteractive ? "" : "-1",
        boxShadow: getRotatedBoxShadow(pageRotation),
        borderRadius: (_b2 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _b2 : 8,
        background: embedInfo == null ? void 0 : embedInfo.definition.backgroundColor
      }
    }) : null });
  }
  indicator(shape) {
    var _a2, _b2;
    const embedInfo = (0, import_react48.useMemo)(() => getEmbedInfo(shape.props.url), [shape.props.url]);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("rect", {
      width: toDomPrecision(shape.props.w),
      height: toDomPrecision(shape.props.h),
      rx: (_a2 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _a2 : 8,
      ry: (_b2 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _b2 : 8
    });
  }
};
__publicField(EmbedShapeUtil, "type", "embed");
__publicField(EmbedShapeUtil, "props", embedShapeProps);
__publicField(EmbedShapeUtil, "migrations", embedShapeMigrations);
function Gist({
  id,
  file,
  isInteractive,
  width,
  height,
  style,
  pageRotation
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("iframe", {
    className: "tl-embed",
    draggable: false,
    width: toDomPrecision(width),
    height: toDomPrecision(height),
    frameBorder: "0",
    scrolling: "no",
    seamless: true,
    referrerPolicy: "no-referrer-when-downgrade",
    style: {
      ...style,
      pointerEvents: isInteractive ? "all" : "none",
      zIndex: isInteractive ? "" : "-1",
      boxShadow: getRotatedBoxShadow(pageRotation)
    },
    srcDoc: `
			<html>
				<head>
					<base target="_blank">
				</head>
				<body>
					<script src=${`https://gist.github.com/${id}.js${file ? `?file=${file}` : ""}`}><\/script>
					<style type="text/css">
						* { margin: 0px; }
						table { height: 100%; background-color: red; }
						.gist { background-color: none; height: 100%;  }
						.gist .gist-file { height: calc(100vh - 2px); padding: 0px; display: grid; grid-template-rows: 1fr auto; }
					</style>
				</body>
			</html>`
  });
}

// node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeUtil.mjs
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var import_classnames17 = __toESM(require_classnames(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameHeading.mjs
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var import_react50 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameLabelInput.mjs
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var import_react49 = __toESM(require_react(), 1);
var FrameLabelInput = (0, import_react49.forwardRef)(({ id, name, isEditing }, ref) => {
  const editor = useEditor();
  const handleKeyDown = (0, import_react49.useCallback)((e) => {
    if (e.key === "Enter" && !e.nativeEvent.isComposing) {
      stopEventPropagation(e);
      e.currentTarget.blur();
      editor.setEditingShape(null);
    }
  }, [editor]);
  const handleBlur = (0, import_react49.useCallback)((e) => {
    const shape = editor.getShape(id);
    if (!shape)
      return;
    const name2 = shape.props.name;
    const value = e.currentTarget.value.trim();
    if (name2 === value)
      return;
    editor.updateShapes([
      {
        id,
        type: "frame",
        props: { name: value }
      }
    ], { squashing: true });
  }, [id, editor]);
  const handleChange = (0, import_react49.useCallback)((e) => {
    const shape = editor.getShape(id);
    if (!shape)
      return;
    const name2 = shape.props.name;
    const value = e.currentTarget.value;
    if (name2 === value)
      return;
    editor.updateShapes([
      {
        id,
        type: "frame",
        props: { name: value }
      }
    ], { squashing: true });
  }, [id, editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: `tl-frame-label ${isEditing ? "tl-frame-label__editing" : ""}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("input", {
      className: "tl-frame-name-input",
      ref,
      style: { display: isEditing ? void 0 : "none" },
      value: name,
      autoFocus: true,
      onKeyDown: handleKeyDown,
      onBlur: handleBlur,
      onChange: handleChange
    }),
    defaultEmptyAs(name, "Frame") + String.fromCharCode(8203)
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameHeading.mjs
var FrameHeading = function FrameHeading2({
  id,
  name,
  width,
  height
}) {
  const editor = useEditor();
  const pageRotation = useValue("shape rotation", () => canonicalizeRotation(editor.getShapePageTransform(id).rotation()), [editor, id]);
  const isEditing = useIsEditing(id);
  const rInput = (0, import_react50.useRef)(null);
  const handlePointerDown = (0, import_react50.useCallback)((e) => {
    const event = getPointerInfo(e);
    if (editor.getEditingShapeId() === id)
      return;
    editor.dispatch({
      type: "pointer",
      name: "pointer_down",
      target: "shape",
      shape: editor.getShape(id),
      ...event
    });
    e.preventDefault();
  }, [editor, id]);
  (0, import_react50.useEffect)(() => {
    const el = rInput.current;
    if (el && isEditing) {
      el.focus();
      el.select();
      requestAnimationFrame(() => {
        if (document.activeElement !== el) {
          el.focus();
          el.select();
        }
      });
    }
  }, [rInput, isEditing]);
  const offsetRotation = pageRotation + Math.PI / 4;
  const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
  const labelSide = ["top", "left", "bottom", "right"][Math.floor(scaledRotation)];
  let labelTranslate;
  switch (labelSide) {
    case "top":
      labelTranslate = ``;
      break;
    case "right":
      labelTranslate = `translate(${toDomPrecision(width)}px, 0px) rotate(90deg)`;
      break;
    case "bottom":
      labelTranslate = `translate(${toDomPrecision(width)}px, ${toDomPrecision(height)}px) rotate(180deg)`;
      break;
    case "left":
      labelTranslate = `translate(0px, ${toDomPrecision(height)}px) rotate(270deg)`;
      break;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", {
    className: "tl-frame-heading",
    style: {
      overflow: isEditing ? "visible" : "hidden",
      maxWidth: `calc(var(--tl-zoom) * ${labelSide === "top" || labelSide === "bottom" ? Math.ceil(width) : Math.ceil(height)}px + var(--space-5))`,
      bottom: "100%",
      transform: `${labelTranslate} scale(var(--tl-scale)) translateX(calc(-1 * var(--space-3))`
    },
    onPointerDown: handlePointerDown,
    children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "tl-frame-heading-hit-area", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(FrameLabelInput, { ref: rInput, id, name, isEditing }) })
  });
};

// node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeUtil.mjs
function defaultEmptyAs(str, dflt) {
  if (str.match(/^\s*$/)) {
    return dflt;
  }
  return str;
}
var FrameShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canBind", () => true);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "canReceiveNewChildrenOfType", (shape, _type) => {
      return !shape.isLocked;
    });
    __publicField(this, "canDropShapes", (shape, _shapes) => {
      return !shape.isLocked;
    });
    __publicField(this, "onDragShapesOver", (frame2, shapes) => {
      if (!shapes.every((child) => child.parentId === frame2.id)) {
        this.editor.reparentShapes(shapes, frame2.id);
      }
    });
    __publicField(this, "onDragShapesOut", (_shape, shapes) => {
      const parent = this.editor.getShape(_shape.parentId);
      const isInGroup = parent && this.editor.isShapeOfType(parent, "group");
      if (isInGroup) {
        this.editor.reparentShapes(shapes, parent.id);
      } else {
        this.editor.reparentShapes(shapes, this.editor.getCurrentPageId());
      }
    });
    __publicField(this, "onResize", (shape, info) => {
      return resizeBox(shape, info);
    });
  }
  getDefaultProps() {
    return { w: 160 * 2, h: 90 * 2, name: "" };
  }
  getGeometry(shape) {
    return new Rectangle2d({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: false
    });
  }
  component(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const theme = useDefaultColorTheme();
    const isCreating = useValue("is creating this shape", () => {
      const resizingState = this.editor.getStateDescendant("select.resizing");
      if (!resizingState)
        return false;
      if (!resizingState.getIsActive())
        return false;
      const info = resizingState == null ? void 0 : resizingState.info;
      if (!info)
        return false;
      return info.isCreating && this.editor.getOnlySelectedShapeId() === shape.id;
    }, [shape.id]);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("rect", {
        className: (0, import_classnames17.default)("tl-frame__body", { "tl-frame__creating": isCreating }),
        width: bounds.width,
        height: bounds.height,
        fill: theme.solid,
        stroke: theme.text
      }) }),
      isCreating ? null : /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(FrameHeading, {
        id: shape.id,
        name: shape.props.name,
        width: bounds.width,
        height: bounds.height
      })
    ] });
  }
  toSvg(shape, ctx) {
    const theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode });
    const pageRotation = canonicalizeRotation(this.editor.getShapePageTransform(shape.id).rotation());
    const offsetRotation = pageRotation + Math.PI / 4;
    const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
    const labelSide = Math.floor(scaledRotation);
    let labelTranslate;
    switch (labelSide) {
      case 0:
        labelTranslate = ``;
        break;
      case 3:
        labelTranslate = `translate(${toDomPrecision(shape.props.w)}, 0) rotate(90)`;
        break;
      case 2:
        labelTranslate = `translate(${toDomPrecision(shape.props.w)}, ${toDomPrecision(shape.props.h)}) rotate(180)`;
        break;
      case 1:
        labelTranslate = `translate(0, ${toDomPrecision(shape.props.h)}) rotate(270)`;
        break;
      default:
        throw Error("labelSide out of bounds");
    }
    const opts = {
      fontSize: 12,
      fontFamily: "Inter, sans-serif",
      textAlign: "start",
      width: shape.props.w,
      height: 32,
      padding: 0,
      lineHeight: 1,
      fontStyle: "normal",
      fontWeight: "normal",
      overflow: "truncate-ellipsis",
      verticalTextAlign: "middle"
    };
    const spans = this.editor.textMeasure.measureTextSpans(defaultEmptyAs(shape.props.name, "Frame") + String.fromCharCode(8203), opts);
    const firstSpan = spans[0];
    const lastSpan = last(spans);
    const labelTextWidth = lastSpan.box.w + lastSpan.box.x - firstSpan.box.x;
    const text = createTextJsxFromSpans(this.editor, spans, {
      offsetY: -opts.height - 2,
      ...opts
    });
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("rect", {
        width: shape.props.w,
        height: shape.props.h,
        fill: theme.solid,
        stroke: theme.black.solid,
        strokeWidth: 1,
        rx: 1,
        ry: 1
      }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("g", { transform: labelTranslate, children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("rect", {
          x: -8,
          y: -opts.height - 4,
          width: labelTextWidth + 16,
          height: opts.height,
          fill: theme.background,
          rx: 4,
          ry: 4
        }),
        text
      ] })
    ] });
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("rect", {
      width: toDomPrecision(bounds.width),
      height: toDomPrecision(bounds.height),
      className: `tl-frame-indicator`
    });
  }
  providesBackgroundForChildren() {
    return true;
  }
};
__publicField(FrameShapeUtil, "type", "frame");
__publicField(FrameShapeUtil, "props", frameShapeProps);
__publicField(FrameShapeUtil, "migrations", frameShapeMigrations);

// node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeUtil.mjs
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/polygon-helpers.mjs
function precise2(A) {
  return `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `;
}
function rng2(seed = "") {
  let x = 0;
  let y = 0;
  let z = 0;
  let w = 0;
  function next() {
    const t2 = x ^ x << 11;
    x = y;
    y = z;
    z = w;
    w ^= (w >>> 19 ^ t2 ^ t2 >>> 8) >>> 0;
    return w / 4294967296 * 2;
  }
  for (let k = 0; k < seed.length + 64; k++) {
    x ^= seed.charCodeAt(k) | 0;
    next();
  }
  return next;
}
function getRoundedInkyPolygonPath(points) {
  let polylineA = `M`;
  const len = points.length;
  let p0;
  let p1;
  let p2;
  for (let i = 0, n = len; i < n; i += 3) {
    p0 = points[i];
    p1 = points[i + 1];
    p2 = points[i + 2];
    polylineA += `${precise2(p0)}L${precise2(p1)}Q${precise2(p2)}`;
  }
  polylineA += `${precise2(points[0])}`;
  return polylineA;
}
function getRoundedPolygonPoints(id, outline, offset4, roundness, passes) {
  const results = [];
  const random = rng2(id);
  let p0 = outline[0];
  let p1;
  const len = outline.length;
  for (let i = 0, n = len * passes; i < n; i++) {
    p1 = Vec.AddXY(outline[(i + 1) % len], random() * offset4, random() * offset4);
    const delta = Vec.Sub(p1, p0);
    const distance = Vec.Len(delta);
    const vector = Vec.Div(delta, distance).mul(Math.min(distance / 4, roundness));
    results.push(Vec.Add(p0, vector), Vec.Add(p1, vector.neg()), p1);
    p0 = p1;
  }
  return results;
}
function getDrawLinePathData(id, outline, strokeWidth) {
  let innerPathData = `M ${precise2(outline[0])}L`;
  let outerPathData2 = `M ${precise2(outline[0])}L`;
  const offset4 = strokeWidth / 3;
  const roundness = strokeWidth * 2;
  const random = rng2(id);
  let p0 = outline[0];
  let p1;
  let s0 = outline[0];
  let s1;
  const len = outline.length;
  for (let i = 0, n = len - 1; i < n; i++) {
    p1 = outline[i + 1];
    s1 = Vec.AddXY(outline[i + 1], random() * offset4, random() * offset4);
    const delta = Vec.Sub(p1, p0);
    const distance = Vec.Len(delta);
    const vector = Vec.Div(delta, distance).mul(Math.min(distance / 4, roundness));
    const q0 = Vec.Add(p0, vector);
    const q1 = Vec.Add(p1, vector.neg());
    const sDelta = Vec.Sub(s1, s0);
    const sDistance = Vec.Len(sDelta);
    const sVector = Vec.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness));
    const sq0 = Vec.Add(s0, sVector);
    const sq1 = Vec.Add(s1, sVector.neg());
    if (i === n - 1) {
      innerPathData += `${precise2(q0)}L ${precise2(p1)}`;
      outerPathData2 += `${precise2(sq0)}L ${precise2(s1)}`;
    } else {
      innerPathData += `${precise2(q0)}L ${precise2(q1)}Q ${precise2(p1)}`;
      outerPathData2 += `${precise2(sq0)}L ${precise2(sq1)}Q ${precise2(s1)}`;
      p0 = p1;
      s0 = s1;
    }
  }
  return [innerPathData, innerPathData + outerPathData2];
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/cloudOutline.mjs
function getPillCircumference(width, height) {
  const radius = Math.min(width, height) / 2;
  const longSide = Math.max(width, height) - radius * 2;
  return Math.PI * (radius * 2) + 2 * longSide;
}
function getPillPoints(width, height, numPoints) {
  const radius = Math.min(width, height) / 2;
  const longSide = Math.max(width, height) - radius * 2;
  const circumference = Math.PI * (radius * 2) + 2 * longSide;
  const spacing = circumference / numPoints;
  const sections = width > height ? [
    {
      type: "straight",
      start: new Vec(radius, 0),
      delta: new Vec(1, 0)
    },
    {
      type: "arc",
      center: new Vec(width - radius, radius),
      startAngle: -PI / 2
    },
    {
      type: "straight",
      start: new Vec(width - radius, height),
      delta: new Vec(-1, 0)
    },
    {
      type: "arc",
      center: new Vec(radius, radius),
      startAngle: PI / 2
    }
  ] : [
    {
      type: "straight",
      start: new Vec(width, radius),
      delta: new Vec(0, 1)
    },
    {
      type: "arc",
      center: new Vec(radius, height - radius),
      startAngle: 0
    },
    {
      type: "straight",
      start: new Vec(0, height - radius),
      delta: new Vec(0, -1)
    },
    {
      type: "arc",
      center: new Vec(radius, radius),
      startAngle: PI
    }
  ];
  let sectionOffset = 0;
  const points = [];
  for (let i = 0; i < numPoints; i++) {
    const section = sections[0];
    if (section.type === "straight") {
      points.push(Vec.Add(section.start, Vec.Mul(section.delta, sectionOffset)));
    } else {
      points.push(getPointOnCircle(section.center, radius, section.startAngle + sectionOffset / radius));
    }
    sectionOffset += spacing;
    let sectionLength = section.type === "straight" ? longSide : PI * radius;
    while (sectionOffset > sectionLength) {
      sectionOffset -= sectionLength;
      sections.push(sections.shift());
      sectionLength = sections[0].type === "straight" ? longSide : PI * radius;
    }
  }
  return points;
}
var switchSize = (size4, s, m, l, xl) => {
  switch (size4) {
    case "s":
      return s;
    case "m":
      return m;
    case "l":
      return l;
    case "xl":
      return xl;
  }
};
function getCloudArcs(width, height, seed, size4) {
  const getRandom = rng(seed);
  const pillCircumference = getPillCircumference(width, height);
  const numBumps = Math.max(Math.ceil(pillCircumference / switchSize(size4, 50, 70, 100, 130)), 6, Math.ceil(pillCircumference / Math.min(width, height)));
  const targetBumpProtrusion = pillCircumference / numBumps * 0.2;
  const innerWidth = Math.max(width - targetBumpProtrusion * 2, 1);
  const innerHeight = Math.max(height - targetBumpProtrusion * 2, 1);
  const paddingX = (width - innerWidth) / 2;
  const paddingY = (height - innerHeight) / 2;
  const distanceBetweenPointsOnPerimeter = getPillCircumference(innerWidth, innerHeight) / numBumps;
  const bumpPoints = getPillPoints(innerWidth, innerHeight, numBumps).map((p) => {
    return p.addXY(paddingX, paddingY);
  });
  const maxWiggleX = width < 20 ? 0 : targetBumpProtrusion * 0.3;
  const maxWiggleY = height < 20 ? 0 : targetBumpProtrusion * 0.3;
  const wiggledPoints = bumpPoints.slice(0);
  for (let i = 0; i < Math.floor(numBumps / 2); i++) {
    wiggledPoints[i] = Vec.AddXY(wiggledPoints[i], getRandom() * maxWiggleX, getRandom() * maxWiggleY);
    wiggledPoints[numBumps - i - 1] = Vec.AddXY(wiggledPoints[numBumps - i - 1], getRandom() * maxWiggleX, getRandom() * maxWiggleY);
  }
  const arcs = [];
  for (let i = 0; i < wiggledPoints.length; i++) {
    const j = i === wiggledPoints.length - 1 ? 0 : i + 1;
    const leftWigglePoint = wiggledPoints[i];
    const rightWigglePoint = wiggledPoints[j];
    const leftPoint = bumpPoints[i];
    const rightPoint = bumpPoints[j];
    const midPoint = Vec.Average([leftPoint, rightPoint]);
    const offsetAngle = Vec.Angle(leftPoint, rightPoint) - Math.PI / 2;
    const distanceBetweenOriginalPoints = Vec.Dist(leftPoint, rightPoint);
    const curvatureOffset = distanceBetweenPointsOnPerimeter - distanceBetweenOriginalPoints;
    const distanceBetweenWigglePoints = Vec.Dist(leftWigglePoint, rightWigglePoint);
    const relativeSize = distanceBetweenWigglePoints / distanceBetweenOriginalPoints;
    const finalDistance = (Math.max(paddingX, paddingY) + curvatureOffset) * relativeSize;
    const arcPoint = Vec.Add(midPoint, Vec.FromAngle(offsetAngle, finalDistance));
    if (arcPoint.x < 0) {
      arcPoint.x = 0;
    } else if (arcPoint.x > width) {
      arcPoint.x = width;
    }
    if (arcPoint.y < 0) {
      arcPoint.y = 0;
    } else if (arcPoint.y > height) {
      arcPoint.y = height;
    }
    const center = getCenterOfCircleGivenThreePoints(leftWigglePoint, rightWigglePoint, arcPoint);
    const radius = Vec.Dist(center ? center : Vec.Average([leftWigglePoint, rightWigglePoint]), leftWigglePoint);
    arcs.push({
      leftPoint: leftWigglePoint,
      rightPoint: rightWigglePoint,
      arcPoint,
      center,
      radius
    });
  }
  return arcs;
}
function getCenterOfCircleGivenThreePoints(a, b, c) {
  const A = a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y;
  const B = (a.x * a.x + a.y * a.y) * (c.y - b.y) + (b.x * b.x + b.y * b.y) * (a.y - c.y) + (c.x * c.x + c.y * c.y) * (b.y - a.y);
  const C = (a.x * a.x + a.y * a.y) * (b.x - c.x) + (b.x * b.x + b.y * b.y) * (c.x - a.x) + (c.x * c.x + c.y * c.y) * (a.x - b.x);
  const x = -B / (2 * A);
  const y = -C / (2 * A);
  if (!Number.isFinite(x) || !Number.isFinite(y)) {
    return null;
  }
  return new Vec(x, y);
}
function cloudOutline(width, height, seed, size4) {
  const path = [];
  const arcs = getCloudArcs(width, height, seed, size4);
  for (const { center, radius, leftPoint, rightPoint } of arcs) {
    path.push(...pointsOnArc(leftPoint, rightPoint, center, radius, 10));
  }
  return path;
}
function cloudSvgPath(width, height, seed, size4) {
  const arcs = getCloudArcs(width, height, seed, size4);
  let path = `M${toDomPrecision(arcs[0].leftPoint.x)},${toDomPrecision(arcs[0].leftPoint.y)}`;
  for (const { leftPoint, rightPoint, radius, center } of arcs) {
    if (center === null) {
      path += ` L${toDomPrecision(rightPoint.x)},${toDomPrecision(rightPoint.y)}`;
      continue;
    }
    const arc = isLeft(leftPoint, rightPoint, center) ? "0" : "1";
    path += ` A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 ${arc},1 ${toDomPrecision(rightPoint.x)},${toDomPrecision(rightPoint.y)}`;
  }
  path += " Z";
  return path;
}
function inkyCloudSvgPath(width, height, seed, size4) {
  const getRandom = rng(seed);
  const mutMultiplier = size4 === "s" ? 0.5 : size4 === "m" ? 0.7 : size4 === "l" ? 0.9 : 1.6;
  const mut = (n) => {
    return n + getRandom() * mutMultiplier * 2;
  };
  const arcs = getCloudArcs(width, height, seed, size4);
  const avgArcLength = arcs.reduce((sum, arc) => sum + Vec.Dist2(arc.leftPoint, arc.rightPoint), 0) / arcs.length;
  const shouldMutatePoints = avgArcLength > (mutMultiplier * 15) ** 2;
  const mutPoint = shouldMutatePoints ? (p) => new Vec(mut(p.x), mut(p.y)) : (p) => p;
  let pathA = `M${toDomPrecision(arcs[0].leftPoint.x)},${toDomPrecision(arcs[0].leftPoint.y)}`;
  let leftMutPoint = mutPoint(arcs[0].leftPoint);
  let pathB = `M${toDomPrecision(leftMutPoint.x)},${toDomPrecision(leftMutPoint.y)}`;
  for (const { leftPoint, center, rightPoint, radius, arcPoint } of arcs) {
    if (center === null) {
      pathA += ` L${toDomPrecision(rightPoint.x)},${toDomPrecision(rightPoint.y)}`;
      const rightMutPoint2 = mutPoint(rightPoint);
      pathB += ` L${toDomPrecision(rightMutPoint2.x)},${toDomPrecision(rightMutPoint2.y)}`;
      leftMutPoint = rightMutPoint2;
      continue;
    }
    const arc = isLeft(leftPoint, rightPoint, center) ? "0" : "1";
    pathA += ` A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 ${arc},1 ${toDomPrecision(rightPoint.x)},${toDomPrecision(rightPoint.y)}`;
    const rightMutPoint = mutPoint(rightPoint);
    const mutArcPoint = mutPoint(arcPoint);
    const mutCenter = getCenterOfCircleGivenThreePoints(leftMutPoint, rightMutPoint, mutArcPoint);
    if (!mutCenter) {
      pathB += ` L${toDomPrecision(rightMutPoint.x)},${toDomPrecision(rightMutPoint.y)}`;
      leftMutPoint = rightMutPoint;
      continue;
    }
    const mutRadius = Math.abs(Vec.Dist(mutCenter, leftMutPoint));
    pathB += ` A${toDomPrecision(mutRadius)},${toDomPrecision(mutRadius)} 0 ${arc},1 ${toDomPrecision(rightMutPoint.x)},${toDomPrecision(rightMutPoint.y)}`;
    leftMutPoint = rightMutPoint;
  }
  return pathA + pathB + " Z";
}
function pointsOnArc(startPoint, endPoint, center, radius, numPoints) {
  if (center === null) {
    return [Vec.From(startPoint), Vec.From(endPoint)];
  }
  const results = [];
  const startAngle = Vec.Angle(center, startPoint);
  const endAngle = Vec.Angle(center, endPoint);
  const l = clockwiseAngleDist(startAngle, endAngle);
  for (let i = 0; i < numPoints; i++) {
    const t2 = i / (numPoints - 1);
    const angle = startAngle + l * t2;
    const point = getPointOnCircle(center, radius, angle);
    results.push(point);
  }
  return results;
}
function isLeft(a, b, c) {
  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x) > 0;
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStyleEllipse.mjs
function getEllipseStrokeOptions(strokeWidth) {
  return {
    size: 1 + strokeWidth,
    thinning: 0.25,
    end: { taper: strokeWidth },
    start: { taper: strokeWidth },
    streamline: 0,
    smoothing: 1,
    simulatePressure: false
  };
}
function getEllipseStrokePoints(id, width, height, strokeWidth) {
  const getRandom = rng(id);
  const rx = width / 2;
  const ry = height / 2;
  const perimeter = perimeterOfEllipse(rx, ry);
  const points = [];
  const start = PI2 * getRandom();
  const length = PI2 + HALF_PI / 2 + Math.abs(getRandom()) * HALF_PI;
  const count = Math.max(16, perimeter / 10);
  for (let i = 0; i < count; i++) {
    const t2 = i / (count - 1);
    const r = start + t2 * length;
    const c = Math.cos(r);
    const s = Math.sin(r);
    points.push(new Vec(rx * c + width * 0.5 + 0.05 * getRandom(), ry * s + height / 2 + 0.05 * getRandom(), Math.min(1, 0.5 + Math.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t2) : EASINGS.easeInExpo(t2))) / 2)));
  }
  return getStrokePoints(points, getEllipseStrokeOptions(strokeWidth));
}
function getEllipseIndicatorPath(id, width, height, strokeWidth) {
  return getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth));
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/GeoShapeBody.mjs
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/geo/getLines.mjs
function getLines(props, sw) {
  switch (props.geo) {
    case "x-box": {
      return getXBoxLines(props.w, props.h, sw, props.dash);
    }
    case "check-box": {
      return getCheckBoxLines(props.w, props.h);
    }
    default: {
      return void 0;
    }
  }
}
function getXBoxLines(w, h, sw, dash) {
  const inset = dash === "draw" ? 0.62 : 0;
  if (dash === "dashed") {
    return [
      [new Vec(0, 0), new Vec(w / 2, h / 2)],
      [new Vec(w, h), new Vec(w / 2, h / 2)],
      [new Vec(0, h), new Vec(w / 2, h / 2)],
      [new Vec(w, 0), new Vec(w / 2, h / 2)]
    ];
  }
  const clampX = (x) => Math.max(0, Math.min(w, x));
  const clampY = (y) => Math.max(0, Math.min(h, y));
  return [
    [
      new Vec(clampX(sw * inset), clampY(sw * inset)),
      new Vec(clampX(w - sw * inset), clampY(h - sw * inset))
    ],
    [
      new Vec(clampX(sw * inset), clampY(h - sw * inset)),
      new Vec(clampX(w - sw * inset), clampY(sw * inset))
    ]
  ];
}
function getCheckBoxLines(w, h) {
  const size4 = Math.min(w, h) * 0.82;
  const ox = (w - size4) / 2;
  const oy = (h - size4) / 2;
  const clampX = (x) => Math.max(0, Math.min(w, x));
  const clampY = (y) => Math.max(0, Math.min(h, y));
  return [
    [
      new Vec(clampX(ox + size4 * 0.25), clampY(oy + size4 * 0.52)),
      new Vec(clampX(ox + size4 * 0.45), clampY(oy + size4 * 0.82))
    ],
    [
      new Vec(clampX(ox + size4 * 0.45), clampY(oy + size4 * 0.82)),
      new Vec(clampX(ox + size4 * 0.82), clampY(oy + size4 * 0.22))
    ]
  ];
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleCloud.mjs
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var React17 = __toESM(require_react(), 1);
var DashStyleCloud = React17.memo(function DashStylePolygon({
  dash,
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size: size4
}) {
  const theme = useDefaultColorTheme();
  const innerPath = cloudSvgPath(w, h, id, size4);
  const arcs = getCloudArcs(w, h, id, size4);
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(ShapeFill, { theme, d: innerPath, fill, color }),
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("g", { strokeWidth, stroke: theme[color].solid, fill: "none", pointerEvents: "all", children: arcs.map(({ leftPoint, rightPoint, center, radius }, i) => {
      const arcLength = center ? radius * canonicalizeRotation(canonicalizeRotation(Vec.Angle(center, rightPoint)) - canonicalizeRotation(Vec.Angle(center, leftPoint))) : Vec.Dist(leftPoint, rightPoint);
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(arcLength, strokeWidth, {
        style: dash,
        start: "outset",
        end: "outset"
      });
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("path", {
        d: center ? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}` : `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`,
        strokeDasharray,
        strokeDashoffset
      }, i);
    }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleEllipse.mjs
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var React18 = __toESM(require_react(), 1);
var DashStyleEllipse = React18.memo(function DashStyleEllipse2({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  fill
}) {
  const theme = useDefaultColorTheme();
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx);
  const ry = Math.max(0, cy);
  const perimeter = perimeterOfEllipse(rx, ry);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(perimeter < 64 ? perimeter * 2 : perimeter, sw, {
    style: dash,
    snap: 4,
    closed: true
  });
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ShapeFill, { theme, d, color, fill }),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", {
      d,
      strokeWidth: sw,
      width: toDomPrecision(w),
      height: toDomPrecision(h),
      fill: "none",
      stroke: theme[color].solid,
      strokeDasharray,
      strokeDashoffset,
      pointerEvents: "all"
    })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleOval.mjs
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var React19 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/geo/helpers.mjs
function getOvalSolidPath(w, h) {
  if (h > w) {
    const offset22 = w / 2;
    return `
    M0,${offset22}
    a${offset22},${offset22},0,1,1,${offset22 * 2},0
    L${w},${h - offset22}
    a${offset22},${offset22},0,1,1,-${offset22 * 2},0
    Z`;
  }
  const offset4 = h / 2;
  return `
    M${offset4},0
    L${w - offset4},0
    a${offset4},${offset4},0,1,1,0,${offset4 * 2}
    L${offset4},${h}
    a${offset4},${offset4},0,1,1,0,${-offset4 * 2}
    Z`;
}
function getOvalPerimeter(h, w) {
  if (h > w) {
    const offset22 = w / 2;
    return perimeterOfEllipse(offset22, offset22) + (h - offset22 * 2) * 2;
  }
  const offset4 = h / 2;
  return perimeterOfEllipse(offset4, offset4) + (w - offset4 * 2) * 2;
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleOval.mjs
var DashStyleOval = React19.memo(function DashStyleOval2({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  fill
}) {
  const theme = useDefaultColorTheme();
  const d = getOvalSolidPath(w, h);
  const perimeter = getOvalPerimeter(w, h);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(perimeter < 64 ? perimeter * 2 : perimeter, sw, {
    style: dash,
    snap: 4,
    start: "outset",
    end: "outset",
    closed: true
  });
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(import_jsx_runtime53.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ShapeFill, { theme, d, color, fill }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("path", {
      d,
      strokeWidth: sw,
      width: toDomPrecision(w),
      height: toDomPrecision(h),
      fill: "none",
      stroke: theme[color].solid,
      strokeDasharray,
      strokeDashoffset,
      pointerEvents: "all"
    })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStylePolygon.mjs
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var React20 = __toESM(require_react(), 1);
var DashStylePolygon2 = React20.memo(function DashStylePolygon22({
  dash,
  fill,
  color,
  strokeWidth,
  outline,
  lines
}) {
  const theme = useDefaultColorTheme();
  const innerPath = "M" + outline[0] + "L" + outline.slice(1) + "Z";
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(import_jsx_runtime54.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ShapeFill, { theme, d: innerPath, fill, color }),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("g", { strokeWidth, stroke: theme[color].solid, fill: "none", pointerEvents: "all", children: [
      Array.from(Array(outline.length)).map((_, i) => {
        const A = outline[i];
        const B = outline[(i + 1) % outline.length];
        const dist = Vec.Dist(A, B);
        const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(dist, strokeWidth, {
          style: dash,
          start: "outset",
          end: "outset"
        });
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("line", {
          x1: A.x,
          y1: A.y,
          x2: B.x,
          y2: B.y,
          strokeDasharray,
          strokeDashoffset
        }, i);
      }),
      lines && lines.map(([A, B], i) => {
        const dist = Vec.Dist(A, B);
        const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(dist, strokeWidth, {
          style: dash,
          start: "skip",
          end: "outset",
          snap: dash === "dotted" ? 4 : void 0
        });
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", {
          d: `M${A.x},${A.y}L${B.x},${B.y}`,
          stroke: theme[color].solid,
          strokeWidth,
          fill: "none",
          strokeDasharray,
          strokeDashoffset
        }, `line_fg_${i}`);
      })
    ] })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStyleCloud.mjs
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var React21 = __toESM(require_react(), 1);
var DrawStyleCloud = React21.memo(function StyleCloud({
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size: size4
}) {
  const theme = useDefaultColorTheme();
  const path = inkyCloudSvgPath(w, h, id, size4);
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_jsx_runtime55.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ShapeFill, { theme, d: path, fill, color }),
    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStylePolygon.mjs
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var React22 = __toESM(require_react(), 1);
var DrawStylePolygon = React22.memo(function DrawStylePolygon2({
  id,
  outline,
  lines,
  fill,
  color,
  strokeWidth
}) {
  const theme = useDefaultColorTheme();
  const polygonPoints = getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2);
  let strokePathData = getRoundedInkyPolygonPath(polygonPoints);
  if (lines) {
    for (const [A, B] of lines) {
      strokePathData += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  const innerPolygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
  const innerPathData = getRoundedInkyPolygonPath(innerPolygonPoints);
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ShapeFill, { d: innerPathData, fill, color, theme }),
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("path", { d: strokePathData, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleCloud.mjs
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var React23 = __toESM(require_react(), 1);
var SolidStyleCloud = React23.memo(function SolidStyleCloud2({
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size: size4
}) {
  const theme = useDefaultColorTheme();
  const path = cloudSvgPath(w, h, id, size4);
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(import_jsx_runtime57.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ShapeFill, { theme, d: path, fill, color }),
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleEllipse.mjs
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var React24 = __toESM(require_react(), 1);
var SolidStyleEllipse = React24.memo(function SolidStyleEllipse2({
  w,
  h,
  strokeWidth: sw,
  fill,
  color
}) {
  const theme = useDefaultColorTheme();
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx);
  const ry = Math.max(0, cy);
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_jsx_runtime58.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ShapeFill, { d, color, fill, theme }),
    /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("path", { d, stroke: theme[color].solid, strokeWidth: sw, fill: "none" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleOval.mjs
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var React25 = __toESM(require_react(), 1);
var SolidStyleOval = React25.memo(function SolidStyleOval2({
  w,
  h,
  strokeWidth: sw,
  fill,
  color
}) {
  const theme = useDefaultColorTheme();
  const d = getOvalIndicatorPath(w, h);
  return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ShapeFill, { d, color, fill, theme }),
    /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("path", { d, stroke: theme[color].solid, strokeWidth: sw, fill: "none" })
  ] });
});
function getOvalIndicatorPath(w, h) {
  let d;
  if (h > w) {
    const offset4 = w / 2;
    d = `
    M0,${offset4}
    a${offset4},${offset4},0,1,1,${offset4 * 2},0
    L${w},${h - offset4}
    a${offset4},${offset4},0,1,1,-${offset4 * 2},0
    Z`;
  } else {
    const offset4 = h / 2;
    d = `
    M${offset4},0
    L${w - offset4},0
    a${offset4},${offset4},0,1,1,0,${offset4 * 2}
    L${offset4},${h}
    a${offset4},${offset4},0,1,1,0,${-offset4 * 2}
    Z`;
  }
  return d;
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStylePolygon.mjs
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var React26 = __toESM(require_react(), 1);
var SolidStylePolygon = React26.memo(function SolidStylePolygon2({
  outline,
  lines,
  fill,
  color,
  strokeWidth
}) {
  const theme = useDefaultColorTheme();
  let path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
  if (lines) {
    for (const [A, B] of lines) {
      path += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(import_jsx_runtime60.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ShapeFill, { d: path, fill, color, theme }),
    /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/shapes/geo/components/GeoShapeBody.mjs
function GeoShapeBody({ shape }) {
  const editor = useEditor();
  const { id, props } = shape;
  const { w, color, fill, dash, growY, size: size4 } = props;
  const strokeWidth = STROKE_SIZES2[size4];
  const h = props.h + growY;
  switch (props.geo) {
    case "cloud": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStyleCloud, {
          color,
          fill,
          strokeWidth,
          w,
          h,
          id,
          size: size4
        });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DashStyleCloud, {
          color,
          fill,
          strokeWidth,
          w,
          h,
          id,
          size: size4,
          dash
        });
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DrawStyleCloud, {
          color,
          fill,
          strokeWidth,
          w,
          h,
          id,
          size: size4
        });
      }
      break;
    }
    case "ellipse": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStyleEllipse, { strokeWidth, w, h, color, fill });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DashStyleEllipse, {
          id,
          strokeWidth,
          w,
          h,
          dash,
          color,
          fill
        });
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStyleEllipse, { strokeWidth, w, h, color, fill });
      }
      break;
    }
    case "oval": {
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStyleOval, { strokeWidth, w, h, color, fill });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DashStyleOval, {
          id,
          strokeWidth,
          w,
          h,
          dash,
          color,
          fill
        });
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStyleOval, { strokeWidth, w, h, color, fill });
      }
      break;
    }
    default: {
      const geometry = editor.getShapeGeometry(shape);
      const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices;
      const lines = getLines(shape.props, strokeWidth);
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(SolidStylePolygon, {
          fill,
          color,
          strokeWidth,
          outline,
          lines
        });
      } else if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DashStylePolygon2, {
          dash,
          fill,
          color,
          strokeWidth,
          outline,
          lines
        });
      } else if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DrawStylePolygon, {
          id,
          fill,
          color,
          strokeWidth,
          outline,
          lines
        });
      }
    }
  }
}

// node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeUtil.mjs
var MIN_SIZE_WITH_LABEL = 17 * 3;
var GeoShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "onEditEnd", (shape) => {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    });
    __publicField(this, "onResize", (shape, { handle, newPoint, scaleX, scaleY, initialShape }) => {
      let w = initialShape.props.w * scaleX;
      let h = (initialShape.props.h + initialShape.props.growY) * scaleY;
      let overShrinkX = 0;
      let overShrinkY = 0;
      if (shape.props.text.trim()) {
        let newW = Math.max(Math.abs(w), MIN_SIZE_WITH_LABEL);
        let newH = Math.max(Math.abs(h), MIN_SIZE_WITH_LABEL);
        if (newW < MIN_SIZE_WITH_LABEL && newH === MIN_SIZE_WITH_LABEL) {
          newW = MIN_SIZE_WITH_LABEL;
        }
        if (newW === MIN_SIZE_WITH_LABEL && newH < MIN_SIZE_WITH_LABEL) {
          newH = MIN_SIZE_WITH_LABEL;
        }
        const labelSize = getLabelSize(this.editor, {
          ...shape,
          props: {
            ...shape.props,
            w: newW,
            h: newH
          }
        });
        const nextW = Math.max(Math.abs(w), labelSize.w) * Math.sign(w);
        const nextH = Math.max(Math.abs(h), labelSize.h) * Math.sign(h);
        overShrinkX = Math.abs(nextW) - Math.abs(w);
        overShrinkY = Math.abs(nextH) - Math.abs(h);
        w = nextW;
        h = nextH;
      }
      const offset4 = new Vec(0, 0);
      if (scaleX < 0) {
        offset4.x += w;
      }
      if (handle === "left" || handle === "top_left" || handle === "bottom_left") {
        offset4.x += scaleX < 0 ? overShrinkX : -overShrinkX;
      }
      if (scaleY < 0) {
        offset4.y += h;
      }
      if (handle === "top" || handle === "top_left" || handle === "top_right") {
        offset4.y += scaleY < 0 ? overShrinkY : -overShrinkY;
      }
      const { x, y } = offset4.rot(shape.rotation).add(newPoint);
      return {
        x,
        y,
        props: {
          w: Math.max(Math.abs(w), 1),
          h: Math.max(Math.abs(h), 1),
          growY: 0
        }
      };
    });
    __publicField(this, "onBeforeCreate", (shape) => {
      if (!shape.props.text) {
        if (shape.props.growY) {
          return {
            ...shape,
            props: {
              ...shape.props,
              growY: 0
            }
          };
        } else {
          return;
        }
      }
      const prevHeight = shape.props.h;
      const nextHeight = getLabelSize(this.editor, shape).h;
      let growY = null;
      if (nextHeight > prevHeight) {
        growY = nextHeight - prevHeight;
      } else {
        if (shape.props.growY) {
          growY = 0;
        }
      }
      if (growY !== null) {
        return {
          ...shape,
          props: {
            ...shape.props,
            growY
          }
        };
      }
    });
    __publicField(this, "onBeforeUpdate", (prev, next) => {
      const prevText = prev.props.text;
      const nextText = next.props.text;
      if (prevText === nextText && prev.props.font === next.props.font && prev.props.size === next.props.size) {
        return;
      }
      if (prevText && !nextText) {
        return {
          ...next,
          props: {
            ...next.props,
            growY: 0
          }
        };
      }
      const prevWidth = prev.props.w;
      const prevHeight = prev.props.h;
      const nextSize = getLabelSize(this.editor, next);
      const nextWidth = nextSize.w;
      const nextHeight = nextSize.h;
      if (!prevText && nextText && nextText.length === 1) {
        let w = Math.max(prevWidth, nextWidth);
        let h = Math.max(prevHeight, nextHeight);
        if (prev.props.w < MIN_SIZE_WITH_LABEL && prev.props.h < MIN_SIZE_WITH_LABEL) {
          w = Math.max(w, MIN_SIZE_WITH_LABEL);
          h = Math.max(h, MIN_SIZE_WITH_LABEL);
          w = Math.max(w, h);
          h = Math.max(w, h);
        }
        return {
          ...next,
          props: {
            ...next.props,
            w,
            h,
            growY: 0
          }
        };
      }
      let growY = null;
      if (nextHeight > prevHeight) {
        growY = nextHeight - prevHeight;
      } else {
        if (prev.props.growY) {
          growY = 0;
        }
      }
      if (growY !== null) {
        return {
          ...next,
          props: {
            ...next.props,
            growY,
            w: Math.max(next.props.w, nextWidth)
          }
        };
      }
      if (nextWidth > prev.props.w) {
        return {
          ...next,
          props: {
            ...next.props,
            w: nextWidth
          }
        };
      }
    });
    __publicField(this, "onDoubleClick", (shape) => {
      if (this.editor.inputs.altKey) {
        switch (shape.props.geo) {
          case "rectangle": {
            return {
              ...shape,
              props: {
                geo: "check-box"
              }
            };
          }
          case "check-box": {
            return {
              ...shape,
              props: {
                geo: "rectangle"
              }
            };
          }
        }
      }
      return;
    });
  }
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      geo: "rectangle",
      color: "black",
      labelColor: "black",
      fill: "none",
      dash: "draw",
      size: "m",
      font: "draw",
      text: "",
      align: "middle",
      verticalAlign: "middle",
      growY: 0,
      url: ""
    };
  }
  getGeometry(shape) {
    const w = Math.max(1, shape.props.w);
    const h = Math.max(1, shape.props.h + shape.props.growY);
    const cx = w / 2;
    const cy = h / 2;
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    const isFilled = shape.props.fill !== "none";
    let body;
    switch (shape.props.geo) {
      case "cloud": {
        body = new Polygon2d({
          points: cloudOutline(w, h, shape.id, shape.props.size),
          isFilled
        });
        break;
      }
      case "triangle": {
        body = new Polygon2d({
          points: [new Vec(cx, 0), new Vec(w, h), new Vec(0, h)],
          isFilled
        });
        break;
      }
      case "diamond": {
        body = new Polygon2d({
          points: [new Vec(cx, 0), new Vec(w, cy), new Vec(cx, h), new Vec(0, cy)],
          isFilled
        });
        break;
      }
      case "pentagon": {
        body = new Polygon2d({
          points: getPolygonVertices(w, h, 5),
          isFilled
        });
        break;
      }
      case "hexagon": {
        body = new Polygon2d({
          points: getPolygonVertices(w, h, 6),
          isFilled
        });
        break;
      }
      case "octagon": {
        body = new Polygon2d({
          points: getPolygonVertices(w, h, 8),
          isFilled
        });
        break;
      }
      case "ellipse": {
        body = new Ellipse2d({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
      case "oval": {
        body = new Stadium2d({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
      case "star": {
        const sides2 = 5;
        const step = PI2 / sides2 / 2;
        const rightMostIndex = Math.floor(sides2 / 4) * 2;
        const leftMostIndex = sides2 * 2 - rightMostIndex;
        const topMostIndex = 0;
        const bottomMostIndex = Math.floor(sides2 / 2) * 2;
        const maxX = Math.cos(-HALF_PI + rightMostIndex * step) * w / 2;
        const minX = Math.cos(-HALF_PI + leftMostIndex * step) * w / 2;
        const minY = Math.sin(-HALF_PI + topMostIndex * step) * h / 2;
        const maxY = Math.sin(-HALF_PI + bottomMostIndex * step) * h / 2;
        const diffX = w - Math.abs(maxX - minX);
        const diffY = h - Math.abs(maxY - minY);
        const offsetX = w / 2 + minX - (w / 2 - maxX);
        const offsetY = h / 2 + minY - (h / 2 - maxY);
        const ratio = 1;
        const cx2 = (w - offsetX) / 2;
        const cy2 = (h - offsetY) / 2;
        const ox = (w + diffX) / 2;
        const oy = (h + diffY) / 2;
        const ix = ox * ratio / 2;
        const iy = oy * ratio / 2;
        body = new Polygon2d({
          points: Array.from(Array(sides2 * 2)).map((_, i) => {
            const theta = -HALF_PI + i * step;
            return new Vec(cx2 + (i % 2 ? ix : ox) * Math.cos(theta), cy2 + (i % 2 ? iy : oy) * Math.sin(theta));
          }),
          isFilled
        });
        break;
      }
      case "rhombus": {
        const offset4 = Math.min(w * 0.38, h * 0.38);
        body = new Polygon2d({
          points: [new Vec(offset4, 0), new Vec(w, 0), new Vec(w - offset4, h), new Vec(0, h)],
          isFilled
        });
        break;
      }
      case "rhombus-2": {
        const offset4 = Math.min(w * 0.38, h * 0.38);
        body = new Polygon2d({
          points: [new Vec(0, 0), new Vec(w - offset4, 0), new Vec(w, h), new Vec(offset4, h)],
          isFilled
        });
        break;
      }
      case "trapezoid": {
        const offset4 = Math.min(w * 0.38, h * 0.38);
        body = new Polygon2d({
          points: [new Vec(offset4, 0), new Vec(w - offset4, 0), new Vec(w, h), new Vec(0, h)],
          isFilled
        });
        break;
      }
      case "arrow-right": {
        const ox = Math.min(w, h) * 0.38;
        const oy = h * 0.16;
        body = new Polygon2d({
          points: [
            new Vec(0, oy),
            new Vec(w - ox, oy),
            new Vec(w - ox, 0),
            new Vec(w, h / 2),
            new Vec(w - ox, h),
            new Vec(w - ox, h - oy),
            new Vec(0, h - oy)
          ],
          isFilled
        });
        break;
      }
      case "arrow-left": {
        const ox = Math.min(w, h) * 0.38;
        const oy = h * 0.16;
        body = new Polygon2d({
          points: [
            new Vec(ox, 0),
            new Vec(ox, oy),
            new Vec(w, oy),
            new Vec(w, h - oy),
            new Vec(ox, h - oy),
            new Vec(ox, h),
            new Vec(0, h / 2)
          ],
          isFilled
        });
        break;
      }
      case "arrow-up": {
        const ox = w * 0.16;
        const oy = Math.min(w, h) * 0.38;
        body = new Polygon2d({
          points: [
            new Vec(w / 2, 0),
            new Vec(w, oy),
            new Vec(w - ox, oy),
            new Vec(w - ox, h),
            new Vec(ox, h),
            new Vec(ox, oy),
            new Vec(0, oy)
          ],
          isFilled
        });
        break;
      }
      case "arrow-down": {
        const ox = w * 0.16;
        const oy = Math.min(w, h) * 0.38;
        body = new Polygon2d({
          points: [
            new Vec(ox, 0),
            new Vec(w - ox, 0),
            new Vec(w - ox, h - oy),
            new Vec(w, h - oy),
            new Vec(w / 2, h),
            new Vec(0, h - oy),
            new Vec(ox, h - oy)
          ],
          isFilled
        });
        break;
      }
      case "check-box":
      case "x-box":
      case "rectangle": {
        body = new Rectangle2d({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
    }
    const labelSize = getLabelSize(this.editor, shape);
    const minWidth = Math.min(100, w / 2);
    const labelWidth = Math.min(w, Math.max(labelSize.w, Math.min(minWidth, Math.max(1, w - 8))));
    const minHeight = Math.min(LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2, h / 2);
    const labelHeight = Math.min(h, Math.max(labelSize.h, Math.min(minHeight, Math.max(1, w - 8))));
    const lines = getLines(shape.props, strokeWidth);
    const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : [];
    return new Group2d({
      children: [
        body,
        new Rectangle2d({
          x: shape.props.align === "start" ? 0 : shape.props.align === "end" ? w - labelWidth : (w - labelWidth) / 2,
          y: shape.props.verticalAlign === "start" ? 0 : shape.props.verticalAlign === "end" ? h - labelHeight : (h - labelHeight) / 2,
          width: labelWidth,
          height: labelHeight,
          isFilled: true,
          isLabel: true
        }),
        ...edges
      ]
    });
  }
  getHandleSnapGeometry(shape) {
    const geometry = this.getGeometry(shape);
    const outline = geometry.children[0];
    switch (shape.props.geo) {
      case "arrow-down":
      case "arrow-left":
      case "arrow-right":
      case "arrow-up":
      case "check-box":
      case "diamond":
      case "hexagon":
      case "octagon":
      case "pentagon":
      case "rectangle":
      case "rhombus":
      case "rhombus-2":
      case "star":
      case "trapezoid":
      case "triangle":
      case "x-box":
        return { outline, points: [...outline.getVertices(), geometry.bounds.center] };
      case "cloud":
      case "ellipse":
      case "oval":
        return { outline, points: [geometry.bounds.center] };
      default:
        exhaustiveSwitchError(shape.props.geo);
    }
  }
  component(shape) {
    const { id, type, props } = shape;
    const { fill, font, align, verticalAlign, size: size4, text } = props;
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    const theme = useDefaultColorTheme();
    const isEditingAnything = this.editor.getEditingShapeId() !== null;
    const showHtmlContainer = isEditingAnything || shape.props.text;
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(SVGContainer, { id, children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(GeoShapeBody, { shape }) }),
      showHtmlContainer && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(HTMLContainer, {
        style: {
          overflow: "hidden",
          width: shape.props.w,
          height: shape.props.h + props.growY
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TextLabel, {
          id,
          type,
          font,
          fontSize: LABEL_FONT_SIZES[size4],
          lineHeight: TEXT_PROPS.lineHeight,
          fill,
          align,
          verticalAlign,
          text,
          isSelected,
          labelColor: theme[props.labelColor].solid,
          wrap: true
        })
      }),
      shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
    ] });
  }
  indicator(shape) {
    const { id, props } = shape;
    const { w, size: size4 } = props;
    const h = props.h + props.growY;
    const strokeWidth = STROKE_SIZES2[size4];
    switch (props.geo) {
      case "ellipse": {
        if (props.dash === "draw") {
          return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("path", { d: getEllipseIndicatorPath(id, w, h, strokeWidth) });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("ellipse", { cx: w / 2, cy: h / 2, rx: w / 2, ry: h / 2 });
      }
      case "oval": {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("path", { d: getOvalIndicatorPath(w, h) });
      }
      case "cloud": {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("path", { d: cloudSvgPath(w, h, id, size4) });
      }
      default: {
        const geometry = this.editor.getShapeGeometry(shape);
        const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices;
        let path;
        if (props.dash === "draw") {
          const polygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
          path = getRoundedInkyPolygonPath(polygonPoints);
        } else {
          path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
        }
        const lines = getLines(shape.props, strokeWidth);
        if (lines) {
          for (const [A, B] of lines) {
            path += `M${A.x},${A.y}L${B.x},${B.y}`;
          }
        }
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("path", { d: path });
      }
    }
  }
  toSvg(shape, ctx) {
    const { props } = shape;
    ctx.addExportDef(getFillDefForExport(shape.props.fill));
    let textEl;
    if (props.text) {
      ctx.addExportDef(getFontDefForExport(shape.props.font));
      const theme = getDefaultColorTheme(ctx);
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      textEl = /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(SvgTextLabel, {
        fontSize: LABEL_FONT_SIZES[props.size],
        font: props.font,
        align: props.align,
        verticalAlign: props.verticalAlign,
        text: props.text,
        labelColor: theme[props.labelColor].solid,
        bounds
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(GeoShapeBody, { shape }),
      textEl
    ] });
  }
  getCanvasSvgDefs() {
    return [getFillDefForCanvas()];
  }
};
__publicField(GeoShapeUtil, "type", "geo");
__publicField(GeoShapeUtil, "props", geoShapeProps);
__publicField(GeoShapeUtil, "migrations", geoShapeMigrations);
function getLabelSize(editor, shape) {
  const text = shape.props.text;
  if (!text) {
    return { w: 0, h: 0 };
  }
  const minSize = editor.textMeasure.measureText("w", {
    ...TEXT_PROPS,
    fontFamily: FONT_FAMILIES[shape.props.font],
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    maxWidth: 100
  });
  const sizes = {
    s: 2,
    m: 3.5,
    l: 5,
    xl: 10
  };
  const size4 = editor.textMeasure.measureText(text, {
    ...TEXT_PROPS,
    fontFamily: FONT_FAMILIES[shape.props.font],
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    minWidth: minSize.w,
    maxWidth: Math.max(0, Math.ceil(minSize.w + sizes[shape.props.size]), Math.ceil(shape.props.w - LABEL_PADDING * 2))
  });
  return {
    w: size4.w + LABEL_PADDING * 2,
    h: size4.h + LABEL_PADDING * 2
  };
}

// node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeUtil.mjs
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/useColorSpace.mjs
var import_react51 = __toESM(require_react(), 1);
function useColorSpace() {
  const [supportsP3, setSupportsP3] = (0, import_react51.useState)(false);
  (0, import_react51.useEffect)(() => {
    const supportsSyntax = CSS.supports("color", "color(display-p3 1 1 1)");
    const query = matchMedia("(color-gamut: p3)");
    setSupportsP3(supportsSyntax && query.matches);
    const onChange = () => setSupportsP3(supportsSyntax && query.matches);
    query.addEventListener("change", onChange);
    return () => query.removeEventListener("change", onChange);
  }, []);
  const forceSrgb = useValue(debugFlags.forceSrgb);
  return forceSrgb || !supportsP3 ? "srgb" : "p3";
}

// node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeUtil.mjs
var OVERLAY_OPACITY = 0.35;
var UNDERLAY_OPACITY = 0.82;
var HighlightShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "hideResizeHandles", (shape) => getIsDot2(shape));
    __publicField(this, "hideRotateHandle", (shape) => getIsDot2(shape));
    __publicField(this, "hideSelectionBoundsFg", (shape) => getIsDot2(shape));
    __publicField(this, "onResize", (shape, info) => {
      const { scaleX, scaleY } = info;
      const newSegments = [];
      for (const segment of shape.props.segments) {
        newSegments.push({
          ...segment,
          points: segment.points.map(({ x, y, z }) => {
            return {
              x: scaleX * x,
              y: scaleY * y,
              z
            };
          })
        });
      }
      return {
        props: {
          segments: newSegments
        }
      };
    });
  }
  getDefaultProps() {
    return {
      segments: [],
      color: "black",
      size: "m",
      isComplete: false,
      isPen: false
    };
  }
  getGeometry(shape) {
    const strokeWidth = getStrokeWidth(shape);
    if (getIsDot2(shape)) {
      return new Circle2d({
        x: -strokeWidth / 2,
        y: -strokeWidth / 2,
        radius: strokeWidth / 2,
        isFilled: true
      });
    }
    const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, true);
    const opts = getHighlightFreehandSettings({ strokeWidth: sw, showAsComplete: true });
    setStrokePointRadii(strokePoints, opts);
    return new Polygon2d({
      points: getStrokeOutlinePoints(strokePoints, opts),
      isFilled: true
    });
  }
  component(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(SVGContainer, { id: shape.id, style: { opacity: OVERLAY_OPACITY }, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(HighlightRenderer, { strokeWidth: getStrokeWidth(shape), shape }) });
  }
  backgroundComponent(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(SVGContainer, { id: shape.id, style: { opacity: UNDERLAY_OPACITY }, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(HighlightRenderer, { strokeWidth: getStrokeWidth(shape), shape }) });
  }
  indicator(shape) {
    var _a2;
    const forceSolid = useForceSolid();
    const strokeWidth = getStrokeWidth(shape);
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const showAsComplete = shape.props.isComplete || ((_a2 = last(shape.props.segments)) == null ? void 0 : _a2.type) === "straight";
    const options = getHighlightFreehandSettings({
      strokeWidth,
      showAsComplete
    });
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    let strokePath;
    if (strokePoints.length < 2) {
      strokePath = getIndicatorDot(allPointsFromSegments[0], sw);
    } else {
      strokePath = getSvgPathFromStrokePoints(strokePoints, false);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("path", { d: strokePath });
  }
  toSvg(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(HighlightRenderer, {
      strokeWidth: getStrokeWidth(shape),
      shape,
      opacity: OVERLAY_OPACITY
    });
  }
  toBackgroundSvg(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(HighlightRenderer, {
      strokeWidth: getStrokeWidth(shape),
      shape,
      opacity: UNDERLAY_OPACITY
    });
  }
};
__publicField(HighlightShapeUtil, "type", "highlight");
__publicField(HighlightShapeUtil, "props", highlightShapeProps);
__publicField(HighlightShapeUtil, "migrations", highlightShapeMigrations);
function getShapeDot(point) {
  const r = 0.1;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getIndicatorDot(point, sw) {
  const r = sw / 2;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getHighlightStrokePoints(shape, strokeWidth, forceSolid) {
  var _a2;
  const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
  const showAsComplete = shape.props.isComplete || ((_a2 = last(shape.props.segments)) == null ? void 0 : _a2.type) === "straight";
  let sw = strokeWidth;
  if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
    sw += rng(shape.id)() * (strokeWidth / 6);
  }
  const options = getHighlightFreehandSettings({
    strokeWidth: sw,
    showAsComplete
  });
  const strokePoints = getStrokePoints(allPointsFromSegments, options);
  return { strokePoints, sw };
}
function getHighlightSvgPath(shape, strokeWidth, forceSolid) {
  const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, forceSolid);
  const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, false) : getShapeDot(shape.props.segments[0].points[0]);
  return { solidStrokePath, sw };
}
function HighlightRenderer({
  strokeWidth,
  shape,
  opacity
}) {
  const theme = useDefaultColorTheme();
  const forceSolid = useForceSolid();
  const { solidStrokePath, sw } = getHighlightSvgPath(shape, strokeWidth, forceSolid);
  const colorSpace = useColorSpace();
  const color = theme[shape.props.color].highlight[colorSpace];
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("path", {
    d: solidStrokePath,
    strokeLinecap: "round",
    fill: "none",
    pointerEvents: "all",
    stroke: color,
    strokeWidth: sw,
    opacity
  });
}
function getStrokeWidth(shape) {
  return FONT_SIZES[shape.props.size] * 1.12;
}
function getIsDot2(shape) {
  return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
}

// node_modules/tldraw/dist-esm/lib/shapes/image/ImageShapeUtil.mjs
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var import_react53 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/BrokenAssetIcon.mjs
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
function BrokenAssetIcon() {
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 30 30",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("path", { d: "M3,11 L3,3 11,3", strokeWidth: "2" }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("path", { d: "M19,27 L27,27 L27,19", strokeWidth: "2" }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("path", { d: "M27,3 L3,27", strokeWidth: "2" })
    ]
  });
}

// node_modules/tldraw/dist-esm/lib/shapes/shared/usePrefersReducedMotion.mjs
var import_react52 = __toESM(require_react(), 1);
function usePrefersReducedMotion() {
  const [prefersReducedMotion, setPrefersReducedMotion] = (0, import_react52.useState)(false);
  (0, import_react52.useEffect)(() => {
    const mql = window.matchMedia("(prefers-reduced-motion: reduce)");
    const handler = () => {
      setPrefersReducedMotion(mql.matches);
    };
    handler();
    mql.addEventListener("change", handler);
    return () => mql.removeEventListener("change", handler);
  }, []);
  return prefersReducedMotion;
}

// node_modules/tldraw/dist-esm/lib/shapes/image/ImageShapeUtil.mjs
async function getDataURIFromURL(url) {
  const response = await fetch(url);
  const blob = await response.blob();
  return FileHelpers.blobToDataUrl(blob);
}
var ImageShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "isAspectRatioLocked", () => true);
    __publicField(this, "canCrop", () => true);
    __publicField(this, "onDoubleClick", (shape) => {
      const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
      if (!asset)
        return;
      const canPlay = asset.props.src && "mimeType" in asset.props && asset.props.mimeType === "image/gif";
      if (!canPlay)
        return;
      this.editor.updateShapes([
        {
          type: "image",
          id: shape.id,
          props: {
            playing: !shape.props.playing
          }
        }
      ]);
    });
    __publicField(this, "onDoubleClickEdge", (shape) => {
      const props = shape.props;
      if (!props)
        return;
      if (this.editor.getCroppingShapeId() !== shape.id) {
        return;
      }
      const crop = structuredClone(props.crop) || {
        topLeft: { x: 0, y: 0 },
        bottomRight: { x: 1, y: 1 }
      };
      const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
      const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
      const pointDelta = new Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation);
      const partial = {
        id: shape.id,
        type: shape.type,
        x: shape.x - pointDelta.x,
        y: shape.y - pointDelta.y,
        props: {
          crop: {
            topLeft: { x: 0, y: 0 },
            bottomRight: { x: 1, y: 1 }
          },
          w,
          h
        }
      };
      this.editor.updateShapes([partial]);
    });
  }
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      assetId: null,
      playing: true,
      url: "",
      crop: null
    };
  }
  component(shape) {
    var _a2, _b2;
    const isCropping = this.editor.getCroppingShapeId() === shape.id;
    const prefersReducedMotion = usePrefersReducedMotion();
    const [staticFrameSrc, setStaticFrameSrc] = (0, import_react53.useState)("");
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    (0, import_react53.useEffect)(() => {
      if ((asset == null ? void 0 : asset.props.src) && "mimeType" in asset.props && (asset == null ? void 0 : asset.props.mimeType) === "image/gif") {
        let cancelled2 = false;
        const url = asset.props.src;
        if (!url)
          return;
        const image = new Image();
        image.onload = () => {
          if (cancelled2)
            return;
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const ctx = canvas.getContext("2d");
          if (!ctx)
            return;
          ctx.drawImage(image, 0, 0);
          setStaticFrameSrc(canvas.toDataURL());
        };
        image.crossOrigin = "anonymous";
        image.src = url;
        return () => {
          cancelled2 = true;
        };
      }
    }, [prefersReducedMotion, asset == null ? void 0 : asset.props]);
    if ((asset == null ? void 0 : asset.type) === "bookmark") {
      throw Error("Bookmark assets can't be rendered as images");
    }
    const showCropPreview = isSelected && isCropping && this.editor.isInAny("select.crop", "select.cropping", "select.pointing_crop_handle");
    const reduceMotion = prefersReducedMotion && (((_a2 = asset == null ? void 0 : asset.props.mimeType) == null ? void 0 : _a2.includes("video")) || ((_b2 = asset == null ? void 0 : asset.props.mimeType) == null ? void 0 : _b2.includes("gif")));
    const containerStyle = getCroppedContainerStyle(shape);
    if (!(asset == null ? void 0 : asset.props.src)) {
      return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(HTMLContainer, {
        id: shape.id,
        style: {
          overflow: "hidden",
          width: shape.props.w,
          height: shape.props.h,
          color: "var(--color-text-3)",
          backgroundColor: asset ? "transparent" : "var(--color-low)",
          border: asset ? "none" : "1px solid var(--color-low-border)"
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "tl-image-container", style: containerStyle, children: asset ? null : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(BrokenAssetIcon, {}) }),
          ")",
          "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
        ]
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(import_jsx_runtime65.Fragment, { children: [
      showCropPreview && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { style: containerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", {
        className: "tl-image",
        style: {
          opacity: 0.1,
          backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
        },
        draggable: false
      }) }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(HTMLContainer, {
        id: shape.id,
        style: { overflow: "hidden", width: shape.props.w, height: shape.props.h },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "tl-image-container", style: containerStyle, children: [
            /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", {
              className: "tl-image",
              style: {
                backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
              },
              draggable: false
            }),
            asset.props.isAnimated && !shape.props.playing && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "tl-image__tg", children: "GIF" })
          ] }),
          ")",
          shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
        ]
      })
    ] });
  }
  indicator(shape) {
    const isCropping = this.editor.getCroppingShapeId() === shape.id;
    if (isCropping)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
  }
  async toSvg(shape) {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : null;
    if (!asset)
      return null;
    let src = (asset == null ? void 0 : asset.props.src) || "";
    if (src.startsWith("http") || src.startsWith("/") || src.startsWith("./")) {
      src = await getDataURIFromURL(src) || "";
    }
    const containerStyle = getCroppedContainerStyle(shape);
    const crop = shape.props.crop;
    if (containerStyle.transform && crop) {
      const { transform, width, height } = containerStyle;
      const croppedWidth = (crop.bottomRight.x - crop.topLeft.x) * width;
      const croppedHeight = (crop.bottomRight.y - crop.topLeft.y) * height;
      const points = [
        new Vec(0, 0),
        new Vec(croppedWidth, 0),
        new Vec(croppedWidth, croppedHeight),
        new Vec(0, croppedHeight)
      ];
      const cropClipId = `cropClipPath_${shape.id.replace(":", "_")}`;
      return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(import_jsx_runtime65.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("clipPath", { id: cropClipId, children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("polygon", { points: points.map((p) => `${p.x},${p.y}`).join(" ") }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("g", { clipPath: "url(#{cropClipId})", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("image", { href: src, width, height, style: { transform } }) })
      ] });
    } else {
      return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("image", { href: src, width: shape.props.w, height: shape.props.h });
    }
  }
};
__publicField(ImageShapeUtil, "type", "image");
__publicField(ImageShapeUtil, "props", imageShapeProps);
__publicField(ImageShapeUtil, "migrations", imageShapeMigrations);
function getCroppedContainerStyle(shape) {
  const crop = shape.props.crop;
  const topLeft = crop == null ? void 0 : crop.topLeft;
  if (!topLeft) {
    return {
      width: shape.props.w,
      height: shape.props.h
    };
  }
  const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
  const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
  const offsetX = -topLeft.x * w;
  const offsetY = -topLeft.y * h;
  return {
    transform: `translate(${offsetX}px, ${offsetY}px)`,
    width: w,
    height: h
  };
}

// node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeUtil.mjs
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/line/components/svg.mjs
function getSvgPathForEdge(edge, first) {
  const { start, end } = edge;
  if (first) {
    return `M${toDomPrecision(start.x)},${toDomPrecision(start.y)} L${toDomPrecision(end.x)},${toDomPrecision(end.y)} `;
  }
  return `${toDomPrecision(end.x)},${toDomPrecision(end.y)} `;
}
function getSvgPathForBezierCurve(curve, first) {
  const { a, b, c, d } = curve;
  if (Vec.Equals(a, d))
    return "";
  return `${first ? `M${toDomPrecision(a.x)},${toDomPrecision(a.y)}` : ``}C${toDomPrecision(b.x)},${toDomPrecision(b.y)} ${toDomPrecision(c.x)},${toDomPrecision(c.y)} ${toDomPrecision(d.x)},${toDomPrecision(d.y)}`;
}
function getSvgPathForCubicSpline(spline, isClosed) {
  let d = spline.segments.reduce((d2, segment, i) => {
    return d2 + getSvgPathForBezierCurve(segment, i === 0);
  }, "");
  if (isClosed) {
    d += "Z";
  }
  return d;
}
function getSvgPathForPolylineSpline(spline, isClosed) {
  let d = spline.segments.reduce((d2, segment, i) => {
    return d2 + getSvgPathForEdge(segment, i === 0);
  }, "");
  if (isClosed) {
    d += "Z";
  }
  return d;
}
function getSvgPathForLineGeometry(spline, isClosed = false) {
  if (spline instanceof Polyline2d) {
    return getSvgPathForPolylineSpline(spline, isClosed);
  } else {
    return getSvgPathForCubicSpline(spline, isClosed);
  }
}

// node_modules/tldraw/dist-esm/lib/shapes/line/components/getLinePath.mjs
function getLineDrawFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0.4,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: true,
    last: true
  };
}
function getLineStrokePoints(shape, spline, strokeWidth) {
  const points = spline.vertices;
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokePoints(points, options);
}
function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokeOutlinePoints(setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options), options);
}
function getLineDrawPath(shape, spline, strokeWidth) {
  const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
  return getSvgPathFromPoints(stroke);
}
function getLineIndicatorPath(shape, spline, strokeWidth) {
  if (shape.props.dash === "draw") {
    const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
    return getSvgPathFromStrokePoints(strokePoints);
  }
  return getSvgPathForLineGeometry(spline);
}

// node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeUtil.mjs
var handlesCache = new WeakMapCache();
var LineShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "hideResizeHandles", () => true);
    __publicField(this, "hideRotateHandle", () => true);
    __publicField(this, "hideSelectionBoundsFg", () => true);
    __publicField(this, "hideSelectionBoundsBg", () => true);
    __publicField(this, "onResize", (shape, info) => {
      const { scaleX, scaleY } = info;
      return {
        props: {
          points: mapObjectMapValues(shape.props.points, (_, { id, index: index2, x, y }) => ({
            id,
            index: index2,
            x: x * scaleX,
            y: y * scaleY
          }))
        }
      };
    });
    __publicField(this, "onHandleDrag", (shape, { handle }) => {
      if (handle.type !== "vertex")
        return;
      return {
        ...shape,
        props: {
          ...shape.props,
          points: {
            ...shape.props.points,
            [handle.id]: { id: handle.id, index: handle.index, x: handle.x, y: handle.y }
          }
        }
      };
    });
  }
  getDefaultProps() {
    const [start, end] = getIndices(2);
    return {
      dash: "draw",
      size: "m",
      color: "black",
      spline: "line",
      points: {
        [start]: { id: start, index: start, x: 0, y: 0 },
        [end]: { id: end, index: end, x: 0.1, y: 0.1 }
      }
    };
  }
  getGeometry(shape) {
    return getGeometryForLineShape(shape);
  }
  getHandles(shape) {
    return handlesCache.get(shape.props, () => {
      const spline = getGeometryForLineShape(shape);
      const points = linePointsToArray(shape);
      const results = points.map((point) => ({
        ...point,
        id: point.index,
        type: "vertex",
        canSnap: true
      }));
      for (let i = 0; i < points.length - 1; i++) {
        const index2 = getIndexBetween(points[i].index, points[i + 1].index);
        const segment = spline.segments[i];
        const point = segment.midPoint();
        results.push({
          id: index2,
          type: "create",
          index: index2,
          x: point.x,
          y: point.y,
          canSnap: true
        });
      }
      return results.sort(sortByIndex);
    });
  }
  component(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(SVGContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(LineShapeSvg, { shape }) });
  }
  indicator(shape) {
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    const spline = getGeometryForLineShape(shape);
    const { dash } = shape.props;
    let path;
    if (shape.props.spline === "line") {
      const outline = spline.points;
      if (dash === "solid" || dash === "dotted" || dash === "dashed") {
        path = "M" + outline[0] + "L" + outline.slice(1);
      } else {
        const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
        path = innerPathData;
      }
    } else {
      path = getLineIndicatorPath(shape, spline, strokeWidth);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", { d: path });
  }
  toSvg(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(LineShapeSvg, { shape });
  }
  getHandleSnapGeometry(shape) {
    const points = linePointsToArray(shape);
    return {
      points,
      getSelfSnapPoints: (handle) => {
        const index2 = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
        return points.filter((_, i) => Math.abs(i - index2) > 1).map(Vec.From);
      },
      getSelfSnapOutline: (handle) => {
        const index2 = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
        const segments = getGeometryForLineShape(shape).segments.filter((_, i) => i !== index2 - 1 && i !== index2);
        if (!segments.length)
          return null;
        return new Group2d({ children: segments });
      }
    };
  }
};
__publicField(LineShapeUtil, "type", "line");
__publicField(LineShapeUtil, "props", lineShapeProps);
__publicField(LineShapeUtil, "migrations", lineShapeMigrations);
function linePointsToArray(shape) {
  return Object.values(shape.props.points).sort(sortByIndex);
}
function getGeometryForLineShape(shape) {
  const points = linePointsToArray(shape).map(Vec.From);
  switch (shape.props.spline) {
    case "cubic": {
      return new CubicSpline2d({ points });
    }
    case "line": {
      return new Polyline2d({ points });
    }
  }
}
function LineShapeSvg({ shape }) {
  const theme = useDefaultColorTheme();
  const spline = getGeometryForLineShape(shape);
  const strokeWidth = STROKE_SIZES2[shape.props.size];
  const { dash, color } = shape.props;
  if (shape.props.spline === "line") {
    if (dash === "solid") {
      const outline = spline.points;
      const pathData = "M" + outline[0] + "L" + outline.slice(1);
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: pathData, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", { d: pathData, stroke: theme[color].solid, strokeWidth, fill: "none" })
      ] });
    }
    if (dash === "dashed" || dash === "dotted") {
      const outline = spline.points;
      const pathData = "M" + outline[0] + "L" + outline.slice(1);
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: pathData, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("g", { stroke: theme[color].solid, strokeWidth, children: spline.segments.map((segment, i) => {
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(segment.length, strokeWidth, {
            style: dash,
            start: i > 0 ? "outset" : "none",
            end: i < spline.segments.length - 1 ? "outset" : "none"
          });
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", {
            strokeDasharray,
            strokeDashoffset,
            d: getSvgPathForEdge(segment, true),
            fill: "none"
          }, i);
        }) })
      ] });
    }
    if (dash === "draw") {
      const outline = spline.points;
      const [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: innerPathData, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", {
          d: outerPathData,
          stroke: theme[color].solid,
          strokeWidth,
          fill: "none"
        })
      ] });
    }
  }
  if (shape.props.spline === "cubic") {
    const splinePath = getSvgPathForLineGeometry(spline);
    if (dash === "solid") {
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", { strokeWidth, stroke: theme[color].solid, fill: "none", d: splinePath })
      ] });
    }
    if (dash === "dashed" || dash === "dotted") {
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("g", { stroke: theme[color].solid, strokeWidth, children: spline.segments.map((segment, i) => {
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps2(segment.length, strokeWidth, {
            style: dash,
            start: i > 0 ? "outset" : "none",
            end: i < spline.segments.length - 1 ? "outset" : "none"
          });
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", {
            strokeDasharray,
            strokeDashoffset,
            d: getSvgPathForBezierCurve(segment, true),
            fill: "none"
          }, i);
        }) })
      ] });
    }
    if (dash === "draw") {
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", {
          d: getLineDrawPath(shape, spline, strokeWidth),
          strokeWidth: 1,
          stroke: theme[color].solid,
          fill: theme[color].solid
        })
      ] });
    }
  }
}

// node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeUtil.mjs
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var import_react55 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useTranslation.mjs
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var React27 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/context/asset-urls.mjs
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var import_react54 = __toESM(require_react(), 1);
var AssetUrlsContext = (0, import_react54.createContext)(null);
function AssetUrlsProvider({
  assetUrls,
  children
}) {
  (0, import_react54.useEffect)(() => {
    for (const src of Object.values(assetUrls.icons)) {
      const image = new Image();
      image.src = src;
      image.decode();
    }
    for (const src of Object.values(assetUrls.embedIcons)) {
      const image = new Image();
      image.src = src;
      image.decode();
    }
  }, [assetUrls]);
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(AssetUrlsContext.Provider, { value: assetUrls, children });
}
function useAssetUrls() {
  const assetUrls = (0, import_react54.useContext)(AssetUrlsContext);
  if (!assetUrls) {
    throw new Error("useAssetUrls must be used within an AssetUrlsProvider");
  }
  return assetUrls;
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/defaultTranslation.mjs
var DEFAULT_TRANSLATION = {
  "action.convert-to-bookmark": "Convert to Bookmark",
  "action.convert-to-embed": "Convert to Embed",
  "action.open-embed-link": "Open link",
  "action.align-bottom": "Align bottom",
  "action.align-center-horizontal": "Align horizontally",
  "action.align-center-vertical": "Align vertically",
  "action.align-center-horizontal.short": "Align H",
  "action.align-center-vertical.short": "Align V",
  "action.align-left": "Align left",
  "action.align-right": "Align right",
  "action.align-top": "Align top",
  "action.back-to-content": "Back to content",
  "action.bring-forward": "Bring forward",
  "action.bring-to-front": "Bring to front",
  "action.copy-as-json.short": "JSON",
  "action.copy-as-json": "Copy as JSON",
  "action.copy-as-png.short": "PNG",
  "action.copy-as-png": "Copy as PNG",
  "action.copy-as-svg.short": "SVG",
  "action.copy-as-svg": "Copy as SVG",
  "action.copy": "Copy",
  "action.cut": "Cut",
  "action.delete": "Delete",
  "action.unlock-all": "Unlock all",
  "action.distribute-horizontal": "Distribute horizontally",
  "action.distribute-vertical": "Distribute vertically",
  "action.distribute-horizontal.short": "Distribute H",
  "action.distribute-vertical.short": "Distribute V",
  "action.duplicate": "Duplicate",
  "action.edit-link": "Edit link",
  "action.exit-pen-mode": "Exit pen mode",
  "action.export-as-json.short": "JSON",
  "action.export-as-json": "Export as JSON",
  "action.export-as-png.short": "PNG",
  "action.export-as-png": "Export as PNG",
  "action.export-as-svg.short": "SVG",
  "action.export-as-svg": "Export as SVG",
  "action.export-all-as-json.short": "JSON",
  "action.export-all-as-json": "Export as JSON",
  "action.export-all-as-png.short": "PNG",
  "action.export-all-as-png": "Export as PNG",
  "action.export-all-as-svg.short": "SVG",
  "action.export-all-as-svg": "Export as SVG",
  "action.fit-frame-to-content": "Fit to content",
  "action.flip-horizontal": "Flip horizontally",
  "action.flip-vertical": "Flip vertically",
  "action.flip-horizontal.short": "Flip H",
  "action.flip-vertical.short": "Flip V",
  "action.fork-project": "Fork this project",
  "action.group": "Group",
  "action.insert-embed": "Insert embed",
  "action.insert-media": "Upload media",
  "action.leave-shared-project": "Leave shared project",
  "action.new-project": "New project",
  "action.new-shared-project": "New shared project",
  "action.open-cursor-chat": "Cursor chat",
  "action.open-file": "Open file",
  "action.pack": "Pack",
  "action.paste": "Paste",
  "action.print": "Print",
  "action.redo": "Redo",
  "action.remove-frame": "Remove frame",
  "action.rename": "Rename",
  "action.rotate-ccw": "Rotate counterclockwise",
  "action.rotate-cw": "Rotate clockwise",
  "action.save-copy": "Save a copy",
  "action.select-all": "Select all",
  "action.select-none": "Select none",
  "action.send-backward": "Send backward",
  "action.send-to-back": "Send to back",
  "action.share-project": "Share this project",
  "action.stack-horizontal": "Stack horizontally",
  "action.stack-vertical": "Stack vertically",
  "action.stack-horizontal.short": "Stack H",
  "action.stack-vertical.short": "Stack V",
  "action.stop-following": "Stop following",
  "action.stretch-horizontal": "Stretch horizontally",
  "action.stretch-vertical": "Stretch vertically",
  "action.stretch-horizontal.short": "Stretch H",
  "action.stretch-vertical.short": "Stretch V",
  "action.toggle-auto-size": "Toggle auto size",
  "action.toggle-dark-mode.menu": "Dark mode",
  "action.toggle-dark-mode": "Toggle dark mode",
  "action.toggle-wrap-mode.menu": "Select on wrap",
  "action.toggle-wrap-mode": "Toggle Select on wrap",
  "action.toggle-reduce-motion.menu": "Reduce motion",
  "action.toggle-reduce-motion": "Toggle reduce motion",
  "action.toggle-edge-scrolling.menu": "Edge scrolling",
  "action.toggle-edge-scrolling": "Toggle edge scrolling",
  "action.toggle-debug-mode.menu": "Debug mode",
  "action.toggle-debug-mode": "Toggle debug mode",
  "action.toggle-focus-mode.menu": "Focus mode",
  "action.toggle-focus-mode": "Toggle focus mode",
  "action.toggle-grid.menu": "Show grid",
  "action.toggle-grid": "Toggle grid",
  "action.toggle-lock": "Toggle locked",
  "action.toggle-snap-mode.menu": "Always snap",
  "action.toggle-snap-mode": "Toggle always snap",
  "action.toggle-tool-lock.menu": "Tool lock",
  "action.toggle-tool-lock": "Toggle tool lock",
  "action.toggle-transparent.context-menu": "Transparent",
  "action.toggle-transparent.menu": "Transparent",
  "action.toggle-transparent": "Toggle transparent background",
  "action.undo": "Undo",
  "action.ungroup": "Ungroup",
  "action.zoom-in": "Zoom in",
  "action.zoom-out": "Zoom out",
  "action.zoom-to-100": "Zoom to 100%",
  "action.zoom-to-fit": "Zoom to fit",
  "action.zoom-to-selection": "Zoom to selection",
  "assets.files.upload-failed": "Upload failed",
  "assets.url.failed": "Couldn't load URL preview",
  "color-style.white": "White",
  "color-style.black": "Black",
  "color-style.blue": "Blue",
  "color-style.green": "Green",
  "color-style.grey": "Grey",
  "color-style.light-blue": "Light blue",
  "color-style.light-green": "Light green",
  "color-style.light-red": "Light red",
  "color-style.light-violet": "Light violet",
  "color-style.orange": "Orange",
  "color-style.red": "Red",
  "color-style.violet": "Violet",
  "color-style.yellow": "Yellow",
  "fill-style.none": "None",
  "document.default-name": "Untitled",
  "fill-style.semi": "Semi",
  "fill-style.solid": "Solid",
  "fill-style.pattern": "Pattern",
  "dash-style.dashed": "Dashed",
  "dash-style.dotted": "Dotted",
  "dash-style.draw": "Draw",
  "dash-style.solid": "Solid",
  "size-style.s": "Small",
  "size-style.m": "Medium",
  "size-style.l": "Large",
  "size-style.xl": "Extra large",
  "opacity-style.0.1": "10%",
  "opacity-style.0.25": "25%",
  "opacity-style.0.5": "50%",
  "opacity-style.0.75": "75%",
  "opacity-style.1": "100%",
  "font-style.draw": "Draw",
  "font-style.sans": "Sans",
  "font-style.serif": "Serif",
  "font-style.mono": "Mono",
  "align-style.start": "Start",
  "align-style.middle": "Middle",
  "align-style.end": "End",
  "align-style.justify": "Justify",
  "verticalAlign-style.start": "Top",
  "verticalAlign-style.middle": "Middle",
  "verticalAlign-style.end": "Bottom",
  "geo-style.arrow-down": "Arrow down",
  "geo-style.arrow-left": "Arrow left",
  "geo-style.arrow-right": "Arrow right",
  "geo-style.arrow-up": "Arrow up",
  "geo-style.diamond": "Diamond",
  "geo-style.ellipse": "Ellipse",
  "geo-style.hexagon": "Hexagon",
  "geo-style.octagon": "Octagon",
  "geo-style.oval": "Oval",
  "geo-style.cloud": "Cloud",
  "geo-style.pentagon": "Pentagon",
  "geo-style.rectangle": "Rectangle",
  "geo-style.rhombus-2": "Rhombus 2",
  "geo-style.rhombus": "Rhombus",
  "geo-style.star": "Star",
  "geo-style.trapezoid": "Trapezoid",
  "geo-style.triangle": "Triangle",
  "geo-style.x-box": "X box",
  "geo-style.check-box": "Check box",
  "arrowheadStart-style.none": "None",
  "arrowheadStart-style.arrow": "Arrow",
  "arrowheadStart-style.bar": "Bar",
  "arrowheadStart-style.diamond": "Diamond",
  "arrowheadStart-style.dot": "Dot",
  "arrowheadStart-style.inverted": "Inverted",
  "arrowheadStart-style.pipe": "Pipe",
  "arrowheadStart-style.square": "Square",
  "arrowheadStart-style.triangle": "Triangle",
  "arrowheadEnd-style.none": "None",
  "arrowheadEnd-style.arrow": "Arrow",
  "arrowheadEnd-style.bar": "Bar",
  "arrowheadEnd-style.diamond": "Diamond",
  "arrowheadEnd-style.dot": "Dot",
  "arrowheadEnd-style.inverted": "Inverted",
  "arrowheadEnd-style.pipe": "Pipe",
  "arrowheadEnd-style.square": "Square",
  "arrowheadEnd-style.triangle": "Triangle",
  "spline-style.line": "Line",
  "spline-style.cubic": "Cubic",
  "tool.select": "Select",
  "tool.hand": "Hand",
  "tool.draw": "Draw",
  "tool.eraser": "Eraser",
  "tool.arrow-down": "Arrow down",
  "tool.arrow-left": "Arrow left",
  "tool.arrow-right": "Arrow right",
  "tool.arrow-up": "Arrow up",
  "tool.arrow": "Arrow",
  "tool.cloud": "Cloud",
  "tool.diamond": "Diamond",
  "tool.ellipse": "Ellipse",
  "tool.hexagon": "Hexagon",
  "tool.highlight": "Highlight",
  "tool.line": "Line",
  "tool.octagon": "Octagon",
  "tool.oval": "Oval",
  "tool.pentagon": "Pentagon",
  "tool.rectangle": "Rectangle",
  "tool.rhombus": "Rhombus",
  "tool.star": "Star",
  "tool.trapezoid": "Trapezoid",
  "tool.triangle": "Triangle",
  "tool.x-box": "X box",
  "tool.check-box": "Check box",
  "tool.asset": "Asset",
  "tool.frame": "Frame",
  "tool.note": "Note",
  "tool.laser": "Laser",
  "tool.embed": "Embed",
  "tool.text": "Text",
  "menu.title": "Menu",
  "menu.copy-as": "Copy as",
  "menu.edit": "Edit",
  "menu.export-as": "Export as",
  "menu.file": "File",
  "menu.language": "Language",
  "menu.preferences": "Preferences",
  "menu.view": "View",
  "context-menu.arrange": "Arrange",
  "context-menu.copy-as": "Copy as",
  "context-menu.export-as": "Export as",
  "context-menu.export-all-as": "Export",
  "context-menu.move-to-page": "Move to page",
  "context-menu.reorder": "Reorder",
  "page-menu.title": "Pages",
  "page-menu.create-new-page": "Create new page",
  "page-menu.max-page-count-reached": "Max pages reached",
  "page-menu.new-page-initial-name": "Page 1",
  "page-menu.edit-start": "Edit",
  "page-menu.edit-done": "Done",
  "page-menu.go-to-page": "Go to page",
  "page-menu.submenu.rename": "Rename",
  "page-menu.submenu.duplicate-page": "Duplicate",
  "page-menu.submenu.title": "Menu",
  "page-menu.submenu.move-down": "Move down",
  "page-menu.submenu.move-up": "Move up",
  "page-menu.submenu.delete": "Delete",
  "share-menu.title": "Share",
  "share-menu.save-note": "Download this project to your computer as a .tldr file.",
  "share-menu.fork-note": "Create a new shared project based on this snapshot.",
  "share-menu.share-project": "Share this project",
  "share-menu.default-project-name": "Shared Project",
  "share-menu.copy-link": "Copy share link",
  "share-menu.readonly-link": "Read-only",
  "share-menu.create-snapshot-link": "Copy snapshot link",
  "share-menu.snapshot-link-note": "Capture and share this project as a read-only snapshot link.",
  "share-menu.copy-readonly-link": "Copy read-only link",
  "share-menu.offline-note": "Create a new shared project based on your current project.",
  "share-menu.copy-link-note": "Anyone with the link will be able to view and edit this project.",
  "share-menu.copy-readonly-link-note": "Anyone with the link will be able to view (but not edit) this project.",
  "share-menu.project-too-large": "Sorry, this project can't be shared because it's too large. We're working on it!",
  "share-menu.upload-failed": "Sorry, we couldn't upload your project at the moment. Please try again or let us know if the problem persists.",
  "status.offline": "Offline",
  "status.online": "Online",
  "people-menu.title": "People",
  "people-menu.change-name": "Change name",
  "people-menu.change-color": "Change color",
  "people-menu.follow": "Following",
  "people-menu.following": "Following",
  "people-menu.leading": "Following You",
  "people-menu.user": "(You)",
  "people-menu.invite": "Invite others",
  "help-menu.title": "Help and resources",
  "help-menu.about": "About",
  "help-menu.discord": "Discord",
  "help-menu.github": "GitHub",
  "help-menu.keyboard-shortcuts": "Keyboard shortcuts",
  "help-menu.twitter": "Twitter",
  "actions-menu.title": "Actions",
  "edit-link-dialog.title": "Edit link",
  "edit-link-dialog.invalid-url": "A link must be a valid URL.",
  "edit-link-dialog.detail": "Links will open in a new tab.",
  "edit-link-dialog.url": "URL",
  "edit-link-dialog.clear": "Clear",
  "edit-link-dialog.save": "Continue",
  "edit-link-dialog.cancel": "Cancel",
  "embed-dialog.title": "Insert embed",
  "embed-dialog.back": "Back",
  "embed-dialog.create": "Create",
  "embed-dialog.cancel": "Cancel",
  "embed-dialog.url": "URL",
  "embed-dialog.instruction": "Paste in the site's URL to create the embed.",
  "embed-dialog.invalid-url": "We could not create an embed from that URL.",
  "edit-pages-dialog.move-down": "Move down",
  "edit-pages-dialog.move-up": "Move up",
  "shortcuts-dialog.title": "Keyboard shortcuts",
  "shortcuts-dialog.edit": "Edit",
  "shortcuts-dialog.file": "File",
  "shortcuts-dialog.preferences": "Preferences",
  "shortcuts-dialog.tools": "Tools",
  "shortcuts-dialog.transform": "Transform",
  "shortcuts-dialog.view": "View",
  "shortcuts-dialog.collaboration": "Collaboration",
  "home-project-dialog.title": "Home project",
  "home-project-dialog.description": "This is your local home project. It's just for you!",
  "rename-project-dialog.title": "Rename project",
  "rename-project-dialog.cancel": "Cancel",
  "rename-project-dialog.rename": "Rename",
  "home-project-dialog.ok": "Ok",
  "style-panel.title": "Styles",
  "style-panel.align": "Align",
  "style-panel.vertical-align": "Vertical align",
  "style-panel.position": "Position",
  "style-panel.arrowheads": "Arrows",
  "style-panel.arrowhead-start": "Start",
  "style-panel.arrowhead-end": "End",
  "style-panel.color": "Color",
  "style-panel.dash": "Dash",
  "style-panel.fill": "Fill",
  "style-panel.font": "Font",
  "style-panel.geo": "Shape",
  "style-panel.mixed": "Mixed",
  "style-panel.opacity": "Opacity",
  "style-panel.size": "Size",
  "style-panel.spline": "Spline",
  "tool-panel.drawing": "Drawing",
  "tool-panel.shapes": "Shapes",
  "tool-panel.more": "More",
  "debug-panel.more": "More",
  "navigation-zone.toggle-minimap": "Toggle minimap",
  "navigation-zone.zoom": "Zoom",
  "focus-mode.toggle-focus-mode": "Toggle focus mode",
  "toast.close": "Close",
  "file-system.file-open-error.title": "Could not open file",
  "file-system.file-open-error.not-a-tldraw-file": "The file you tried to open doesn't look like a tldraw file.",
  "file-system.file-open-error.file-format-version-too-new": "The file you tried to open is from a newer version of tldraw. Please reload the page and try again.",
  "file-system.file-open-error.generic-corrupted-file": "The file you tried to open is corrupted.",
  "file-system.confirm-open.title": "Overwrite current project?",
  "file-system.confirm-open.description": "Opening a file will replace your current project and any unsaved changes will be lost. Are you sure you want to continue?",
  "file-system.confirm-open.cancel": "Cancel",
  "file-system.confirm-open.open": "Open file",
  "file-system.confirm-open.dont-show-again": "Don't ask again",
  "file-system.confirm-clear.title": "Clear current project?",
  "file-system.confirm-clear.description": "Creating a new project will clear your current project and any unsaved changes will be lost. Are you sure you want to continue?",
  "file-system.confirm-clear.cancel": "Cancel",
  "file-system.confirm-clear.continue": "Continue",
  "file-system.confirm-clear.dont-show-again": "Don't ask again",
  "file-system.shared-document-file-open-error.title": "Could not open file",
  "file-system.shared-document-file-open-error.description": "Opening files from shared projects is not supported.",
  "sharing.confirm-leave.title": "Leave current project?",
  "sharing.confirm-leave.description": "Are you sure you want to leave this shared project? You can return to it by navigating to its URL.",
  "sharing.confirm-leave.cancel": "Cancel",
  "sharing.confirm-leave.leave": "Leave",
  "sharing.confirm-leave.dont-show-again": "Don't ask again",
  "toast.error.export-fail.title": "Failed export",
  "toast.error.export-fail.desc": "Failed to export image",
  "toast.error.copy-fail.title": "Failed copy",
  "toast.error.copy-fail.desc": "Failed to copy image",
  "context.pages.new-page": "New page",
  "vscode.file-open.desc": "We've updated this document to work with the current version of tldraw. If you'd like to keep the original version (which will work on old.tldraw.com), click below to create a backup.",
  "vscode.file-open.open": "Continue",
  "vscode.file-open.backup": "Backup",
  "vscode.file-open.backup-saved": "Backup saved",
  "vscode.file-open.backup-failed": "Backup failed: this is not a .tldr file.",
  "vscode.file-open.dont-show-again": "Don't ask again",
  "cursor-chat.type-to-chat": "Type to chat..."
};

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/translations.mjs
var RTL_LANGUAGES = /* @__PURE__ */ new Set(["ar", "fa", "he", "ur", "ku"]);
var EN_TRANSLATION = {
  locale: "en",
  label: "English",
  messages: DEFAULT_TRANSLATION,
  dir: "ltr"
};
async function fetchTranslation(locale, assetUrls) {
  const mainRes = await fetch(assetUrls.translations.en);
  if (!mainRes.ok) {
    console.warn(`No main translations found.`);
    return EN_TRANSLATION;
  }
  if (locale === "en") {
    return EN_TRANSLATION;
  }
  const language = LANGUAGES.find((t2) => t2.locale === locale);
  if (!language) {
    console.warn(`No translation found for locale ${locale}`);
    return EN_TRANSLATION;
  }
  const res = await fetch(assetUrls.translations[language.locale]);
  const messages = await res.json();
  if (!messages) {
    console.warn(`No messages found for locale ${locale}`);
    return EN_TRANSLATION;
  }
  const missing = [];
  for (const key in EN_TRANSLATION.messages) {
    if (!messages[key]) {
      missing.push(key);
    }
  }
  if (missing.length > 0 && true) {
    console.warn(`Language ${locale}: missing messages for keys:
${missing.join("\n")}`);
  }
  return {
    locale,
    label: language.label,
    dir: RTL_LANGUAGES.has(language.locale) ? "rtl" : "ltr",
    messages: { ...EN_TRANSLATION.messages, ...messages }
  };
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useTranslation.mjs
var TranslationsContext = React27.createContext({});
var useCurrentTranslation = () => React27.useContext(TranslationsContext);
var TranslationProvider = track(function TranslationProvider2({
  overrides,
  children
}) {
  const editor = useEditor();
  const locale = editor.user.getLocale();
  const getAssetUrl = useAssetUrls();
  const [currentTranslation, setCurrentTranslation] = React27.useState(() => {
    if (overrides && overrides["en"]) {
      return {
        locale: "en",
        label: "English",
        dir: "ltr",
        messages: { ...DEFAULT_TRANSLATION, ...overrides["en"] }
      };
    }
    return {
      locale: "en",
      label: "English",
      dir: "ltr",
      messages: DEFAULT_TRANSLATION
    };
  });
  React27.useEffect(() => {
    let isCancelled = false;
    async function loadTranslation() {
      const translation = await fetchTranslation(locale, getAssetUrl);
      if (translation && !isCancelled) {
        if (overrides && overrides[locale]) {
          setCurrentTranslation({
            ...translation,
            messages: { ...translation.messages, ...overrides[locale] }
          });
        } else {
          setCurrentTranslation(translation);
        }
      }
    }
    loadTranslation();
    return () => {
      isCancelled = true;
    };
  }, [getAssetUrl, locale, overrides]);
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(TranslationsContext.Provider, { value: currentTranslation, children });
});
function useTranslation() {
  const translation = useCurrentTranslation();
  return React27.useCallback(function msg2(id) {
    var _a2;
    return (_a2 = translation.messages[id]) != null ? _a2 : id;
  }, [translation]);
}
function untranslated(string2) {
  return string2;
}

// node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeUtil.mjs
var NoteShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "hideResizeHandles", () => true);
    __publicField(this, "hideSelectionBoundsFg", () => false);
    __publicField(this, "onBeforeCreate", (next) => {
      return getNoteSizeAdjustments(this.editor, next);
    });
    __publicField(this, "onBeforeUpdate", (prev, next) => {
      if (prev.props.text === next.props.text && prev.props.font === next.props.font && prev.props.size === next.props.size) {
        return;
      }
      return getNoteSizeAdjustments(this.editor, next);
    });
    __publicField(this, "onEditEnd", (shape) => {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    });
  }
  getDefaultProps() {
    return {
      color: "black",
      size: "m",
      text: "",
      font: "draw",
      align: "middle",
      verticalAlign: "middle",
      growY: 0,
      fontSizeAdjustment: 0,
      url: ""
    };
  }
  getGeometry(shape) {
    const noteHeight = getNoteHeight(shape);
    const { labelHeight, labelWidth } = getLabelSize2(this.editor, shape);
    return new Group2d({
      children: [
        new Rectangle2d({ width: NOTE_SIZE, height: noteHeight, isFilled: true }),
        new Rectangle2d({
          x: shape.props.align === "start" ? 0 : shape.props.align === "end" ? NOTE_SIZE - labelWidth : (NOTE_SIZE - labelWidth) / 2,
          y: shape.props.verticalAlign === "start" ? 0 : shape.props.verticalAlign === "end" ? noteHeight - labelHeight : (noteHeight - labelHeight) / 2,
          width: labelWidth,
          height: labelHeight,
          isFilled: true,
          isLabel: true
        })
      ]
    });
  }
  getHandles(shape) {
    const zoom = this.editor.getZoomLevel();
    const offset4 = CLONE_HANDLE_MARGIN / zoom;
    const noteHeight = getNoteHeight(shape);
    const isCoarsePointer = this.editor.getInstanceState().isCoarsePointer;
    if (zoom < 0.25 || isCoarsePointer)
      return [];
    if (zoom < 0.5) {
      return [
        {
          id: "bottom",
          index: "a3",
          type: "clone",
          x: NOTE_SIZE / 2,
          y: noteHeight + offset4
        }
      ];
    }
    return [
      {
        id: "top",
        index: "a1",
        type: "clone",
        x: NOTE_SIZE / 2,
        y: -offset4
      },
      {
        id: "right",
        index: "a2",
        type: "clone",
        x: NOTE_SIZE + offset4,
        y: noteHeight / 2
      },
      {
        id: "bottom",
        index: "a3",
        type: "clone",
        x: NOTE_SIZE / 2,
        y: noteHeight + offset4
      },
      {
        id: "left",
        index: "a4",
        type: "clone",
        x: -offset4,
        y: noteHeight / 2
      }
    ];
  }
  component(shape) {
    const {
      id,
      type,
      props: { color, font, size: size4, align, text, verticalAlign, fontSizeAdjustment }
    } = shape;
    const handleKeyDown = useNoteKeydownHandler(id);
    const theme = useDefaultColorTheme();
    const noteHeight = getNoteHeight(shape);
    const rotation = useValue("shape rotation", () => {
      var _a2, _b2;
      return (_b2 = (_a2 = this.editor.getShapePageTransform(id)) == null ? void 0 : _a2.rotation()) != null ? _b2 : 0;
    }, [this.editor]);
    const hideShadows = useForceSolid();
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", {
        id,
        className: "tl-note__container",
        style: {
          width: NOTE_SIZE,
          height: noteHeight,
          backgroundColor: theme[color].note.fill,
          borderBottom: hideShadows ? `3px solid rgb(15, 23, 31, .2)` : `none`,
          boxShadow: hideShadows ? "none" : getNoteShadow(shape.id, rotation)
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TextLabel, {
          id,
          type,
          font,
          fontSize: fontSizeAdjustment || LABEL_FONT_SIZES[size4],
          lineHeight: TEXT_PROPS.lineHeight,
          align,
          verticalAlign,
          text,
          isNote: true,
          isSelected,
          labelColor: theme[color].note.text,
          wrap: true,
          onKeyDown: handleKeyDown
        })
      }),
      "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
    ] });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("rect", {
      rx: "1",
      width: toDomPrecision(NOTE_SIZE),
      height: toDomPrecision(getNoteHeight(shape))
    });
  }
  toSvg(shape, ctx) {
    ctx.addExportDef(getFontDefForExport(shape.props.font));
    if (shape.props.text)
      ctx.addExportDef(getFontDefForExport(shape.props.font));
    const theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode });
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("rect", { x: 5, y: 5, rx: 1, width: NOTE_SIZE - 10, height: bounds.h, fill: "rgba(0,0,0,.1)" }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("rect", {
        rx: 1,
        width: NOTE_SIZE,
        height: bounds.h,
        fill: theme[shape.props.color].note.fill
      }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(SvgTextLabel, {
        fontSize: shape.props.fontSizeAdjustment || LABEL_FONT_SIZES[shape.props.size],
        font: shape.props.font,
        align: shape.props.align,
        verticalAlign: shape.props.verticalAlign,
        text: shape.props.text,
        labelColor: theme[shape.props.color].note.text,
        bounds,
        stroke: false
      })
    ] });
  }
};
__publicField(NoteShapeUtil, "type", "note");
__publicField(NoteShapeUtil, "props", noteShapeProps);
__publicField(NoteShapeUtil, "migrations", noteShapeMigrations);
function getNoteSizeAdjustments(editor, shape) {
  const { labelHeight, fontSizeAdjustment } = getLabelSize2(editor, shape);
  const growY = Math.max(0, labelHeight - NOTE_SIZE);
  if (growY !== shape.props.growY || fontSizeAdjustment !== shape.props.fontSizeAdjustment) {
    return {
      ...shape,
      props: {
        ...shape.props,
        growY,
        fontSizeAdjustment
      }
    };
  }
}
function getNoteLabelSize(editor, shape) {
  const text = shape.props.text;
  if (!text) {
    const minHeight = LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2;
    return { labelHeight: minHeight, labelWidth: 100, fontSizeAdjustment: 0 };
  }
  const unadjustedFontSize = LABEL_FONT_SIZES[shape.props.size];
  let fontSizeAdjustment = 0;
  let iterations = 0;
  let labelHeight = NOTE_SIZE;
  let labelWidth = NOTE_SIZE;
  const FUZZ = 1;
  do {
    fontSizeAdjustment = Math.min(unadjustedFontSize, unadjustedFontSize - iterations);
    const nextTextSize = editor.textMeasure.measureText(text, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[shape.props.font],
      fontSize: fontSizeAdjustment,
      maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ,
      disableOverflowWrapBreaking: true
    });
    labelHeight = nextTextSize.h + LABEL_PADDING * 2;
    labelWidth = nextTextSize.w + LABEL_PADDING * 2;
    if (fontSizeAdjustment <= 14) {
      const nextTextSizeWithOverflowBreak = editor.textMeasure.measureText(text, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[shape.props.font],
        fontSize: fontSizeAdjustment,
        maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ
      });
      labelHeight = nextTextSizeWithOverflowBreak.h + LABEL_PADDING * 2;
      labelWidth = nextTextSizeWithOverflowBreak.w + LABEL_PADDING * 2;
      break;
    }
    if (nextTextSize.scrollWidth.toFixed(0) === nextTextSize.w.toFixed(0)) {
      break;
    }
  } while (iterations++ < 50);
  return {
    labelHeight,
    labelWidth,
    fontSizeAdjustment
  };
}
var labelSizesForNote = new WeakMapCache();
function getLabelSize2(editor, shape) {
  return labelSizesForNote.get(shape, () => getNoteLabelSize(editor, shape));
}
function useNoteKeydownHandler(id) {
  const editor = useEditor();
  const translation = useCurrentTranslation();
  return (0, import_react55.useCallback)((e) => {
    const shape = editor.getShape(id);
    if (!shape)
      return;
    const isTab = e.key === "Tab";
    const isCmdEnter = (e.metaKey || e.ctrlKey) && e.key === "Enter";
    if (isTab || isCmdEnter) {
      e.preventDefault();
      const pageTransform = editor.getShapePageTransform(id);
      const pageRotation = pageTransform.rotation();
      const isRTL2 = !!(translation.dir === "rtl" || isRightToLeftLanguage(shape.props.text));
      const offsetLength = NOTE_SIZE + ADJACENT_NOTE_MARGIN + (isCmdEnter && !e.shiftKey ? shape.props.growY : 0);
      const adjacentCenter = new Vec(isTab ? e.shiftKey != isRTL2 ? -1 : 1 : 0, isCmdEnter ? e.shiftKey ? -1 : 1 : 0).mul(offsetLength).add(NOTE_CENTER_OFFSET).rot(pageRotation).add(pageTransform.point());
      const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation);
      if (newNote) {
        editor.mark("editing adjacent shape");
        startEditingShapeWithLabel(editor, newNote, true);
      }
    }
  }, [id, editor, translation.dir]);
}
function getNoteHeight(shape) {
  return NOTE_SIZE + shape.props.growY;
}
function getNoteShadow(id, rotation) {
  const random = rng(id);
  const lift = Math.abs(random()) + 0.5;
  const oy = Math.cos(rotation);
  return `0px ${5 - lift}px 5px -5px rgba(15, 23, 31, .6),
	0px ${(4 + lift * 7) * Math.max(0, oy)}px ${6 + lift * 7}px -${4 + lift * 6}px rgba(15, 23, 31, ${(0.3 + lift * 0.1).toFixed(2)}), 
	0px 48px 10px -10px inset rgba(15, 23, 44, ${((0.022 + random() * 5e-3) * ((1 + oy) / 2)).toFixed(2)})`;
}

// node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeUtil.mjs
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var import_react56 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/shapes/shared/resizeScaled.mjs
function resizeScaled(shape, {
  initialBounds,
  scaleX,
  scaleY,
  newPoint
}) {
  const scaleDelta = Math.max(0.01, Math.min(Math.abs(scaleX), Math.abs(scaleY)));
  const offset4 = new Vec(0, 0);
  if (scaleX < 0) {
    offset4.x = -(initialBounds.width * scaleDelta);
  }
  if (scaleY < 0) {
    offset4.y = -(initialBounds.height * scaleDelta);
  }
  const { x, y } = Vec.Add(newPoint, offset4.rot(shape.rotation));
  return {
    x,
    y,
    props: {
      scale: scaleDelta * shape.props.scale
    }
  };
}

// node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeUtil.mjs
var sizeCache = new WeakMapCache();
var TextShapeUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "isAspectRatioLocked", () => true);
    __publicField(this, "onResize", (shape, info) => {
      const { initialBounds, initialShape, scaleX, handle } = info;
      if (info.mode === "scale_shape" || handle !== "right" && handle !== "left") {
        return {
          id: shape.id,
          type: shape.type,
          ...resizeScaled(shape, info)
        };
      } else {
        const prevWidth = initialBounds.width;
        let nextWidth = prevWidth * scaleX;
        const offset4 = new Vec(0, 0);
        nextWidth = Math.max(1, Math.abs(nextWidth));
        if (handle === "left") {
          offset4.x = prevWidth - nextWidth;
          if (scaleX < 0) {
            offset4.x += nextWidth;
          }
        } else {
          if (scaleX < 0) {
            offset4.x -= nextWidth;
          }
        }
        const { x, y } = offset4.rot(shape.rotation).add(initialShape);
        return {
          id: shape.id,
          type: shape.type,
          x,
          y,
          props: {
            w: nextWidth / initialShape.props.scale,
            autoSize: false
          }
        };
      }
    });
    __publicField(this, "onBeforeCreate", (shape) => {
      if (!shape.props.autoSize)
        return;
      if (shape.props.text.trim())
        return;
      const bounds = this.getMinDimensions(shape);
      return {
        ...shape,
        x: shape.x - bounds.width / 2,
        y: shape.y - bounds.height / 2
      };
    });
    __publicField(this, "onEditEnd", (shape) => {
      const {
        id,
        type,
        props: { text }
      } = shape;
      const trimmedText = shape.props.text.trimEnd();
      if (trimmedText.length === 0) {
        this.editor.deleteShapes([shape.id]);
      } else {
        if (trimmedText !== shape.props.text) {
          this.editor.updateShapes([
            {
              id,
              type,
              props: {
                text: text.trimEnd()
              }
            }
          ]);
        }
      }
    });
    __publicField(this, "onBeforeUpdate", (prev, next) => {
      if (!next.props.autoSize)
        return;
      const styleDidChange = prev.props.size !== next.props.size || prev.props.align !== next.props.align || prev.props.font !== next.props.font || prev.props.scale !== 1 && next.props.scale === 1;
      const textDidChange = prev.props.text !== next.props.text;
      if (!styleDidChange && !textDidChange)
        return;
      const boundsA = this.getMinDimensions(prev);
      const boundsB = getTextSize(this.editor, next.props);
      const wA = boundsA.width * prev.props.scale;
      const hA = boundsA.height * prev.props.scale;
      const wB = boundsB.width * next.props.scale;
      const hB = boundsB.height * next.props.scale;
      let delta;
      switch (next.props.align) {
        case "middle": {
          delta = new Vec((wB - wA) / 2, textDidChange ? 0 : (hB - hA) / 2);
          break;
        }
        case "end": {
          delta = new Vec(wB - wA, textDidChange ? 0 : (hB - hA) / 2);
          break;
        }
        default: {
          if (textDidChange)
            break;
          delta = new Vec(0, (hB - hA) / 2);
          break;
        }
      }
      if (delta) {
        delta.rot(next.rotation);
        const { x, y } = next;
        return {
          ...next,
          x: x - delta.x,
          y: y - delta.y,
          props: { ...next.props, w: wB }
        };
      } else {
        return {
          ...next,
          props: { ...next.props, w: wB }
        };
      }
    });
    __publicField(this, "onDoubleClickEdge", (shape) => {
      if (!shape.props.autoSize) {
        return {
          id: shape.id,
          type: shape.type,
          props: {
            autoSize: true
          }
        };
      }
      if (shape.props.scale !== 1) {
        return {
          id: shape.id,
          type: shape.type,
          props: {
            scale: 1
          }
        };
      }
    });
  }
  getDefaultProps() {
    return {
      color: "black",
      size: "m",
      w: 8,
      text: "",
      font: "draw",
      align: "middle",
      autoSize: true,
      scale: 1
    };
  }
  getMinDimensions(shape) {
    return sizeCache.get(shape.props, (props) => getTextSize(this.editor, props));
  }
  getGeometry(shape) {
    const { scale } = shape.props;
    const { width, height } = this.getMinDimensions(shape);
    return new Rectangle2d({
      width: width * scale,
      height: height * scale,
      isFilled: true,
      isLabel: true
    });
  }
  component(shape) {
    const {
      id,
      props: { font, size: size4, text, color, scale, align }
    } = shape;
    const { width, height } = this.getMinDimensions(shape);
    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
    const theme = useDefaultColorTheme();
    const handleKeyDown = useTextShapeKeydownHandler(id);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(TextLabel, {
      id,
      classNamePrefix: "tl-text-shape",
      type: "text",
      font,
      fontSize: FONT_SIZES[size4],
      lineHeight: TEXT_PROPS.lineHeight,
      align,
      verticalAlign: "middle",
      text,
      labelColor: theme[color].solid,
      isSelected,
      textWidth: width,
      textHeight: height,
      style: {
        transform: `scale(${scale})`,
        transformOrigin: "top left"
      },
      wrap: true,
      onKeyDown: handleKeyDown
    });
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const editor = useEditor();
    if (shape.props.autoSize && editor.getEditingShapeId() === shape.id)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("rect", { width: toDomPrecision(bounds.width), height: toDomPrecision(bounds.height) });
  }
  toSvg(shape, ctx) {
    var _a2, _b2;
    ctx.addExportDef(getFontDefForExport(shape.props.font));
    if (shape.props.text)
      ctx.addExportDef(getFontDefForExport(shape.props.font));
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const width = bounds.width / ((_a2 = shape.props.scale) != null ? _a2 : 1);
    const height = bounds.height / ((_b2 = shape.props.scale) != null ? _b2 : 1);
    const theme = getDefaultColorTheme(ctx);
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(SvgTextLabel, {
      fontSize: FONT_SIZES[shape.props.size],
      font: shape.props.font,
      align: shape.props.align,
      verticalAlign: "middle",
      text: shape.props.text,
      labelColor: theme[shape.props.color].solid,
      bounds: new Box(0, 0, width, height),
      padding: 0
    });
  }
};
__publicField(TextShapeUtil, "type", "text");
__publicField(TextShapeUtil, "props", textShapeProps);
__publicField(TextShapeUtil, "migrations", textShapeMigrations);
function getTextSize(editor, props) {
  const { font, text, autoSize, size: size4, w } = props;
  const minWidth = autoSize ? 16 : Math.max(16, w);
  const fontSize = FONT_SIZES[size4];
  const cw = autoSize ? null : Math.floor(Math.max(minWidth, w));
  const result = editor.textMeasure.measureText(text, {
    ...TEXT_PROPS,
    fontFamily: FONT_FAMILIES[font],
    fontSize,
    maxWidth: cw
  });
  if (autoSize) {
    result.w += 1;
  }
  return {
    width: Math.max(minWidth, result.w),
    height: Math.max(fontSize, result.h)
  };
}
function useTextShapeKeydownHandler(id) {
  const editor = useEditor();
  return (0, import_react56.useCallback)((e) => {
    if (editor.getEditingShapeId() !== id)
      return;
    switch (e.key) {
      case "Enter": {
        if (e.ctrlKey || e.metaKey) {
          editor.complete();
        }
        break;
      }
      case "Tab": {
        preventDefault(e);
        if (e.shiftKey) {
          TextHelpers.unindent(e.currentTarget);
        } else {
          TextHelpers.indent(e.currentTarget);
        }
        break;
      }
    }
  }, [editor, id]);
}

// node_modules/tldraw/dist-esm/lib/shapes/video/VideoShapeUtil.mjs
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var import_react57 = __toESM(require_react(), 1);
var VideoShapeUtil = class extends BaseBoxShapeUtil {
  constructor() {
    super(...arguments);
    __publicField(this, "canEdit", () => true);
    __publicField(this, "isAspectRatioLocked", () => true);
  }
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      assetId: null,
      time: 0,
      playing: true,
      url: ""
    };
  }
  component(shape) {
    const { editor } = this;
    const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110;
    const asset = shape.props.assetId ? editor.getAsset(shape.props.assetId) : null;
    const { time: time2, playing } = shape.props;
    const isEditing = useIsEditing(shape.id);
    const prefersReducedMotion = usePrefersReducedMotion();
    const rVideo = (0, import_react57.useRef)(null);
    const handlePlay = (0, import_react57.useCallback)((e) => {
      const video = e.currentTarget;
      if (!video)
        return;
      editor.updateShapes([
        {
          type: "video",
          id: shape.id,
          props: {
            playing: true,
            time: video.currentTime
          }
        }
      ]);
    }, [shape.id, editor]);
    const handlePause = (0, import_react57.useCallback)((e) => {
      const video = e.currentTarget;
      if (!video)
        return;
      editor.updateShapes([
        {
          type: "video",
          id: shape.id,
          props: {
            playing: false,
            time: video.currentTime
          }
        }
      ]);
    }, [shape.id, editor]);
    const handleSetCurrentTime = (0, import_react57.useCallback)((e) => {
      const video = e.currentTarget;
      if (!video)
        return;
      if (isEditing) {
        editor.updateShapes([
          {
            type: "video",
            id: shape.id,
            props: {
              time: video.currentTime
            }
          }
        ]);
      }
    }, [isEditing, shape.id, editor]);
    const [isLoaded, setIsLoaded] = (0, import_react57.useState)(false);
    const handleLoadedData = (0, import_react57.useCallback)((e) => {
      const video = e.currentTarget;
      if (!video)
        return;
      if (time2 !== video.currentTime) {
        video.currentTime = time2;
      }
      if (!playing) {
        video.pause();
      }
      setIsLoaded(true);
    }, [playing, time2]);
    (0, import_react57.useEffect)(() => {
      const video = rVideo.current;
      if (!video)
        return;
      if (isLoaded && !isEditing && time2 !== video.currentTime) {
        video.currentTime = time2;
      }
      if (isEditing) {
        if (document.activeElement !== video) {
          video.focus();
        }
      }
    }, [isEditing, isLoaded, time2]);
    (0, import_react57.useEffect)(() => {
      if (prefersReducedMotion) {
        const video = rVideo.current;
        if (!video)
          return;
        video.pause();
        video.currentTime = 0;
      }
    }, [rVideo, prefersReducedMotion]);
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_jsx_runtime71.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(HTMLContainer, {
        id: shape.id,
        style: {
          color: "var(--color-text-3)",
          backgroundColor: asset ? "transparent" : "var(--color-low)",
          border: asset ? "none" : "1px solid var(--color-low-border)"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "tl-counter-scaled", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "tl-video-container", children: (asset == null ? void 0 : asset.props.src) ? /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("video", {
          ref: rVideo,
          style: isEditing ? { pointerEvents: "all" } : void 0,
          className: `tl-video tl-video-shape-${shape.id.split(":")[1]}`,
          width: "100%",
          height: "100%",
          draggable: false,
          playsInline: true,
          autoPlay: true,
          muted: true,
          loop: true,
          disableRemotePlayback: true,
          disablePictureInPicture: true,
          controls: isEditing && showControls,
          onPlay: handlePlay,
          onPause: handlePause,
          onTimeUpdate: handleSetCurrentTime,
          onLoadedData: handleLoadedData,
          hidden: !isLoaded,
          children: /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("source", { src: asset.props.src })
        }) : /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(BrokenAssetIcon, {}) }) })
      }),
      "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: editor.getZoomLevel() })
    ] });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
  }
  toSvg(shape) {
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("image", { href: serializeVideo(shape.id), width: shape.props.w, height: shape.props.h });
  }
};
__publicField(VideoShapeUtil, "type", "video");
__publicField(VideoShapeUtil, "props", videoShapeProps);
__publicField(VideoShapeUtil, "migrations", videoShapeMigrations);
function serializeVideo(id) {
  const splitId = id.split(":")[1];
  const video = document.querySelector(`.tl-video-shape-${splitId}`);
  if (video) {
    const canvas = document.createElement("canvas");
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext("2d").drawImage(video, 0, 0);
    return canvas.toDataURL("image/png");
  } else
    throw new Error("Video with not found when attempting serialization.");
}

// node_modules/tldraw/dist-esm/lib/defaultShapeUtils.mjs
var defaultShapeUtils = [
  TextShapeUtil,
  BookmarkShapeUtil,
  DrawShapeUtil,
  GeoShapeUtil,
  NoteShapeUtil,
  LineShapeUtil,
  FrameShapeUtil,
  ArrowShapeUtil,
  HighlightShapeUtil,
  EmbedShapeUtil,
  ImageShapeUtil,
  VideoShapeUtil
];

// node_modules/tldraw/dist-esm/lib/defaultSideEffects.mjs
function registerDefaultSideEffects(editor) {
  return [
    editor.sideEffects.registerAfterChangeHandler("instance", (prev, next) => {
      if (prev.isFocused !== next.isFocused) {
        if (next.isFocused) {
          editor.getContainer().focus();
        } else {
          editor.complete();
          editor.getContainer().blur();
        }
      }
    }),
    editor.sideEffects.registerAfterChangeHandler("instance_page_state", (prev, next) => {
      if (prev.croppingShapeId !== next.croppingShapeId) {
        const isInCroppingState = editor.isInAny("select.crop", "select.pointing_crop_handle", "select.cropping");
        if (!prev.croppingShapeId && next.croppingShapeId) {
          if (!isInCroppingState) {
            editor.setCurrentTool("select.crop.idle");
          }
        } else if (prev.croppingShapeId && !next.croppingShapeId) {
          if (isInCroppingState) {
            editor.setCurrentTool("select.idle");
          }
        }
      }
      if (prev.editingShapeId !== next.editingShapeId) {
        if (!prev.editingShapeId && next.editingShapeId) {
          if (!editor.isIn("select.editing_shape")) {
            editor.setCurrentTool("select.editing_shape");
          }
        } else if (prev.editingShapeId && !next.editingShapeId) {
          if (editor.isIn("select.editing_shape")) {
            editor.setCurrentTool("select.idle");
          }
        }
      }
    })
  ];
}

// node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Erasing.mjs
var Erasing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "scribbleId", "id");
    __publicField(this, "markId", "");
    __publicField(this, "excludedShapeIds", /* @__PURE__ */ new Set());
    __publicField(this, "onEnter", (info) => {
      this.markId = "erase scribble begin";
      this.editor.mark(this.markId);
      this.info = info;
      const { originPagePoint } = this.editor.inputs;
      this.excludedShapeIds = new Set(this.editor.getCurrentPageShapes().filter((shape) => {
        if (this.editor.isShapeOrAncestorLocked(shape))
          return true;
        if (this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOfType(shape, "frame")) {
          const pointInShapeShape = this.editor.getPointInShapeSpace(shape, originPagePoint);
          const geometry = this.editor.getShapeGeometry(shape);
          return geometry.bounds.containsPoint(pointInShapeShape);
        }
        return false;
      }).map((shape) => shape.id));
      const scribble = this.editor.scribbles.addScribble({
        color: "muted-1",
        size: 12
      });
      this.scribbleId = scribble.id;
      this.update();
    });
    __publicField(this, "pushPointToScribble", () => {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    });
    __publicField(this, "onExit", () => {
      this.editor.scribbles.stop(this.scribbleId);
    });
    __publicField(this, "onPointerMove", () => {
      this.update();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
  }
  update() {
    const { editor, excludedShapeIds } = this;
    const erasingShapeIds = editor.getErasingShapeIds();
    const zoomLevel = editor.getZoomLevel();
    const currentPageShapes = editor.getCurrentPageShapes();
    const {
      inputs: { currentPagePoint, previousPagePoint }
    } = editor;
    this.pushPointToScribble();
    const erasing = new Set(erasingShapeIds);
    const minDist = HIT_TEST_MARGIN / zoomLevel;
    for (const shape of currentPageShapes) {
      if (editor.isShapeOfType(shape, "group"))
        continue;
      const pageMask = editor.getShapeMask(shape.id);
      if (pageMask && !pointInPolygon(currentPagePoint, pageMask)) {
        continue;
      }
      const geometry = editor.getShapeGeometry(shape);
      const pageTransform = editor.getShapePageTransform(shape);
      if (!geometry || !pageTransform)
        continue;
      const pt = pageTransform.clone().invert();
      const A = pt.applyToPoint(previousPagePoint);
      const B = pt.applyToPoint(currentPagePoint);
      const { bounds } = geometry;
      if (bounds.minX - minDist > Math.max(A.x, B.x) || bounds.minY - minDist > Math.max(A.y, B.y) || bounds.maxX + minDist < Math.min(A.x, B.x) || bounds.maxY + minDist < Math.min(A.y, B.y)) {
        continue;
      }
      if (geometry.hitTestLineSegment(A, B, minDist)) {
        erasing.add(editor.getOutermostSelectableShape(shape).id);
      }
    }
    this.editor.setErasingShapes([...erasing].filter((id) => !excludedShapeIds.has(id)));
  }
  complete() {
    const { editor } = this;
    editor.deleteShapes(editor.getCurrentPageState().erasingShapeIds);
    editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
  cancel() {
    const { editor } = this;
    editor.setErasingShapes([]);
    editor.bailToMark(this.markId);
    this.parent.transition("idle", this.info);
  }
};
__publicField(Erasing, "id", "erasing");

// node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Idle.mjs
var Idle8 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle8, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Pointing.mjs
var Pointing7 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      const zoomLevel = this.editor.getZoomLevel();
      const currentPageShapesSorted = this.editor.getCurrentPageShapesSorted();
      const {
        inputs: { currentPagePoint }
      } = this.editor;
      const erasing = /* @__PURE__ */ new Set();
      const initialSize = erasing.size;
      for (let n = currentPageShapesSorted.length, i = n - 1; i >= 0; i--) {
        const shape = currentPageShapesSorted[i];
        if (this.editor.isShapeOrAncestorLocked(shape) || this.editor.isShapeOfType(shape, "group")) {
          continue;
        }
        if (this.editor.isPointInShape(shape, currentPagePoint, {
          hitInside: false,
          margin: HIT_TEST_MARGIN / zoomLevel
        })) {
          const hitShape = this.editor.getOutermostSelectableShape(shape);
          if (this.editor.isShapeOfType(hitShape, "frame") && erasing.size > initialSize) {
            break;
          }
          erasing.add(hitShape.id);
        }
      }
      this.editor.setErasingShapes([...erasing]);
    });
    __publicField(this, "onLongPress", (info) => {
      this.startErasing(info);
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        this.startErasing(info);
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  startErasing(info) {
    this.parent.transition("erasing", info);
  }
  complete() {
    const erasingShapeIds = this.editor.getErasingShapeIds();
    if (erasingShapeIds.length) {
      this.editor.mark("erase end");
      this.editor.deleteShapes(erasingShapeIds);
    }
    this.editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
};
__publicField(Pointing7, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/tools/EraserTool/EraserTool.mjs
var EraserTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
  }
};
__publicField(EraserTool, "id", "eraser");
__publicField(EraserTool, "initial", "idle");
__publicField(EraserTool, "children", () => [Idle8, Pointing7, Erasing]);

// node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Dragging.mjs
var Dragging = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "initialCamera", new Vec());
    __publicField(this, "onEnter", () => {
      this.initialCamera = Vec.From(this.editor.getCamera());
      this.update();
    });
    __publicField(this, "onPointerMove", () => {
      this.update();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.parent.transition("idle");
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
  }
  update() {
    const { initialCamera, editor } = this;
    const { currentScreenPoint, originScreenPoint } = editor.inputs;
    const delta = Vec.Sub(currentScreenPoint, originScreenPoint).div(editor.getZoomLevel());
    if (delta.len2() === 0)
      return;
    editor.setCamera(initialCamera.clone().add(delta));
  }
  complete() {
    const { editor } = this;
    const { pointerVelocity } = editor.inputs;
    const velocityAtPointerUp = Math.min(pointerVelocity.len(), 2);
    if (velocityAtPointerUp > 0.1) {
      this.editor.slideCamera({
        speed: velocityAtPointerUp,
        direction: pointerVelocity,
        friction: CAMERA_SLIDE_FRICTION
      });
    }
    this.parent.transition("idle");
  }
};
__publicField(Dragging, "id", "dragging");

// node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Idle.mjs
var Idle9 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "grab", rotation: 0 });
    });
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("pointing", info);
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select");
    });
  }
};
__publicField(Idle9, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Pointing.mjs
var Pointing8 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.editor.stopCameraAnimation();
      this.editor.updateInstanceState({ cursor: { type: "grabbing", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onLongPress", () => {
      this.startDragging();
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        this.startDragging();
      }
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.complete();
    });
  }
  startDragging() {
    this.parent.transition("dragging");
  }
  complete() {
    this.parent.transition("idle");
  }
};
__publicField(Pointing8, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/tools/HandTool/HandTool.mjs
var HandTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onDoubleClick", (info) => {
      if (info.phase === "settle") {
        const { currentScreenPoint } = this.editor.inputs;
        this.editor.zoomIn(currentScreenPoint, { duration: 220, easing: EASINGS.easeOutQuint });
      }
    });
    __publicField(this, "onTripleClick", (info) => {
      if (info.phase === "settle") {
        const { currentScreenPoint } = this.editor.inputs;
        this.editor.zoomOut(currentScreenPoint, { duration: 320, easing: EASINGS.easeOutQuint });
      }
    });
    __publicField(this, "onQuadrupleClick", (info) => {
      if (info.phase === "settle") {
        const zoomLevel = this.editor.getZoomLevel();
        const {
          inputs: { currentScreenPoint }
        } = this.editor;
        if (zoomLevel === 1) {
          this.editor.zoomToFit({ duration: 400, easing: EASINGS.easeOutQuint });
        } else {
          this.editor.resetZoom(currentScreenPoint, { duration: 320, easing: EASINGS.easeOutQuint });
        }
      }
    });
  }
};
__publicField(HandTool, "id", "hand");
__publicField(HandTool, "initial", "idle");
__publicField(HandTool, "children", () => [Idle9, Pointing8, Dragging]);

// node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Idle.mjs
var Idle10 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onPointerDown", (info) => {
      this.parent.transition("lasering", info);
    });
  }
};
__publicField(Idle10, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Lasering.mjs
var Lasering = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "scribbleId", "id");
    __publicField(this, "onEnter", () => {
      const scribble = this.editor.scribbles.addScribble({
        color: "laser",
        opacity: 0.7,
        size: 4,
        delay: 1200,
        shrink: 0.05,
        taper: true
      });
      this.scribbleId = scribble.id;
      this.pushPointToScribble();
    });
    __publicField(this, "onExit", () => {
      this.editor.scribbles.stop(this.scribbleId);
    });
    __publicField(this, "onPointerMove", () => {
      this.pushPointToScribble();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "pushPointToScribble", () => {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
  }
  complete() {
    this.parent.transition("idle");
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(Lasering, "id", "lasering");

// node_modules/tldraw/dist-esm/lib/tools/LaserTool/LaserTool.mjs
var LaserTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    });
  }
};
__publicField(LaserTool, "id", "laser");
__publicField(LaserTool, "initial", "idle");
__publicField(LaserTool, "children", () => [Idle10, Lasering]);

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Brushing.mjs
var Brushing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "initialSelectedShapeIds", []);
    __publicField(this, "excludedShapeIds", /* @__PURE__ */ new Set());
    __publicField(this, "isWrapMode", false);
    __publicField(this, "initialStartShape", null);
    __publicField(this, "onEnter", (info) => {
      const { altKey: altKey2, currentPagePoint } = this.editor.inputs;
      this.isWrapMode = this.editor.user.getIsWrapMode();
      if (altKey2) {
        this.parent.transition("scribble_brushing", info);
        return;
      }
      this.excludedShapeIds = new Set(this.editor.getCurrentPageShapes().filter((shape) => this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOrAncestorLocked(shape)).map((shape) => shape.id));
      this.info = info;
      this.initialSelectedShapeIds = this.editor.getSelectedShapeIds().slice();
      this.initialStartShape = this.editor.getShapesAtPoint(currentPagePoint)[0];
      this.hitTestShapes();
    });
    __publicField(this, "onExit", () => {
      this.initialSelectedShapeIds = [];
      this.editor.updateInstanceState({ brush: null });
    });
    __publicField(this, "onTick", () => {
      moveCameraWhenCloseToEdge(this.editor);
    });
    __publicField(this, "onPointerMove", () => {
      this.hitTestShapes();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", (info) => {
      this.editor.setSelectedShapes(this.initialSelectedShapeIds, { squashing: true });
      this.parent.transition("idle", info);
    });
    __publicField(this, "onKeyDown", (info) => {
      if (this.editor.inputs.altKey) {
        this.parent.transition("scribble_brushing", info);
      } else {
        this.hitTestShapes();
      }
    });
    __publicField(this, "onKeyUp", () => {
      this.hitTestShapes();
    });
    __publicField(this, "onInterrupt", () => {
      this.editor.updateInstanceState({ brush: null });
    });
  }
  complete() {
    this.hitTestShapes();
    this.parent.transition("idle");
  }
  hitTestShapes() {
    const { editor, excludedShapeIds, isWrapMode } = this;
    const {
      inputs: { originPagePoint, currentPagePoint, shiftKey, ctrlKey }
    } = editor;
    const results = new Set(shiftKey ? this.initialSelectedShapeIds : []);
    const isWrapping = isWrapMode ? !ctrlKey : ctrlKey;
    const brush = Box.FromPoints([originPagePoint, currentPagePoint]);
    const { corners } = brush;
    let A, B, shape, pageBounds, pageTransform, localCorners;
    const currentPageShapes = editor.getCurrentPageShapes();
    const currentPageId = editor.getCurrentPageId();
    testAllShapes:
      for (let i = 0, n = currentPageShapes.length; i < n; i++) {
        shape = currentPageShapes[i];
        if (excludedShapeIds.has(shape.id) || results.has(shape.id))
          continue testAllShapes;
        pageBounds = editor.getShapePageBounds(shape);
        if (!pageBounds)
          continue testAllShapes;
        if (brush.contains(pageBounds)) {
          this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
          continue testAllShapes;
        }
        if (isWrapping || editor.isShapeOfType(shape, "frame")) {
          continue testAllShapes;
        }
        if (brush.collides(pageBounds)) {
          pageTransform = editor.getShapePageTransform(shape);
          if (!pageTransform)
            continue testAllShapes;
          localCorners = pageTransform.clone().invert().applyToPoints(corners);
          const geometry = editor.getShapeGeometry(shape);
          hitTestBrushEdges:
            for (let i2 = 0; i2 < 4; i2++) {
              A = localCorners[i2];
              B = localCorners[(i2 + 1) % 4];
              if (geometry.hitTestLineSegment(A, B, 0)) {
                this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
                break hitTestBrushEdges;
              }
            }
        }
      }
    editor.getInstanceState().isCoarsePointer;
    const currentBrush = editor.getInstanceState().brush;
    if (!currentBrush || !brush.equals(currentBrush)) {
      editor.updateInstanceState({ brush: { ...brush.toJson() } });
    }
    const current2 = editor.getSelectedShapeIds();
    if (current2.length !== results.size || current2.some((id) => !results.has(id))) {
      editor.setSelectedShapes(Array.from(results), { squashing: true });
    }
  }
  handleHit(shape, currentPagePoint, currentPageId, results, corners) {
    if (shape.parentId === currentPageId) {
      results.add(shape.id);
      return;
    }
    const selectedShape = this.editor.getOutermostSelectableShape(shape);
    const pageMask = this.editor.getShapeMask(selectedShape.id);
    if (pageMask && !polygonsIntersect(pageMask, corners) && !pointInPolygon(currentPagePoint, pageMask)) {
      return;
    }
    results.add(selectedShape.id);
  }
};
__publicField(Brushing, "id", "brushing");

// node_modules/tldraw/dist-esm/lib/tools/selection-logic/getHitShapeOnCanvasPointerDown.mjs
function getHitShapeOnCanvasPointerDown(editor, hitLabels = false) {
  var _a2;
  const zoomLevel = editor.getZoomLevel();
  const {
    inputs: { currentPagePoint }
  } = editor;
  return (_a2 = editor.getShapeAtPoint(currentPagePoint, {
    hitInside: false,
    hitLabels,
    margin: HIT_TEST_MARGIN / zoomLevel,
    renderingOnly: true
  })) != null ? _a2 : editor.getSelectedShapeAtPoint(currentPagePoint);
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/crop_helpers.mjs
function getTranslateCroppedImageChange(editor, shape, delta) {
  if (!shape) {
    throw Error("Needs to translate a cropped shape!");
  }
  const { crop: oldCrop } = shape.props;
  if (!oldCrop) {
    return;
  }
  const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
  if (flatten === "x") {
    delta.x = 0;
  } else if (flatten === "y") {
    delta.y = 0;
  }
  delta.rot(-shape.rotation);
  const w = 1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x) * shape.props.w;
  const h = 1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y) * shape.props.h;
  const yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y;
  const xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x;
  const newCrop = structuredClone(oldCrop);
  newCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w));
  newCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h));
  newCrop.bottomRight.x = newCrop.topLeft.x + xCrop;
  newCrop.bottomRight.y = newCrop.topLeft.y + yCrop;
  const partial = {
    id: shape.id,
    type: shape.type,
    props: {
      crop: newCrop
    }
  };
  return partial;
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/Idle.mjs
var Idle11 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      this.editor.on("change-history", this.cleanupCroppingState);
      if (onlySelectedShape) {
        this.editor.mark("crop");
        this.editor.setCroppingShape(onlySelectedShape.id);
      }
    });
    __publicField(this, "onExit", () => {
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
      this.editor.off("change-history", this.cleanupCroppingState);
    });
    __publicField(this, "onCancel", () => {
      this.editor.setCroppingShape(null);
      this.editor.setCurrentTool("select.idle", {});
    });
    __publicField(this, "onPointerDown", (info) => {
      var _a2;
      if (this.editor.getIsMenuOpen())
        return;
      if (info.ctrlKey) {
        this.cancel();
        this.editor.root.handleEvent(info);
        return;
      }
      switch (info.target) {
        case "canvas": {
          const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
          if (hitShape && !this.editor.isShapeOfType(hitShape, "group")) {
            this.onPointerDown({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          this.cancel();
          this.editor.root.handleEvent(info);
          break;
        }
        case "shape": {
          if (info.shape.id === this.editor.getCroppingShapeId()) {
            this.editor.setCurrentTool("select.crop.pointing_crop", info);
            return;
          } else {
            if ((_a2 = this.editor.getShapeUtil(info.shape)) == null ? void 0 : _a2.canCrop(info.shape)) {
              this.editor.setCroppingShape(info.shape.id);
              this.editor.setSelectedShapes([info.shape.id]);
              this.editor.setCurrentTool("select.crop.pointing_crop", info);
            } else {
              this.cancel();
              this.editor.root.handleEvent(info);
            }
          }
          break;
        }
        case "selection": {
          switch (info.handle) {
            case "mobile_rotate":
            case "top_left_rotate":
            case "top_right_rotate":
            case "bottom_left_rotate":
            case "bottom_right_rotate": {
              this.editor.setCurrentTool("select.pointing_rotate_handle", {
                ...info,
                onInteractionEnd: "select.crop"
              });
              break;
            }
            case "top":
            case "right":
            case "bottom":
            case "left": {
              this.editor.setCurrentTool("select.pointing_crop_handle", {
                ...info,
                onInteractionEnd: "select.crop"
              });
              break;
            }
            case "top_left":
            case "top_right":
            case "bottom_left":
            case "bottom_right": {
              this.editor.setCurrentTool("select.pointing_crop_handle", {
                ...info,
                onInteractionEnd: "select.crop"
              });
              break;
            }
            default: {
              this.cancel();
            }
          }
          break;
        }
      }
    });
    __publicField(this, "onDoubleClick", (info) => {
      var _a2;
      if (this.editor.inputs.shiftKey || info.phase !== "up")
        return;
      const croppingShapeId = this.editor.getCroppingShapeId();
      if (!croppingShapeId)
        return;
      const shape = this.editor.getShape(croppingShapeId);
      if (!shape)
        return;
      const util = this.editor.getShapeUtil(shape);
      if (!util)
        return;
      if (info.target === "selection") {
        (_a2 = util.onDoubleClickEdge) == null ? void 0 : _a2.call(util, shape);
      }
    });
    __publicField(this, "onKeyDown", () => {
      this.nudgeCroppingImage(false);
    });
    __publicField(this, "onKeyRepeat", () => {
      this.nudgeCroppingImage(true);
    });
    __publicField(this, "onKeyUp", (info) => {
      switch (info.code) {
        case "Enter": {
          this.editor.setCroppingShape(null);
          this.editor.setCurrentTool("select.idle", {});
          break;
        }
      }
    });
    __publicField(this, "cleanupCroppingState", () => {
      if (!this.editor.getCroppingShapeId()) {
        this.editor.setCurrentTool("select.idle", {});
      }
    });
  }
  cancel() {
    this.editor.setCroppingShape(null);
    this.editor.setCurrentTool("select.idle", {});
  }
  nudgeCroppingImage(ephemeral = false) {
    const {
      editor: {
        inputs: { keys }
      }
    } = this;
    const shiftKey = keys.has("ShiftLeft");
    const delta = new Vec(0, 0);
    if (keys.has("ArrowLeft"))
      delta.x += 1;
    if (keys.has("ArrowRight"))
      delta.x -= 1;
    if (keys.has("ArrowUp"))
      delta.y += 1;
    if (keys.has("ArrowDown"))
      delta.y -= 1;
    if (delta.equals(new Vec(0, 0)))
      return;
    if (shiftKey)
      delta.mul(10);
    const shape = this.editor.getShape(this.editor.getCroppingShapeId());
    if (!shape)
      return;
    const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
    if (partial) {
      if (!ephemeral) {
        this.editor.mark("translate crop");
      }
      this.editor.updateShapes([partial]);
    }
  }
};
__publicField(Idle11, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/PointingCrop.mjs
var PointingCrop = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onCancel", () => {
      this.editor.setCurrentTool("select.crop.idle", {});
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        this.editor.setCurrentTool("select.crop.translating_crop", info);
      }
    });
    __publicField(this, "onPointerUp", (info) => {
      this.editor.setCurrentTool("select.crop.idle", info);
    });
  }
};
__publicField(PointingCrop, "id", "pointing_crop");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/TranslatingCrop.mjs
var TranslatingCrop = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "markId", "translating crop");
    __publicField(this, "snapshot", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.snapshot = this.createSnapshot();
      this.editor.mark(this.markId);
      this.editor.setCursor({ type: "move", rotation: 0 });
      this.updateShapes();
    });
    __publicField(this, "onExit", () => {
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onPointerMove", () => {
      this.updateShapes();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onKeyDown", (info) => {
      switch (info.key) {
        case "Alt":
        case "Shift": {
          this.updateShapes();
          return;
        }
      }
    });
    __publicField(this, "onKeyUp", (info) => {
      switch (info.key) {
        case "Enter": {
          this.complete();
          return;
        }
        case "Alt":
        case "Shift": {
          this.updateShapes();
        }
      }
    });
  }
  complete() {
    this.updateShapes();
    this.editor.setCurrentTool("select.crop.idle", this.info);
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.editor.setCurrentTool("select.crop.idle", this.info);
  }
  createSnapshot() {
    const shape = this.editor.getOnlySelectedShape();
    return { shape };
  }
  updateShapes() {
    const shape = this.snapshot.shape;
    if (!shape)
      return;
    const { originPagePoint, currentPagePoint } = this.editor.inputs;
    const delta = currentPagePoint.clone().sub(originPagePoint);
    const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
    if (partial) {
      this.editor.updateShapes([partial], { squashing: true });
    }
  }
};
__publicField(TranslatingCrop, "id", "translating_crop");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/Crop.mjs
var Crop = class extends StateNode {
};
__publicField(Crop, "id", "crop");
__publicField(Crop, "initial", "idle");
__publicField(Crop, "children", () => [Idle11, TranslatingCrop, PointingCrop]);

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/crop-constants.mjs
var MIN_CROP_SIZE = 8;

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingResizeHandle.mjs
var CursorTypeMap = {
  bottom: "ns-resize",
  top: "ns-resize",
  left: "ew-resize",
  right: "ew-resize",
  bottom_left: "nesw-resize",
  bottom_right: "nwse-resize",
  top_left: "nwse-resize",
  top_right: "nesw-resize",
  bottom_left_rotate: "swne-rotate",
  bottom_right_rotate: "senw-rotate",
  top_left_rotate: "nwse-rotate",
  top_right_rotate: "nesw-rotate",
  mobile_rotate: "grabbing"
};
var PointingResizeHandle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.updateCursor();
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        this.startResizing();
      }
    });
    __publicField(this, "onLongPress", () => {
      this.startResizing();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  updateCursor() {
    const selected = this.editor.getSelectedShapes();
    const cursorType = CursorTypeMap[this.info.handle];
    this.editor.updateInstanceState({
      cursor: {
        type: cursorType,
        rotation: selected.length === 1 ? this.editor.getSelectionRotation() : 0
      }
    });
  }
  startResizing() {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.parent.transition("resizing", this.info);
  }
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
};
__publicField(PointingResizeHandle, "id", "pointing_resize_handle");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Cropping.mjs
var Cropping = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "markId", "");
    __publicField(this, "snapshot", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.markId = "cropping";
      this.editor.mark(this.markId);
      this.snapshot = this.createSnapshot();
      this.updateShapes();
    });
    __publicField(this, "onPointerMove", () => {
      this.updateShapes();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "getDefaultCrop", () => ({
      topLeft: { x: 0, y: 0 },
      bottomRight: { x: 1, y: 1 }
    }));
  }
  updateCursor() {
    const selectedShape = this.editor.getSelectedShapes()[0];
    if (!selectedShape)
      return;
    const cursorType = CursorTypeMap[this.info.handle];
    this.editor.updateInstanceState({
      cursor: {
        type: cursorType,
        rotation: this.editor.getSelectionRotation()
      }
    });
  }
  updateShapes() {
    var _a2;
    const { shape, cursorHandleOffset } = this.snapshot;
    if (!shape)
      return;
    const util = this.editor.getShapeUtil("image");
    if (!util)
      return;
    const props = shape.props;
    const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset);
    const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
    const change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation);
    const crop = (_a2 = props.crop) != null ? _a2 : this.getDefaultCrop();
    const newCrop = structuredClone(crop);
    const newPoint = new Vec(shape.x, shape.y);
    const pointDelta = new Vec(0, 0);
    const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * props.w;
    const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * props.h;
    let hasCropChanged = false;
    switch (this.info.handle) {
      case "top":
      case "top_left":
      case "top_right": {
        if (h < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.topLeft.y = newCrop.topLeft.y + change.y / h;
        const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
        if (heightAfterCrop < MIN_CROP_SIZE) {
          newCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h;
          pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
        } else {
          if (newCrop.topLeft.y <= 0) {
            newCrop.topLeft.y = 0;
            pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
          } else {
            pointDelta.y = change.y;
          }
        }
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        if (h < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h);
        const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
        if (heightAfterCrop < MIN_CROP_SIZE) {
          newCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h;
        }
        break;
      }
    }
    switch (this.info.handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        if (w < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.topLeft.x = newCrop.topLeft.x + change.x / w;
        const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
        if (widthAfterCrop < MIN_CROP_SIZE) {
          newCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w;
          pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
        } else {
          if (newCrop.topLeft.x <= 0) {
            newCrop.topLeft.x = 0;
            pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
          } else {
            pointDelta.x = change.x;
          }
        }
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        if (w < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w);
        const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
        if (widthAfterCrop < MIN_CROP_SIZE) {
          newCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w;
        }
        break;
      }
    }
    if (!hasCropChanged)
      return;
    newPoint.add(pointDelta.rot(shape.rotation));
    const partial = {
      id: shape.id,
      type: shape.type,
      x: newPoint.x,
      y: newPoint.y,
      props: {
        crop: newCrop,
        w: (newCrop.bottomRight.x - newCrop.topLeft.x) * w,
        h: (newCrop.bottomRight.y - newCrop.topLeft.y) * h
      }
    };
    this.editor.updateShapes([partial], { squashing: true });
    this.updateCursor();
  }
  complete() {
    this.updateShapes();
    kickoutOccludedShapes(this.editor, [this.snapshot.shape.id]);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
  createSnapshot() {
    const selectionRotation = this.editor.getSelectionRotation();
    const {
      inputs: { originPagePoint }
    } = this.editor;
    const shape = this.editor.getOnlySelectedShape();
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const dragHandlePoint = Vec.RotWith(selectionBounds.getHandlePoint(this.info.handle), selectionBounds.point, selectionRotation);
    const cursorHandleOffset = Vec.Sub(originPagePoint, dragHandlePoint);
    return {
      shape,
      cursorHandleOffset
    };
  }
};
__publicField(Cropping, "id", "cropping");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/DraggingHandle.mjs
var DraggingHandle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeId", "");
    __publicField(this, "initialHandle", {});
    __publicField(this, "initialAdjacentHandle", null);
    __publicField(this, "initialPagePoint", {});
    __publicField(this, "markId", "");
    __publicField(this, "initialPageTransform");
    __publicField(this, "initialPageRotation");
    __publicField(this, "info", {});
    __publicField(this, "isPrecise", false);
    __publicField(this, "isPreciseId", null);
    __publicField(this, "pointingId", null);
    __publicField(this, "onEnter", (info) => {
      const { shape, isCreating, handle } = info;
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.shapeId = shape.id;
      this.markId = isCreating ? `creating:${shape.id}` : "dragging handle";
      if (!isCreating)
        this.editor.mark(this.markId);
      this.initialHandle = structuredClone(handle);
      if (this.editor.isShapeOfType(shape, "line")) {
        if (this.initialHandle.type === "create") {
          this.editor.updateShape({
            ...shape,
            props: {
              points: {
                ...shape.props.points,
                [handle.index]: { id: handle.index, index: handle.index, x: handle.x, y: handle.y }
              }
            }
          });
          const handlesAfter = this.editor.getShapeHandles(shape);
          const handleAfter = handlesAfter.find((h) => h.index === handle.index);
          this.initialHandle = structuredClone(handleAfter);
        }
      }
      this.initialPageTransform = this.editor.getShapePageTransform(shape);
      this.initialPageRotation = this.initialPageTransform.rotation();
      this.initialPagePoint = this.editor.inputs.originPagePoint.clone();
      this.editor.updateInstanceState({ cursor: { type: isCreating ? "cross" : "grabbing", rotation: 0 } }, { ephemeral: true });
      const handles = this.editor.getShapeHandles(shape).sort(sortByIndex);
      const index2 = handles.findIndex((h) => h.id === info.handle.id);
      this.initialAdjacentHandle = null;
      for (let i = index2 + 1; i < handles.length; i++) {
        const handle2 = handles[i];
        if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
          this.initialAdjacentHandle = handle2;
          break;
        }
      }
      if (!this.initialAdjacentHandle) {
        for (let i = handles.length - 1; i >= 0; i--) {
          const handle2 = handles[i];
          if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
            this.initialAdjacentHandle = handle2;
            break;
          }
        }
      }
      if (this.editor.isShapeOfType(shape, "arrow")) {
        const initialTerminal = shape.props[info.handle.id];
        this.isPrecise = false;
        if ((initialTerminal == null ? void 0 : initialTerminal.type) === "binding") {
          this.editor.setHintingShapes([initialTerminal.boundShapeId]);
          this.isPrecise = initialTerminal.isPrecise;
          if (this.isPrecise) {
            this.isPreciseId = initialTerminal.boundShapeId;
          } else {
            this.resetExactTimeout();
          }
        } else {
          this.editor.setHintingShapes([]);
        }
      }
      this.update();
      this.editor.select(this.shapeId);
    });
    __publicField(this, "exactTimeout", -1);
    __publicField(this, "onPointerMove", () => {
      this.update();
    });
    __publicField(this, "onKeyDown", () => {
      this.update();
    });
    __publicField(this, "onKeyUp", () => {
      this.update();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.update();
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.setHintingShapes([]);
      this.editor.snaps.clearIndicators();
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
  }
  resetExactTimeout() {
    if (this.exactTimeout !== -1) {
      this.clearExactTimeout();
    }
    this.exactTimeout = setTimeout(() => {
      if (this.getIsActive() && !this.isPrecise) {
        this.isPrecise = true;
        this.isPreciseId = this.pointingId;
        this.update();
      }
      this.exactTimeout = -1;
    }, 750);
  }
  clearExactTimeout() {
    if (this.exactTimeout !== -1) {
      clearTimeout(this.exactTimeout);
      this.exactTimeout = -1;
    }
  }
  complete() {
    this.editor.snaps.clearIndicators();
    kickoutOccludedShapes(this.editor, [this.shapeId]);
    const { onInteractionEnd } = this.info;
    if (this.editor.getInstanceState().isToolLocked && onInteractionEnd) {
      this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
      return;
    }
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.editor.snaps.clearIndicators();
    const { onInteractionEnd } = this.info;
    if (onInteractionEnd) {
      this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
      return;
    }
    this.parent.transition("idle");
  }
  update() {
    var _a2;
    const { editor, shapeId, initialPagePoint } = this;
    const { initialHandle, initialPageRotation, initialAdjacentHandle } = this;
    const hintingShapeIds = this.editor.getHintingShapeIds();
    const isSnapMode = this.editor.user.getIsSnapMode();
    const {
      snaps,
      inputs: { currentPagePoint, shiftKey, ctrlKey, altKey: altKey2, pointerVelocity }
    } = editor;
    const initial = this.info.shape;
    const shape = editor.getShape(shapeId);
    if (!shape)
      return;
    const util = editor.getShapeUtil(shape);
    let point = currentPagePoint.clone().sub(initialPagePoint).rot(-initialPageRotation).add(initialHandle);
    if (shiftKey && initialAdjacentHandle && initialHandle.id !== "middle") {
      const angle = Vec.Angle(initialAdjacentHandle, point);
      const snappedAngle = snapAngle(angle, 24);
      const angleDifference = snappedAngle - angle;
      point = Vec.RotWith(point, initialAdjacentHandle, angleDifference);
    }
    editor.snaps.clearIndicators();
    let nextHandle = { ...initialHandle, x: point.x, y: point.y };
    if (initialHandle.canSnap && (isSnapMode ? !ctrlKey : ctrlKey)) {
      const pageTransform = editor.getShapePageTransform(shape.id);
      if (!pageTransform)
        throw Error("Expected a page transform");
      const snap = snaps.handles.snapHandle({ currentShapeId: shapeId, handle: nextHandle });
      if (snap) {
        snap.nudge.rot(-editor.getShapeParentTransform(shape).rotation());
        point.add(snap.nudge);
        nextHandle = { ...initialHandle, x: point.x, y: point.y };
      }
    }
    const changes = (_a2 = util.onHandleDrag) == null ? void 0 : _a2.call(util, shape, {
      handle: nextHandle,
      isPrecise: this.isPrecise || altKey2,
      initial
    });
    const next = { ...shape, ...changes };
    if (initialHandle.canBind) {
      const bindingAfter = next.props[initialHandle.id];
      if ((bindingAfter == null ? void 0 : bindingAfter.type) === "binding") {
        if (hintingShapeIds[0] !== bindingAfter.boundShapeId) {
          editor.setHintingShapes([bindingAfter.boundShapeId]);
          this.pointingId = bindingAfter.boundShapeId;
          this.isPrecise = pointerVelocity.len() < 0.5 || altKey2;
          this.isPreciseId = this.isPrecise ? bindingAfter.boundShapeId : null;
          this.resetExactTimeout();
        }
      } else {
        if (hintingShapeIds.length > 0) {
          editor.setHintingShapes([]);
          this.pointingId = null;
          this.isPrecise = false;
          this.isPreciseId = null;
          this.resetExactTimeout();
        }
      }
    }
    if (changes) {
      editor.updateShapes([next], { squashing: true });
    }
  }
};
__publicField(DraggingHandle, "id", "dragging_handle");

// node_modules/tldraw/dist-esm/lib/utils/shapes/shapes.mjs
function getTextLabels(geometry) {
  if (geometry.isLabel) {
    return [geometry];
  }
  if (geometry instanceof Group2d) {
    return geometry.children.filter((child) => child.isLabel);
  }
  return [];
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/EditingShape.mjs
var EditingShape = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "hitShapeForPointerUp", null);
    __publicField(this, "onEnter", () => {
      const editingShape = this.editor.getEditingShape();
      if (!editingShape)
        throw Error("Entered editing state without an editing shape");
      this.hitShapeForPointerUp = null;
      updateHoveredId(this.editor);
      this.editor.select(editingShape);
    });
    __publicField(this, "onExit", () => {
      var _a2;
      const { editingShapeId } = this.editor.getCurrentPageState();
      if (!editingShapeId)
        return;
      this.editor.setEditingShape(null);
      const shape = this.editor.getShape(editingShapeId);
      const util = this.editor.getShapeUtil(shape);
      (_a2 = util.onEditEnd) == null ? void 0 : _a2.call(util, shape);
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.hitShapeForPointerUp && this.editor.inputs.isDragging) {
        if (this.editor.getInstanceState().isReadonly)
          return;
        this.editor.select(this.hitShapeForPointerUp);
        this.parent.transition("translating", info);
        this.hitShapeForPointerUp = null;
        return;
      }
      switch (info.target) {
        case "shape":
        case "canvas": {
          updateHoveredId(this.editor);
          return;
        }
      }
    });
    __publicField(this, "onPointerDown", (info) => {
      this.hitShapeForPointerUp = null;
      switch (info.target) {
        case "canvas": {
          const hitShape = getHitShapeOnCanvasPointerDown(this.editor, true);
          if (hitShape) {
            this.onPointerDown({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          break;
        }
        case "shape": {
          const { shape: selectingShape } = info;
          const editingShape = this.editor.getEditingShape();
          if (!editingShape) {
            throw Error("Expected an editing shape!");
          }
          const geometry = this.editor.getShapeUtil(selectingShape).getGeometry(selectingShape);
          const textLabels = getTextLabels(geometry);
          const textLabel = textLabels.length === 1 ? textLabels[0] : void 0;
          const isEmptyTextShape = this.editor.isShapeOfType(editingShape, "text") && editingShape.props.text.trim() === "";
          if (textLabel && !isEmptyTextShape) {
            const pointInShapeSpace = this.editor.getPointInShapeSpace(selectingShape, this.editor.inputs.currentPagePoint);
            if (textLabel.bounds.containsPoint(pointInShapeSpace, 0) && textLabel.hitTestPoint(pointInShapeSpace)) {
              if (selectingShape.id === editingShape.id) {
                return;
              } else {
                this.hitShapeForPointerUp = selectingShape;
                this.editor.mark("editing on pointer up");
                this.editor.select(selectingShape.id);
                return;
              }
            }
          } else {
            if (selectingShape.id === editingShape.id) {
              if (this.editor.isShapeOfType(selectingShape, "frame")) {
                this.editor.setEditingShape(null);
              }
            } else {
              this.parent.transition("pointing_shape", info);
              return;
            }
            return;
          }
          break;
        }
      }
      this.parent.transition("idle", info);
      this.editor.root.handleEvent(info);
    });
    __publicField(this, "onPointerUp", (info) => {
      const hitShape = this.hitShapeForPointerUp;
      if (!hitShape)
        return;
      this.hitShapeForPointerUp = null;
      const util = this.editor.getShapeUtil(hitShape);
      if (this.editor.getInstanceState().isReadonly) {
        if (!util.canEditInReadOnly(hitShape)) {
          this.parent.transition("pointing_shape", info);
          return;
        }
      }
      this.editor.select(hitShape.id);
      this.editor.setEditingShape(hitShape.id);
      updateHoveredId(this.editor);
    });
    __publicField(this, "onComplete", (info) => {
      this.parent.transition("idle", info);
    });
    __publicField(this, "onCancel", (info) => {
      this.parent.transition("idle", info);
    });
  }
};
__publicField(EditingShape, "id", "editing_shape");

// node_modules/tldraw/dist-esm/lib/tools/selection-logic/getShouldEnterCropModeOnPointerDown.mjs
function getShouldEnterCropMode(editor) {
  const onlySelectedShape = editor.getOnlySelectedShape();
  return !!(onlySelectedShape && !editor.isShapeOrAncestorLocked(onlySelectedShape) && editor.getShapeUtil(onlySelectedShape).canCrop(onlySelectedShape));
}

// node_modules/tldraw/dist-esm/lib/tools/selection-logic/selectOnCanvasPointerUp.mjs
function selectOnCanvasPointerUp(editor) {
  const selectedShapeIds = editor.getSelectedShapeIds();
  const { shiftKey, altKey: altKey2, currentPagePoint } = editor.inputs;
  const hitShape = editor.getShapeAtPoint(currentPagePoint, {
    hitInside: false,
    margin: HIT_TEST_MARGIN / editor.getZoomLevel(),
    hitLabels: true,
    renderingOnly: true,
    filter: (shape) => !shape.isLocked
  });
  if (hitShape) {
    const outermostSelectableShape = editor.getOutermostSelectableShape(hitShape);
    if (shiftKey && !altKey2) {
      editor.cancelDoubleClick();
      if (selectedShapeIds.includes(outermostSelectableShape.id)) {
        editor.mark("deselecting shape");
        editor.deselect(outermostSelectableShape);
      } else {
        editor.mark("shift selecting shape");
        editor.setSelectedShapes([...selectedShapeIds, outermostSelectableShape.id]);
      }
    } else {
      let shapeToSelect = void 0;
      if (outermostSelectableShape === hitShape) {
        shapeToSelect = hitShape;
      } else {
        if (outermostSelectableShape.id === editor.getFocusedGroupId() || selectedShapeIds.includes(outermostSelectableShape.id)) {
          shapeToSelect = hitShape;
        } else {
          shapeToSelect = outermostSelectableShape;
        }
      }
      if (shapeToSelect && !selectedShapeIds.includes(shapeToSelect.id)) {
        editor.mark("selecting shape");
        editor.select(shapeToSelect.id);
      }
    }
  } else {
    if (shiftKey) {
      return;
    } else {
      if (selectedShapeIds.length > 0) {
        editor.mark("selecting none");
        editor.selectNone();
      }
      const focusedGroupId = editor.getFocusedGroupId();
      if (isShapeId(focusedGroupId)) {
        const groupShape = editor.getShape(focusedGroupId);
        if (!editor.isPointInShape(groupShape, currentPagePoint, { margin: 0, hitInside: true })) {
          editor.setFocusedGroup(null);
        }
      }
    }
  }
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Idle.mjs
var SKIPPED_KEYS_FOR_AUTO_EDITING = [
  "Delete",
  "Backspace",
  "[",
  "]",
  "Enter",
  " ",
  "Shift",
  "Tab"
];
var Idle12 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      this.parent.setCurrentToolIdMask(void 0);
      updateHoveredId(this.editor);
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onPointerMove", () => {
      updateHoveredId(this.editor);
    });
    __publicField(this, "onPointerDown", (info) => {
      if (this.editor.getIsMenuOpen())
        return;
      const shouldEnterCropMode = info.ctrlKey && getShouldEnterCropMode(this.editor);
      if (info.ctrlKey && !shouldEnterCropMode) {
        if (info.target === "shape" && this.isDarwin && this.editor.inputs.keys.has("ControlLeft")) {
          if (!this.editor.isShapeOrAncestorLocked(info.shape)) {
            this.parent.transition("pointing_shape", info);
            return;
          }
        }
        this.parent.transition("brushing", info);
        return;
      }
      switch (info.target) {
        case "canvas": {
          const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
          if (hitShape && !hitShape.isLocked) {
            this.onPointerDown({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          const selectedShapeIds = this.editor.getSelectedShapeIds();
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          const {
            inputs: { currentPagePoint }
          } = this.editor;
          if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
            if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
              this.onPointerDown({
                ...info,
                target: "selection"
              });
              return;
            }
          }
          this.parent.transition("pointing_canvas", info);
          break;
        }
        case "shape": {
          const { shape } = info;
          if (this.isOverArrowLabelTest(shape)) {
            this.parent.transition("pointing_arrow_label", info);
            break;
          }
          if (this.editor.isShapeOrAncestorLocked(shape)) {
            this.parent.transition("pointing_canvas", info);
            break;
          }
          this.parent.transition("pointing_shape", info);
          break;
        }
        case "handle": {
          if (this.editor.getInstanceState().isReadonly)
            break;
          if (this.editor.inputs.altKey) {
            this.parent.transition("pointing_shape", info);
          } else {
            this.parent.transition("pointing_handle", info);
          }
          break;
        }
        case "selection": {
          switch (info.handle) {
            case "mobile_rotate":
            case "top_left_rotate":
            case "top_right_rotate":
            case "bottom_left_rotate":
            case "bottom_right_rotate": {
              this.parent.transition("pointing_rotate_handle", info);
              break;
            }
            case "top":
            case "right":
            case "bottom":
            case "left": {
              if (shouldEnterCropMode) {
                this.parent.transition("pointing_crop_handle", info);
              } else {
                this.parent.transition("pointing_resize_handle", info);
              }
              break;
            }
            case "top_left":
            case "top_right":
            case "bottom_left":
            case "bottom_right": {
              if (shouldEnterCropMode) {
                this.parent.transition("pointing_crop_handle", info);
              } else {
                this.parent.transition("pointing_resize_handle", info);
              }
              break;
            }
            default: {
              const hoveredShape = this.editor.getHoveredShape();
              if (hoveredShape && !this.editor.getSelectedShapeIds().includes(hoveredShape.id) && !hoveredShape.isLocked) {
                this.onPointerDown({
                  ...info,
                  shape: hoveredShape,
                  target: "shape"
                });
                return;
              }
              this.parent.transition("pointing_selection", info);
            }
          }
          break;
        }
      }
    });
    __publicField(this, "onDoubleClick", (info) => {
      var _a2, _b2, _c, _d, _e;
      if (this.editor.inputs.shiftKey || info.phase !== "up")
        return;
      switch (info.target) {
        case "canvas": {
          const hoveredShape = this.editor.getHoveredShape();
          const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : (_a2 = this.editor.getSelectedShapeAtPoint(this.editor.inputs.currentPagePoint)) != null ? _a2 : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
            margin: HIT_TEST_MARGIN / this.editor.getZoomLevel(),
            hitInside: false
          });
          const focusedGroupId = this.editor.getFocusedGroupId();
          if (hitShape) {
            if (this.editor.isShapeOfType(hitShape, "group")) {
              selectOnCanvasPointerUp(this.editor);
              return;
            } else {
              const parent = this.editor.getShape(hitShape.parentId);
              if (parent && this.editor.isShapeOfType(parent, "group")) {
                if (focusedGroupId && parent.id === focusedGroupId) {
                } else {
                  selectOnCanvasPointerUp(this.editor);
                  return;
                }
              }
            }
            this.onDoubleClick({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          if (!this.editor.inputs.shiftKey) {
            this.handleDoubleClickOnCanvas(info);
          }
          break;
        }
        case "selection": {
          if (this.editor.getInstanceState().isReadonly)
            break;
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape) {
            const util = this.editor.getShapeUtil(onlySelectedShape);
            if (!this.canInteractWithShapeInReadOnly(onlySelectedShape)) {
              return;
            }
            if (info.handle === "right" || info.handle === "left" || info.handle === "top" || info.handle === "bottom") {
              const change = (_b2 = util.onDoubleClickEdge) == null ? void 0 : _b2.call(util, onlySelectedShape);
              if (change) {
                this.editor.mark("double click edge");
                this.editor.updateShapes([change]);
                kickoutOccludedShapes(this.editor, [onlySelectedShape.id]);
                return;
              }
            }
            if (util.canCrop(onlySelectedShape) && !this.editor.isShapeOrAncestorLocked(onlySelectedShape)) {
              this.parent.transition("crop", info);
              return;
            }
            if (this.shouldStartEditingShape(onlySelectedShape)) {
              this.startEditingShape(onlySelectedShape, info, true);
            }
          }
          break;
        }
        case "shape": {
          const { shape } = info;
          const util = this.editor.getShapeUtil(shape);
          if (shape.type !== "video" && shape.type !== "embed" && this.editor.getInstanceState().isReadonly)
            break;
          if (util.onDoubleClick) {
            const change = (_c = util.onDoubleClick) == null ? void 0 : _c.call(util, shape);
            if (change) {
              this.editor.updateShapes([change]);
              return;
            } else if (util.canCrop(shape) && !this.editor.isShapeOrAncestorLocked(shape)) {
              this.editor.mark("select and crop");
              this.editor.select((_d = info.shape) == null ? void 0 : _d.id);
              this.parent.transition("crop", info);
              return;
            }
          }
          if (this.shouldStartEditingShape(shape)) {
            this.startEditingShape(shape, info, true);
          } else {
            this.handleDoubleClickOnCanvas(info);
          }
          break;
        }
        case "handle": {
          if (this.editor.getInstanceState().isReadonly)
            break;
          const { shape, handle } = info;
          const util = this.editor.getShapeUtil(shape);
          const changes = (_e = util.onDoubleClickHandle) == null ? void 0 : _e.call(util, shape, handle);
          if (changes) {
            this.editor.updateShapes([changes]);
          } else {
            if (this.shouldStartEditingShape(shape)) {
              this.startEditingShape(shape, info, true);
            }
          }
        }
      }
    });
    __publicField(this, "onRightClick", (info) => {
      switch (info.target) {
        case "canvas": {
          const hoveredShape = this.editor.getHoveredShape();
          const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
            margin: HIT_TEST_MARGIN / this.editor.getZoomLevel(),
            hitInside: false,
            hitLabels: true,
            hitFrameInside: false,
            renderingOnly: true
          });
          if (hitShape) {
            this.onRightClick({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          const selectedShapeIds = this.editor.getSelectedShapeIds();
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          const {
            inputs: { currentPagePoint }
          } = this.editor;
          if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
            if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
              this.onRightClick({
                ...info,
                target: "selection"
              });
              return;
            }
          }
          this.editor.selectNone();
          break;
        }
        case "shape": {
          const { selectedShapeIds } = this.editor.getCurrentPageState();
          const { shape } = info;
          const targetShape = this.editor.getOutermostSelectableShape(shape, (parent) => !selectedShapeIds.includes(parent.id));
          if (!selectedShapeIds.includes(targetShape.id)) {
            this.editor.mark("selecting shape");
            this.editor.setSelectedShapes([targetShape.id]);
          }
          break;
        }
      }
    });
    __publicField(this, "onCancel", () => {
      if (this.editor.getFocusedGroupId() !== this.editor.getCurrentPageId() && this.editor.getSelectedShapeIds().length > 0) {
        this.editor.popFocusedGroupId();
      } else {
        this.editor.mark("clearing selection");
        this.editor.selectNone();
      }
    });
    __publicField(this, "onKeyDown", (info) => {
      switch (info.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown": {
          this.nudgeSelectedShapes(false);
          return;
        }
      }
      if (debugFlags["editOnType"].get()) {
        if (!SKIPPED_KEYS_FOR_AUTO_EDITING.includes(info.key) && !info.altKey && !info.ctrlKey) {
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape && this.editor.isShapeOfType(onlySelectedShape, "note") && this.shouldStartEditingShape(onlySelectedShape)) {
            this.startEditingShape(onlySelectedShape, {
              ...info,
              target: "shape",
              shape: onlySelectedShape
            }, true);
            return;
          }
        }
      }
    });
    __publicField(this, "onKeyRepeat", (info) => {
      switch (info.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown": {
          this.nudgeSelectedShapes(true);
          break;
        }
      }
    });
    __publicField(this, "onKeyUp", (info) => {
      switch (info.code) {
        case "Enter": {
          const selectedShapes = this.editor.getSelectedShapes();
          if (selectedShapes.every((shape) => this.editor.isShapeOfType(shape, "group"))) {
            this.editor.setSelectedShapes(selectedShapes.flatMap((shape) => this.editor.getSortedChildIdsForParent(shape.id)));
            return;
          }
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape && this.shouldStartEditingShape(onlySelectedShape)) {
            this.startEditingShape(onlySelectedShape, {
              ...info,
              target: "shape",
              shape: onlySelectedShape
            }, true);
            return;
          }
          if (getShouldEnterCropMode(this.editor)) {
            this.parent.transition("crop", info);
          }
          break;
        }
      }
    });
    __publicField(this, "isDarwin", window.navigator.userAgent.toLowerCase().indexOf("mac") > -1);
  }
  shouldStartEditingShape(shape = this.editor.getOnlySelectedShape()) {
    if (!shape)
      return false;
    if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed")
      return false;
    if (!this.canInteractWithShapeInReadOnly(shape))
      return false;
    return this.editor.getShapeUtil(shape).canEdit(shape);
  }
  startEditingShape(shape, info, shouldSelectAll) {
    if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed")
      return;
    this.editor.mark("editing shape");
    startEditingShapeWithLabel(this.editor, shape, shouldSelectAll);
    this.parent.transition("editing_shape", info);
  }
  isOverArrowLabelTest(shape) {
    if (!shape)
      return false;
    const pointInShapeSpace = this.editor.getPointInShapeSpace(shape, this.editor.inputs.currentPagePoint);
    if (this.editor.isShapeOfType(shape, "arrow")) {
      const labelGeometry = this.editor.getShapeGeometry(shape).children[1];
      if (labelGeometry && pointInPolygon(pointInShapeSpace, labelGeometry.vertices)) {
        return true;
      }
    }
    return false;
  }
  handleDoubleClickOnCanvas(info) {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.editor.mark("creating text shape");
    const id = createShapeId();
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.createShapes([
      {
        id,
        type: "text",
        x,
        y,
        props: {
          text: "",
          autoSize: true
        }
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const util = this.editor.getShapeUtil(shape);
    if (this.editor.getInstanceState().isReadonly) {
      if (!util.canEditInReadOnly(shape)) {
        return;
      }
    }
    this.editor.setEditingShape(id);
    this.editor.select(id);
    this.parent.transition("editing_shape", info);
  }
  nudgeSelectedShapes(ephemeral = false) {
    const {
      editor: {
        inputs: { keys }
      }
    } = this;
    const shiftKey = keys.has("ShiftLeft");
    const delta = new Vec(0, 0);
    if (keys.has("ArrowLeft"))
      delta.x -= 1;
    if (keys.has("ArrowRight"))
      delta.x += 1;
    if (keys.has("ArrowUp"))
      delta.y -= 1;
    if (keys.has("ArrowDown"))
      delta.y += 1;
    if (delta.equals(new Vec(0, 0)))
      return;
    if (!ephemeral)
      this.editor.mark("nudge shapes");
    const { gridSize } = this.editor.getDocumentSettings();
    const step = this.editor.getInstanceState().isGridMode ? shiftKey ? gridSize * GRID_INCREMENT : gridSize : shiftKey ? MAJOR_NUDGE_FACTOR : MINOR_NUDGE_FACTOR;
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    this.editor.nudgeShapes(selectedShapeIds, delta.mul(step));
    kickoutOccludedShapes(this.editor, selectedShapeIds);
  }
  canInteractWithShapeInReadOnly(shape) {
    if (!this.editor.getInstanceState().isReadonly)
      return true;
    const util = this.editor.getShapeUtil(shape);
    if (util.canEditInReadOnly(shape))
      return true;
    return false;
  }
};
__publicField(Idle12, "id", "idle");
var MAJOR_NUDGE_FACTOR = 10;
var MINOR_NUDGE_FACTOR = 1;
var GRID_INCREMENT = 5;
function isPointInRotatedSelectionBounds(editor, point) {
  const selectionBounds = editor.getSelectionRotatedPageBounds();
  if (!selectionBounds)
    return false;
  const selectionRotation = editor.getSelectionRotation();
  if (!selectionRotation)
    return selectionBounds.containsPoint(point);
  return pointInPolygon(point, selectionBounds.corners.map((c) => Vec.RotWith(c, selectionBounds.point, selectionRotation)));
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingArrowLabel.mjs
var PointingArrowLabel = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "shapeId", "");
    __publicField(this, "markId", "");
    __publicField(this, "wasAlreadySelected", false);
    __publicField(this, "didDrag", false);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      const { shape } = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.info = info;
      this.shapeId = shape.id;
      this.didDrag = false;
      this.wasAlreadySelected = this.editor.getOnlySelectedShapeId() === shape.id;
      this.updateCursor();
      const geometry = this.editor.getShapeGeometry(shape);
      const labelGeometry = geometry.children[1];
      if (!labelGeometry) {
        throw Error(`Expected to find an arrow label geometry for shape: ${shape.id}`);
      }
      const { currentPagePoint } = this.editor.inputs;
      const pointInShapeSpace = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      this._labelDragOffset = Vec.Sub(labelGeometry.center, pointInShapeSpace);
      this.markId = "label-drag start";
      this.editor.mark(this.markId);
      this.editor.setSelectedShapes([this.shapeId]);
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "_labelDragOffset", new Vec(0, 0));
    __publicField(this, "onPointerMove", () => {
      const { isDragging } = this.editor.inputs;
      if (!isDragging)
        return;
      const shape = this.editor.getShape(this.shapeId);
      if (!shape)
        return;
      const info = this.editor.getArrowInfo(shape);
      const groupGeometry = this.editor.getShapeGeometry(shape);
      const bodyGeometry = groupGeometry.children[0];
      const pointInShapeSpace = this.editor.getPointInShapeSpace(shape, this.editor.inputs.currentPagePoint);
      const nearestPoint = bodyGeometry.nearestPoint(Vec.Add(pointInShapeSpace, this._labelDragOffset));
      let nextLabelPosition;
      if (info.isStraight) {
        const lineLength = Vec.Dist(info.start.point, info.end.point);
        const segmentLength = Vec.Dist(info.end.point, nearestPoint);
        nextLabelPosition = 1 - segmentLength / lineLength;
      } else {
        const { _center, measure, angleEnd, angleStart } = groupGeometry.children[0];
        nextLabelPosition = getPointInArcT(measure, angleStart, angleEnd, _center.angle(nearestPoint));
      }
      if (isNaN(nextLabelPosition)) {
        nextLabelPosition = 0.5;
      }
      this.didDrag = true;
      this.editor.updateShape({ id: shape.id, type: shape.type, props: { labelPosition: nextLabelPosition } }, { squashing: true });
    });
    __publicField(this, "onPointerUp", () => {
      const shape = this.editor.getShape(this.shapeId);
      if (!shape)
        return;
      if (this.didDrag || !this.wasAlreadySelected) {
        this.complete();
      } else {
        this.editor.setEditingShape(shape.id);
        this.editor.setCurrentTool("select.editing_shape");
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  updateCursor() {
    this.editor.setCursor({ type: "grabbing", rotation: 0 });
  }
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
};
__publicField(PointingArrowLabel, "id", "pointing_arrow_label");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingCanvas.mjs
var PointingCanvas = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "onEnter", () => {
      const { inputs } = this.editor;
      if (!inputs.shiftKey) {
        if (this.editor.getSelectedShapeIds().length > 0) {
          this.editor.mark("selecting none");
          this.editor.selectNone();
        }
      }
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        this.parent.transition("brushing", info);
      }
    });
    __publicField(this, "onPointerUp", () => {
      selectOnCanvasPointerUp(this.editor);
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onInterrupt", () => {
      this.parent.transition("idle");
    });
  }
  complete() {
    this.parent.transition("idle");
  }
};
__publicField(PointingCanvas, "id", "pointing_canvas");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingCropHandle.mjs
var PointingCropHandle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      const selectedShape = this.editor.getSelectedShapes()[0];
      if (!selectedShape)
        return;
      const cursorType = CursorTypeMap[this.info.handle];
      this.editor.updateInstanceState({
        cursor: {
          type: cursorType,
          rotation: this.editor.getSelectionRotation()
        }
      });
      this.editor.setCroppingShape(selectedShape.id);
    });
    __publicField(this, "onExit", () => {
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
      this.parent.setCurrentToolIdMask(void 0);
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        this.startCropping();
      }
    });
    __publicField(this, "onLongPress", () => {
      this.startCropping();
    });
    __publicField(this, "onPointerUp", () => {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.editor.setCroppingShape(null);
        this.parent.transition("idle");
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  startCropping() {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.parent.transition("cropping", {
      ...this.info,
      onInteractionEnd: this.info.onInteractionEnd
    });
  }
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
};
__publicField(PointingCropHandle, "id", "pointing_crop_handle");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingHandle.mjs
var PointingHandle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      const { shape } = info;
      if (this.editor.isShapeOfType(shape, "arrow")) {
        const initialTerminal = shape.props[info.handle.id];
        if ((initialTerminal == null ? void 0 : initialTerminal.type) === "binding") {
          this.editor.setHintingShapes([initialTerminal.boundShapeId]);
        }
      }
      this.editor.updateInstanceState({ cursor: { type: "grabbing", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onExit", () => {
      this.editor.setHintingShapes([]);
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onPointerUp", () => {
      const { shape, handle } = this.info;
      if (this.editor.isShapeOfType(shape, "note")) {
        const { editor } = this;
        const nextNote = getNoteForPit(editor, shape, handle, false);
        if (nextNote) {
          startEditingShapeWithLabel(editor, nextNote, true);
          return;
        }
      }
      this.parent.transition("idle", this.info);
    });
    __publicField(this, "onPointerMove", () => {
      const { editor } = this;
      if (editor.inputs.isDragging) {
        this.startDraggingHandle();
      }
    });
    __publicField(this, "onLongPress", () => {
      this.startDraggingHandle();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  startDraggingHandle() {
    const { editor } = this;
    if (editor.getInstanceState().isReadonly)
      return;
    const { shape, handle } = this.info;
    if (editor.isShapeOfType(shape, "note")) {
      const nextNote = getNoteForPit(editor, shape, handle, true);
      if (nextNote) {
        const centeredOnPointer = editor.getPointInParentSpace(nextNote, editor.inputs.originPagePoint).sub(Vec.Rot(NOTE_CENTER_OFFSET, nextNote.rotation));
        editor.updateShape({ ...nextNote, x: centeredOnPointer.x, y: centeredOnPointer.y });
        editor.setHoveredShape(nextNote.id).select(nextNote.id).setCurrentTool("select.translating", {
          ...this.info,
          target: "shape",
          shape: editor.getShape(nextNote),
          onInteractionEnd: "note",
          isCreating: true,
          onCreate: () => {
            startEditingShapeWithLabel(editor, nextNote, true);
          }
        });
        return;
      }
    }
    this.parent.transition("dragging_handle", this.info);
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(PointingHandle, "id", "pointing_handle");
function getNoteForPit(editor, shape, handle, forceNew) {
  const pageTransform = editor.getShapePageTransform(shape.id);
  const pagePoint = pageTransform.point();
  const pageRotation = pageTransform.rotation();
  const pits = getNoteAdjacentPositions(pagePoint, pageRotation, shape.props.growY, 0);
  const pit = pits[handle.index];
  if (pit) {
    return getNoteShapeForAdjacentPosition(editor, shape, pit, pageRotation, forceNew);
  }
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingRotateHandle.mjs
var PointingRotateHandle = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.info = info;
      this.updateCursor();
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        this.startRotating();
      }
    });
    __publicField(this, "onLongPress", () => {
      this.startRotating();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  updateCursor() {
    this.editor.updateInstanceState({
      cursor: {
        type: CursorTypeMap[this.info.handle],
        rotation: this.editor.getSelectionRotation()
      }
    });
  }
  startRotating() {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.parent.transition("rotating", this.info);
  }
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
};
__publicField(PointingRotateHandle, "id", "pointing_rotate_handle");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingSelection.mjs
var PointingSelection = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
    });
    __publicField(this, "onPointerUp", (info) => {
      selectOnCanvasPointerUp(this.editor);
      this.parent.transition("idle", info);
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        this.startTranslating(info);
      }
    });
    __publicField(this, "onLongPress", (info) => {
      this.startTranslating(info);
    });
    __publicField(this, "onDoubleClick", (info) => {
      var _a2, _b2;
      const hoveredShape = this.editor.getHoveredShape();
      const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
        hitInside: true,
        margin: 0,
        renderingOnly: true
      });
      if (hitShape) {
        this.parent.transition("idle");
        (_b2 = (_a2 = this.parent).onDoubleClick) == null ? void 0 : _b2.call(_a2, {
          ...info,
          target: "shape",
          shape: this.editor.getShape(hitShape)
        });
        return;
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  startTranslating(info) {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.parent.transition("translating", info);
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(PointingSelection, "id", "pointing_selection");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingShape.mjs
var PointingShape = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "hitShape", {});
    __publicField(this, "hitShapeForPointerUp", {});
    __publicField(this, "isDoubleClick", false);
    __publicField(this, "didSelectOnEnter", false);
    __publicField(this, "onEnter", (info) => {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const focusedGroupId = this.editor.getFocusedGroupId();
      const {
        inputs: { currentPagePoint, shiftKey, altKey: altKey2 }
      } = this.editor;
      this.hitShape = info.shape;
      this.isDoubleClick = false;
      const outermostSelectingShape = this.editor.getOutermostSelectableShape(info.shape);
      const selectedAncestor = this.editor.findShapeAncestor(outermostSelectingShape, (parent) => selectedShapeIds.includes(parent.id));
      if (this.editor.getShapeUtil(info.shape).onClick || outermostSelectingShape.id === focusedGroupId || selectedShapeIds.includes(outermostSelectingShape.id) || selectedAncestor || selectedShapeIds.length > 1 && (selectionBounds == null ? void 0 : selectionBounds.containsPoint(currentPagePoint))) {
        this.didSelectOnEnter = false;
        this.hitShapeForPointerUp = outermostSelectingShape;
        return;
      }
      this.didSelectOnEnter = true;
      if (shiftKey && !altKey2) {
        this.editor.cancelDoubleClick();
        if (!selectedShapeIds.includes(outermostSelectingShape.id)) {
          this.editor.mark("shift selecting shape");
          this.editor.setSelectedShapes([...selectedShapeIds, outermostSelectingShape.id]);
        }
      } else {
        this.editor.mark("selecting shape");
        this.editor.setSelectedShapes([outermostSelectingShape.id]);
      }
    });
    __publicField(this, "onPointerUp", (info) => {
      var _a2, _b2;
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const focusedGroupId = this.editor.getFocusedGroupId();
      const zoomLevel = this.editor.getZoomLevel();
      const {
        inputs: { currentPagePoint, shiftKey }
      } = this.editor;
      const hitShape = (_a2 = this.editor.getShapeAtPoint(currentPagePoint, {
        margin: HIT_TEST_MARGIN / zoomLevel,
        hitInside: true,
        renderingOnly: true
      })) != null ? _a2 : this.hitShape;
      const selectingShape = hitShape ? this.editor.getOutermostSelectableShape(hitShape) : this.hitShapeForPointerUp;
      if (selectingShape) {
        const util = this.editor.getShapeUtil(selectingShape);
        if (util.onClick) {
          const change = (_b2 = util.onClick) == null ? void 0 : _b2.call(util, selectingShape);
          if (change) {
            this.editor.mark("shape on click");
            this.editor.updateShapes([change]);
            this.parent.transition("idle", info);
            return;
          }
        }
        if (selectingShape.id === focusedGroupId) {
          if (selectedShapeIds.length > 0) {
            this.editor.mark("clearing shape ids");
            this.editor.setSelectedShapes([]);
          } else {
            this.editor.popFocusedGroupId();
          }
          this.parent.transition("idle", info);
          return;
        }
      }
      if (!this.didSelectOnEnter) {
        const outermostSelectableShape = this.editor.getOutermostSelectableShape(hitShape, (parent) => !selectedShapeIds.includes(parent.id));
        if (selectedShapeIds.includes(outermostSelectableShape.id)) {
          if (shiftKey) {
            this.editor.mark("deselecting on pointer up");
            this.editor.deselect(selectingShape);
          } else {
            if (selectedShapeIds.includes(selectingShape.id)) {
              if (selectedShapeIds.length === 1) {
                const geometry = this.editor.getShapeUtil(selectingShape).getGeometry(selectingShape);
                const textLabels = getTextLabels(geometry);
                const textLabel = textLabels.length === 1 ? textLabels[0] : void 0;
                if (textLabel) {
                  const pointInShapeSpace = this.editor.getPointInShapeSpace(selectingShape, currentPagePoint);
                  if (textLabel.bounds.containsPoint(pointInShapeSpace, 0) && textLabel.hitTestPoint(pointInShapeSpace)) {
                    this.editor.batch(() => {
                      this.editor.mark("editing on pointer up");
                      this.editor.select(selectingShape.id);
                      const util = this.editor.getShapeUtil(selectingShape);
                      if (this.editor.getInstanceState().isReadonly) {
                        if (!util.canEditInReadOnly(selectingShape)) {
                          return;
                        }
                      }
                      this.editor.setEditingShape(selectingShape.id);
                      this.editor.setCurrentTool("select.editing_shape");
                      if (this.isDoubleClick) {
                        this.editor.emit("select-all-text", { shapeId: selectingShape.id });
                      }
                    });
                    return;
                  }
                }
              }
              this.editor.mark("selecting on pointer up");
              this.editor.select(selectingShape.id);
            } else {
              this.editor.mark("selecting on pointer up");
              this.editor.select(selectingShape);
            }
          }
        } else if (shiftKey) {
          const ancestors = this.editor.getShapeAncestors(outermostSelectableShape);
          this.editor.mark("shift deselecting on pointer up");
          this.editor.setSelectedShapes([
            ...this.editor.getSelectedShapeIds().filter((id) => !ancestors.find((a) => a.id === id)),
            outermostSelectableShape.id
          ]);
        } else {
          this.editor.mark("selecting on pointer up");
          this.editor.setSelectedShapes([outermostSelectableShape.id]);
        }
      }
      this.parent.transition("idle", info);
    });
    __publicField(this, "onDoubleClick", () => {
      this.isDoubleClick = true;
    });
    __publicField(this, "onPointerMove", (info) => {
      if (this.editor.inputs.isDragging) {
        this.startTranslating(info);
      }
    });
    __publicField(this, "onLongPress", (info) => {
      this.startTranslating(info);
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.cancel();
    });
    __publicField(this, "onInterrupt", () => {
      this.cancel();
    });
  }
  startTranslating(info) {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.editor.getContainer().focus();
    this.parent.transition("translating", info);
  }
  cancel() {
    this.parent.transition("idle");
  }
};
__publicField(PointingShape, "id", "pointing_shape");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Resizing.mjs
var Resizing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "markId", "");
    __publicField(this, "didHoldCommand", false);
    __publicField(this, "creationCursorOffset", { x: 0, y: 0 });
    __publicField(this, "snapshot", {});
    __publicField(this, "onEnter", (info) => {
      const { isCreating = false, creationCursorOffset = { x: 0, y: 0 } } = info;
      this.info = info;
      this.didHoldCommand = false;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.creationCursorOffset = creationCursorOffset;
      this.snapshot = this._createSnapshot();
      if (isCreating) {
        this.markId = `creating:${this.editor.getOnlySelectedShape().id}`;
        this.editor.updateInstanceState({ cursor: { type: "cross", rotation: 0 } }, { ephemeral: true });
      } else {
        this.markId = "starting resizing";
        this.editor.mark(this.markId);
      }
      this.handleResizeStart();
      this.updateShapes();
    });
    __publicField(this, "onTick", () => {
      moveCameraWhenCloseToEdge(this.editor);
    });
    __publicField(this, "onPointerMove", () => {
      this.updateShapes();
    });
    __publicField(this, "onKeyDown", () => {
      this.updateShapes();
    });
    __publicField(this, "onKeyUp", () => {
      this.updateShapes();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.updateInstanceState({ cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
      this.editor.snaps.clearIndicators();
    });
    __publicField(this, "_createSnapshot", () => {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const selectionRotation = this.editor.getSelectionRotation();
      const {
        inputs: { originPagePoint }
      } = this.editor;
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const dragHandlePoint = Vec.RotWith(selectionBounds.getHandlePoint(this.info.handle), selectionBounds.point, selectionRotation);
      const cursorHandleOffset = Vec.Sub(originPagePoint, dragHandlePoint);
      const shapeSnapshots = /* @__PURE__ */ new Map();
      const frames = [];
      selectedShapeIds.forEach((id) => {
        const shape = this.editor.getShape(id);
        if (shape) {
          if (shape.type === "frame") {
            frames.push({
              id,
              children: compact(this.editor.getSortedChildIdsForParent(shape).map((id2) => this.editor.getShape(id2)))
            });
          }
          shapeSnapshots.set(shape.id, this._createShapeSnapshot(shape));
          if (this.editor.isShapeOfType(shape, "frame") && selectedShapeIds.length === 1)
            return;
          this.editor.visitDescendants(shape.id, (descendantId) => {
            const descendent = this.editor.getShape(descendantId);
            if (descendent) {
              shapeSnapshots.set(descendent.id, this._createShapeSnapshot(descendent));
              if (this.editor.isShapeOfType(descendent, "frame")) {
                return false;
              }
            }
          });
        }
      });
      const canShapesDeform = ![...shapeSnapshots.values()].some((shape) => !areAnglesCompatible(shape.pageRotation, selectionRotation) || shape.isAspectRatioLocked);
      return {
        shapeSnapshots,
        selectionBounds,
        cursorHandleOffset,
        selectionRotation,
        selectedShapeIds,
        canShapesDeform,
        initialSelectionPageBounds: this.editor.getSelectionPageBounds(),
        frames
      };
    });
    __publicField(this, "_createShapeSnapshot", (shape) => {
      const pageTransform = this.editor.getShapePageTransform(shape);
      const util = this.editor.getShapeUtil(shape);
      return {
        shape,
        bounds: this.editor.getShapeGeometry(shape).bounds,
        pageTransform,
        pageRotation: Mat.Decompose(pageTransform).rotation,
        isAspectRatioLocked: util.isAspectRatioLocked(shape)
      };
    });
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  complete() {
    var _a2, _b2;
    kickoutOccludedShapes(this.editor, this.snapshot.selectedShapeIds);
    this.handleResizeEnd();
    if (this.info.isCreating && this.info.onCreate) {
      (_b2 = (_a2 = this.info).onCreate) == null ? void 0 : _b2.call(_a2, this.editor.getOnlySelectedShape());
      return;
    }
    if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      return;
    }
    this.parent.transition("idle");
  }
  handleResizeStart() {
    const { shapeSnapshots } = this.snapshot;
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      var _a2;
      const util = this.editor.getShapeUtil(shape);
      const change = (_a2 = util.onResizeStart) == null ? void 0 : _a2.call(util, shape);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  handleResizeEnd() {
    const { shapeSnapshots } = this.snapshot;
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      var _a2;
      const current2 = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = (_a2 = util.onResizeEnd) == null ? void 0 : _a2.call(util, shape, current2);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  updateShapes() {
    const { altKey: altKey2, shiftKey } = this.editor.inputs;
    const {
      frames,
      shapeSnapshots,
      selectionBounds,
      cursorHandleOffset,
      selectedShapeIds,
      selectionRotation,
      canShapesDeform
    } = this.snapshot;
    const isAspectRatioLocked = shiftKey || !canShapesDeform;
    const { ctrlKey } = this.editor.inputs;
    const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset).sub(this.creationCursorOffset);
    const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
    if (this.editor.getInstanceState().isGridMode && !ctrlKey) {
      const { gridSize } = this.editor.getDocumentSettings();
      currentPagePoint.snapToGrid(gridSize);
    }
    const dragHandle = this.info.handle;
    const scaleOriginHandle = rotateSelectionHandle2(dragHandle, Math.PI);
    this.editor.snaps.clearIndicators();
    const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
    if (shouldSnap && selectionRotation % HALF_PI === 0) {
      const { nudge } = this.editor.snaps.shapeBounds.snapResizeShapes({
        dragDelta: Vec.Sub(currentPagePoint, originPagePoint),
        initialSelectionPageBounds: this.snapshot.initialSelectionPageBounds,
        handle: rotateSelectionHandle2(dragHandle, selectionRotation),
        isAspectRatioLocked,
        isResizingFromCenter: altKey2
      });
      currentPagePoint.add(nudge);
    }
    const scaleOriginPage = Vec.RotWith(altKey2 ? selectionBounds.center : selectionBounds.getHandlePoint(scaleOriginHandle), selectionBounds.point, selectionRotation);
    const distanceFromScaleOriginNow = Vec.Sub(currentPagePoint, scaleOriginPage).rot(-selectionRotation);
    const distanceFromScaleOriginAtStart = Vec.Sub(originPagePoint, scaleOriginPage).rot(-selectionRotation);
    const scale = Vec.DivV(distanceFromScaleOriginNow, distanceFromScaleOriginAtStart);
    if (!Number.isFinite(scale.x))
      scale.x = 1;
    if (!Number.isFinite(scale.y))
      scale.y = 1;
    const isXLocked = dragHandle === "top" || dragHandle === "bottom";
    const isYLocked = dragHandle === "left" || dragHandle === "right";
    if (isAspectRatioLocked) {
      if (isYLocked) {
        scale.y = Math.abs(scale.x);
      } else if (isXLocked) {
        scale.x = Math.abs(scale.y);
      } else if (Math.abs(scale.x) > Math.abs(scale.y)) {
        scale.y = Math.abs(scale.x) * (scale.y < 0 ? -1 : 1);
      } else {
        scale.x = Math.abs(scale.y) * (scale.x < 0 ? -1 : 1);
      }
    } else {
      if (isXLocked) {
        scale.x = 1;
      }
      if (isYLocked) {
        scale.y = 1;
      }
    }
    if (!this.info.isCreating) {
      this.updateCursor({
        dragHandle,
        isFlippedX: scale.x < 0,
        isFlippedY: scale.y < 0,
        rotation: selectionRotation
      });
    }
    for (const id of shapeSnapshots.keys()) {
      const snapshot = shapeSnapshots.get(id);
      this.editor.resizeShape(id, scale, {
        initialShape: snapshot.shape,
        initialBounds: snapshot.bounds,
        initialPageTransform: snapshot.pageTransform,
        dragHandle,
        mode: selectedShapeIds.length === 1 && id === selectedShapeIds[0] ? "resize_bounds" : "scale_shape",
        scaleOrigin: scaleOriginPage,
        scaleAxisRotation: selectionRotation
      });
    }
    if (this.editor.inputs.ctrlKey) {
      this.didHoldCommand = true;
      for (const { id, children } of frames) {
        if (!children.length)
          continue;
        const initial = shapeSnapshots.get(id).shape;
        const current2 = this.editor.getShape(id);
        if (!(initial && current2))
          continue;
        const dx = current2.x - initial.x;
        const dy = current2.y - initial.y;
        const delta = new Vec(dx, dy).rot(-initial.rotation);
        if (delta.x !== 0 || delta.y !== 0) {
          for (const child of children) {
            this.editor.updateShape({
              id: child.id,
              type: child.type,
              x: child.x - delta.x,
              y: child.y - delta.y
            });
          }
        }
      }
    } else if (this.didHoldCommand) {
      this.didHoldCommand = false;
      for (const { children } of frames) {
        if (!children.length)
          continue;
        for (const child of children) {
          this.editor.updateShape({
            id: child.id,
            type: child.type,
            x: child.x,
            y: child.y
          });
        }
      }
    }
  }
  updateCursor({
    dragHandle,
    isFlippedX,
    isFlippedY,
    rotation
  }) {
    const nextCursor = { ...this.editor.getInstanceState().cursor };
    switch (dragHandle) {
      case "top_left":
      case "bottom_right": {
        nextCursor.type = "nwse-resize";
        if (isFlippedX !== isFlippedY) {
          nextCursor.type = "nesw-resize";
        }
        break;
      }
      case "top_right":
      case "bottom_left": {
        nextCursor.type = "nesw-resize";
        if (isFlippedX !== isFlippedY) {
          nextCursor.type = "nwse-resize";
        }
        break;
      }
    }
    nextCursor.rotation = rotation;
    this.editor.setCursor(nextCursor);
  }
};
__publicField(Resizing, "id", "resizing");
var ORDERED_SELECTION_HANDLES = [
  "top",
  "top_right",
  "right",
  "bottom_right",
  "bottom",
  "bottom_left",
  "left",
  "top_left"
];
function rotateSelectionHandle2(handle, rotation) {
  rotation = rotation % PI2;
  const numSteps = Math.round(rotation / (PI / 4));
  const currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);
  return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Rotating.mjs
var ONE_DEGREE = Math.PI / 180;
var Rotating = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "snapshot", {});
    __publicField(this, "info", {});
    __publicField(this, "markId", "");
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.markId = "rotate start";
      this.editor.mark(this.markId);
      const snapshot = getRotationSnapshot({ editor: this.editor });
      if (!snapshot)
        return this.parent.transition("idle", this.info);
      this.snapshot = snapshot;
      const newSelectionRotation = this._getRotationFromPointerPosition({
        snapToNearestDegree: false
      });
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),
        snapshot: this.snapshot,
        stage: "start"
      });
      this.editor.updateInstanceState({
        cursor: {
          type: CursorTypeMap[this.info.handle],
          rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
        }
      });
    });
    __publicField(this, "onExit", () => {
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.parent.setCurrentToolIdMask(void 0);
      this.snapshot = {};
    });
    __publicField(this, "onPointerMove", () => {
      this.update();
    });
    __publicField(this, "onKeyDown", () => {
      this.update();
    });
    __publicField(this, "onKeyUp", () => {
      this.update();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "update", () => {
      const newSelectionRotation = this._getRotationFromPointerPosition({
        snapToNearestDegree: false
      });
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: newSelectionRotation,
        snapshot: this.snapshot,
        stage: "update"
      });
      this.editor.updateInstanceState({
        cursor: {
          type: CursorTypeMap[this.info.handle],
          rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
        }
      });
    });
    __publicField(this, "cancel", () => {
      this.editor.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("idle", this.info);
      }
    });
    __publicField(this, "complete", () => {
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),
        snapshot: this.snapshot,
        stage: "end"
      });
      kickoutOccludedShapes(this.editor, this.snapshot.shapeSnapshots.map((s) => s.shape.id));
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("idle", this.info);
      }
    });
  }
  _getRotationFromPointerPosition({ snapToNearestDegree }) {
    const selectionRotation = this.editor.getSelectionRotation();
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const {
      inputs: { shiftKey, currentPagePoint }
    } = this.editor;
    const { initialCursorAngle, initialSelectionRotation } = this.snapshot;
    if (!selectionBounds)
      return initialSelectionRotation;
    const selectionPageCenter = selectionBounds.center.clone().rotWith(selectionBounds.point, selectionRotation);
    const preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;
    let newSelectionRotation = initialSelectionRotation + preSnapRotationDelta;
    if (shiftKey) {
      newSelectionRotation = snapAngle(newSelectionRotation, 24);
    } else if (snapToNearestDegree) {
      newSelectionRotation = Math.round(newSelectionRotation / ONE_DEGREE) * ONE_DEGREE;
      if (this.editor.getInstanceState().isCoarsePointer) {
        const snappedToRightAngle = snapAngle(newSelectionRotation, 4);
        const angleToRightAngle = shortAngleDist(newSelectionRotation, snappedToRightAngle);
        if (Math.abs(angleToRightAngle) < degreesToRadians(5)) {
          newSelectionRotation = snappedToRightAngle;
        }
      }
    }
    return newSelectionRotation - initialSelectionRotation;
  }
};
__publicField(Rotating, "id", "rotating");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/ScribbleBrushing.mjs
var ScribbleBrushing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "hits", /* @__PURE__ */ new Set());
    __publicField(this, "size", 0);
    __publicField(this, "scribbleId", "id");
    __publicField(this, "initialSelectedShapeIds", /* @__PURE__ */ new Set());
    __publicField(this, "newlySelectedShapeIds", /* @__PURE__ */ new Set());
    __publicField(this, "onEnter", () => {
      this.initialSelectedShapeIds = new Set(this.editor.inputs.shiftKey ? this.editor.getSelectedShapeIds() : []);
      this.newlySelectedShapeIds = /* @__PURE__ */ new Set();
      this.size = 0;
      this.hits.clear();
      const scribbleItem = this.editor.scribbles.addScribble({
        color: "selection-stroke",
        opacity: 0.32,
        size: 12
      });
      this.scribbleId = scribbleItem.id;
      this.updateScribbleSelection(true);
      this.editor.updateInstanceState({ brush: null });
    });
    __publicField(this, "onExit", () => {
      this.editor.scribbles.stop(this.scribbleId);
    });
    __publicField(this, "onPointerMove", () => {
      this.updateScribbleSelection(true);
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onKeyDown", () => {
      this.updateScribbleSelection(false);
    });
    __publicField(this, "onKeyUp", () => {
      if (!this.editor.inputs.altKey) {
        this.parent.transition("brushing");
      } else {
        this.updateScribbleSelection(false);
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "pushPointToScribble", () => {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    });
  }
  updateScribbleSelection(addPoint) {
    const { editor } = this;
    const currentPageShapes = this.editor.getCurrentPageShapes();
    const {
      inputs: { shiftKey, originPagePoint, previousPagePoint, currentPagePoint }
    } = this.editor;
    const { newlySelectedShapeIds, initialSelectedShapeIds } = this;
    if (addPoint) {
      this.pushPointToScribble();
    }
    const shapes = currentPageShapes;
    let shape, geometry, A, B;
    const minDist = 0;
    for (let i = 0, n = shapes.length; i < n; i++) {
      shape = shapes[i];
      if (editor.isShapeOfType(shape, "group") || newlySelectedShapeIds.has(shape.id) || editor.isShapeOrAncestorLocked(shape)) {
        continue;
      }
      geometry = editor.getShapeGeometry(shape);
      if (editor.isShapeOfType(shape, "frame") && geometry.bounds.containsPoint(editor.getPointInShapeSpace(shape, originPagePoint))) {
        continue;
      }
      const pageTransform = editor.getShapePageTransform(shape);
      if (!geometry || !pageTransform)
        continue;
      const pt = pageTransform.clone().invert();
      A = pt.applyToPoint(previousPagePoint);
      B = pt.applyToPoint(currentPagePoint);
      const { bounds } = geometry;
      if (bounds.minX - minDist > Math.max(A.x, B.x) || bounds.minY - minDist > Math.max(A.y, B.y) || bounds.maxX + minDist < Math.min(A.x, B.x) || bounds.maxY + minDist < Math.min(A.y, B.y)) {
        continue;
      }
      if (geometry.hitTestLineSegment(A, B, minDist)) {
        const outermostShape = this.editor.getOutermostSelectableShape(shape);
        const pageMask = this.editor.getShapeMask(outermostShape.id);
        if (pageMask) {
          const intersection = intersectLineSegmentPolygon(previousPagePoint, currentPagePoint, pageMask);
          if (intersection !== null) {
            const isInMask = pointInPolygon(currentPagePoint, pageMask);
            if (!isInMask)
              continue;
          }
        }
        newlySelectedShapeIds.add(outermostShape.id);
      }
    }
    const current2 = editor.getSelectedShapeIds();
    const next = new Set(shiftKey ? [...newlySelectedShapeIds, ...initialSelectedShapeIds] : [...newlySelectedShapeIds]);
    if (current2.length !== next.size || current2.some((id) => !next.has(id))) {
      this.editor.setSelectedShapes(Array.from(next), { squashing: true });
    }
  }
  complete() {
    this.updateScribbleSelection(true);
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.setSelectedShapes([...this.initialSelectedShapeIds], { squashing: true });
    this.parent.transition("idle");
  }
};
__publicField(ScribbleBrushing, "id", "scribble_brushing");

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/DragAndDropManager.mjs
var INITIAL_POINTER_LAG_DURATION = 20;
var FAST_POINTER_LAG_DURATION = 100;
var DragAndDropManager = class {
  constructor(editor) {
    __publicField(this, "prevDroppingShapeId", null);
    __publicField(this, "droppingNodeTimer", null);
    __publicField(this, "first", true);
    __publicField(this, "dispose", () => {
      this.clear();
    });
    this.editor = editor;
    editor.disposables.add(this.dispose);
  }
  updateDroppingNode(movingShapes, cb) {
    var _a2, _b2;
    if (this.first) {
      this.editor.setHintingShapes(movingShapes.map((s) => this.editor.findShapeAncestor(s, (v) => v.type !== "group")).filter((s) => s));
      this.prevDroppingShapeId = (_b2 = (_a2 = this.editor.getDroppingOverShape(this.editor.inputs.originPagePoint, movingShapes)) == null ? void 0 : _a2.id) != null ? _b2 : null;
      this.first = false;
    }
    if (this.droppingNodeTimer === null) {
      this.setDragTimer(movingShapes, INITIAL_POINTER_LAG_DURATION, cb);
    } else if (this.editor.inputs.pointerVelocity.len() > 0.5) {
      clearInterval(this.droppingNodeTimer);
      this.setDragTimer(movingShapes, FAST_POINTER_LAG_DURATION, cb);
    }
  }
  setDragTimer(movingShapes, duration, cb) {
    this.droppingNodeTimer = setTimeout(() => {
      this.editor.batch(() => {
        this.handleDrag(this.editor.inputs.currentPagePoint, movingShapes, cb);
      });
      this.droppingNodeTimer = null;
    }, duration);
  }
  handleDrag(point, movingShapes, cb) {
    var _a2, _b2, _c, _d, _e, _f;
    movingShapes = compact(movingShapes.map((shape) => this.editor.getShape(shape.id)));
    const nextDroppingShapeId = (_b2 = (_a2 = this.editor.getDroppingOverShape(point, movingShapes)) == null ? void 0 : _a2.id) != null ? _b2 : null;
    if (nextDroppingShapeId === this.prevDroppingShapeId) {
      this.hintParents(movingShapes);
      return;
    }
    const { prevDroppingShapeId } = this;
    const prevDroppingShape = prevDroppingShapeId && this.editor.getShape(prevDroppingShapeId);
    const nextDroppingShape = nextDroppingShapeId && this.editor.getShape(nextDroppingShapeId);
    if (prevDroppingShape) {
      (_d = (_c = this.editor.getShapeUtil(prevDroppingShape)).onDragShapesOut) == null ? void 0 : _d.call(_c, prevDroppingShape, movingShapes);
    }
    if (nextDroppingShape) {
      (_f = (_e = this.editor.getShapeUtil(nextDroppingShape)).onDragShapesOver) == null ? void 0 : _f.call(_e, nextDroppingShape, movingShapes);
    }
    this.hintParents(movingShapes);
    cb == null ? void 0 : cb();
    this.prevDroppingShapeId = nextDroppingShapeId;
  }
  hintParents(movingShapes) {
    const shapesGroupedByAncestor = /* @__PURE__ */ new Map();
    for (const shape of movingShapes) {
      const ancestor = this.editor.findShapeAncestor(shape, (v) => v.type !== "group");
      if (!ancestor)
        continue;
      if (!shapesGroupedByAncestor.has(ancestor.id)) {
        shapesGroupedByAncestor.set(ancestor.id, []);
      }
      shapesGroupedByAncestor.get(ancestor.id).push(shape.id);
    }
    const hintingShapes = [];
    for (const [ancestorId, shapeIds] of shapesGroupedByAncestor) {
      const ancestor = this.editor.getShape(ancestorId);
      if (!ancestor)
        continue;
      if (getOccludedChildren(this.editor, ancestor).length < shapeIds.length) {
        hintingShapes.push(ancestor.id);
      }
    }
    this.editor.setHintingShapes(hintingShapes);
  }
  dropShapes(shapes) {
    var _a2, _b2;
    const { prevDroppingShapeId } = this;
    this.handleDrag(this.editor.inputs.currentPagePoint, shapes);
    if (prevDroppingShapeId) {
      const shape = this.editor.getShape(prevDroppingShapeId);
      if (!shape)
        return;
      (_b2 = (_a2 = this.editor.getShapeUtil(shape)).onDropShapesOver) == null ? void 0 : _b2.call(_a2, shape, shapes);
    }
  }
  clear() {
    this.prevDroppingShapeId = null;
    if (this.droppingNodeTimer !== null) {
      clearInterval(this.droppingNodeTimer);
    }
    this.droppingNodeTimer = null;
    this.editor.setHintingShapes([]);
    this.first = true;
  }
};

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Translating.mjs
var Translating = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "selectionSnapshot", {});
    __publicField(this, "snapshot", {});
    __publicField(this, "markId", "");
    __publicField(this, "isCloning", false);
    __publicField(this, "isCreating", false);
    __publicField(this, "onCreate", () => void 0);
    __publicField(this, "dragAndDropManager", new DragAndDropManager(this.editor));
    __publicField(this, "onEnter", (info) => {
      const { isCreating = false, onCreate = () => void 0 } = info;
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.isCreating = isCreating;
      this.onCreate = onCreate;
      if (isCreating) {
        this.markId = `creating:${this.editor.getOnlySelectedShape().id}`;
      } else {
        this.markId = "translating";
        this.editor.mark(this.markId);
      }
      this.isCloning = false;
      this.info = info;
      this.editor.setCursor({ type: "move", rotation: 0 });
      this.selectionSnapshot = getTranslatingSnapshot(this.editor);
      if (!this.isCreating) {
        if (this.editor.inputs.altKey) {
          this.startCloning();
          return;
        }
      }
      this.snapshot = this.selectionSnapshot;
      this.handleStart();
      this.updateShapes();
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.selectionSnapshot = {};
      this.snapshot = {};
      this.editor.snaps.clearIndicators();
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.dragAndDropManager.clear();
    });
    __publicField(this, "onTick", () => {
      this.dragAndDropManager.updateDroppingNode(this.snapshot.movingShapes, this.updateParentTransforms);
      moveCameraWhenCloseToEdge(this.editor);
    });
    __publicField(this, "onPointerMove", () => {
      this.updateShapes();
    });
    __publicField(this, "onKeyDown", () => {
      if (this.editor.inputs.altKey && !this.isCloning) {
        this.startCloning();
        return;
      }
      this.updateShapes();
    });
    __publicField(this, "onKeyUp", () => {
      if (!this.editor.inputs.altKey && this.isCloning) {
        this.stopCloning();
        return;
      }
      this.updateShapes();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onComplete", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
    __publicField(this, "updateParentTransforms", () => {
      const {
        editor,
        snapshot: { shapeSnapshots }
      } = this;
      const movingShapes = [];
      shapeSnapshots.forEach((shapeSnapshot) => {
        const shape = editor.getShape(shapeSnapshot.shape.id);
        if (!shape)
          return null;
        movingShapes.push(shape);
        const parentTransform = isPageId(shape.parentId) ? null : Mat.Inverse(editor.getShapePageTransform(shape.parentId));
        shapeSnapshot.parentTransform = parentTransform;
      });
    });
  }
  startCloning() {
    if (this.isCreating)
      return;
    this.isCloning = true;
    this.reset();
    this.markId = "translating";
    this.editor.mark(this.markId);
    this.editor.duplicateShapes(Array.from(this.editor.getSelectedShapeIds()));
    this.snapshot = getTranslatingSnapshot(this.editor);
    this.handleStart();
    this.updateShapes();
  }
  stopCloning() {
    this.isCloning = false;
    this.snapshot = this.selectionSnapshot;
    this.reset();
    this.markId = "translating";
    this.editor.mark(this.markId);
    this.updateShapes();
  }
  reset() {
    this.editor.bailToMark(this.markId);
  }
  complete() {
    var _a2;
    this.updateShapes();
    this.dragAndDropManager.dropShapes(this.snapshot.movingShapes);
    kickoutOccludedShapes(this.editor, this.snapshot.movingShapes.map((s) => s.id));
    this.handleEnd();
    if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd);
    } else {
      if (this.isCreating) {
        (_a2 = this.onCreate) == null ? void 0 : _a2.call(this, this.editor.getOnlySelectedShape());
      } else {
        this.parent.transition("idle");
      }
    }
  }
  cancel() {
    this.reset();
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd);
    } else {
      this.parent.transition("idle", this.info);
    }
  }
  handleStart() {
    const { movingShapes } = this.snapshot;
    const changes = [];
    movingShapes.forEach((shape) => {
      var _a2;
      const util = this.editor.getShapeUtil(shape);
      const change = (_a2 = util.onTranslateStart) == null ? void 0 : _a2.call(util, shape);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
    this.editor.setHoveredShape(null);
  }
  handleEnd() {
    const { movingShapes } = this.snapshot;
    if (this.isCloning && movingShapes.length > 0) {
      const currentAveragePagePoint = Vec.Average(movingShapes.map((s) => this.editor.getShapePageTransform(s.id).point()));
      const offset4 = Vec.Sub(currentAveragePagePoint, this.selectionSnapshot.averagePagePoint);
      if (!Vec.IsNaN(offset4)) {
        this.editor.updateInstanceState({
          duplicateProps: {
            shapeIds: movingShapes.map((s) => s.id),
            offset: { x: offset4.x, y: offset4.y }
          }
        });
      }
    }
    const changes = [];
    movingShapes.forEach((shape) => {
      var _a2;
      const current2 = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = (_a2 = util.onTranslateEnd) == null ? void 0 : _a2.call(util, shape, current2);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  handleChange() {
    const { movingShapes } = this.snapshot;
    const changes = [];
    movingShapes.forEach((shape) => {
      var _a2;
      const current2 = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = (_a2 = util.onTranslate) == null ? void 0 : _a2.call(util, shape, current2);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  updateShapes() {
    const { snapshot } = this;
    this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);
    moveShapesToPoint({
      editor: this.editor,
      snapshot
    });
    this.handleChange();
  }
};
__publicField(Translating, "id", "translating");
function getTranslatingSnapshot(editor) {
  var _a2, _b2;
  const movingShapes = [];
  const pagePoints = [];
  const selectedShapeIds = editor.getSelectedShapeIds();
  const shapeSnapshots = compact(selectedShapeIds.map((id) => {
    const shape = editor.getShape(id);
    if (!shape)
      return null;
    movingShapes.push(shape);
    const pageTransform = editor.getShapePageTransform(id);
    const pagePoint = pageTransform.point();
    const pageRotation = pageTransform.rotation();
    pagePoints.push(pagePoint);
    const parentTransform = PageRecordType.isId(shape.parentId) ? null : Mat.Inverse(editor.getShapePageTransform(shape.parentId));
    return {
      shape,
      pagePoint,
      pageRotation,
      parentTransform
    };
  }));
  const onlySelectedShape = editor.getOnlySelectedShape();
  let initialSnapPoints = [];
  if (onlySelectedShape) {
    initialSnapPoints = editor.snaps.shapeBounds.getSnapPoints(onlySelectedShape.id);
  } else {
    const selectionPageBounds = editor.getSelectionPageBounds();
    if (selectionPageBounds) {
      initialSnapPoints = selectionPageBounds.cornersAndCenter.map((p, i) => ({
        id: "selection:" + i,
        x: p.x,
        y: p.y
      }));
    }
  }
  let noteAdjacentPositions;
  let noteSnapshot;
  const { originPagePoint } = editor.inputs;
  const allHoveredNotes = shapeSnapshots.filter((s) => editor.isShapeOfType(s.shape, "note") && editor.isPointInShape(s.shape, originPagePoint));
  if (allHoveredNotes.length === 0) {
  } else if (allHoveredNotes.length === 1) {
    noteSnapshot = allHoveredNotes[0];
  } else {
    const allShapesSorted = editor.getCurrentPageShapesSorted();
    noteSnapshot = (_a2 = allHoveredNotes.map((s) => ({
      snapshot: s,
      index: allShapesSorted.findIndex((shape) => shape.id === s.shape.id)
    })).sort((a, b) => b.index - a.index)[0]) == null ? void 0 : _a2.snapshot;
  }
  if (noteSnapshot) {
    noteAdjacentPositions = getAvailableNoteAdjacentPositions(editor, noteSnapshot.pageRotation, (_b2 = noteSnapshot.shape.props.growY) != null ? _b2 : 0);
  }
  return {
    averagePagePoint: Vec.Average(pagePoints),
    movingShapes,
    shapeSnapshots,
    initialPageBounds: editor.getSelectionPageBounds(),
    initialSnapPoints,
    noteAdjacentPositions,
    noteSnapshot
  };
}
function moveShapesToPoint({
  editor,
  snapshot
}) {
  const { inputs } = editor;
  const {
    noteSnapshot,
    noteAdjacentPositions,
    initialPageBounds,
    initialSnapPoints,
    shapeSnapshots,
    averagePagePoint
  } = snapshot;
  const isGridMode = editor.getInstanceState().isGridMode;
  const gridSize = editor.getDocumentSettings().gridSize;
  const delta = Vec.Sub(inputs.currentPagePoint, inputs.originPagePoint);
  const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
  if (flatten === "x") {
    delta.x = 0;
  } else if (flatten === "y") {
    delta.y = 0;
  }
  editor.snaps.clearIndicators();
  const isSnapping = editor.user.getIsSnapMode() ? !inputs.ctrlKey : inputs.ctrlKey;
  if (isSnapping && editor.inputs.pointerVelocity.len() < 0.5) {
    const { nudge } = editor.snaps.shapeBounds.snapTranslateShapes({
      dragDelta: delta,
      initialSelectionPageBounds: initialPageBounds,
      lockedAxis: flatten,
      initialSelectionSnapPoints: initialSnapPoints
    });
    delta.add(nudge);
  } else {
    if (noteSnapshot && noteAdjacentPositions) {
      let min3 = NOTE_PIT_RADIUS / editor.getZoomLevel();
      let offset4 = new Vec(0, 0);
      const pageCenter = Vec.Add(Vec.Add(noteSnapshot.pagePoint, delta), new Vec(NOTE_SIZE / 2, NOTE_SIZE / 2).rot(noteSnapshot.pageRotation));
      for (const pit of noteAdjacentPositions) {
        const deltaToPit = Vec.Sub(pageCenter, pit);
        const dist = deltaToPit.len();
        if (dist < min3) {
          min3 = dist;
          offset4 = deltaToPit;
        }
      }
      delta.sub(offset4);
    }
  }
  const averageSnappedPoint = Vec.Add(averagePagePoint, delta);
  if (isGridMode && !inputs.ctrlKey) {
    averageSnappedPoint.snapToGrid(gridSize);
  }
  const averageSnap = Vec.Sub(averageSnappedPoint, averagePagePoint);
  editor.updateShapes(compact(shapeSnapshots.map(({ shape, pagePoint, parentTransform }) => {
    const newPagePoint = Vec.Add(pagePoint, averageSnap);
    const newLocalPoint = parentTransform ? Mat.applyToPoint(parentTransform, newPagePoint) : newPagePoint;
    return {
      id: shape.id,
      type: shape.type,
      x: newLocalPoint.x,
      y: newLocalPoint.y
    };
  })), { squashing: true });
}

// node_modules/tldraw/dist-esm/lib/tools/SelectTool/SelectTool.mjs
var SelectTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "reactor");
    __publicField(this, "cleanUpDuplicateProps", () => {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const instance = this.editor.getInstanceState();
      if (!instance.duplicateProps)
        return;
      const duplicatedShapes = new Set(instance.duplicateProps.shapeIds);
      if (selectedShapeIds.length === duplicatedShapes.size && selectedShapeIds.every((shapeId) => duplicatedShapes.has(shapeId))) {
        return;
      }
      this.editor.updateInstanceState({
        duplicateProps: null
      });
    });
    __publicField(this, "onEnter", () => {
      this.reactor = react("clean duplicate props", () => {
        try {
          this.cleanUpDuplicateProps();
        } catch (e) {
          if (typeof process !== "undefined" && false) {
          } else {
            console.error(e);
          }
        }
      });
    });
    __publicField(this, "onExit", () => {
      var _a2;
      (_a2 = this.reactor) == null ? void 0 : _a2.call(this);
      if (this.editor.getCurrentPageState().editingShapeId) {
        this.editor.setEditingShape(null);
      }
    });
  }
};
__publicField(SelectTool, "id", "select");
__publicField(SelectTool, "initial", "idle");
__publicField(SelectTool, "children", () => [
  Crop,
  Cropping,
  Idle12,
  PointingCanvas,
  PointingShape,
  Translating,
  Brushing,
  ScribbleBrushing,
  PointingCropHandle,
  PointingSelection,
  PointingResizeHandle,
  EditingShape,
  Resizing,
  Rotating,
  PointingRotateHandle,
  PointingArrowLabel,
  PointingHandle,
  DraggingHandle
]);

// node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Idle.mjs
var Idle13 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
    });
    __publicField(this, "onPointerDown", () => {
      this.parent.transition("pointing", this.info);
    });
  }
};
__publicField(Idle13, "id", "idle");

// node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Pointing.mjs
var Pointing9 = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onPointerMove", () => {
      if (this.editor.inputs.isDragging) {
        this.parent.transition("zoom_brushing", this.info);
      }
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
  }
  complete() {
    const { currentScreenPoint } = this.editor.inputs;
    if (this.editor.inputs.altKey) {
      this.editor.zoomOut(currentScreenPoint, { duration: 220 });
    } else {
      this.editor.zoomIn(currentScreenPoint, { duration: 220 });
    }
    this.parent.transition("idle", this.info);
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
};
__publicField(Pointing9, "id", "pointing");

// node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/ZoomBrushing.mjs
var ZoomBrushing = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "zoomBrush", new Box());
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.update();
    });
    __publicField(this, "onExit", () => {
      this.editor.updateInstanceState({ zoomBrush: null });
    });
    __publicField(this, "onPointerMove", () => {
      this.update();
    });
    __publicField(this, "onPointerUp", () => {
      this.complete();
    });
    __publicField(this, "onCancel", () => {
      this.cancel();
    });
  }
  update() {
    const {
      inputs: { originPagePoint, currentPagePoint }
    } = this.editor;
    this.zoomBrush.setTo(Box.FromPoints([originPagePoint, currentPagePoint]));
    this.editor.updateInstanceState({ zoomBrush: this.zoomBrush.toJson() });
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
  complete() {
    const { zoomBrush } = this;
    const threshold = 8 / this.editor.getZoomLevel();
    if (zoomBrush.width < threshold && zoomBrush.height < threshold) {
      const point = this.editor.inputs.currentScreenPoint;
      if (this.editor.inputs.altKey) {
        this.editor.zoomOut(point, { duration: 220 });
      } else {
        this.editor.zoomIn(point, { duration: 220 });
      }
    } else {
      const targetZoom = this.editor.inputs.altKey ? this.editor.getZoomLevel() / 2 : void 0;
      this.editor.zoomToBounds(zoomBrush, { targetZoom, duration: 220 });
    }
    this.parent.transition("idle", this.info);
  }
};
__publicField(ZoomBrushing, "id", "zoom_brushing");

// node_modules/tldraw/dist-esm/lib/tools/ZoomTool/ZoomTool.mjs
var ZoomTool = class extends StateNode {
  constructor() {
    super(...arguments);
    __publicField(this, "info", {});
    __publicField(this, "onEnter", (info) => {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.updateCursor();
    });
    __publicField(this, "onExit", () => {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.updateInstanceState({ zoomBrush: null, cursor: { type: "default", rotation: 0 } }, { ephemeral: true });
      this.parent.setCurrentToolIdMask(void 0);
    });
    __publicField(this, "onKeyDown", () => {
      this.updateCursor();
    });
    __publicField(this, "onKeyUp", (info) => {
      this.updateCursor();
      if (info.code === "KeyZ") {
        this.complete();
      }
    });
    __publicField(this, "onInterrupt", () => {
      this.complete();
    });
  }
  complete() {
    if (this.info.onInteractionEnd && this.info.onInteractionEnd !== "select") {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("select");
    }
  }
  updateCursor() {
    if (this.editor.inputs.altKey) {
      this.editor.updateInstanceState({ cursor: { type: "zoom-out", rotation: 0 } }, { ephemeral: true });
    } else {
      this.editor.updateInstanceState({ cursor: { type: "zoom-in", rotation: 0 } }, { ephemeral: true });
    }
  }
};
__publicField(ZoomTool, "id", "zoom");
__publicField(ZoomTool, "initial", "idle");
__publicField(ZoomTool, "children", () => [Idle13, ZoomBrushing, Pointing9]);

// node_modules/tldraw/dist-esm/lib/defaultTools.mjs
var defaultTools = [EraserTool, HandTool, LaserTool, ZoomTool, SelectTool];

// node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2)
        ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@radix-ui/react-toast/dist/index.mjs
var import_react71 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-compose-refs/dist/index.mjs
var import_react58 = __toESM(require_react(), 1);
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node) => refs.forEach((ref) => $6ed0406888f73fc4$var$setRef(ref, node));
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return (0, import_react58.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}

// node_modules/@radix-ui/react-collection/dist/index.mjs
var import_react61 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-context/dist/index.mjs
var import_react59 = __toESM(require_react(), 1);
function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
  const Context2 = /* @__PURE__ */ (0, import_react59.createContext)(defaultContext);
  function Provider2(props) {
    const { children, ...context } = props;
    const value = (0, import_react59.useMemo)(() => context, Object.values(context));
    return /* @__PURE__ */ (0, import_react59.createElement)(Context2.Provider, {
      value
    }, children);
  }
  function useContext14(consumerName) {
    const context = (0, import_react59.useContext)(Context2);
    if (context)
      return context;
    if (defaultContext !== void 0)
      return defaultContext;
    throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
  }
  Provider2.displayName = rootComponentName + "Provider";
  return [
    Provider2,
    useContext14
  ];
}
function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
    const BaseContext = /* @__PURE__ */ (0, import_react59.createContext)(defaultContext);
    const index2 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider2(props) {
      const { scope, children, ...context } = props;
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
      const value = (0, import_react59.useMemo)(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_react59.createElement)(Context2.Provider, {
        value
      }, children);
    }
    function useContext14(consumerName, scope) {
      const Context2 = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
      const context = (0, import_react59.useContext)(Context2);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider2.displayName = rootComponentName + "Provider";
    return [
      Provider2,
      useContext14
    ];
  }
  const createScope2 = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return /* @__PURE__ */ (0, import_react59.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react59.useMemo)(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [
        scope,
        contexts
      ]);
    };
  };
  createScope2.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae11092,
    $c512c27ab02ef895$var$composeContextScopes(createScope2, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map((createScope2) => ({
      useScope: createScope2(),
      scopeName: createScope2.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope2 = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope2
        };
      }, {});
      return (0, import_react59.useMemo)(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes1
      }), [
        nextScopes1
      ]);
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-slot/dist/index.mjs
var import_react60 = __toESM(require_react(), 1);
var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ (0, import_react60.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react60.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react60.Children.count(newElement) > 1)
          return import_react60.Children.only(null);
        return /* @__PURE__ */ (0, import_react60.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return /* @__PURE__ */ (0, import_react60.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react60.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react60.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react60.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ (0, import_react60.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ (0, import_react60.isValidElement)(children))
    return /* @__PURE__ */ (0, import_react60.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
      ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
    });
  return import_react60.Children.count(children) > 1 ? import_react60.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return /* @__PURE__ */ (0, import_react60.createElement)(import_react60.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ (0, import_react60.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue)
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      else if (slotPropValue)
        overrideProps[propName] = slotPropValue;
    } else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-collection/dist/index.mjs
function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
  const PROVIDER_NAME = name + "CollectionProvider";
  const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  });
  const CollectionProvider = (props) => {
    const { scope, children } = props;
    const ref = import_react61.default.useRef(null);
    const itemMap = import_react61.default.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ import_react61.default.createElement(CollectionProviderImpl, {
      scope,
      itemMap,
      collectionRef: ref
    }, children);
  };
  /* @__PURE__ */ Object.assign(CollectionProvider, {
    displayName: PROVIDER_NAME
  });
  const COLLECTION_SLOT_NAME = name + "CollectionSlot";
  const CollectionSlot = /* @__PURE__ */ import_react61.default.forwardRef((props, forwardedRef) => {
    const { scope, children } = props;
    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ import_react61.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      ref: composedRefs
    }, children);
  });
  /* @__PURE__ */ Object.assign(CollectionSlot, {
    displayName: COLLECTION_SLOT_NAME
  });
  const ITEM_SLOT_NAME = name + "CollectionItemSlot";
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlot = /* @__PURE__ */ import_react61.default.forwardRef((props, forwardedRef) => {
    const { scope, children, ...itemData } = props;
    const ref = import_react61.default.useRef(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const context = useCollectionContext(ITEM_SLOT_NAME, scope);
    import_react61.default.useEffect(() => {
      context.itemMap.set(ref, {
        ref,
        ...itemData
      });
      return () => void context.itemMap.delete(ref);
    });
    return /* @__PURE__ */ import_react61.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      [ITEM_DATA_ATTR]: "",
      ref: composedRefs
    }, children);
  });
  /* @__PURE__ */ Object.assign(CollectionItemSlot, {
    displayName: ITEM_SLOT_NAME
  });
  function useCollection(scope) {
    const context = useCollectionContext(name + "CollectionConsumer", scope);
    const getItems = import_react61.default.useCallback(() => {
      const collectionNode = context.collectionRef.current;
      if (!collectionNode)
        return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      const items = Array.from(context.itemMap.values());
      const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));
      return orderedItems;
    }, [
      context.collectionRef,
      context.itemMap
    ]);
    return getItems;
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot
    },
    useCollection,
    createCollectionScope
  ];
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var import_react65 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-primitive/dist/index.mjs
var import_react62 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
  const Node2 = /* @__PURE__ */ (0, import_react62.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
    (0, import_react62.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ (0, import_react62.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node2.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node2
  };
}, {});
function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
  if (target)
    (0, import_react_dom2.flushSync)(() => target.dispatchEvent(event));
}

// node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react63 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  const callbackRef = (0, import_react63.useRef)(callback);
  (0, import_react63.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react63.useMemo)(() => (...args) => {
    var _callbackRef$current;
    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
var import_react64 = __toESM(require_react(), 1);
function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
  (0, import_react64.useEffect)(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        onEscapeKeyDown(event);
    };
    ownerDocument.addEventListener("keydown", handleKeyDown);
    return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
  }, [
    onEscapeKeyDown,
    ownerDocument
  ]);
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update";
var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
var $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
var $5cb92bef7577960e$var$originalBodyPointerEvents;
var $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ (0, import_react65.createContext)({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ (0, import_react65.forwardRef)((props, forwardedRef) => {
  var _node$ownerDocument;
  const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;
  const context = (0, import_react65.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
  const [node1, setNode] = (0, import_react65.useState)(null);
  const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
  const [, force] = (0, import_react65.useState)({});
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setNode(node));
  const layers = Array.from(context.layers);
  const [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled
  ].slice(-1);
  const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
  const index2 = node1 ? layers.indexOf(node1) : -1;
  const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
  const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
  const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
    const target = event.target;
    const isPointerDownOnBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (!isPointerEventsEnabled || isPointerDownOnBranch)
      return;
    onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
    const target = event.target;
    const isFocusInBranch = [
      ...context.branches
    ].some((branch) => branch.contains(target));
    if (isFocusInBranch)
      return;
    onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
    onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
    if (!event.defaultPrevented)
      onDismiss === null || onDismiss === void 0 || onDismiss();
  }, ownerDocument);
  $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
    const isHighestLayer = index2 === context.layers.size - 1;
    if (!isHighestLayer)
      return;
    onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
    if (!event.defaultPrevented && onDismiss) {
      event.preventDefault();
      onDismiss();
    }
  }, ownerDocument);
  (0, import_react65.useEffect)(() => {
    if (!node1)
      return;
    if (disableOutsidePointerEvents) {
      if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
        $5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
        ownerDocument.body.style.pointerEvents = "none";
      }
      context.layersWithOutsidePointerEventsDisabled.add(node1);
    }
    context.layers.add(node1);
    $5cb92bef7577960e$var$dispatchUpdate();
    return () => {
      if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
        ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
    };
  }, [
    node1,
    ownerDocument,
    disableOutsidePointerEvents,
    context
  ]);
  (0, import_react65.useEffect)(() => {
    return () => {
      if (!node1)
        return;
      context.layers.delete(node1);
      context.layersWithOutsidePointerEventsDisabled.delete(node1);
      $5cb92bef7577960e$var$dispatchUpdate();
    };
  }, [
    node1,
    context
  ]);
  (0, import_react65.useEffect)(() => {
    const handleUpdate = () => force({});
    document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
    return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
  }, []);
  return /* @__PURE__ */ (0, import_react65.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, layerProps, {
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      ...props.style
    },
    onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  }));
});
var $5cb92bef7577960e$export$4d5eb2109db14228 = /* @__PURE__ */ (0, import_react65.forwardRef)((props, forwardedRef) => {
  const context = (0, import_react65.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
  const ref = (0, import_react65.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  (0, import_react65.useEffect)(() => {
    const node = ref.current;
    if (node) {
      context.branches.add(node);
      return () => {
        context.branches.delete(node);
      };
    }
  }, [
    context.branches
  ]);
  return /* @__PURE__ */ (0, import_react65.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, props, {
    ref: composedRefs
  }));
});
function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
  const isPointerInsideReactTreeRef = (0, import_react65.useRef)(false);
  const handleClickRef = (0, import_react65.useRef)(() => {
  });
  (0, import_react65.useEffect)(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
            discrete: true
          });
        };
        const eventDetail = {
          originalEvent: event
        };
        if (event.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
          ownerDocument.addEventListener("click", handleClickRef.current, {
            once: true
          });
        } else
          handleAndDispatchPointerDownOutsideEvent();
      } else
        ownerDocument.removeEventListener("click", handleClickRef.current);
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [
    ownerDocument,
    handlePointerDownOutside
  ]);
  return {
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
  const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
  const isFocusInsideReactTreeRef = (0, import_react65.useRef)(false);
  (0, import_react65.useEffect)(() => {
    const handleFocus = (event) => {
      if (event.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = {
          originalEvent: event
        };
        $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [
    ownerDocument,
    handleFocusOutside
  ]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function $5cb92bef7577960e$var$dispatchUpdate() {
  const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail
  });
  if (handler)
    target.addEventListener(name, handler, {
      once: true
    });
  if (discrete)
    $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
  else
    target.dispatchEvent(event);
}
var $5cb92bef7577960e$export$be92b6f5f03c0fe9 = $5cb92bef7577960e$export$177fb62ff3ec1f22;
var $5cb92bef7577960e$export$aecb2ddcb55c95be = $5cb92bef7577960e$export$4d5eb2109db14228;

// node_modules/@radix-ui/react-portal/dist/index.mjs
var import_react66 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var $f1701beae083dbae$export$602eac185826482c = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
  var _globalThis$document;
  const { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body, ...portalProps } = props;
  return container ? /* @__PURE__ */ import_react_dom3.default.createPortal(/* @__PURE__ */ (0, import_react66.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, portalProps, {
    ref: forwardedRef
  })), container) : null;
});

// node_modules/@radix-ui/react-presence/dist/index.mjs
var import_react68 = __toESM(require_react(), 1);
var import_react_dom4 = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
var import_react67 = __toESM(require_react(), 1);
var $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react67.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-presence/dist/index.mjs
function $fe963b355347cc68$export$3e6543de14f8614f(initialState2, machine) {
  return (0, import_react68.useReducer)((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState2);
}
var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
  const { present, children } = props;
  const presence = $921a889cee6df7e8$var$usePresence(present);
  const child = typeof children === "function" ? children({
    present: presence.isPresent
  }) : import_react68.Children.only(children);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? /* @__PURE__ */ (0, import_react68.cloneElement)(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence(present) {
  const [node1, setNode] = (0, import_react68.useState)();
  const stylesRef = (0, import_react68.useRef)({});
  const prevPresentRef = (0, import_react68.useRef)(present);
  const prevAnimationNameRef = (0, import_react68.useRef)("none");
  const initialState2 = present ? "mounted" : "unmounted";
  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState2, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  (0, import_react68.useEffect)(() => {
    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
      if (present)
        send("MOUNT");
      else if (currentAnimationName === "none" || (styles === null || styles === void 0 ? void 0 : styles.display) === "none")
        send("UNMOUNT");
      else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating)
          send("ANIMATION_OUT");
        else
          send("UNMOUNT");
      }
      prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (node1) {
      const handleAnimationEnd = (event) => {
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event.animationName);
        if (event.target === node1 && isCurrentAnimation)
          (0, import_react_dom4.flushSync)(() => send("ANIMATION_END"));
      };
      const handleAnimationStart = (event) => {
        if (event.target === node1)
          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      };
      node1.addEventListener("animationstart", handleAnimationStart);
      node1.addEventListener("animationcancel", handleAnimationEnd);
      node1.addEventListener("animationend", handleAnimationEnd);
      return () => {
        node1.removeEventListener("animationstart", handleAnimationStart);
        node1.removeEventListener("animationcancel", handleAnimationEnd);
        node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]);
  return {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: (0, import_react68.useCallback)((node) => {
      if (node)
        stylesRef.current = getComputedStyle(node);
      setNode(node);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName(styles) {
  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || "none";
}

// node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var import_react69 = __toESM(require_react(), 1);
function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
} }) {
  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value1 = isControlled ? prop : uncontrolledProp;
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  const setValue = (0, import_react69.useCallback)((nextValue) => {
    if (isControlled) {
      const setter = nextValue;
      const value = typeof nextValue === "function" ? setter(prop) : nextValue;
      if (value !== prop)
        handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange }) {
  const uncontrolledState = (0, import_react69.useState)(defaultProp);
  const [value] = uncontrolledState;
  const prevValueRef = (0, import_react69.useRef)(value);
  const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
  (0, import_react69.useEffect)(() => {
    if (prevValueRef.current !== value) {
      handleChange(value);
      prevValueRef.current = value;
    }
  }, [
    value,
    prevValueRef,
    handleChange
  ]);
  return uncontrolledState;
}

// node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
var import_react70 = __toESM(require_react(), 1);
var $ea1ef594cf570d83$export$439d29a4e110a164 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, props, {
    ref: forwardedRef,
    style: {
      position: "absolute",
      border: 0,
      width: 1,
      height: 1,
      padding: 0,
      margin: -1,
      overflow: "hidden",
      clip: "rect(0, 0, 0, 0)",
      whiteSpace: "nowrap",
      wordWrap: "normal",
      ...props.style
    }
  }));
});

// node_modules/@radix-ui/react-toast/dist/index.mjs
var $054eb8030ebde76e$var$PROVIDER_NAME = "ToastProvider";
var [$054eb8030ebde76e$var$Collection, $054eb8030ebde76e$var$useCollection, $054eb8030ebde76e$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2("Toast");
var [$054eb8030ebde76e$var$createToastContext, $054eb8030ebde76e$export$8a359da18fbc9073] = $c512c27ab02ef895$export$50c7b4e9d9f19c1("Toast", [
  $054eb8030ebde76e$var$createCollectionScope
]);
var [$054eb8030ebde76e$var$ToastProviderProvider, $054eb8030ebde76e$var$useToastProviderContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$PROVIDER_NAME);
var $054eb8030ebde76e$export$f5d03d415824e0e = (props) => {
  const { __scopeToast, label = "Notification", duration = 5e3, swipeDirection = "right", swipeThreshold = 50, children } = props;
  const [viewport, setViewport] = (0, import_react71.useState)(null);
  const [toastCount, setToastCount] = (0, import_react71.useState)(0);
  const isFocusedToastEscapeKeyDownRef = (0, import_react71.useRef)(false);
  const isClosePausedRef = (0, import_react71.useRef)(false);
  return /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$Collection.Provider, {
    scope: __scopeToast
  }, /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastProviderProvider, {
    scope: __scopeToast,
    label,
    duration,
    swipeDirection,
    swipeThreshold,
    toastCount,
    viewport,
    onViewportChange: setViewport,
    onToastAdd: (0, import_react71.useCallback)(() => setToastCount((prevCount) => prevCount + 1), []),
    onToastRemove: (0, import_react71.useCallback)(() => setToastCount((prevCount) => prevCount - 1), []),
    isFocusedToastEscapeKeyDownRef,
    isClosePausedRef
  }, children));
};
$054eb8030ebde76e$export$f5d03d415824e0e.propTypes = {
  label(props) {
    if (props.label && typeof props.label === "string" && !props.label.trim()) {
      const error = `Invalid prop \`label\` supplied to \`${$054eb8030ebde76e$var$PROVIDER_NAME}\`. Expected non-empty \`string\`.`;
      return new Error(error);
    }
    return null;
  }
};
var $054eb8030ebde76e$var$VIEWPORT_NAME = "ToastViewport";
var $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY = [
  "F8"
];
var $054eb8030ebde76e$var$VIEWPORT_PAUSE = "toast.viewportPause";
var $054eb8030ebde76e$var$VIEWPORT_RESUME = "toast.viewportResume";
var $054eb8030ebde76e$export$6192c2425ecfd989 = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, hotkey = $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY, label = "Notifications ({hotkey})", ...viewportProps } = props;
  const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$VIEWPORT_NAME, __scopeToast);
  const getItems = $054eb8030ebde76e$var$useCollection(__scopeToast);
  const wrapperRef = (0, import_react71.useRef)(null);
  const headFocusProxyRef = (0, import_react71.useRef)(null);
  const tailFocusProxyRef = (0, import_react71.useRef)(null);
  const ref = (0, import_react71.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onViewportChange);
  const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
  const hasToasts = context.toastCount > 0;
  (0, import_react71.useEffect)(() => {
    const handleKeyDown = (event) => {
      var _ref$current;
      const isHotkeyPressed = hotkey.every((key) => event[key] || event.code === key);
      if (isHotkeyPressed)
        (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [
    hotkey
  ]);
  (0, import_react71.useEffect)(() => {
    const wrapper = wrapperRef.current;
    const viewport = ref.current;
    if (hasToasts && wrapper && viewport) {
      const handlePause = () => {
        if (!context.isClosePausedRef.current) {
          const pauseEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_PAUSE);
          viewport.dispatchEvent(pauseEvent);
          context.isClosePausedRef.current = true;
        }
      };
      const handleResume = () => {
        if (context.isClosePausedRef.current) {
          const resumeEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_RESUME);
          viewport.dispatchEvent(resumeEvent);
          context.isClosePausedRef.current = false;
        }
      };
      const handleFocusOutResume = (event) => {
        const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
        if (isFocusMovingOutside)
          handleResume();
      };
      const handlePointerLeaveResume = () => {
        const isFocusInside = wrapper.contains(document.activeElement);
        if (!isFocusInside)
          handleResume();
      };
      wrapper.addEventListener("focusin", handlePause);
      wrapper.addEventListener("focusout", handleFocusOutResume);
      wrapper.addEventListener("pointermove", handlePause);
      wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
      window.addEventListener("blur", handlePause);
      window.addEventListener("focus", handleResume);
      return () => {
        wrapper.removeEventListener("focusin", handlePause);
        wrapper.removeEventListener("focusout", handleFocusOutResume);
        wrapper.removeEventListener("pointermove", handlePause);
        wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
        window.removeEventListener("blur", handlePause);
        window.removeEventListener("focus", handleResume);
      };
    }
  }, [
    hasToasts,
    context.isClosePausedRef
  ]);
  const getSortedTabbableCandidates = (0, import_react71.useCallback)(({ tabbingDirection }) => {
    const toastItems = getItems();
    const tabbableCandidates = toastItems.map((toastItem) => {
      const toastNode = toastItem.ref.current;
      const toastTabbableCandidates = [
        toastNode,
        ...$054eb8030ebde76e$var$getTabbableCandidates(toastNode)
      ];
      return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
    });
    return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
  }, [
    getItems
  ]);
  (0, import_react71.useEffect)(() => {
    const viewport = ref.current;
    if (viewport) {
      const handleKeyDown = (event) => {
        const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
        const isTabKey = event.key === "Tab" && !isMetaKey;
        if (isTabKey) {
          const focusedElement = document.activeElement;
          const isTabbingBackwards = event.shiftKey;
          const targetIsViewport = event.target === viewport;
          if (targetIsViewport && isTabbingBackwards) {
            var _headFocusProxyRef$cu;
            (_headFocusProxyRef$cu = headFocusProxyRef.current) === null || _headFocusProxyRef$cu === void 0 || _headFocusProxyRef$cu.focus();
            return;
          }
          const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
          const sortedCandidates = getSortedTabbableCandidates({
            tabbingDirection
          });
          const index2 = sortedCandidates.findIndex((candidate) => candidate === focusedElement);
          if ($054eb8030ebde76e$var$focusFirst(sortedCandidates.slice(index2 + 1)))
            event.preventDefault();
          else {
            var _headFocusProxyRef$cu2, _tailFocusProxyRef$cu;
            isTabbingBackwards ? (_headFocusProxyRef$cu2 = headFocusProxyRef.current) === null || _headFocusProxyRef$cu2 === void 0 || _headFocusProxyRef$cu2.focus() : (_tailFocusProxyRef$cu = tailFocusProxyRef.current) === null || _tailFocusProxyRef$cu === void 0 || _tailFocusProxyRef$cu.focus();
          }
        }
      };
      viewport.addEventListener("keydown", handleKeyDown);
      return () => viewport.removeEventListener("keydown", handleKeyDown);
    }
  }, [
    getItems,
    getSortedTabbableCandidates
  ]);
  return /* @__PURE__ */ (0, import_react71.createElement)($5cb92bef7577960e$export$aecb2ddcb55c95be, {
    ref: wrapperRef,
    role: "region",
    "aria-label": label.replace("{hotkey}", hotkeyLabel),
    tabIndex: -1,
    style: {
      pointerEvents: hasToasts ? void 0 : "none"
    }
  }, hasToasts && /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$FocusProxy, {
    ref: headFocusProxyRef,
    onFocusFromOutsideViewport: () => {
      const tabbableCandidates = getSortedTabbableCandidates({
        tabbingDirection: "forwards"
      });
      $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
    }
  }), /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$Collection.Slot, {
    scope: __scopeToast
  }, /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.ol, _extends({
    tabIndex: -1
  }, viewportProps, {
    ref: composedRefs
  }))), hasToasts && /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$FocusProxy, {
    ref: tailFocusProxyRef,
    onFocusFromOutsideViewport: () => {
      const tabbableCandidates = getSortedTabbableCandidates({
        tabbingDirection: "backwards"
      });
      $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
    }
  }));
});
var $054eb8030ebde76e$var$FOCUS_PROXY_NAME = "ToastFocusProxy";
var $054eb8030ebde76e$var$FocusProxy = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;
  const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$FOCUS_PROXY_NAME, __scopeToast);
  return /* @__PURE__ */ (0, import_react71.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, _extends({
    "aria-hidden": true,
    tabIndex: 0
  }, proxyProps, {
    ref: forwardedRef,
    style: {
      position: "fixed"
    },
    onFocus: (event) => {
      var _context$viewport;
      const prevFocusedElement = event.relatedTarget;
      const isFocusFromOutsideViewport = !((_context$viewport = context.viewport) !== null && _context$viewport !== void 0 && _context$viewport.contains(prevFocusedElement));
      if (isFocusFromOutsideViewport)
        onFocusFromOutsideViewport();
    }
  }));
});
var $054eb8030ebde76e$var$TOAST_NAME = "Toast";
var $054eb8030ebde76e$var$TOAST_SWIPE_START = "toast.swipeStart";
var $054eb8030ebde76e$var$TOAST_SWIPE_MOVE = "toast.swipeMove";
var $054eb8030ebde76e$var$TOAST_SWIPE_CANCEL = "toast.swipeCancel";
var $054eb8030ebde76e$var$TOAST_SWIPE_END = "toast.swipeEnd";
var $054eb8030ebde76e$export$8d8dc7d5f743331b = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;
  const [open = true, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react71.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || open
  }, /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastImpl, _extends({
    open
  }, toastProps, {
    ref: forwardedRef,
    onClose: () => setOpen(false),
    onPause: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onPause),
    onResume: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onResume),
    onSwipeStart: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeStart, (event) => {
      event.currentTarget.setAttribute("data-swipe", "start");
    }),
    onSwipeMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeMove, (event) => {
      const { x, y } = event.detail.delta;
      event.currentTarget.setAttribute("data-swipe", "move");
      event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x}px`);
      event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y}px`);
    }),
    onSwipeCancel: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeCancel, (event) => {
      event.currentTarget.setAttribute("data-swipe", "cancel");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
    }),
    onSwipeEnd: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeEnd, (event) => {
      const { x, y } = event.detail.delta;
      event.currentTarget.setAttribute("data-swipe", "end");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
      event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
      event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x}px`);
      event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y}px`);
      setOpen(false);
    })
  })));
});
var [$054eb8030ebde76e$var$ToastInteractiveProvider, $054eb8030ebde76e$var$useToastInteractiveContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$TOAST_NAME, {
  onClose() {
  }
});
var $054eb8030ebde76e$var$ToastImpl = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, type = "foreground", duration: durationProp, open, onClose, onEscapeKeyDown, onPause, onResume, onSwipeStart, onSwipeMove, onSwipeCancel, onSwipeEnd, ...toastProps } = props;
  const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
  const [node1, setNode] = (0, import_react71.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setNode(node));
  const pointerStartRef = (0, import_react71.useRef)(null);
  const swipeDeltaRef = (0, import_react71.useRef)(null);
  const duration1 = durationProp || context.duration;
  const closeTimerStartTimeRef = (0, import_react71.useRef)(0);
  const closeTimerRemainingTimeRef = (0, import_react71.useRef)(duration1);
  const closeTimerRef = (0, import_react71.useRef)(0);
  const { onToastAdd, onToastRemove } = context;
  const handleClose = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(() => {
    var _context$viewport2;
    const isFocusInToast = node1 === null || node1 === void 0 ? void 0 : node1.contains(document.activeElement);
    if (isFocusInToast)
      (_context$viewport2 = context.viewport) === null || _context$viewport2 === void 0 || _context$viewport2.focus();
    onClose();
  });
  const startTimer = (0, import_react71.useCallback)((duration) => {
    if (!duration || duration === Infinity)
      return;
    window.clearTimeout(closeTimerRef.current);
    closeTimerStartTimeRef.current = new Date().getTime();
    closeTimerRef.current = window.setTimeout(handleClose, duration);
  }, [
    handleClose
  ]);
  (0, import_react71.useEffect)(() => {
    const viewport = context.viewport;
    if (viewport) {
      const handleResume = () => {
        startTimer(closeTimerRemainingTimeRef.current);
        onResume === null || onResume === void 0 || onResume();
      };
      const handlePause = () => {
        const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;
        closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
        window.clearTimeout(closeTimerRef.current);
        onPause === null || onPause === void 0 || onPause();
      };
      viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
      viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
      return () => {
        viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
        viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
      };
    }
  }, [
    context.viewport,
    duration1,
    onPause,
    onResume,
    startTimer
  ]);
  (0, import_react71.useEffect)(() => {
    if (open && !context.isClosePausedRef.current)
      startTimer(duration1);
  }, [
    open,
    duration1,
    context.isClosePausedRef,
    startTimer
  ]);
  (0, import_react71.useEffect)(() => {
    onToastAdd();
    return () => onToastRemove();
  }, [
    onToastAdd,
    onToastRemove
  ]);
  const announceTextContent = (0, import_react71.useMemo)(() => {
    return node1 ? $054eb8030ebde76e$var$getAnnounceTextContent(node1) : null;
  }, [
    node1
  ]);
  if (!context.viewport)
    return null;
  return /* @__PURE__ */ (0, import_react71.createElement)(import_react71.Fragment, null, announceTextContent && /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastAnnounce, {
    __scopeToast,
    role: "status",
    "aria-live": type === "foreground" ? "assertive" : "polite",
    "aria-atomic": true
  }, announceTextContent), /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastInteractiveProvider, {
    scope: __scopeToast,
    onClose: handleClose
  }, /* @__PURE__ */ (0, import_react_dom5.createPortal)(/* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$Collection.ItemSlot, {
    scope: __scopeToast
  }, /* @__PURE__ */ (0, import_react71.createElement)($5cb92bef7577960e$export$be92b6f5f03c0fe9, {
    asChild: true,
    onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEscapeKeyDown, () => {
      if (!context.isFocusedToastEscapeKeyDownRef.current)
        handleClose();
      context.isFocusedToastEscapeKeyDownRef.current = false;
    })
  }, /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.li, _extends({
    role: "status",
    "aria-live": "off",
    "aria-atomic": true,
    tabIndex: 0,
    "data-state": open ? "open" : "closed",
    "data-swipe-direction": context.swipeDirection
  }, toastProps, {
    ref: composedRefs,
    style: {
      userSelect: "none",
      touchAction: "none",
      ...props.style
    },
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key !== "Escape")
        return;
      onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event.nativeEvent);
      if (!event.nativeEvent.defaultPrevented) {
        context.isFocusedToastEscapeKeyDownRef.current = true;
        handleClose();
      }
    }),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      if (event.button !== 0)
        return;
      pointerStartRef.current = {
        x: event.clientX,
        y: event.clientY
      };
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event) => {
      if (!pointerStartRef.current)
        return;
      const x = event.clientX - pointerStartRef.current.x;
      const y = event.clientY - pointerStartRef.current.y;
      const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
      const isHorizontalSwipe = [
        "left",
        "right"
      ].includes(context.swipeDirection);
      const clamp3 = [
        "left",
        "up"
      ].includes(context.swipeDirection) ? Math.min : Math.max;
      const clampedX = isHorizontalSwipe ? clamp3(0, x) : 0;
      const clampedY = !isHorizontalSwipe ? clamp3(0, y) : 0;
      const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
      const delta = {
        x: clampedX,
        y: clampedY
      };
      const eventDetail = {
        originalEvent: event,
        delta
      };
      if (hasSwipeMoveStarted) {
        swipeDeltaRef.current = delta;
        $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
          discrete: false
        });
      } else if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
        swipeDeltaRef.current = delta;
        $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_START, onSwipeStart, eventDetail, {
          discrete: false
        });
        event.target.setPointerCapture(event.pointerId);
      } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer)
        pointerStartRef.current = null;
    }),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event1) => {
      const delta = swipeDeltaRef.current;
      const target = event1.target;
      if (target.hasPointerCapture(event1.pointerId))
        target.releasePointerCapture(event1.pointerId);
      swipeDeltaRef.current = null;
      pointerStartRef.current = null;
      if (delta) {
        const toast = event1.currentTarget;
        const eventDetail = {
          originalEvent: event1,
          delta
        };
        if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold))
          $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
            discrete: true
          });
        else
          $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_CANCEL, onSwipeCancel, eventDetail, {
            discrete: true
          });
        toast.addEventListener("click", (event) => event.preventDefault(), {
          once: true
        });
      }
    })
  })))), context.viewport)));
});
$054eb8030ebde76e$var$ToastImpl.propTypes = {
  type(props) {
    if (props.type && ![
      "foreground",
      "background"
    ].includes(props.type)) {
      const error = `Invalid prop \`type\` supplied to \`${$054eb8030ebde76e$var$TOAST_NAME}\`. Expected \`foreground | background\`.`;
      return new Error(error);
    }
    return null;
  }
};
var $054eb8030ebde76e$var$ToastAnnounce = (props) => {
  const { __scopeToast, children, ...announceProps } = props;
  const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
  const [renderAnnounceText, setRenderAnnounceText] = (0, import_react71.useState)(false);
  const [isAnnounced, setIsAnnounced] = (0, import_react71.useState)(false);
  $054eb8030ebde76e$var$useNextFrame(() => setRenderAnnounceText(true));
  (0, import_react71.useEffect)(() => {
    const timer = window.setTimeout(() => setIsAnnounced(true), 1e3);
    return () => window.clearTimeout(timer);
  }, []);
  return isAnnounced ? null : /* @__PURE__ */ (0, import_react71.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: true
  }, /* @__PURE__ */ (0, import_react71.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, announceProps, renderAnnounceText && /* @__PURE__ */ (0, import_react71.createElement)(import_react71.Fragment, null, context.label, " ", children)));
};
var $054eb8030ebde76e$export$16d42d7c29b95a4 = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, ...titleProps } = props;
  return /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, titleProps, {
    ref: forwardedRef
  }));
});
var $054eb8030ebde76e$export$ecddd96c53621d9a = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, ...descriptionProps } = props;
  return /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, descriptionProps, {
    ref: forwardedRef
  }));
});
var $054eb8030ebde76e$var$ACTION_NAME = "ToastAction";
var $054eb8030ebde76e$export$3019feecfda683d2 = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { altText, ...actionProps } = props;
  if (!altText)
    return null;
  return /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
    altText,
    asChild: true
  }, /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$export$811e70f61c205839, _extends({}, actionProps, {
    ref: forwardedRef
  })));
});
$054eb8030ebde76e$export$3019feecfda683d2.propTypes = {
  altText(props) {
    if (!props.altText)
      return new Error(`Missing prop \`altText\` expected on \`${$054eb8030ebde76e$var$ACTION_NAME}\``);
    return null;
  }
};
var $054eb8030ebde76e$var$CLOSE_NAME = "ToastClose";
var $054eb8030ebde76e$export$811e70f61c205839 = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, ...closeProps } = props;
  const interactiveContext = $054eb8030ebde76e$var$useToastInteractiveContext($054eb8030ebde76e$var$CLOSE_NAME, __scopeToast);
  return /* @__PURE__ */ (0, import_react71.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
    asChild: true
  }, /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button"
  }, closeProps, {
    ref: forwardedRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, interactiveContext.onClose)
  })));
});
var $054eb8030ebde76e$var$ToastAnnounceExclude = /* @__PURE__ */ (0, import_react71.forwardRef)((props, forwardedRef) => {
  const { __scopeToast, altText, ...announceExcludeProps } = props;
  return /* @__PURE__ */ (0, import_react71.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-radix-toast-announce-exclude": "",
    "data-radix-toast-announce-alt": altText || void 0
  }, announceExcludeProps, {
    ref: forwardedRef
  }));
});
function $054eb8030ebde76e$var$getAnnounceTextContent(container) {
  const textContent = [];
  const childNodes = Array.from(container.childNodes);
  childNodes.forEach((node) => {
    if (node.nodeType === node.TEXT_NODE && node.textContent)
      textContent.push(node.textContent);
    if ($054eb8030ebde76e$var$isHTMLElement(node)) {
      const isHidden = node.ariaHidden || node.hidden || node.style.display === "none";
      const isExcluded = node.dataset.radixToastAnnounceExclude === "";
      if (!isHidden) {
        if (isExcluded) {
          const altText = node.dataset.radixToastAnnounceAlt;
          if (altText)
            textContent.push(altText);
        } else
          textContent.push(...$054eb8030ebde76e$var$getAnnounceTextContent(node));
      }
    }
  });
  return textContent;
}
function $054eb8030ebde76e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  const currentTarget = detail.originalEvent.currentTarget;
  const event = new CustomEvent(name, {
    bubbles: true,
    cancelable: true,
    detail
  });
  if (handler)
    currentTarget.addEventListener(name, handler, {
      once: true
    });
  if (discrete)
    $8927f6f2acc4f386$export$6d1a0317bde7de7f(currentTarget, event);
  else
    currentTarget.dispatchEvent(event);
}
var $054eb8030ebde76e$var$isDeltaInDirection = (delta, direction, threshold = 0) => {
  const deltaX = Math.abs(delta.x);
  const deltaY = Math.abs(delta.y);
  const isDeltaX = deltaX > deltaY;
  if (direction === "left" || direction === "right")
    return isDeltaX && deltaX > threshold;
  else
    return !isDeltaX && deltaY > threshold;
};
function $054eb8030ebde76e$var$useNextFrame(callback = () => {
}) {
  const fn = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    let raf1 = 0;
    let raf2 = 0;
    raf1 = window.requestAnimationFrame(() => raf2 = window.requestAnimationFrame(fn));
    return () => {
      window.cancelAnimationFrame(raf1);
      window.cancelAnimationFrame(raf2);
    };
  }, [
    fn
  ]);
}
function $054eb8030ebde76e$var$isHTMLElement(node) {
  return node.nodeType === node.ELEMENT_NODE;
}
function $054eb8030ebde76e$var$getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function $054eb8030ebde76e$var$focusFirst(candidates) {
  const previouslyFocusedElement = document.activeElement;
  return candidates.some((candidate) => {
    if (candidate === previouslyFocusedElement)
      return true;
    candidate.focus();
    return document.activeElement !== previouslyFocusedElement;
  });
}
var $054eb8030ebde76e$export$be92b6f5f03c0fe9 = $054eb8030ebde76e$export$8d8dc7d5f743331b;
var $054eb8030ebde76e$export$f99233281efd08a0 = $054eb8030ebde76e$export$16d42d7c29b95a4;
var $054eb8030ebde76e$export$393edc798c47379d = $054eb8030ebde76e$export$ecddd96c53621d9a;
var $054eb8030ebde76e$export$e19cd5f9376f8cee = $054eb8030ebde76e$export$3019feecfda683d2;
var $054eb8030ebde76e$export$f39c2d165cd861fe = $054eb8030ebde76e$export$811e70f61c205839;

// node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs
var import_classnames27 = __toESM(require_classnames(), 1);
var import_react130 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/Dialogs.mjs
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);

// node_modules/@radix-ui/react-dialog/dist/index.mjs
var import_react75 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-id/dist/index.mjs
var $2AODx$react = __toESM(require_react(), 1);
var $1746a345f3d73bb7$var$useReactId = $2AODx$react["useId".toString()] || (() => void 0);
var $1746a345f3d73bb7$var$count = 0;
function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
  const [id, setId] = $2AODx$react.useState($1746a345f3d73bb7$var$useReactId());
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (!deterministicId)
      setId((reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++));
  }, [
    deterministicId
  ]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-focus-scope/dist/index.mjs
var import_react72 = __toESM(require_react(), 1);
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
var $d3863c46a17e8a28$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ (0, import_react72.forwardRef)((props, forwardedRef) => {
  const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
  const [container1, setContainer] = (0, import_react72.useState)(null);
  const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
  const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
  const lastFocusedElementRef = (0, import_react72.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContainer(node));
  const focusScope = (0, import_react72.useRef)({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  (0, import_react72.useEffect)(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1)
          return;
        const target = event.target;
        if (container1.contains(target))
          lastFocusedElementRef.current = target;
        else
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1)
          return;
        const relatedTarget = event.relatedTarget;
        if (relatedTarget === null)
          return;
        if (!container1.contains(relatedTarget))
          $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
            select: true
          });
      }, handleMutations = function(mutations) {
        const focusedElement = document.activeElement;
        if (focusedElement !== document.body)
          return;
        for (const mutation of mutations)
          if (mutation.removedNodes.length > 0)
            $d3863c46a17e8a28$var$focus(container1);
      };
      document.addEventListener("focusin", handleFocusIn);
      document.addEventListener("focusout", handleFocusOut);
      const mutationObserver = new MutationObserver(handleMutations);
      if (container1)
        mutationObserver.observe(container1, {
          childList: true,
          subtree: true
        });
      return () => {
        document.removeEventListener("focusin", handleFocusIn);
        document.removeEventListener("focusout", handleFocusOut);
        mutationObserver.disconnect();
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]);
  (0, import_react72.useEffect)(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container1.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
            select: true
          });
          if (document.activeElement === previouslyFocusedElement)
            $d3863c46a17e8a28$var$focus(container1);
        }
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container1.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented)
            $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
              select: true
            });
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  const handleKeyDown = (0, import_react72.useCallback)((event) => {
    if (!loop && !trapped)
      return;
    if (focusScope.paused)
      return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
    const focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container = event.currentTarget;
      const [first, last3] = $d3863c46a17e8a28$var$getTabbableEdges(container);
      const hasTabbableElementsInside = first && last3;
      if (!hasTabbableElementsInside) {
        if (focusedElement === container)
          event.preventDefault();
      } else {
        if (!event.shiftKey && focusedElement === last3) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(first, {
              select: true
            });
        } else if (event.shiftKey && focusedElement === first) {
          event.preventDefault();
          if (loop)
            $d3863c46a17e8a28$var$focus(last3, {
              select: true
            });
        }
      }
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ (0, import_react72.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    $d3863c46a17e8a28$var$focus(candidate, {
      select
    });
    if (document.activeElement !== previouslyFocusedElement)
      return;
  }
}
function $d3863c46a17e8a28$var$getTabbableEdges(container) {
  const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container);
  const first = $d3863c46a17e8a28$var$findVisible(candidates, container);
  const last3 = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
  return [
    first,
    last3
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible(elements, container) {
  for (const element of elements) {
    if (!$d3863c46a17e8a28$var$isHidden(element, {
      upTo: container
    }))
      return element;
  }
}
function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden")
    return true;
  while (node) {
    if (upTo !== void 0 && node === upTo)
      return false;
    if (getComputedStyle(node).display === "none")
      return true;
    node = node.parentElement;
  }
  return false;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    });
    if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select)
      element.select();
  }
}
var $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
  let stack2 = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack2[0];
      if (focusScope !== activeFocusScope)
        activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
      stack2 = $d3863c46a17e8a28$var$arrayRemove(stack2, focusScope);
      stack2.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack2 = $d3863c46a17e8a28$var$arrayRemove(stack2, focusScope);
      (_stack$ = stack2[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove(array2, item) {
  const updatedArray = [
    ...array2
  ];
  const index2 = updatedArray.indexOf(item);
  if (index2 !== -1)
    updatedArray.splice(index2, 1);
  return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
  return items.filter((item) => item.tagName !== "A");
}

// node_modules/@radix-ui/react-focus-guards/dist/index.mjs
var import_react73 = __toESM(require_react(), 1);
var $3db38b7d1fb3fe6a$var$count = 0;
function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
  (0, import_react73.useEffect)(() => {
    var _edgeGuards$, _edgeGuards$2;
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
    document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
    $3db38b7d1fb3fe6a$var$count++;
    return () => {
      if ($3db38b7d1fb3fe6a$var$count === 1)
        document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
      $3db38b7d1fb3fe6a$var$count--;
    };
  }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
  return element;
}

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React34 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React30 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react74 = __toESM(require_react());
function useCallbackRef(initialValue, callback) {
  var ref = (0, import_react74.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last3 = ref.value;
          if (last3 !== value) {
            ref.value = value;
            ref.callback(value, last3);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React28 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React28.useLayoutEffect : React28.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults2, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults2;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/exports.js
var React29 = __toESM(require_react());
var SideCar = function(_a2) {
  var sideCar = _a2.sideCar, rest = __rest(_a2, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React29.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React30.forwardRef(function(props, parentRef) {
  var ref = React30.useRef(null);
  var _a2 = React30.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a2[0], setCallbacks = _a2[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return React30.createElement(React30.Fragment, null, enabled && React30.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React30.cloneElement(React30.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React30.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React33 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React32 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React31 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    React31.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a2) {
    var styles = _a2.styles, dynamic = _a2.dynamic;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse(left), parse(top), parse(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a2, allowRelative, gapMode, important) {
  var left = _a2.left, top = _a2.top, right = _a2.right, gap = _a2.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function() {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function() {
  React32.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a2) {
  var noRelative = _a2.noRelative, noImportant = _a2.noImportant, _b2 = _a2.gapMode, gapMode = _b2 === void 0 ? "margin" : _b2;
  useLockAttribute();
  var gap = React32.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React32.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node) {
  return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node, overflow) {
  var styles = window.getComputedStyle(node);
  return styles[overflow] !== "hidden" && !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible");
};
var elementCouldBeVScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled = function(axis, node) {
  var current2 = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current2 instanceof ShadowRoot) {
      current2 = current2.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current2);
    if (isScrollable) {
      var _a2 = getScrollVariables(axis, current2), s = _a2[1], d = _a2[2];
      if (s > d) {
        return true;
      }
    }
    current2 = current2.parentNode;
  } while (current2 && current2 !== document.body);
  return false;
};
var getVScrollVariables = function(_a2) {
  var scrollTop = _a2.scrollTop, scrollHeight = _a2.scrollHeight, clientHeight = _a2.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a2) {
  var scrollLeft = _a2.scrollLeft, scrollWidth = _a2.scrollWidth, clientWidth = _a2.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a2 = getScrollVariables(axis, target), position = _a2[0], scroll_1 = _a2[1], capacity = _a2[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React33.useRef([]);
  var touchStartRef = React33.useRef([0, 0]);
  var activeAxis = React33.useRef();
  var id = React33.useState(idCounter++)[0];
  var Style2 = React33.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React33.useRef(props);
  React33.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React33.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React33.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React33.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React33.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React33.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React33.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React33.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React33.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst3) {
        return inst3 !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React33.createElement(React33.Fragment, null, inert ? React33.createElement(Style2, { styles: generateStyle(id) }) : null, removeScrollBar ? React33.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React34.forwardRef(function(props, ref) {
  return React34.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node) {
  return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x) {
    return Boolean(x);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        try {
          var attr = node.getAttribute(controlAttribute);
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute(controlAttribute, "true");
          }
        } catch (e) {
          console.error("aria-hidden: cannot operate on ", node, e);
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};

// node_modules/@radix-ui/react-dialog/dist/index.mjs
var $5d3850c4d0b4e6c7$var$DIALOG_NAME = "Dialog";
var [$5d3850c4d0b4e6c7$var$createDialogContext, $5d3850c4d0b4e6c7$export$cc702773b8ea3e41] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($5d3850c4d0b4e6c7$var$DIALOG_NAME);
var [$5d3850c4d0b4e6c7$var$DialogProvider, $5d3850c4d0b4e6c7$var$useDialogContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$DIALOG_NAME);
var $5d3850c4d0b4e6c7$export$3ddf2d174ce01153 = (props) => {
  const { __scopeDialog, children, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
  const triggerRef = (0, import_react75.useRef)(null);
  const contentRef = (0, import_react75.useRef)(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogProvider, {
    scope: __scopeDialog,
    triggerRef,
    contentRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    titleId: $1746a345f3d73bb7$export$f680877a34711e37(),
    descriptionId: $1746a345f3d73bb7$export$f680877a34711e37(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react75.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    modal
  }, children);
};
var $5d3850c4d0b4e6c7$var$PORTAL_NAME = "DialogPortal";
var [$5d3850c4d0b4e6c7$var$PortalProvider, $5d3850c4d0b4e6c7$var$usePortalContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, {
  forceMount: void 0
});
var $5d3850c4d0b4e6c7$export$dad7c95542bacce0 = (props) => {
  const { __scopeDialog, forceMount, children, container } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$PortalProvider, {
    scope: __scopeDialog,
    forceMount
  }, import_react75.Children.map(children, (child) => /* @__PURE__ */ (0, import_react75.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react75.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: true,
    container
  }, child))));
};
var $5d3850c4d0b4e6c7$var$OVERLAY_NAME = "DialogOverlay";
var $5d3850c4d0b4e6c7$export$bd1d06c79be19e17 = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
  return context.modal ? /* @__PURE__ */ (0, import_react75.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogOverlayImpl, _extends({}, overlayProps, {
    ref: forwardedRef
  }))) : null;
});
var $5d3850c4d0b4e6c7$var$DialogOverlayImpl = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...overlayProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react75.createElement)(Combination_default, {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
    allowPinchZoom: true,
    shards: [
      context.contentRef
    ]
  }, /* @__PURE__ */ (0, import_react75.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, overlayProps, {
    ref: forwardedRef,
    style: {
      pointerEvents: "auto",
      ...overlayProps.style
    }
  })));
});
var $5d3850c4d0b4e6c7$var$CONTENT_NAME = "DialogContent";
var $5d3850c4d0b4e6c7$export$b6d9565de1e068cf = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  return /* @__PURE__ */ (0, import_react75.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
var $5d3850c4d0b4e6c7$var$DialogContentModal = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const contentRef = (0, import_react75.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.contentRef, contentRef);
  (0, import_react75.useEffect)(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      if (isRightClick)
        event.preventDefault();
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event) => event.preventDefault())
  }));
});
var $5d3850c4d0b4e6c7$var$DialogContentNonModal = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
  const hasInteractedOutsideRef = (0, import_react75.useRef)(false);
  const hasPointerDownOutsideRef = (0, import_react75.useRef)(false);
  return /* @__PURE__ */ (0, import_react75.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
var $5d3850c4d0b4e6c7$var$DialogContentImpl = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, __scopeDialog);
  const contentRef = (0, import_react75.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  return /* @__PURE__ */ (0, import_react75.createElement)(import_react75.Fragment, null, /* @__PURE__ */ (0, import_react75.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react75.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, _extends({
    role: "dialog",
    id: context.contentId,
    "aria-describedby": context.descriptionId,
    "aria-labelledby": context.titleId,
    "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
  }, contentProps, {
    ref: composedRefs,
    onDismiss: () => context.onOpenChange(false)
  }))), false);
});
var $5d3850c4d0b4e6c7$var$TITLE_NAME = "DialogTitle";
var $5d3850c4d0b4e6c7$export$16f7638e4a34b909 = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...titleProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TITLE_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react75.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.h2, _extends({
    id: context.titleId
  }, titleProps, {
    ref: forwardedRef
  }));
});
var $5d3850c4d0b4e6c7$var$CLOSE_NAME = "DialogClose";
var $5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac = /* @__PURE__ */ (0, import_react75.forwardRef)((props, forwardedRef) => {
  const { __scopeDialog, ...closeProps } = props;
  const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CLOSE_NAME, __scopeDialog);
  return /* @__PURE__ */ (0, import_react75.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button"
  }, closeProps, {
    ref: forwardedRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, () => context.onOpenChange(false))
  }));
});
function $5d3850c4d0b4e6c7$var$getState(open) {
  return open ? "open" : "closed";
}
var $5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME = "DialogTitleWarning";
var [$5d3850c4d0b4e6c7$export$69b62a49393917d6, $5d3850c4d0b4e6c7$var$useWarningContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109($5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME, {
  contentName: $5d3850c4d0b4e6c7$var$CONTENT_NAME,
  titleName: $5d3850c4d0b4e6c7$var$TITLE_NAME,
  docsSlug: "dialog"
});
var $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9 = $5d3850c4d0b4e6c7$export$3ddf2d174ce01153;
var $5d3850c4d0b4e6c7$export$602eac185826482c = $5d3850c4d0b4e6c7$export$dad7c95542bacce0;
var $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff = $5d3850c4d0b4e6c7$export$bd1d06c79be19e17;
var $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2 = $5d3850c4d0b4e6c7$export$b6d9565de1e068cf;

// node_modules/tldraw/dist-esm/lib/ui/components/Dialogs.mjs
var import_react77 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/context/dialogs.mjs
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var import_react76 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/context/events.mjs
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var React35 = __toESM(require_react(), 1);
var defaultEventHandler = () => void 0;
var EventsContext = React35.createContext({});
function UiEventsProvider({ onEvent, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(EventsContext.Provider, { value: onEvent != null ? onEvent : defaultEventHandler, children });
}
function useUiEvents() {
  const eventHandler2 = React35.useContext(EventsContext);
  return eventHandler2 != null ? eventHandler2 : defaultEventHandler;
}

// node_modules/tldraw/dist-esm/lib/ui/context/dialogs.mjs
var DialogsContext = (0, import_react76.createContext)({});
function DialogsProvider({ children }) {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  const [dialogs, setDialogs] = (0, import_react76.useState)([]);
  const addDialog = (0, import_react76.useCallback)((dialog) => {
    var _a2;
    const id = (_a2 = dialog.id) != null ? _a2 : uniqueId();
    setDialogs((d) => {
      return [...d.filter((m) => m.id !== dialog.id), { ...dialog, id }];
    });
    trackEvent("open-menu", { source: "dialog", id });
    editor.addOpenMenu(id);
    return id;
  }, [editor, trackEvent]);
  const updateDialog = (0, import_react76.useCallback)((id, newDialogData) => {
    setDialogs((d) => d.map((m) => {
      if (m.id === id) {
        return {
          ...m,
          ...newDialogData
        };
      }
      return m;
    }));
    trackEvent("open-menu", { source: "dialog", id });
    editor.addOpenMenu(id);
    return id;
  }, [editor, trackEvent]);
  const removeDialog = (0, import_react76.useCallback)((id) => {
    setDialogs((d) => d.filter((m) => {
      var _a2;
      if (m.id === id) {
        (_a2 = m.onClose) == null ? void 0 : _a2.call(m);
        return false;
      }
      return true;
    }));
    trackEvent("close-menu", { source: "dialog", id });
    editor.deleteOpenMenu(id);
    return id;
  }, [editor, trackEvent]);
  const clearDialogs = (0, import_react76.useCallback)(() => {
    setDialogs((d) => {
      d.forEach((m) => {
        var _a2;
        (_a2 = m.onClose) == null ? void 0 : _a2.call(m);
        trackEvent("close-menu", { source: "dialog", id: m.id });
        editor.deleteOpenMenu(m.id);
      });
      return [];
    });
  }, [editor, trackEvent]);
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DialogsContext.Provider, {
    value: { dialogs, addDialog, removeDialog, clearDialogs, updateDialog },
    children
  });
}
function useDialogs() {
  const ctx = (0, import_react76.useContext)(DialogsContext);
  if (!ctx) {
    throw new Error("useDialogs must be used within a DialogsProvider");
  }
  return ctx;
}

// node_modules/tldraw/dist-esm/lib/ui/components/Dialogs.mjs
var Dialog = ({ id, component: ModalContent, onClose }) => {
  const { removeDialog } = useDialogs();
  const container = useContainer();
  const handleOpenChange = (0, import_react77.useCallback)((isOpen) => {
    if (!isOpen) {
      if (onClose) {
        try {
          onClose();
        } catch (err) {
          console.warn(err);
        }
      }
      removeDialog(id);
    }
  }, [id, onClose, removeDialog]);
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, { onOpenChange: handleOpenChange, defaultOpen: true, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)($5d3850c4d0b4e6c7$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff, {
    dir: "ltr",
    className: "tlui-dialog__overlay",
    onClick: (e) => {
      if (e.target === e.currentTarget)
        handleOpenChange(false);
    },
    children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, { dir: "ltr", className: "tlui-dialog__content", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ModalContent, { onClose: () => handleOpenChange(false) }) })
  }) }) });
};
function _Dialogs() {
  const { dialogs } = useDialogs();
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_jsx_runtime74.Fragment, { children: dialogs.map((dialog) => /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Dialog, { ...dialog }, dialog.id)) });
}
var Dialogs = import_react77.default.memo(_Dialogs);

// node_modules/tldraw/dist-esm/lib/ui/components/FollowingIndicator.mjs
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
function FollowingIndicator() {
  const editor = useEditor();
  const followingUserId = useValue("follow", () => editor.getInstanceState().followingUserId, [
    editor
  ]);
  if (!followingUserId)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(FollowingIndicatorInner, { userId: followingUserId });
}
function FollowingIndicatorInner({ userId }) {
  const presence = usePresence(userId);
  if (!presence)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "tlui-following-indicator", style: { borderColor: presence.color } });
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toasts.mjs
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var React38 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/context/toasts.mjs
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var import_react78 = __toESM(require_react(), 1);
var ToastsContext = (0, import_react78.createContext)({});
function ToastsProvider({ children }) {
  const [toasts, setToasts] = (0, import_react78.useState)([]);
  const addToast = (0, import_react78.useCallback)((toast) => {
    var _a2;
    const id = (_a2 = toast.id) != null ? _a2 : uniqueId();
    setToasts((d) => [...d.filter((m) => m.id !== toast.id), { ...toast, id }]);
    return id;
  }, []);
  const removeToast = (0, import_react78.useCallback)((id) => {
    setToasts((d) => d.filter((m) => m.id !== id));
    return id;
  }, []);
  const clearToasts = (0, import_react78.useCallback)(() => {
    setToasts(() => []);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ToastsContext.Provider, { value: { toasts, addToast, removeToast, clearToasts }, children });
}
function useToasts() {
  const ctx = (0, import_react78.useContext)(ToastsContext);
  if (!ctx) {
    throw new Error("useToasts must be used within a ToastsProvider");
  }
  return ctx;
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButton.mjs
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var import_classnames18 = __toESM(require_classnames(), 1);
var React37 = __toESM(require_react(), 1);
var TldrawUiButton = React37.forwardRef(function TldrawUiButton2({ children, disabled, type, ...props }, ref) {
  const editor = useEditor();
  const current2 = ref == null ? void 0 : ref.current;
  if (disabled && current2 === document.activeElement) {
    editor.getContainer().focus();
  }
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("button", {
    ref,
    type: "button",
    draggable: false,
    disabled,
    ...props,
    className: (0, import_classnames18.default)("tlui-button", `tlui-button__${type}`, props.className),
    children
  });
});

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonLabel.mjs
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
function TldrawUiButtonLabel({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { className: "tlui-button__label", children });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiIcon.mjs
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var import_classnames19 = __toESM(require_classnames(), 1);
var import_react79 = __toESM(require_react(), 1);
var TldrawUiIcon = (0, import_react79.memo)(function TldrawUi({
  small,
  invertIcon,
  icon,
  color,
  className,
  ...props
}) {
  var _a2;
  const assetUrls = useAssetUrls();
  const asset = (_a2 = assetUrls.icons[icon]) != null ? _a2 : assetUrls.icons["question-mark-circle"];
  const ref = (0, import_react79.useRef)(null);
  (0, import_react79.useLayoutEffect)(() => {
    if (!asset) {
      console.error(`Icon not found: ${icon}. Add it to the assetUrls.icons object.`);
    }
    if (ref == null ? void 0 : ref.current) {
      ref.current.style.webkitMask = `url(${asset}) center 100% / 100% no-repeat`;
    }
  }, [ref, asset, icon]);
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", {
    ...props,
    ref,
    className: (0, import_classnames19.default)("tlui-icon", { "tlui-icon__small": small }, className),
    style: {
      color,
      mask: `url(${asset}) center 100% / 100% no-repeat`,
      transform: invertIcon ? "scale(-1, 1)" : void 0
    }
  });
});

// node_modules/tldraw/dist-esm/lib/ui/components/Toasts.mjs
var SEVERITY_TO_ICON = {
  success: "check-circle",
  warning: "warning-triangle",
  error: "cross-circle",
  info: "info-circle"
};
function Toast({ toast }) {
  var _a2, _b2;
  const { removeToast } = useToasts();
  const msg2 = useTranslation();
  const onOpenChange = (isOpen) => {
    if (!isOpen) {
      removeToast(toast.id);
    }
  };
  const hasActions = toast.actions && toast.actions.length > 0;
  const icon = toast.icon || toast.severity && SEVERITY_TO_ICON[toast.severity];
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)($054eb8030ebde76e$export$be92b6f5f03c0fe9, {
    onOpenChange,
    className: "tlui-toast__container",
    duration: toast.keepOpen ? Infinity : 5e3,
    "data-severity": toast.severity,
    children: [
      icon && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "tlui-toast__icon", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiIcon, { icon }) }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "tlui-toast__main", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "tlui-toast__content", children: [
          toast.title && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$f99233281efd08a0, { className: "tlui-toast__title", children: toast.title }),
          toast.description && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$393edc798c47379d, { className: "tlui-toast__description", children: toast.description })
        ] }),
        toast.actions && /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "tlui-toast__actions", children: [
          toast.actions.map((action, i) => /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$e19cd5f9376f8cee, { altText: action.label, asChild: true, onClick: action.onClick, children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButton, { type: action.type, children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButtonLabel, { children: action.label }) }) }, i)),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButton, {
            type: "normal",
            className: "tlui-toast__close",
            style: { marginLeft: "auto" },
            children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButtonLabel, { children: (_a2 = toast.closeLabel) != null ? _a2 : msg2("toast.close") })
          }) })
        ] })
      ] }),
      !hasActions && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButton, { type: "normal", className: "tlui-toast__close", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(TldrawUiButtonLabel, { children: (_b2 = toast.closeLabel) != null ? _b2 : msg2("toast.close") }) }) })
    ]
  });
}
function _Toasts() {
  const { toasts } = useToasts();
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(import_jsx_runtime80.Fragment, { children: toasts.map((toast) => /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(Toast, { toast }, toast.id)) });
}
var Toasts = React38.memo(_Toasts);
function ToastViewport() {
  const { toasts } = useToasts();
  const [hasToasts, setHasToasts] = React38.useState(false);
  React38.useEffect(() => {
    let cancelled2 = false;
    if (toasts.length) {
      setHasToasts(true);
    } else {
      setTimeout(() => {
        if (!cancelled2) {
          setHasToasts(false);
        }
      }, 1e3);
    }
    return () => {
      cancelled2 = true;
    };
  }, [toasts.length, setHasToasts]);
  if (!hasToasts)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)($054eb8030ebde76e$export$6192c2425ecfd989, { className: "tlui-toast__viewport" });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonIcon.mjs
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
function TldrawUiButtonIcon({ icon, small, invertIcon }) {
  return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiIcon, { className: "tlui-button__icon", icon, small, invertIcon });
}

// node_modules/tldraw/dist-esm/lib/ui/constants.mjs
var PORTRAIT_BREAKPOINTS = [0, 390, 428, 468, 580, 640, 840, 1023];
var PORTRAIT_BREAKPOINT = /* @__PURE__ */ ((PORTRAIT_BREAKPOINT2) => {
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["ZERO"] = 0] = "ZERO";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XXS"] = 1] = "MOBILE_XXS";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XS"] = 2] = "MOBILE_XS";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_SM"] = 3] = "MOBILE_SM";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE"] = 4] = "MOBILE";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET_SM"] = 5] = "TABLET_SM";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET"] = 6] = "TABLET";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["DESKTOP"] = 7] = "DESKTOP";
  return PORTRAIT_BREAKPOINT2;
})(PORTRAIT_BREAKPOINT || {});

// node_modules/tldraw/dist-esm/lib/ui/context/TldrawUiContextProvider.mjs
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/version.mjs
var version = "2.1.4";

// node_modules/tldraw/dist-esm/lib/utils/static-assets/assetUrls.mjs
var import_react80 = __toESM(require_react(), 1);
var defaultEditorAssetUrls = {
  fonts: {
    draw: `https://unpkg.com/@tldraw/assets@${version}/fonts/Shantell_Sans-Tldrawish.woff2`,
    serif: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexSerif-Medium.woff2`,
    sansSerif: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexSans-Medium.woff2`,
    monospace: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexMono-Medium.woff2`
  }
};
function useDefaultEditorAssetsWithOverrides(overrides) {
  return (0, import_react80.useMemo)(() => {
    if (!overrides)
      return defaultEditorAssetUrls;
    return {
      fonts: { ...defaultEditorAssetUrls.fonts, ...overrides == null ? void 0 : overrides.fonts }
    };
  }, [overrides]);
}

// node_modules/tldraw/dist-esm/lib/ui/icon-types.mjs
var iconTypes = [
  "align-bottom-center",
  "align-bottom-left",
  "align-bottom-right",
  "align-bottom",
  "align-center-center",
  "align-center-horizontal",
  "align-center-left",
  "align-center-right",
  "align-center-vertical",
  "align-left",
  "align-right",
  "align-top-center",
  "align-top-left",
  "align-top-right",
  "align-top",
  "arrow-left",
  "arrowhead-arrow",
  "arrowhead-bar",
  "arrowhead-diamond",
  "arrowhead-dot",
  "arrowhead-none",
  "arrowhead-square",
  "arrowhead-triangle-inverted",
  "arrowhead-triangle",
  "aspect-ratio",
  "avatar",
  "blob",
  "bring-forward",
  "bring-to-front",
  "check-circle",
  "check",
  "checkbox-checked",
  "checkbox-empty",
  "chevron-down",
  "chevron-left",
  "chevron-right",
  "chevron-up",
  "chevrons-ne",
  "chevrons-sw",
  "clipboard-copied",
  "clipboard-copy",
  "code",
  "collab",
  "color",
  "comment",
  "cross-2",
  "cross-circle",
  "cross",
  "dash-dashed",
  "dash-dotted",
  "dash-draw",
  "dash-solid",
  "discord",
  "distribute-horizontal",
  "distribute-vertical",
  "dot",
  "dots-horizontal",
  "dots-vertical",
  "drag-handle-dots",
  "duplicate",
  "edit",
  "error",
  "external-link",
  "file",
  "fill-none",
  "fill-pattern",
  "fill-semi",
  "fill-solid",
  "follow",
  "following",
  "font-draw",
  "font-mono",
  "font-sans",
  "font-serif",
  "geo-arrow-down",
  "geo-arrow-left",
  "geo-arrow-right",
  "geo-arrow-up",
  "geo-check-box",
  "geo-cloud",
  "geo-diamond",
  "geo-ellipse",
  "geo-hexagon",
  "geo-octagon",
  "geo-oval",
  "geo-pentagon",
  "geo-rectangle",
  "geo-rhombus-2",
  "geo-rhombus",
  "geo-star",
  "geo-trapezoid",
  "geo-triangle",
  "geo-x-box",
  "github",
  "group",
  "hidden",
  "image",
  "info-circle",
  "leading",
  "link",
  "lock-small",
  "lock",
  "menu",
  "minus",
  "mixed",
  "pack",
  "page",
  "plus",
  "question-mark-circle",
  "question-mark",
  "redo",
  "reset-zoom",
  "rotate-ccw",
  "rotate-cw",
  "ruler",
  "search",
  "send-backward",
  "send-to-back",
  "settings-horizontal",
  "settings-vertical-1",
  "settings-vertical",
  "share-1",
  "share-2",
  "size-extra-large",
  "size-large",
  "size-medium",
  "size-small",
  "spline-cubic",
  "spline-line",
  "stack-horizontal",
  "stack-vertical",
  "status-offline",
  "status-online",
  "stretch-horizontal",
  "stretch-vertical",
  "text-align-center",
  "text-align-justify",
  "text-align-left",
  "text-align-right",
  "tool-arrow",
  "tool-embed",
  "tool-eraser",
  "tool-frame",
  "tool-hand",
  "tool-highlight",
  "tool-laser",
  "tool-line",
  "tool-media",
  "tool-note",
  "tool-pencil",
  "tool-pointer",
  "tool-text",
  "trash",
  "triangle-down",
  "triangle-up",
  "twitter",
  "undo",
  "ungroup",
  "unlock-small",
  "unlock",
  "vertical-align-center",
  "vertical-align-end",
  "vertical-align-start",
  "visible",
  "warning-triangle",
  "zoom-in",
  "zoom-out"
];

// node_modules/tldraw/dist-esm/lib/ui/assetUrls.mjs
var defaultUiAssetUrls = {
  ...defaultEditorAssetUrls,
  icons: Object.fromEntries(iconTypes.map((name) => [
    name,
    `https://unpkg.com/@tldraw/assets@${version}/icons/icon/${name}.svg`
  ])),
  translations: Object.fromEntries(LANGUAGES.map((lang) => [
    lang.locale,
    `https://unpkg.com/@tldraw/assets@${version}/translations/${lang.locale}.json`
  ])),
  embedIcons: Object.fromEntries(EMBED_DEFINITIONS.map((def) => [
    def.type,
    `https://unpkg.com/@tldraw/assets@${version}/embed-icons/${def.type}.png`
  ]))
};
function useDefaultUiAssetUrlsWithOverrides(overrides) {
  if (!overrides)
    return defaultUiAssetUrls;
  return {
    fonts: Object.assign({ ...defaultUiAssetUrls.fonts }, { ...overrides == null ? void 0 : overrides.fonts }),
    icons: Object.assign({ ...defaultUiAssetUrls.icons }, { ...overrides == null ? void 0 : overrides.icons }),
    embedIcons: Object.assign({ ...defaultUiAssetUrls.embedIcons }, { ...overrides == null ? void 0 : overrides.embedIcons }),
    translations: Object.assign({ ...defaultUiAssetUrls.translations }, { ...overrides == null ? void 0 : overrides.translations })
  };
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTools.mjs
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var React40 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/EmbedDialog.mjs
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var import_react81 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDialog.mjs
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var import_classnames20 = __toESM(require_classnames(), 1);
function TldrawUiDialogHeader({ className, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: (0, import_classnames20.default)("tlui-dialog__header", className), children });
}
function TldrawUiDialogTitle({ className, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$16f7638e4a34b909, { dir: "ltr", className: (0, import_classnames20.default)("tlui-dialog__header__title", className), children });
}
function TldrawUiDialogCloseButton() {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "tlui-dialog__header__close", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac, { "data-testid": "dialog.close", dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(TldrawUiButton, {
    type: "icon",
    "aria-label": "Close",
    onTouchEnd: (e) => e.target.click(),
    children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(TldrawUiButtonIcon, { small: true, icon: "cross-2" })
  }) }) });
}
function TldrawUiDialogBody({ className, children, style }) {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: (0, import_classnames20.default)("tlui-dialog__body", className), style, children });
}
function TldrawUiDialogFooter({ className, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: (0, import_classnames20.default)("tlui-dialog__footer", className), children });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiInput.mjs
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var import_classnames21 = __toESM(require_classnames(), 1);
var React39 = __toESM(require_react(), 1);
var TldrawUiInput = React39.forwardRef(function TldrawUiInput2({
  className,
  label,
  icon,
  iconLeft,
  autoselect = false,
  autofocus = false,
  defaultValue,
  placeholder,
  onComplete,
  onValueChange,
  onCancel,
  onBlur,
  shouldManuallyMaintainScrollPositionWhenFocused = false,
  children,
  value
}, ref) {
  const editor = useEditor();
  const rInputRef = React39.useRef(null);
  React39.useImperativeHandle(ref, () => rInputRef.current);
  const msg2 = useTranslation();
  const rInitialValue = React39.useRef(defaultValue != null ? defaultValue : "");
  const rCurrentValue = React39.useRef(defaultValue != null ? defaultValue : "");
  const [isFocused, setIsFocused] = React39.useState(false);
  const handleFocus = React39.useCallback((e) => {
    setIsFocused(true);
    const elm = e.currentTarget;
    rCurrentValue.current = elm.value;
    requestAnimationFrame(() => {
      if (autoselect) {
        elm.select();
      }
    });
  }, [autoselect]);
  const handleChange = React39.useCallback((e) => {
    const value2 = e.currentTarget.value;
    rCurrentValue.current = value2;
    onValueChange == null ? void 0 : onValueChange(value2);
  }, [onValueChange]);
  const handleKeyUp = React39.useCallback((e) => {
    switch (e.key) {
      case "Enter": {
        e.currentTarget.blur();
        stopEventPropagation(e);
        onComplete == null ? void 0 : onComplete(e.currentTarget.value);
        break;
      }
      case "Escape": {
        e.currentTarget.value = rInitialValue.current;
        e.currentTarget.blur();
        stopEventPropagation(e);
        onCancel == null ? void 0 : onCancel(e.currentTarget.value);
        break;
      }
    }
  }, [onComplete, onCancel]);
  const handleBlur = React39.useCallback((e) => {
    setIsFocused(false);
    const value2 = e.currentTarget.value;
    onBlur == null ? void 0 : onBlur(value2);
  }, [onBlur]);
  React39.useEffect(() => {
    if (!editor.environment.isIos)
      return;
    const visualViewport = window.visualViewport;
    if (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {
      const onViewportChange = () => {
        var _a2;
        (_a2 = rInputRef.current) == null ? void 0 : _a2.scrollIntoView({ block: "center" });
      };
      visualViewport.addEventListener("resize", onViewportChange);
      visualViewport.addEventListener("scroll", onViewportChange);
      requestAnimationFrame(() => {
        var _a2;
        (_a2 = rInputRef.current) == null ? void 0 : _a2.scrollIntoView({ block: "center" });
      });
      return () => {
        visualViewport.removeEventListener("resize", onViewportChange);
        visualViewport.removeEventListener("scroll", onViewportChange);
      };
    }
  }, [editor, isFocused, shouldManuallyMaintainScrollPositionWhenFocused]);
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { draggable: false, className: "tlui-input__wrapper", children: [
    children,
    label && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("label", { children: msg2(label) }),
    iconLeft && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(TldrawUiIcon, { icon: iconLeft, className: "tlui-icon-left", small: true }),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("input", {
      ref: rInputRef,
      className: (0, import_classnames21.default)("tlui-input", className),
      type: "text",
      defaultValue,
      onKeyUp: handleKeyUp,
      onChange: handleChange,
      onFocus: handleFocus,
      onBlur: handleBlur,
      autoFocus: autofocus,
      placeholder,
      value
    }),
    icon && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(TldrawUiIcon, { icon, small: !!label })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/EmbedDialog.mjs
var EmbedDialog = track(function EmbedDialog2({ onClose }) {
  const editor = useEditor();
  const msg2 = useTranslation();
  const assetUrls = useAssetUrls();
  const [embedDefinition, setEmbedDefinition] = (0, import_react81.useState)(null);
  const [url, setUrl] = (0, import_react81.useState)("");
  const [embedInfoForUrl, setEmbedInfoForUrl] = (0, import_react81.useState)(null);
  const [showError, setShowError] = (0, import_react81.useState)(false);
  const rShowErrorTimeout = (0, import_react81.useRef)(-1);
  return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(import_jsx_runtime84.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiDialogTitle, { children: embedDefinition ? `${msg2("embed-dialog.title")} \u2014 ${embedDefinition.title}` : msg2("embed-dialog.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    embedDefinition ? /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(import_jsx_runtime84.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(TldrawUiDialogBody, { className: "tlui-embed-dialog__enter", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiInput, {
          className: "tlui-embed-dialog__input",
          label: "embed-dialog.url",
          placeholder: "http://example.com",
          autofocus: true,
          onValueChange: (value) => {
            setUrl(value);
            const embedInfo = getEmbedInfo(value);
            setEmbedInfoForUrl(embedInfo && embedInfo.definition.type === embedDefinition.type ? embedInfo : null);
            setShowError(false);
            clearTimeout(rShowErrorTimeout.current);
            rShowErrorTimeout.current = setTimeout(() => setShowError(!embedInfo), 320);
          }
        }),
        url === "" ? /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "tlui-embed-dialog__instruction", children: [
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", { children: msg2("embed-dialog.instruction") }),
          " ",
          embedDefinition.instructionLink && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("a", {
            target: "_blank",
            rel: "noopener noreferrer",
            href: embedDefinition.instructionLink,
            className: "tlui-embed-dialog__instruction__link",
            children: [
              "Learn more.",
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiIcon, { icon: "external-link", small: true })
            ]
          })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "tlui-embed-dialog__warning", children: showError ? msg2("embed-dialog.invalid-url") : "\xA0" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButton, {
          type: "normal",
          onClick: () => {
            setEmbedDefinition(null);
            setEmbedInfoForUrl(null);
            setUrl("");
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.back") })
        }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "tlui-embed__spacer" }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButton, { type: "normal", onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.cancel") }) }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButton, {
          type: "primary",
          disabled: !embedInfoForUrl,
          onClick: () => {
            if (!embedInfoForUrl)
              return;
            editor.putExternalContent({
              type: "embed",
              url,
              point: editor.getViewportPageCenter(),
              embed: embedInfoForUrl.definition
            });
            onClose();
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.create") })
        })
      ] })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_jsx_runtime84.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiDialogBody, { className: "tlui-embed-dialog__list", children: EMBED_DEFINITIONS.map((def) => {
      return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(TldrawUiButton, { type: "menu", onClick: () => setEmbedDefinition(def), children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiButtonLabel, { children: untranslated(def.title) }),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", {
          className: "tlui-embed-dialog__item__image",
          style: { backgroundImage: `url(${assetUrls.embedIcons[def.type]})` }
        })
      ] }, def.type);
    }) }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/hooks/useInsertMedia.mjs
var import_react82 = __toESM(require_react(), 1);
function useInsertMedia() {
  const editor = useEditor();
  const inputRef = (0, import_react82.useRef)();
  (0, import_react82.useEffect)(() => {
    const input = window.document.createElement("input");
    input.type = "file";
    input.accept = "image/jpeg,image/png,image/gif,image/svg+xml,video/mp4,video/quicktime";
    input.multiple = true;
    inputRef.current = input;
    async function onchange(e) {
      const fileList = e.target.files;
      if (!fileList || fileList.length === 0)
        return;
      await editor.putExternalContent({
        type: "files",
        files: Array.from(fileList),
        point: editor.getViewportPageBounds().center,
        ignoreParent: false
      });
      input.value = "";
    }
    input.addEventListener("change", onchange);
    return () => {
      inputRef.current = void 0;
      input.removeEventListener("change", onchange);
    };
  }, [editor]);
  return (0, import_react82.useCallback)(() => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.click();
  }, [inputRef]);
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useTools.mjs
var ToolsContext = React40.createContext({});
function ToolsProvider({ overrides, children }) {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  const { addDialog } = useDialogs();
  const insertMedia = useInsertMedia();
  const tools = React40.useMemo(() => {
    const toolsArray = [
      {
        id: "select",
        label: "tool.select",
        icon: "tool-pointer",
        kbd: "v",
        readonlyOk: true,
        onSelect(source) {
          editor.setCurrentTool("select");
          trackEvent("select-tool", { source, id: "select" });
        }
      },
      {
        id: "hand",
        label: "tool.hand",
        icon: "tool-hand",
        kbd: "h",
        readonlyOk: true,
        onSelect(source) {
          editor.setCurrentTool("hand");
          trackEvent("select-tool", { source, id: "hand" });
        }
      },
      {
        id: "eraser",
        label: "tool.eraser",
        icon: "tool-eraser",
        kbd: "e",
        onSelect(source) {
          editor.setCurrentTool("eraser");
          trackEvent("select-tool", { source, id: "eraser" });
        }
      },
      {
        id: "draw",
        label: "tool.draw",
        icon: "tool-pencil",
        kbd: "d,b,x",
        onSelect(source) {
          editor.setCurrentTool("draw");
          trackEvent("select-tool", { source, id: "draw" });
        }
      },
      ...[...GeoShapeGeoStyle.values].map((id) => ({
        id,
        label: `tool.${id}`,
        meta: {
          geo: id
        },
        kbd: id === "rectangle" ? "r" : id === "ellipse" ? "o" : void 0,
        icon: "geo-" + id,
        onSelect(source) {
          editor.batch(() => {
            editor.updateInstanceState({
              stylesForNextShape: {
                ...editor.getInstanceState().stylesForNextShape,
                [GeoShapeGeoStyle.id]: id
              }
            }, { ephemeral: true });
            editor.setCurrentTool("geo");
            trackEvent("select-tool", { source, id: `geo-${id}` });
          });
        }
      })),
      {
        id: "arrow",
        label: "tool.arrow",
        icon: "tool-arrow",
        kbd: "a",
        onSelect(source) {
          editor.setCurrentTool("arrow");
          trackEvent("select-tool", { source, id: "arrow" });
        }
      },
      {
        id: "line",
        label: "tool.line",
        icon: "tool-line",
        kbd: "l",
        onSelect(source) {
          editor.setCurrentTool("line");
          trackEvent("select-tool", { source, id: "line" });
        }
      },
      {
        id: "frame",
        label: "tool.frame",
        icon: "tool-frame",
        kbd: "f",
        onSelect(source) {
          editor.setCurrentTool("frame");
          trackEvent("select-tool", { source, id: "frame" });
        }
      },
      {
        id: "text",
        label: "tool.text",
        icon: "tool-text",
        kbd: "t",
        onSelect(source) {
          editor.setCurrentTool("text");
          trackEvent("select-tool", { source, id: "text" });
        }
      },
      {
        id: "asset",
        label: "tool.asset",
        icon: "tool-media",
        kbd: "$u",
        onSelect(source) {
          insertMedia();
          trackEvent("select-tool", { source, id: "media" });
        }
      },
      {
        id: "note",
        label: "tool.note",
        icon: "tool-note",
        kbd: "n",
        onSelect(source) {
          editor.setCurrentTool("note");
          trackEvent("select-tool", { source, id: "note" });
        }
      },
      {
        id: "laser",
        label: "tool.laser",
        readonlyOk: true,
        icon: "tool-laser",
        kbd: "k",
        onSelect(source) {
          editor.setCurrentTool("laser");
          trackEvent("select-tool", { source, id: "laser" });
        }
      },
      {
        id: "embed",
        label: "tool.embed",
        icon: "tool-embed",
        onSelect(source) {
          addDialog({ component: EmbedDialog });
          trackEvent("select-tool", { source, id: "embed" });
        }
      },
      {
        id: "highlight",
        label: "tool.highlight",
        icon: "tool-highlight",
        kbd: "!d",
        onSelect(source) {
          editor.setCurrentTool("highlight");
          trackEvent("select-tool", { source, id: "highlight" });
        }
      }
    ];
    toolsArray.push();
    const tools2 = Object.fromEntries(toolsArray.map((t2) => [t2.id, t2]));
    if (overrides) {
      return overrides(editor, tools2, { insertMedia });
    }
    return tools2;
  }, [overrides, editor, trackEvent, insertMedia, addDialog]);
  return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(ToolsContext.Provider, { value: tools, children });
}
function useTools() {
  const ctx = React40.useContext(ToolsContext);
  if (!ctx) {
    throw new Error("useTools must be used within a ToolProvider");
  }
  return ctx;
}

// node_modules/tldraw/dist-esm/lib/ui/overrides.mjs
var import_react84 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/context/breakpoints.mjs
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var import_react83 = __toESM(require_react(), 1);
var BreakpointContext = import_react83.default.createContext(0);
function BreakPointProvider({
  forceMobile = false,
  children
}) {
  const editor = useEditor();
  const breakpoint = useValue("breakpoint", () => {
    const { width } = editor.getViewportScreenBounds();
    const maxBreakpoint = forceMobile ? PORTRAIT_BREAKPOINT.MOBILE_SM : PORTRAIT_BREAKPOINTS.length - 1;
    for (let i = 0; i < maxBreakpoint; i++) {
      if (width > PORTRAIT_BREAKPOINTS[i] && width <= PORTRAIT_BREAKPOINTS[i + 1]) {
        return i;
      }
    }
    return maxBreakpoint;
  }, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(BreakpointContext.Provider, { value: breakpoint, children });
}
function useBreakpoint() {
  return (0, import_react83.useContext)(BreakpointContext);
}

// node_modules/tldraw/dist-esm/lib/ui/overrides.mjs
function useDefaultHelpers() {
  const { addToast, removeToast, clearToasts } = useToasts();
  const { addDialog, clearDialogs, removeDialog, updateDialog } = useDialogs();
  const breakpoint = useBreakpoint();
  const isMobile = breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM;
  const msg2 = useTranslation();
  return (0, import_react84.useMemo)(() => ({
    addToast,
    removeToast,
    clearToasts,
    addDialog,
    clearDialogs,
    removeDialog,
    updateDialog,
    msg: msg2,
    isMobile
  }), [
    addDialog,
    addToast,
    clearDialogs,
    clearToasts,
    msg2,
    removeDialog,
    removeToast,
    updateDialog,
    isMobile
  ]);
}
function mergeOverrides(overrides, defaultHelpers) {
  const mergedTranslations = {};
  for (const override of overrides) {
    if (override.translations) {
      for (const [key, value] of objectMapEntries(override.translations)) {
        let strings = mergedTranslations[key];
        if (!strings) {
          strings = mergedTranslations[key] = {};
        }
        Object.assign(strings, value);
      }
    }
  }
  return {
    actions: (editor, schema) => {
      for (const override of overrides) {
        if (override.actions) {
          schema = override.actions(editor, schema, defaultHelpers);
        }
      }
      return schema;
    },
    tools: (editor, schema, helpers) => {
      for (const override of overrides) {
        if (override.tools) {
          schema = override.tools(editor, schema, { ...defaultHelpers, ...helpers });
        }
      }
      return schema;
    },
    translations: mergedTranslations
  };
}
function useShallowArrayEquality(array2) {
  return (0, import_react84.useMemo)(() => array2, array2);
}
function useMergedTranslationOverrides(overrides) {
  const overridesArray = useShallowArrayEquality(overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]);
  return (0, import_react84.useMemo)(() => {
    const mergedTranslations = {};
    for (const override of overridesArray) {
      if (override.translations) {
        for (const [key, value] of objectMapEntries(override.translations)) {
          let strings = mergedTranslations[key];
          if (!strings) {
            strings = mergedTranslations[key] = {};
          }
          Object.assign(strings, value);
        }
      }
    }
    return mergedTranslations;
  }, [overridesArray]);
}
function useMergedOverrides(overrides) {
  const defaultHelpers = useDefaultHelpers();
  const overridesArray = useShallowArrayEquality(overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]);
  return (0, import_react84.useMemo)(() => mergeOverrides(overridesArray, defaultHelpers), [overridesArray, defaultHelpers]);
}

// node_modules/tldraw/dist-esm/lib/ui/context/actions.mjs
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var React42 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/utils/frames/frames.mjs
function removeFrame(editor, ids) {
  const frames = compact(ids.map((id) => editor.getShape(id)).filter((f) => f && editor.isShapeOfType(f, "frame")));
  if (!frames.length)
    return;
  const allChildren = [];
  editor.batch(() => {
    frames.map((frame2) => {
      const children = editor.getSortedChildIdsForParent(frame2.id);
      if (children.length) {
        editor.reparentShapes(children, frame2.parentId, frame2.index);
        allChildren.push(...children);
      }
    });
    editor.setSelectedShapes(allChildren);
    editor.deleteShapes(ids);
  });
}
var DEFAULT_FRAME_PADDING = 50;
function fitFrameToContent(editor, id, opts = {}) {
  const frame2 = editor.getShape(id);
  if (!frame2)
    return;
  const childIds = editor.getSortedChildIdsForParent(frame2.id);
  const children = compact(childIds.map((id2) => editor.getShape(id2)));
  if (!children.length)
    return;
  const bounds = Box.FromPoints(children.flatMap((shape) => {
    const geometry = editor.getShapeGeometry(shape.id);
    return editor.getShapeLocalTransform(shape).applyToPoints(geometry.vertices);
  }));
  const { padding = DEFAULT_FRAME_PADDING } = opts;
  const w = bounds.w + 2 * padding;
  const h = bounds.h + 2 * padding;
  const dx = padding - bounds.minX;
  const dy = padding - bounds.minY;
  if (dx === 0 && dy === 0 && frame2.props.w === w && frame2.props.h === h)
    return;
  const diff = new Vec(dx, dy).rot(frame2.rotation);
  editor.batch(() => {
    const changes = childIds.map((child) => {
      const shape = editor.getShape(child);
      return {
        id: shape.id,
        type: shape.type,
        x: shape.x + dx,
        y: shape.y + dy
      };
    });
    changes.push({
      id: frame2.id,
      type: frame2.type,
      x: frame2.x - diff.x,
      y: frame2.y - diff.y,
      props: {
        w,
        h
      }
    });
    editor.updateShapes(changes);
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/EditLinkDialog.mjs
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var import_react85 = __toESM(require_react(), 1);
function validateUrl(url) {
  if (validation_exports.linkUrl.isValid(url)) {
    return { isValid: true, hasProtocol: true };
  }
  if (validation_exports.linkUrl.isValid("https://" + url)) {
    return { isValid: true, hasProtocol: false };
  }
  return { isValid: false, hasProtocol: false };
}
var EditLinkDialog = track(function EditLinkDialog2({ onClose }) {
  const editor = useEditor();
  const selectedShape = editor.getOnlySelectedShape();
  if (!(selectedShape && "url" in selectedShape.props && typeof selectedShape.props.url === "string")) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(EditLinkDialogInner, { onClose, selectedShape });
});
var EditLinkDialogInner = track(function EditLinkDialogInner2({
  onClose,
  selectedShape
}) {
  const editor = useEditor();
  const msg2 = useTranslation();
  const rInput = (0, import_react85.useRef)(null);
  (0, import_react85.useEffect)(() => {
    requestAnimationFrame(() => {
      var _a2;
      return (_a2 = rInput.current) == null ? void 0 : _a2.focus();
    });
  }, []);
  const rInitialValue = (0, import_react85.useRef)(selectedShape.props.url);
  const [urlInputState, setUrlInputState] = (0, import_react85.useState)(() => {
    const urlValidResult = validateUrl(selectedShape.props.url);
    const initialValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? selectedShape.props.url : "https://" + selectedShape.props.url : "https://";
    return {
      actual: initialValue,
      safe: initialValue,
      valid: true
    };
  });
  const handleChange = (0, import_react85.useCallback)((rawValue) => {
    const fixedRawValue = rawValue.replace(/https?:\/\/(https?:\/\/)/, (_match, arg1) => {
      return arg1;
    });
    const urlValidResult = validateUrl(fixedRawValue);
    const safeValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? fixedRawValue : "https://" + fixedRawValue : "https://";
    setUrlInputState({
      actual: fixedRawValue,
      safe: safeValue,
      valid: urlValidResult.isValid
    });
  }, []);
  const handleClear = (0, import_react85.useCallback)(() => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return;
    editor.updateShapes([
      { id: onlySelectedShape.id, type: onlySelectedShape.type, props: { url: "" } }
    ]);
    onClose();
  }, [editor, onClose]);
  const handleComplete = (0, import_react85.useCallback)(() => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return;
    if (onlySelectedShape && "url" in onlySelectedShape.props) {
      if (onlySelectedShape.props.url !== urlInputState.safe) {
        editor.updateShapes([
          {
            id: onlySelectedShape.id,
            type: onlySelectedShape.type,
            props: { url: urlInputState.safe }
          }
        ]);
      }
    }
    onClose();
  }, [editor, onClose, urlInputState]);
  const handleCancel = (0, import_react85.useCallback)(() => {
    onClose();
  }, [onClose]);
  if (!selectedShape) {
    onClose();
    return null;
  }
  const isRemoving = rInitialValue.current && !urlInputState.valid;
  return /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(import_jsx_runtime87.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiDialogTitle, { children: msg2("edit-link-dialog.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiDialogBody, { children: /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { className: "tlui-edit-link-dialog", children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiInput, {
        ref: rInput,
        className: "tlui-edit-link-dialog__input",
        label: "edit-link-dialog.url",
        autofocus: true,
        value: urlInputState.actual,
        onValueChange: handleChange,
        onComplete: handleComplete,
        onCancel: handleCancel
      }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { children: urlInputState.valid ? msg2("edit-link-dialog.detail") : msg2("edit-link-dialog.invalid-url") })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButton, { type: "normal", onClick: handleCancel, onTouchEnd: handleCancel, children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.cancel") }) }),
      isRemoving ? /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButton, { type: "danger", onTouchEnd: handleClear, onClick: handleClear, children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.clear") }) }) : /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButton, {
        type: "primary",
        disabled: !urlInputState.valid,
        onTouchEnd: handleComplete,
        onClick: handleComplete,
        children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.save") })
      })
    ] })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
var import_lz_string = __toESM(require_lz_string(), 1);
var import_react86 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteExcalidrawContent.mjs
async function pasteExcalidrawContent(editor, clipboard, point) {
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
  const { elements, files } = clipboard;
  const tldrawContent = {
    shapes: [],
    rootShapeIds: [],
    assets: [],
    schema: editor.store.schema.serialize()
  };
  const groupShapeIdToChildren = /* @__PURE__ */ new Map();
  const rotatedElements = /* @__PURE__ */ new Map();
  const currentPageId = editor.getCurrentPageId();
  const excElementIdsToTldrawShapeIds = /* @__PURE__ */ new Map();
  const rootShapeIds = [];
  const skipIds = /* @__PURE__ */ new Set();
  elements.forEach((element) => {
    excElementIdsToTldrawShapeIds.set(element.id, createShapeId());
    if (element.boundElements !== null) {
      for (const boundElement of element.boundElements) {
        if (boundElement.type === "text") {
          skipIds.add(boundElement.id);
        }
      }
    }
  });
  let index2 = ZERO_INDEX_KEY;
  for (const element of elements) {
    if (skipIds.has(element.id)) {
      continue;
    }
    const id = excElementIdsToTldrawShapeIds.get(element.id);
    const base = {
      id,
      typeName: "shape",
      parentId: currentPageId,
      index: index2,
      x: element.x,
      y: element.y,
      rotation: 0,
      isLocked: element.locked,
      opacity: getOpacity(element.opacity),
      meta: {}
    };
    if (element.angle !== 0) {
      rotatedElements.set(id, element.angle);
    }
    if (element.groupIds && element.groupIds.length > 0) {
      if (groupShapeIdToChildren.has(element.groupIds[0])) {
        (_a2 = groupShapeIdToChildren.get(element.groupIds[0])) == null ? void 0 : _a2.push(id);
      } else {
        groupShapeIdToChildren.set(element.groupIds[0], [id]);
      }
    } else {
      rootShapeIds.push(id);
    }
    switch (element.type) {
      case "rectangle":
      case "ellipse":
      case "diamond": {
        let text = "";
        let align = "middle";
        if (element.boundElements !== null) {
          for (const boundElement of element.boundElements) {
            if (boundElement.type === "text") {
              const labelElement = elements.find((elm) => elm.id === boundElement.id);
              if (labelElement) {
                text = labelElement.text;
                align = textAlignToAlignTypes[labelElement.textAlign];
              }
            }
          }
        }
        const colorToUse = element.backgroundColor === "transparent" ? element.strokeColor : element.backgroundColor;
        tldrawContent.shapes.push({
          ...base,
          type: "geo",
          props: {
            geo: element.type,
            url: (_b2 = element.link) != null ? _b2 : "",
            w: element.width,
            h: element.height,
            size: (_c = strokeWidthsToSizes[element.strokeWidth]) != null ? _c : "draw",
            color: (_d = colorsToColors[colorToUse]) != null ? _d : "black",
            text,
            align,
            dash: getDash(element),
            fill: getFill(element)
          }
        });
        break;
      }
      case "freedraw": {
        tldrawContent.shapes.push({
          ...base,
          type: "draw",
          props: {
            dash: getDash(element),
            size: strokeWidthsToSizes[element.strokeWidth],
            color: (_e = colorsToColors[element.strokeColor]) != null ? _e : "black",
            segments: [
              {
                type: "free",
                points: element.points.map(([x, y, z = 0.5]) => ({
                  x,
                  y,
                  z
                }))
              }
            ]
          }
        });
        break;
      }
      case "line": {
        const start = element.points[0];
        const end = element.points[element.points.length - 1];
        const indices = getIndices(element.points.length);
        tldrawContent.shapes.push({
          ...base,
          type: "line",
          props: {
            dash: getDash(element),
            size: strokeWidthsToSizes[element.strokeWidth],
            color: (_f = colorsToColors[element.strokeColor]) != null ? _f : "black",
            spline: element.roundness ? "cubic" : "line",
            handles: {
              start: {
                id: "start",
                type: "vertex",
                index: indices[0],
                x: start[0],
                y: start[1]
              },
              end: {
                id: "end",
                type: "vertex",
                index: indices[indices.length - 1],
                x: end[0],
                y: end[1]
              },
              ...Object.fromEntries(element.points.slice(1, -1).map(([x, y], i) => {
                const id2 = uniqueId();
                return [
                  id2,
                  {
                    id: id2,
                    type: "vertex",
                    index: indices[i + 1],
                    x,
                    y
                  }
                ];
              }))
            }
          }
        });
        break;
      }
      case "arrow": {
        let text = "";
        if (element.boundElements !== null) {
          for (const boundElement of element.boundElements) {
            if (boundElement.type === "text") {
              const labelElement = elements.find((elm) => elm.id === boundElement.id);
              if (labelElement) {
                text = labelElement.text;
              }
            }
          }
        }
        const start = element.points[0];
        const end = element.points[element.points.length - 1];
        const startTargetId = excElementIdsToTldrawShapeIds.get((_g = element.startBinding) == null ? void 0 : _g.elementId);
        const endTargetId = excElementIdsToTldrawShapeIds.get((_h = element.endBinding) == null ? void 0 : _h.elementId);
        tldrawContent.shapes.push({
          ...base,
          type: "arrow",
          props: {
            text,
            bend: getBend(element, start, end),
            dash: getDash(element),
            size: (_i = strokeWidthsToSizes[element.strokeWidth]) != null ? _i : "m",
            color: (_j = colorsToColors[element.strokeColor]) != null ? _j : "black",
            start: startTargetId ? {
              type: "binding",
              boundShapeId: startTargetId,
              normalizedAnchor: { x: 0.5, y: 0.5 },
              isPrecise: false,
              isExact: false
            } : {
              type: "point",
              x: start[0],
              y: start[1]
            },
            end: endTargetId ? {
              type: "binding",
              boundShapeId: endTargetId,
              normalizedAnchor: { x: 0.5, y: 0.5 },
              isPrecise: false,
              isExact: false
            } : {
              type: "point",
              x: end[0],
              y: end[1]
            },
            arrowheadEnd: (_k = arrowheadsToArrowheadTypes[element.endArrowhead]) != null ? _k : "none",
            arrowheadStart: (_l = arrowheadsToArrowheadTypes[element.startArrowhead]) != null ? _l : "none"
          }
        });
        break;
      }
      case "text": {
        const { size: size4, scale } = getFontSizeAndScale(element.fontSize);
        tldrawContent.shapes.push({
          ...base,
          type: "text",
          props: {
            size: size4,
            scale,
            font: (_m = fontFamilyToFontType[element.fontFamily]) != null ? _m : "draw",
            color: (_n = colorsToColors[element.strokeColor]) != null ? _n : "black",
            text: element.text,
            align: textAlignToAlignTypes[element.textAlign]
          }
        });
        break;
      }
      case "image": {
        const file = files[element.fileId];
        if (!file)
          break;
        const assetId = AssetRecordType.createId();
        tldrawContent.assets.push({
          id: assetId,
          typeName: "asset",
          type: "image",
          props: {
            w: element.width,
            h: element.height,
            name: (_o = element.id) != null ? _o : "Untitled",
            isAnimated: false,
            mimeType: file.mimeType,
            src: file.dataURL
          },
          meta: {}
        });
        tldrawContent.shapes.push({
          ...base,
          type: "image",
          props: {
            w: element.width,
            h: element.height,
            assetId
          }
        });
      }
    }
    index2 = getIndexAbove(index2);
  }
  const p = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0;
  editor.mark("paste");
  editor.putContentOntoCurrentPage(tldrawContent, {
    point: p,
    select: false,
    preserveIds: true
  });
  for (const groupedShapeIds of groupShapeIdToChildren.values()) {
    if (groupedShapeIds.length > 1) {
      editor.groupShapes(groupedShapeIds);
      const groupShape = editor.getShape(groupedShapeIds[0]);
      if ((groupShape == null ? void 0 : groupShape.parentId) && isShapeId(groupShape.parentId)) {
        rootShapeIds.push(groupShape.parentId);
      }
    }
  }
  for (const [id, angle] of rotatedElements) {
    editor.select(id);
    editor.rotateShapesBy([id], angle);
  }
  const rootShapes = compact(rootShapeIds.map((id) => editor.getShape(id)));
  const bounds = Box.Common(rootShapes.map((s) => editor.getShapePageBounds(s)));
  const viewPortCenter = editor.getViewportPageBounds().center;
  editor.updateShapes(rootShapes.map((s) => {
    var _a3, _b3;
    const delta = {
      x: ((_a3 = s.x) != null ? _a3 : 0) - (bounds.x + bounds.w / 2),
      y: ((_b3 = s.y) != null ? _b3 : 0) - (bounds.y + bounds.h / 2)
    };
    return {
      id: s.id,
      type: s.type,
      x: viewPortCenter.x + delta.x,
      y: viewPortCenter.y + delta.y
    };
  }));
  editor.setSelectedShapes(rootShapeIds);
}
var getOpacity = (opacity) => {
  const t2 = opacity / 100;
  if (t2 < 0.2) {
    return 0.1;
  } else if (t2 < 0.4) {
    return 0.25;
  } else if (t2 < 0.6) {
    return 0.5;
  } else if (t2 < 0.8) {
    return 0.75;
  }
  return 1;
};
var strokeWidthsToSizes = {
  1: "s",
  2: "m",
  3: "l",
  4: "xl"
};
var fontSizesToSizes = {
  16: "s",
  20: "m",
  28: "l",
  36: "xl"
};
function getFontSizeAndScale(fontSize) {
  const size4 = fontSizesToSizes[fontSize];
  if (size4) {
    return { size: size4, scale: 1 };
  }
  if (fontSize < 16) {
    return { size: "s", scale: fontSize / 16 };
  }
  if (fontSize > 36) {
    return { size: "xl", scale: fontSize / 36 };
  }
  return { size: "m", scale: 1 };
}
var fontFamilyToFontType = {
  1: "draw",
  2: "sans",
  3: "mono"
};
var colorsToColors = {
  "#ffffff": "grey",
  "#000000": "black",
  "#343a40": "black",
  "#495057": "grey",
  "#c92a2a": "red",
  "#a61e4d": "light-red",
  "#862e9c": "violet",
  "#5f3dc4": "light-violet",
  "#364fc7": "blue",
  "#1864ab": "light-blue",
  "#0b7285": "light-green",
  "#087f5b": "light-green",
  "#2b8a3e": "green",
  "#5c940d": "light-green",
  "#e67700": "yellow",
  "#d9480f": "orange",
  "#ced4da": "grey",
  "#868e96": "grey",
  "#fa5252": "light-red",
  "#e64980": "red",
  "#be4bdb": "light-violet",
  "#7950f2": "violet",
  "#4c6ef5": "blue",
  "#228be6": "light-blue",
  "#15aabf": "light-green",
  "#12b886": "green",
  "#40c057": "green",
  "#82c91e": "light-green",
  "#fab005": "yellow",
  "#fd7e14": "orange",
  "#212529": "grey"
};
var strokeStylesToStrokeTypes = {
  solid: "draw",
  dashed: "dashed",
  dotted: "dotted"
};
var fillStylesToFillType = {
  "cross-hatch": "pattern",
  hachure: "pattern",
  solid: "solid"
};
var textAlignToAlignTypes = {
  left: "start",
  center: "middle",
  right: "end"
};
var arrowheadsToArrowheadTypes = {
  arrow: "arrow",
  dot: "dot",
  triangle: "triangle",
  bar: "pipe"
};
function getBend(element, startPoint, endPoint) {
  let bend = 0;
  if (element.points.length > 2) {
    const start = new Vec(startPoint[0], startPoint[1]);
    const end = new Vec(endPoint[0], endPoint[1]);
    const handle = new Vec(element.points[1][0], element.points[1][1]);
    const delta = Vec.Sub(end, start);
    const v = Vec.Per(delta);
    const med = Vec.Med(end, start);
    const A = Vec.Sub(med, v);
    const B = Vec.Add(med, v);
    const point = Vec.NearestPointOnLineSegment(A, B, handle, false);
    bend = Vec.Dist(point, med);
    if (Vec.Clockwise(point, end, med))
      bend *= -1;
  }
  return bend;
}
var getDash = (element) => {
  var _a2;
  let dash = (_a2 = strokeStylesToStrokeTypes[element.strokeStyle]) != null ? _a2 : "draw";
  if (dash === "draw" && element.roughness === 0) {
    dash = "solid";
  }
  return dash;
};
var getFill = (element) => {
  var _a2;
  if (element.backgroundColor === "transparent") {
    return "none";
  }
  return (_a2 = fillStylesToFillType[element.fillStyle]) != null ? _a2 : "solid";
};

// node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteFiles.mjs
async function pasteFiles(editor, urls, point, sources) {
  const blobs = await Promise.all(urls.map(async (url) => await (await fetch(url)).blob()));
  const files = blobs.map((blob) => new File([blob], "tldrawFile", { type: blob.type }));
  editor.mark("paste");
  await editor.putExternalContent({
    type: "files",
    files,
    point,
    ignoreParent: false,
    sources
  });
  urls.forEach((url) => URL.revokeObjectURL(url));
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteTldrawContent.mjs
function pasteTldrawContent(editor, clipboard, point) {
  const p = point != null ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0;
  const seletionBoundsBefore = editor.getSelectionPageBounds();
  editor.mark("paste");
  editor.putContentOntoCurrentPage(clipboard, {
    point: p,
    select: true
  });
  const selectedBoundsAfter = editor.getSelectionPageBounds();
  if (seletionBoundsBefore && selectedBoundsAfter && (seletionBoundsBefore == null ? void 0 : seletionBoundsBefore.collides(selectedBoundsAfter))) {
    editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
    setTimeout(() => {
      editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
    }, 150);
  }
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteUrl.mjs
async function pasteUrl(editor, url, point, sources) {
  var _a2;
  try {
    if (new URL(url).pathname.match(/\.(png|jpe?g|gif|svg|webp)$/i)) {
      const resp = await fetch(url, { method: "HEAD" });
      if ((_a2 = resp.headers.get("content-type")) == null ? void 0 : _a2.match(/^image\//)) {
        editor.mark("paste");
        pasteFiles(editor, [url]);
        return;
      }
    }
  } catch (err) {
    if (err.message !== "Failed to fetch") {
      console.error(err);
    }
  }
  editor.mark("paste");
  return await editor.putExternalContent({
    type: "url",
    point,
    url,
    sources
  });
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
function stripHtml(html) {
  const doc = document.implementation.createHTMLDocument("");
  doc.documentElement.innerHTML = html.trim();
  return doc.body.textContent || doc.body.innerText || "";
}
var isValidHttpURL = (url) => {
  try {
    const u = new URL(url);
    return u.protocol === "http:" || u.protocol === "https:";
  } catch (e) {
    return false;
  }
};
var getValidHttpURLList = (url) => {
  const urls = url.split(/[\n\s]/);
  for (const url2 of urls) {
    try {
      const u = new URL(url2);
      if (!(u.protocol === "http:" || u.protocol === "https:")) {
        return;
      }
    } catch (e) {
      return;
    }
  }
  return uniq(urls);
};
var isSvgText = (text) => {
  return /^<svg/.test(text);
};
var INPUTS2 = ["input", "select", "textarea"];
function disallowClipboardEvents(editor) {
  const { activeElement } = document;
  return editor.getIsMenuOpen() || activeElement && (activeElement.getAttribute("contenteditable") || INPUTS2.indexOf(activeElement.tagName.toLowerCase()) > -1);
}
var isFile = (item) => {
  return item.types.find((i) => i.match(/^image\//));
};
var handleText = (editor, data, point, sources) => {
  const validUrlList = getValidHttpURLList(data);
  if (validUrlList) {
    for (const url of validUrlList) {
      pasteUrl(editor, url, point);
    }
  } else if (isValidHttpURL(data)) {
    pasteUrl(editor, data, point);
  } else if (isSvgText(data)) {
    editor.mark("paste");
    editor.putExternalContent({
      type: "svg-text",
      text: data,
      point,
      sources
    });
  } else {
    editor.mark("paste");
    editor.putExternalContent({
      type: "text",
      text: data,
      point,
      sources
    });
  }
};
var handlePasteFromEventClipboardData = async (editor, clipboardData, point) => {
  if (editor.getEditingShapeId() !== null)
    return;
  if (!clipboardData) {
    throw Error("No clipboard data");
  }
  const things = [];
  for (const item of Object.values(clipboardData.items)) {
    switch (item.kind) {
      case "file": {
        things.push({
          type: "file",
          source: new Promise((r) => r(item.getAsFile()))
        });
        break;
      }
      case "string": {
        if (item.type === "text/html") {
          things.push({
            type: "html",
            source: new Promise((r) => item.getAsString(r))
          });
        } else if (item.type === "text/plain") {
          things.push({
            type: "text",
            source: new Promise((r) => item.getAsString(r))
          });
        } else {
          things.push({ type: item.type, source: new Promise((r) => item.getAsString(r)) });
        }
        break;
      }
    }
  }
  handleClipboardThings(editor, things, point);
};
var handlePasteFromClipboardApi = async (editor, clipboardItems, point) => {
  const things = [];
  for (const item of clipboardItems) {
    if (isFile(item)) {
      for (const type of item.types) {
        if (type.match(/^image\//)) {
          things.push({ type: "blob", source: item.getType(type) });
        }
      }
    }
    if (item.types.includes("text/html")) {
      things.push({
        type: "html",
        source: (async () => {
          const blob = await item.getType("text/html");
          return await FileHelpers.blobToText(blob);
        })()
      });
    }
    if (item.types.includes("text/uri-list")) {
      things.push({
        type: "url",
        source: (async () => {
          const blob = await item.getType("text/uri-list");
          return await FileHelpers.blobToText(blob);
        })()
      });
    }
    if (item.types.includes("text/plain")) {
      things.push({
        type: "text",
        source: (async () => {
          const blob = await item.getType("text/plain");
          return await FileHelpers.blobToText(blob);
        })()
      });
    }
  }
  return await handleClipboardThings(editor, things, point);
};
async function handleClipboardThings(editor, things, point) {
  const files = things.filter((t2) => (t2.type === "file" || t2.type === "blob") && t2.source !== null);
  if (files.length) {
    const fileBlobs = await Promise.all(files.map((t2) => t2.source));
    const urls = fileBlobs.filter(Boolean).map((blob) => URL.createObjectURL(blob));
    return await pasteFiles(editor, urls, point);
  }
  const results = await Promise.all(things.filter((t2) => t2.type !== "file").map((t2) => new Promise((r) => {
    const thing = t2;
    if (thing.type === "file") {
      r({ type: "error", data: null, reason: "unexpected file" });
      return;
    }
    thing.source.then((text) => {
      var _a2;
      const tldrawHtmlComment = (_a2 = text.match(/<tldraw[^>]*>(.*)<\/tldraw>/)) == null ? void 0 : _a2[1];
      if (tldrawHtmlComment) {
        try {
          const jsonComment = (0, import_lz_string.decompressFromBase64)(tldrawHtmlComment);
          if (jsonComment === null) {
            r({
              type: "error",
              data: jsonComment,
              reason: `found tldraw data comment but could not parse base64`
            });
            return;
          } else {
            const json = JSON.parse(jsonComment);
            if (json.type !== "application/tldraw") {
              r({
                type: "error",
                data: json,
                reason: `found tldraw data comment but JSON was of a different type: ${json.type}`
              });
            }
            if (typeof json.data === "string") {
              r({
                type: "error",
                data: json,
                reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
              });
              return;
            }
            r({ type: "tldraw", data: json.data });
            return;
          }
        } catch (e) {
          r({
            type: "error",
            data: tldrawHtmlComment,
            reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
          });
          return;
        }
      } else {
        if (thing.type === "html") {
          r({ type: "text", data: text, subtype: "html" });
          return;
        }
        if (thing.type === "url") {
          r({ type: "text", data: text, subtype: "url" });
          return;
        }
        try {
          const json = JSON.parse(text);
          if (json.type === "excalidraw/clipboard") {
            r({ type: "excalidraw", data: json });
            return;
          } else {
            r({ type: "text", data: text, subtype: "json" });
            return;
          }
        } catch (e) {
          r({ type: "text", data: text, subtype: "text" });
          return;
        }
      }
      r({ type: "error", data: text, reason: "unhandled case" });
    });
  })));
  for (const result of results) {
    if (result.type === "tldraw") {
      pasteTldrawContent(editor, result.data, point);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "excalidraw") {
      pasteExcalidrawContent(editor, result.data, point);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "html") {
      const rootNode = new DOMParser().parseFromString(result.data, "text/html");
      const bodyNode = rootNode.querySelector("body");
      const isHtmlSingleLink = bodyNode && Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === "A" && bodyNode.firstElementChild.hasAttribute("href") && bodyNode.firstElementChild.getAttribute("href") !== "";
      if (isHtmlSingleLink) {
        const href = bodyNode.firstElementChild.getAttribute("href");
        handleText(editor, href, point, results);
        return;
      }
      if (!results.some((r) => r.type === "text" && r.subtype !== "html") && result.data.trim()) {
        handleText(editor, stripHtml(result.data), point, results);
        return;
      }
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "url") {
      pasteUrl(editor, result.data, point, results);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "text" && result.data.trim()) {
      handleText(editor, result.data, point, results);
      return;
    }
  }
}
var handleNativeOrMenuCopy = (editor) => {
  var _a2;
  const content = editor.getContentFromCurrentPage(editor.getSelectedShapeIds());
  if (!content) {
    if (navigator && navigator.clipboard) {
      navigator.clipboard.writeText("");
    }
    return;
  }
  const stringifiedClipboard = (0, import_lz_string.compressToBase64)(JSON.stringify({
    type: "application/tldraw",
    kind: "content",
    data: content
  }));
  if (typeof navigator === "undefined") {
    return;
  } else {
    const textItems = content.shapes.map((shape) => {
      if (editor.isShapeOfType(shape, "text") || editor.isShapeOfType(shape, "geo") || editor.isShapeOfType(shape, "arrow")) {
        return shape.props.text;
      }
      if (editor.isShapeOfType(shape, "bookmark") || editor.isShapeOfType(shape, "embed")) {
        return shape.props.url;
      }
      return null;
    }).filter(isNonNull);
    if ((_a2 = navigator.clipboard) == null ? void 0 : _a2.write) {
      const htmlBlob = new Blob([`<tldraw>${stringifiedClipboard}</tldraw>`], {
        type: "text/html"
      });
      let textContent = textItems.join(" ");
      if (textContent === "") {
        textContent = " ";
      }
      navigator.clipboard.write([
        new ClipboardItem({
          "text/html": htmlBlob,
          "text/plain": new Blob([textContent], { type: "text/plain" })
        })
      ]);
    } else if (navigator.clipboard.writeText) {
      navigator.clipboard.writeText(`<tldraw>${stringifiedClipboard}</tldraw>`);
    }
  }
};
function useMenuClipboardEvents() {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  const copy = (0, import_react86.useCallback)(function onCopy(source) {
    if (editor.getSelectedShapeIds().length === 0)
      return;
    handleNativeOrMenuCopy(editor);
    trackEvent("copy", { source });
  }, [editor, trackEvent]);
  const cut = (0, import_react86.useCallback)(function onCut(source) {
    if (editor.getSelectedShapeIds().length === 0)
      return;
    handleNativeOrMenuCopy(editor);
    editor.deleteShapes(editor.getSelectedShapeIds());
    trackEvent("cut", { source });
  }, [editor, trackEvent]);
  const paste = (0, import_react86.useCallback)(async function onPaste(data, source, point) {
    if (editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
      return;
    if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
      handlePasteFromClipboardApi(editor, data, point);
      trackEvent("paste", { source: "menu" });
    } else {
      navigator.clipboard.read().then((clipboardItems) => {
        paste(clipboardItems, source, point);
      });
    }
  }, [editor, trackEvent]);
  return {
    copy,
    cut,
    paste
  };
}
function useNativeClipboardEvents() {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  const appIsFocused = useValue("editor.isFocused", () => editor.getInstanceState().isFocused, [
    editor
  ]);
  (0, import_react86.useEffect)(() => {
    if (!appIsFocused)
      return;
    const copy = (e) => {
      if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || disallowClipboardEvents(editor)) {
        return;
      }
      preventDefault(e);
      handleNativeOrMenuCopy(editor);
      trackEvent("copy", { source: "kbd" });
    };
    function cut(e) {
      if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || disallowClipboardEvents(editor)) {
        return;
      }
      preventDefault(e);
      handleNativeOrMenuCopy(editor);
      editor.deleteShapes(editor.getSelectedShapeIds());
      trackEvent("cut", { source: "kbd" });
    }
    let disablingMiddleClickPaste = false;
    const pointerUpHandler = (e) => {
      if (e.button === 1) {
        disablingMiddleClickPaste = true;
        requestAnimationFrame(() => {
          disablingMiddleClickPaste = false;
        });
      }
    };
    const paste = (e) => {
      if (disablingMiddleClickPaste) {
        stopEventPropagation(e);
        return;
      }
      if (editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
        return;
      if (e.clipboardData && !editor.inputs.shiftKey) {
        handlePasteFromEventClipboardData(editor, e.clipboardData);
      } else {
        navigator.clipboard.read().then((clipboardItems) => {
          if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
            handlePasteFromClipboardApi(editor, clipboardItems, editor.inputs.currentPagePoint);
          }
        });
      }
      preventDefault(e);
      trackEvent("paste", { source: "kbd" });
    };
    document.addEventListener("copy", copy);
    document.addEventListener("cut", cut);
    document.addEventListener("paste", paste);
    document.addEventListener("pointerup", pointerUpHandler);
    return () => {
      document.removeEventListener("copy", copy);
      document.removeEventListener("cut", cut);
      document.removeEventListener("paste", paste);
      document.removeEventListener("pointerup", pointerUpHandler);
    };
  }, [editor, trackEvent, appIsFocused]);
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useCopyAs.mjs
var import_react87 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/utils/export/export.mjs
async function getSvgAsImage(svgString, isSafari, options) {
  const { type, quality, scale, width, height } = options;
  let [clampedWidth, clampedHeight] = await clampToBrowserMaxCanvasSize(width * scale, height * scale);
  clampedWidth = Math.floor(clampedWidth);
  clampedHeight = Math.floor(clampedHeight);
  const effectiveScale = clampedWidth / width;
  const svgUrl = URL.createObjectURL(new Blob([svgString], { type: "image/svg+xml" }));
  const canvas = await new Promise((resolve) => {
    const image = new Image();
    image.crossOrigin = "anonymous";
    image.onload = async () => {
      if (isSafari) {
        await new Promise((resolve2) => setTimeout(resolve2, 250));
      }
      const canvas2 = document.createElement("canvas");
      const ctx = canvas2.getContext("2d");
      canvas2.width = clampedWidth;
      canvas2.height = clampedHeight;
      ctx.imageSmoothingEnabled = true;
      ctx.imageSmoothingQuality = "high";
      ctx.drawImage(image, 0, 0, clampedWidth, clampedHeight);
      URL.revokeObjectURL(svgUrl);
      resolve(canvas2);
    };
    image.onerror = () => {
      resolve(null);
    };
    image.src = svgUrl;
  });
  if (!canvas)
    return null;
  const blob = await new Promise((resolve) => canvas.toBlob((blob2) => {
    if (!blob2 || debugFlags.throwToBlob.get()) {
      resolve(null);
    }
    resolve(blob2);
  }, "image/" + type, quality));
  if (!blob)
    return null;
  if (type === "png") {
    const view = new DataView(await blob.arrayBuffer());
    return PngHelpers.setPhysChunk(view, effectiveScale, {
      type: "image/" + type
    });
  } else {
    return blob;
  }
}
async function getSvgString(editor, ids, opts) {
  const svg = await editor.getSvgString((ids == null ? void 0 : ids.length) ? ids : [...editor.getCurrentPageShapeIds()], {
    scale: 1,
    background: editor.getInstanceState().exportBackground,
    ...opts
  });
  if (!svg) {
    throw new Error("Could not construct SVG.");
  }
  return svg;
}
async function exportToString(editor, ids, format, opts = {}) {
  var _a2;
  switch (format) {
    case "svg": {
      return (_a2 = await getSvgString(editor, ids, opts)) == null ? void 0 : _a2.svg;
    }
    case "json": {
      const data = editor.getContentFromCurrentPage(ids);
      return JSON.stringify(data);
    }
    default: {
      exhaustiveSwitchError(format);
    }
  }
}
async function exportToBlob({
  editor,
  ids,
  format,
  opts = {}
}) {
  switch (format) {
    case "svg":
      return new Blob([await exportToString(editor, ids, "svg", opts)], { type: "text/plain" });
    case "json":
      return new Blob([await exportToString(editor, ids, "json", opts)], { type: "text/plain" });
    case "jpeg":
    case "png":
    case "webp": {
      const svgResult = await getSvgString(editor, ids, opts);
      if (!svgResult)
        throw new Error("Could not construct image.");
      const image = await getSvgAsImage(svgResult.svg, editor.environment.isSafari, {
        type: format,
        quality: 1,
        scale: 2,
        width: svgResult.width,
        height: svgResult.height
      });
      if (!image) {
        throw new Error("Could not construct image.");
      }
      return image;
    }
    default: {
      exhaustiveSwitchError(format);
    }
  }
}
var mimeTypeByFormat = {
  jpeg: "image/jpeg",
  png: "image/png",
  webp: "image/webp",
  json: "text/plain",
  svg: "text/plain"
};
function exportToBlobPromise(editor, ids, format, opts = {}) {
  return {
    blobPromise: exportToBlob({ editor, ids, format, opts }),
    mimeType: mimeTypeByFormat[format]
  };
}

// node_modules/tldraw/dist-esm/lib/utils/export/copyAs.mjs
function copyAs(editor, ids, format = "svg", opts = {}) {
  if (!window.navigator.clipboard)
    return Promise.reject(new Error("Copy not supported"));
  if (window.navigator.clipboard.write) {
    const { blobPromise, mimeType } = exportToBlobPromise(editor, ids, format, opts);
    return window.navigator.clipboard.write([new ClipboardItem({ [mimeType]: blobPromise })]).catch((err) => {
      console.error(err);
      return blobPromise.then((blob) => {
        return window.navigator.clipboard.write([new ClipboardItem({ [mimeType]: blob })]);
      });
    });
  }
  switch (format) {
    case "json":
    case "svg":
      return fallbackWriteTextAsync(async () => exportToString(editor, ids, format, opts));
    case "jpeg":
    case "png":
      throw new Error("Copy not supported");
    default:
      exhaustiveSwitchError(format);
  }
}
async function fallbackWriteTextAsync(getText) {
  var _a2, _b2;
  await ((_b2 = (_a2 = navigator.clipboard) == null ? void 0 : _a2.writeText) == null ? void 0 : _b2.call(_a2, await getText()));
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useCopyAs.mjs
function useCopyAs() {
  const editor = useEditor();
  const { addToast } = useToasts();
  const msg2 = useTranslation();
  return (0, import_react87.useCallback)((ids, format = "svg") => {
    copyAs(editor, ids, format).catch(() => {
      addToast({
        id: "copy-fail",
        severity: "warning",
        title: msg2("toast.error.copy-fail.title"),
        description: msg2("toast.error.copy-fail.desc")
      });
    });
  }, [editor, addToast, msg2]);
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useExportAs.mjs
var import_react88 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/utils/export/exportAs.mjs
async function exportAs(editor, ids, format = "png", name, opts = {}) {
  var _a2;
  if (!name) {
    name = `shapes at ${getTimestamp()}`;
    if (ids.length === 1) {
      const first = editor.getShape(ids[0]);
      if (editor.isShapeOfType(first, "frame")) {
        name = (_a2 = first.props.name) != null ? _a2 : "frame";
      } else {
        name = `${first.id.replace(/:/, "_")} at ${getTimestamp()}`;
      }
    }
  }
  name += `.${format}`;
  const blob = await exportToBlob({ editor, ids, format, opts });
  const file = new File([blob], name, { type: blob.type });
  downloadFile(file);
}
function getTimestamp() {
  const now = /* @__PURE__ */ new Date();
  const year = String(now.getFullYear()).slice(2);
  const month = String(now.getMonth() + 1).padStart(2, "0");
  const day = String(now.getDate()).padStart(2, "0");
  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");
  return `${year}-${month}-${day} ${hours}.${minutes}.${seconds}`;
}
function downloadFile(file) {
  const link = document.createElement("a");
  const url = URL.createObjectURL(file);
  link.href = url;
  link.download = file.name;
  link.click();
  URL.revokeObjectURL(url);
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useExportAs.mjs
function useExportAs() {
  const editor = useEditor();
  const { addToast } = useToasts();
  const msg2 = useTranslation();
  return (0, import_react88.useCallback)((ids, format = "png", name) => {
    exportAs(editor, ids, format, name, {
      scale: 1,
      background: editor.getInstanceState().exportBackground
    }).catch((e) => {
      console.error(e.message);
      addToast({
        id: "export-fail",
        title: msg2("toast.error.export-fail.title"),
        description: msg2("toast.error.export-fail.desc"),
        severity: "error"
      });
    });
  }, [editor, addToast, msg2]);
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/usePrint.mjs
var import_react89 = __toESM(require_react(), 1);
function usePrint() {
  const editor = useEditor();
  const prevPrintEl = (0, import_react89.useRef)(null);
  const prevStyleEl = (0, import_react89.useRef)(null);
  return (0, import_react89.useCallback)(async function printSelectionOrPages() {
    const el = document.createElement("div");
    const style = document.createElement("style");
    const clearElements = (printEl, styleEl) => {
      if (printEl)
        printEl.innerHTML = "";
      if (styleEl && document.head.contains(styleEl))
        document.head.removeChild(styleEl);
      if (printEl && document.body.contains(printEl)) {
        document.body.removeChild(printEl);
      }
    };
    clearElements(prevPrintEl.current, prevStyleEl.current);
    prevPrintEl.current = el;
    prevStyleEl.current = style;
    const className = `tl-print-surface-${uniqueId()}`;
    el.className = className;
    const enableMargins = false;
    const allowAllPages = false;
    style.innerHTML = `
			.${className} {
				display: none;
			}

			.${className} svg {
				max-width: 100%;
				height: 100%;
				display: block;
			}

			@media print {				  
				html, body {
					min-height: 100%;
					height: 100%;
					margin: 0;
				}

				body {
					position: relative;
				}

				body > * {
					display: none;
				}

				.tldraw__editor {
					display: none;
				}

				.${className} {
					display: block !important;
					background: white;
					min-height: 100%;
					height: 100%;
					max-width: 100%;
				}

				.${className}__item {
					padding: 10mm;
					display: flex;
					min-height: 100%;
					flex-direction: column;
					page-break-after: always;
					position: relative;
					overflow: hidden;
					height: 100%;
				}

				.${className}__item__main {
					flex: 1;
					display: flex;
					align-items: center;
					justify-content: center;
					max-height: 100%;
				}

				.${className}__item__header {
					display: none;
				}

				.${className}__item__footer {
					display: none;
					text-align: right;
				}

				.${className}__item__footer__hide {
					display: none;
				}

				${!enableMargins ? "" : `
					/**
					 * Note: Safari doesn't support removing the page margins to remove them all!
					 */
					@page {
						margin:0;
					}

					.${className} .${className}__item__header {
						display: block;
					}

					.${className} .${className}__item__footer {
						display: block;
					}
				`}
			}

		`;
    const beforePrintHandler = () => {
      document.head.appendChild(style);
      document.body.appendChild(el);
    };
    const afterPrintHandler = () => {
      editor.once("change-history", () => {
        clearElements(el, style);
      });
    };
    window.addEventListener("beforeprint", beforePrintHandler);
    window.addEventListener("afterprint", afterPrintHandler);
    function addPageToPrint(title, footer, svg) {
      try {
        el.innerHTML += `<div class="${className}__item">
        <div class="${className}__item__header">
          ${title.replace(/</g, "&lt;").replace(/>/g, "&gt;")}
        </div>
        <div class="${className}__item__main">
          ${svg}
        </div>
        <div class="${className}__item__footer ${className}__item__footer__${footer ? "" : "hide"}">
          ${footer != null ? footer : ""}
        </div>
      </div>`;
      } catch (e) {
        console.error(e);
      }
    }
    function triggerPrint() {
      if (editor.environment.isChromeForIos) {
        beforePrintHandler();
        window.print();
      } else if (editor.environment.isSafari) {
        beforePrintHandler();
        document.execCommand("print", false);
      } else {
        window.print();
      }
    }
    const selectedShapeIds = editor.getSelectedShapeIds();
    const currentPageId = editor.getCurrentPageId();
    const pages = editor.getPages();
    const preserveAspectRatio = "xMidYMid meet";
    const svgOpts = {
      scale: 1,
      background: false,
      darkMode: false,
      preserveAspectRatio
    };
    if (editor.getSelectedShapeIds().length > 0) {
      const svgExport = await editor.getSvgString(selectedShapeIds, svgOpts);
      if (svgExport) {
        const page = pages.find((p) => p.id === currentPageId);
        addPageToPrint(`tldraw \u2014 ${page == null ? void 0 : page.name}`, null, svgExport.svg);
        triggerPrint();
      }
    } else {
      if (allowAllPages) {
        for (let i = 0; i < pages.length; i++) {
          const page = pages[i];
          const svgExport = await editor.getSvgString(editor.getSortedChildIdsForParent(page.id), svgOpts);
          if (svgExport) {
            addPageToPrint(`tldraw \u2014 ${page.name}`, `${i}/${pages.length}`, svgExport.svg);
          }
        }
        triggerPrint();
      } else {
        const page = editor.getCurrentPage();
        const svgExport = await editor.getSvgString(editor.getSortedChildIdsForParent(page.id), svgOpts);
        if (svgExport) {
          addPageToPrint(`tldraw \u2014 ${page.name}`, null, svgExport.svg);
          triggerPrint();
        }
      }
    }
    window.removeEventListener("beforeprint", beforePrintHandler);
    window.removeEventListener("afterprint", afterPrintHandler);
  }, [editor]);
}

// node_modules/tldraw/dist-esm/lib/ui/context/actions.mjs
var ActionsContext = React42.createContext({});
function makeActions(actions) {
  return Object.fromEntries(actions.map((action) => [action.id, action]));
}
function getExportName(editor, defaultName) {
  const selectedShapes = editor.getSelectedShapes();
  if (selectedShapes.length === 0) {
    return editor.getDocumentSettings().name || defaultName;
  }
  return void 0;
}
function ActionsProvider({ overrides, children }) {
  const editor = useEditor();
  const { addDialog, clearDialogs } = useDialogs();
  const { clearToasts } = useToasts();
  const msg2 = useTranslation();
  const insertMedia = useInsertMedia();
  const printSelectionOrPages = usePrint();
  const { cut, copy, paste } = useMenuClipboardEvents();
  const copyAs2 = useCopyAs();
  const exportAs2 = useExportAs();
  const defaultDocumentName = msg2("document.default-name");
  const trackEvent = useUiEvents();
  const actions = React42.useMemo(() => {
    function mustGoBackToSelectToolFirst() {
      if (!editor.isIn("select")) {
        editor.complete();
        editor.setCurrentTool("select");
        return false;
      }
      return false;
    }
    function canApplySelectionAction() {
      return editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
    }
    const actionItems = [
      {
        id: "edit-link",
        label: "action.edit-link",
        icon: "link",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("edit-link", { source });
          editor.mark("edit-link");
          addDialog({ component: EditLinkDialog });
        }
      },
      {
        id: "insert-embed",
        label: "action.insert-embed",
        kbd: "$i",
        onSelect(source) {
          trackEvent("insert-embed", { source });
          addDialog({ component: EmbedDialog });
        }
      },
      {
        id: "insert-media",
        label: "action.insert-media",
        kbd: "$u",
        onSelect(source) {
          trackEvent("insert-media", { source });
          insertMedia();
        }
      },
      {
        id: "undo",
        label: "action.undo",
        icon: "undo",
        kbd: "$z",
        onSelect(source) {
          trackEvent("undo", { source });
          editor.undo();
        }
      },
      {
        id: "redo",
        label: "action.redo",
        icon: "redo",
        kbd: "$!z",
        onSelect(source) {
          trackEvent("redo", { source });
          editor.redo();
        }
      },
      {
        id: "export-as-svg",
        label: {
          default: "action.export-as-svg",
          menu: "action.export-as-svg.short",
          ["context-menu"]: "action.export-as-svg.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-as", { format: "svg", source });
          exportAs2(ids, "svg", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-as-png",
        label: {
          default: "action.export-as-png",
          menu: "action.export-as-png.short",
          ["context-menu"]: "action.export-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-as", { format: "png", source });
          exportAs2(ids, "png", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-as-json",
        label: {
          default: "action.export-as-json",
          menu: "action.export-as-json.short",
          ["context-menu"]: "action.export-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-as", { format: "json", source });
          exportAs2(ids, "json", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-all-as-svg",
        label: {
          default: "action.export-all-as-svg",
          menu: "action.export-all-as-svg.short",
          ["context-menu"]: "action.export-all-as-svg.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-all-as", { format: "svg", source });
          exportAs2(Array.from(editor.getCurrentPageShapeIds()), "svg", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-all-as-png",
        label: {
          default: "action.export-all-as-png",
          menu: "action.export-all-as-png.short",
          ["context-menu"]: "action.export-all-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          const ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-all-as", { format: "png", source });
          exportAs2(ids, "png", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-all-as-json",
        label: {
          default: "action.export-all-as-json",
          menu: "action.export-all-as-json.short",
          ["context-menu"]: "action.export-all-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          const ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("export-all-as", { format: "json", source });
          exportAs2(ids, "json", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "copy-as-svg",
        label: {
          default: "action.copy-as-svg",
          menu: "action.copy-as-svg.short",
          ["context-menu"]: "action.copy-as-svg.short"
        },
        kbd: "$!c",
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("copy-as", { format: "svg", source });
          copyAs2(ids, "svg");
        }
      },
      {
        id: "copy-as-png",
        label: {
          default: "action.copy-as-png",
          menu: "action.copy-as-png.short",
          ["context-menu"]: "action.copy-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("copy-as", { format: "png", source });
          copyAs2(ids, "png");
        }
      },
      {
        id: "copy-as-json",
        label: {
          default: "action.copy-as-json",
          menu: "action.copy-as-json.short",
          ["context-menu"]: "action.copy-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          let ids = editor.getSelectedShapeIds();
          if (ids.length === 0)
            ids = Array.from(editor.getCurrentPageShapeIds().values());
          if (ids.length === 0)
            return;
          trackEvent("copy-as", { format: "json", source });
          copyAs2(ids, "json");
        }
      },
      {
        id: "toggle-auto-size",
        label: "action.toggle-auto-size",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("toggle-auto-size", { source });
          editor.mark("toggling auto size");
          const shapes = editor.getSelectedShapes().filter((shape) => editor.isShapeOfType(shape, "text") && shape.props.autoSize === false);
          editor.updateShapes(shapes.map((shape) => {
            return {
              id: shape.id,
              type: shape.type,
              props: {
                ...shape.props,
                w: 8,
                autoSize: true
              }
            };
          }));
          kickoutOccludedShapes(editor, shapes.map((shape) => shape.id));
        }
      },
      {
        id: "open-embed-link",
        label: "action.open-embed-link",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("open-embed-link", { source });
          const ids = editor.getSelectedShapeIds();
          const warnMsg = "No embed shapes selected";
          if (ids.length !== 1) {
            console.error(warnMsg);
            return;
          }
          const shape = editor.getShape(ids[0]);
          if (!shape || !editor.isShapeOfType(shape, "embed")) {
            console.error(warnMsg);
            return;
          }
          openWindow(shape.props.url, "_blank");
        }
      },
      {
        id: "select-zoom-tool",
        readonlyOk: true,
        kbd: "z",
        onSelect(source) {
          var _a2, _b2;
          if (((_a2 = editor.root.getCurrent()) == null ? void 0 : _a2.id) === "zoom")
            return;
          trackEvent("zoom-tool", { source });
          if (!(editor.inputs.shiftKey || editor.inputs.ctrlKey)) {
            const currentTool = editor.root.getCurrent();
            if (currentTool && ((_b2 = currentTool.getCurrent()) == null ? void 0 : _b2.id) === "idle") {
              editor.setCurrentTool("zoom", { onInteractionEnd: currentTool.id, maskAs: "zoom" });
            }
          }
        }
      },
      {
        id: "convert-to-bookmark",
        label: "action.convert-to-bookmark",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          editor.batch(() => {
            trackEvent("convert-to-bookmark", { source });
            const shapes = editor.getSelectedShapes();
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!shape || !editor.isShapeOfType(shape, "embed") || !shape.props.url)
                continue;
              const newPos = new Vec(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(new Vec(shape.props.w / 2 - 300 / 2, shape.props.h / 2 - 320 / 2));
              newPos.rot(shape.rotation);
              const partial = {
                id: createShapeId(),
                type: "bookmark",
                rotation: shape.rotation,
                x: newPos.x,
                y: newPos.y,
                opacity: 1,
                props: {
                  url: shape.props.url
                }
              };
              createList.push(partial);
              deleteList.push(shape.id);
            }
            editor.mark("convert shapes to bookmark");
            editor.deleteShapes(deleteList);
            editor.createShapes(createList);
          });
        }
      },
      {
        id: "convert-to-embed",
        label: "action.convert-to-embed",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("convert-to-embed", { source });
          editor.batch(() => {
            const ids = editor.getSelectedShapeIds();
            const shapes = compact(ids.map((id) => editor.getShape(id)));
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!editor.isShapeOfType(shape, "bookmark"))
                continue;
              const { url } = shape.props;
              const embedInfo = getEmbedInfo(shape.props.url);
              if (!embedInfo)
                continue;
              if (!embedInfo.definition)
                continue;
              const { width, height } = embedInfo.definition;
              const newPos = new Vec(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(new Vec(shape.props.w / 2 - width / 2, shape.props.h / 2 - height / 2));
              newPos.rot(shape.rotation);
              const shapeToCreate = {
                id: createShapeId(),
                type: "embed",
                x: newPos.x,
                y: newPos.y,
                rotation: shape.rotation,
                props: {
                  url,
                  w: width,
                  h: height
                }
              };
              createList.push(shapeToCreate);
              deleteList.push(shape.id);
            }
            editor.mark("convert shapes to embed");
            editor.deleteShapes(deleteList);
            editor.createShapes(createList);
          });
        }
      },
      {
        id: "duplicate",
        kbd: "$d",
        label: "action.duplicate",
        icon: "duplicate",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("duplicate-shapes", { source });
          const instanceState = editor.getInstanceState();
          let ids;
          let offset4;
          if (instanceState.duplicateProps) {
            ids = instanceState.duplicateProps.shapeIds;
            offset4 = instanceState.duplicateProps.offset;
          } else {
            ids = editor.getSelectedShapeIds();
            const commonBounds = Box.Common(compact(ids.map((id) => editor.getShapePageBounds(id))));
            offset4 = instanceState.canMoveCamera ? {
              x: commonBounds.width + 20,
              y: 0
            } : {
              x: 20,
              y: 20
            };
          }
          editor.mark("duplicate shapes");
          editor.duplicateShapes(ids, offset4);
          if (instanceState.duplicateProps) {
            editor.updateInstanceState({
              duplicateProps: {
                ...instanceState.duplicateProps,
                shapeIds: editor.getSelectedShapeIds()
              }
            });
          }
        }
      },
      {
        id: "ungroup",
        label: "action.ungroup",
        kbd: "$!g",
        icon: "ungroup",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("ungroup-shapes", { source });
          editor.mark("ungroup");
          editor.ungroupShapes(editor.getSelectedShapeIds());
        }
      },
      {
        id: "group",
        label: "action.group",
        kbd: "$g",
        icon: "group",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("group-shapes", { source });
          const onlySelectedShape = editor.getOnlySelectedShape();
          if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "group")) {
            editor.mark("ungroup");
            editor.ungroupShapes(editor.getSelectedShapeIds());
          } else {
            editor.mark("group");
            editor.groupShapes(editor.getSelectedShapeIds());
          }
        }
      },
      {
        id: "remove-frame",
        label: "action.remove-frame",
        kbd: "$!f",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          trackEvent("remove-frame", { source });
          const selectedShapes = editor.getSelectedShapes();
          if (selectedShapes.length > 0 && selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"))) {
            editor.mark("remove-frame");
            removeFrame(editor, selectedShapes.map((shape) => shape.id));
          }
        }
      },
      {
        id: "fit-frame-to-content",
        label: "action.fit-frame-to-content",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          trackEvent("fit-frame-to-content", { source });
          const onlySelectedShape = editor.getOnlySelectedShape();
          if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "frame")) {
            editor.mark("fit-frame-to-content");
            fitFrameToContent(editor, onlySelectedShape.id);
          }
        }
      },
      {
        id: "align-left",
        label: "action.align-left",
        kbd: "?A",
        icon: "align-left",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "left", source });
          editor.mark("align left");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "left");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "align-center-horizontal",
        label: {
          default: "action.align-center-horizontal",
          ["context-menu"]: "action.align-center-horizontal.short"
        },
        kbd: "?H",
        icon: "align-center-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "center-horizontal", source });
          editor.mark("align center horizontal");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "center-horizontal");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "align-right",
        label: "action.align-right",
        kbd: "?D",
        icon: "align-right",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "right", source });
          editor.mark("align right");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "right");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "align-center-vertical",
        label: {
          default: "action.align-center-vertical",
          ["context-menu"]: "action.align-center-vertical.short"
        },
        kbd: "?V",
        icon: "align-center-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "center-vertical", source });
          editor.mark("align center vertical");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "center-vertical");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "align-top",
        label: "action.align-top",
        icon: "align-top",
        kbd: "?W",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "top", source });
          editor.mark("align top");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "top");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "align-bottom",
        label: "action.align-bottom",
        icon: "align-bottom",
        kbd: "?S",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "bottom", source });
          editor.mark("align bottom");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.alignShapes(selectedShapeIds, "bottom");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "distribute-horizontal",
        label: {
          default: "action.distribute-horizontal",
          ["context-menu"]: "action.distribute-horizontal.short"
        },
        icon: "distribute-horizontal",
        kbd: "?!h",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("distribute-shapes", { operation: "horizontal", source });
          editor.mark("distribute horizontal");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.distributeShapes(selectedShapeIds, "horizontal");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "distribute-vertical",
        label: {
          default: "action.distribute-vertical",
          ["context-menu"]: "action.distribute-vertical.short"
        },
        icon: "distribute-vertical",
        kbd: "?!V",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("distribute-shapes", { operation: "vertical", source });
          editor.mark("distribute vertical");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.distributeShapes(selectedShapeIds, "vertical");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "stretch-horizontal",
        label: {
          default: "action.stretch-horizontal",
          ["context-menu"]: "action.stretch-horizontal.short"
        },
        icon: "stretch-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stretch-shapes", { operation: "horizontal", source });
          editor.mark("stretch horizontal");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.stretchShapes(selectedShapeIds, "horizontal");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "stretch-vertical",
        label: {
          default: "action.stretch-vertical",
          ["context-menu"]: "action.stretch-vertical.short"
        },
        icon: "stretch-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stretch-shapes", { operation: "vertical", source });
          editor.mark("stretch vertical");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.stretchShapes(selectedShapeIds, "vertical");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "flip-horizontal",
        label: {
          default: "action.flip-horizontal",
          ["context-menu"]: "action.flip-horizontal.short"
        },
        kbd: "!h",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("flip-shapes", { operation: "horizontal", source });
          editor.mark("flip horizontal");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.flipShapes(selectedShapeIds, "horizontal");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "flip-vertical",
        label: { default: "action.flip-vertical", ["context-menu"]: "action.flip-vertical.short" },
        kbd: "!v",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("flip-shapes", { operation: "vertical", source });
          editor.mark("flip vertical");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.flipShapes(selectedShapeIds, "vertical");
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "pack",
        label: "action.pack",
        icon: "pack",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("pack-shapes", { source });
          editor.mark("pack");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.packShapes(selectedShapeIds, 16);
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "stack-vertical",
        label: {
          default: "action.stack-vertical",
          ["context-menu"]: "action.stack-vertical.short"
        },
        icon: "stack-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stack-shapes", { operation: "vertical", source });
          editor.mark("stack-vertical");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.stackShapes(selectedShapeIds, "vertical", 16);
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "stack-horizontal",
        label: {
          default: "action.stack-horizontal",
          ["context-menu"]: "action.stack-horizontal.short"
        },
        icon: "stack-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stack-shapes", { operation: "horizontal", source });
          editor.mark("stack-horizontal");
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.stackShapes(selectedShapeIds, "horizontal", 16);
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "bring-to-front",
        label: "action.bring-to-front",
        kbd: "]",
        icon: "bring-to-front",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "toFront", source });
          editor.mark("bring to front");
          editor.bringToFront(editor.getSelectedShapeIds());
        }
      },
      {
        id: "bring-forward",
        label: "action.bring-forward",
        icon: "bring-forward",
        kbd: "?]",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "forward", source });
          editor.mark("bring forward");
          editor.bringForward(editor.getSelectedShapeIds());
        }
      },
      {
        id: "send-backward",
        label: "action.send-backward",
        icon: "send-backward",
        kbd: "?[",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "backward", source });
          editor.mark("send backward");
          editor.sendBackward(editor.getSelectedShapeIds());
        }
      },
      {
        id: "send-to-back",
        label: "action.send-to-back",
        icon: "send-to-back",
        kbd: "[",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "toBack", source });
          editor.mark("send to back");
          editor.sendToBack(editor.getSelectedShapeIds());
        }
      },
      {
        id: "cut",
        label: "action.cut",
        kbd: "$x",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          editor.mark("cut");
          cut(source);
        }
      },
      {
        id: "copy",
        label: "action.copy",
        kbd: "$c",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          copy(source);
        }
      },
      {
        id: "paste",
        label: "action.paste",
        kbd: "$v",
        onSelect(source) {
          var _a2;
          (_a2 = navigator.clipboard) == null ? void 0 : _a2.read().then((clipboardItems) => {
            paste(clipboardItems, source, source === "context-menu" ? editor.inputs.currentPagePoint : void 0);
          });
        }
      },
      {
        id: "select-all",
        label: "action.select-all",
        kbd: "$a",
        readonlyOk: true,
        onSelect(source) {
          editor.batch(() => {
            if (mustGoBackToSelectToolFirst())
              return;
            trackEvent("select-all-shapes", { source });
            editor.mark("select all kbd");
            editor.selectAll();
          });
        }
      },
      {
        id: "select-none",
        label: "action.select-none",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("select-none-shapes", { source });
          editor.mark("select none");
          editor.selectNone();
        }
      },
      {
        id: "delete",
        label: "action.delete",
        kbd: "\u232B,del,backspace",
        icon: "trash",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("delete-shapes", { source });
          editor.mark("delete");
          editor.deleteShapes(editor.getSelectedShapeIds());
        }
      },
      {
        id: "rotate-cw",
        label: "action.rotate-cw",
        icon: "rotate-cw",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("rotate-cw", { source });
          editor.mark("rotate-cw");
          const offset4 = editor.getSelectionRotation() % (HALF_PI / 2);
          const dontUseOffset = approximately(offset4, 0) || approximately(offset4, HALF_PI / 2);
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.rotateShapesBy(selectedShapeIds, HALF_PI / 2 - (dontUseOffset ? 0 : offset4));
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "rotate-ccw",
        label: "action.rotate-ccw",
        icon: "rotate-ccw",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("rotate-ccw", { source });
          editor.mark("rotate-ccw");
          const offset4 = editor.getSelectionRotation() % (HALF_PI / 2);
          const offsetCloseToZero = approximately(offset4, 0);
          const selectedShapeIds = editor.getSelectedShapeIds();
          editor.rotateShapesBy(selectedShapeIds, offsetCloseToZero ? -(HALF_PI / 2) : -offset4);
          kickoutOccludedShapes(editor, selectedShapeIds);
        }
      },
      {
        id: "zoom-in",
        label: "action.zoom-in",
        kbd: "$=,=",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-in", { source });
          editor.zoomIn(editor.getViewportScreenCenter(), { duration: ANIMATION_MEDIUM_MS });
        }
      },
      {
        id: "zoom-out",
        label: "action.zoom-out",
        kbd: "$-,-",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-out", { source });
          editor.zoomOut(editor.getViewportScreenCenter(), { duration: ANIMATION_MEDIUM_MS });
        }
      },
      {
        id: "zoom-to-100",
        label: "action.zoom-to-100",
        icon: "reset-zoom",
        kbd: "!0",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("reset-zoom", { source });
          editor.resetZoom(editor.getViewportScreenCenter(), { duration: ANIMATION_MEDIUM_MS });
        }
      },
      {
        id: "zoom-to-fit",
        label: "action.zoom-to-fit",
        kbd: "!1",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-to-fit", { source });
          editor.zoomToFit({ duration: ANIMATION_MEDIUM_MS });
        }
      },
      {
        id: "zoom-to-selection",
        label: "action.zoom-to-selection",
        kbd: "!2",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("zoom-to-selection", { source });
          editor.zoomToSelection({ duration: ANIMATION_MEDIUM_MS });
        }
      },
      {
        id: "toggle-snap-mode",
        label: {
          default: "action.toggle-snap-mode",
          menu: "action.toggle-snap-mode.menu"
        },
        onSelect(source) {
          trackEvent("toggle-snap-mode", { source });
          editor.user.updateUserPreferences({ isSnapMode: !editor.user.getIsSnapMode() });
        },
        checkbox: true
      },
      {
        id: "toggle-dark-mode",
        label: {
          default: "action.toggle-dark-mode",
          menu: "action.toggle-dark-mode.menu"
        },
        kbd: "$/",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-dark-mode", { source });
          editor.user.updateUserPreferences({ isDarkMode: !editor.user.getIsDarkMode() });
        },
        checkbox: true
      },
      {
        id: "toggle-wrap-mode",
        label: {
          default: "action.toggle-wrap-mode",
          menu: "action.toggle-wrap-mode.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-wrap-mode", { source });
          editor.user.updateUserPreferences({
            isWrapMode: !editor.user.getIsWrapMode()
          });
        },
        checkbox: true
      },
      {
        id: "toggle-reduce-motion",
        label: {
          default: "action.toggle-reduce-motion",
          menu: "action.toggle-reduce-motion.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-reduce-motion", { source });
          editor.user.updateUserPreferences({
            animationSpeed: editor.user.getAnimationSpeed() === 0 ? 1 : 0
          });
        },
        checkbox: true
      },
      {
        id: "toggle-edge-scrolling",
        label: {
          default: "action.toggle-edge-scrolling",
          menu: "action.toggle-edge-scrolling.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-edge-scrolling", { source });
          editor.user.updateUserPreferences({
            edgeScrollSpeed: editor.user.getEdgeScrollSpeed() === 0 ? 1 : 0
          });
        },
        checkbox: true
      },
      {
        id: "toggle-transparent",
        label: {
          default: "action.toggle-transparent",
          menu: "action.toggle-transparent.menu",
          ["context-menu"]: "action.toggle-transparent.context-menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-transparent", { source });
          editor.updateInstanceState({
            exportBackground: !editor.getInstanceState().exportBackground
          }, { ephemeral: true });
        },
        checkbox: true
      },
      {
        id: "toggle-tool-lock",
        label: {
          default: "action.toggle-tool-lock",
          menu: "action.toggle-tool-lock.menu"
        },
        kbd: "q",
        onSelect(source) {
          trackEvent("toggle-tool-lock", { source });
          editor.updateInstanceState({ isToolLocked: !editor.getInstanceState().isToolLocked });
        },
        checkbox: true
      },
      {
        id: "unlock-all",
        label: "action.unlock-all",
        onSelect(source) {
          trackEvent("unlock-all", { source });
          const updates = [];
          for (const shape of editor.getCurrentPageShapes()) {
            if (shape.isLocked) {
              updates.push({ id: shape.id, type: shape.type, isLocked: false });
            }
          }
          if (updates.length > 0) {
            editor.updateShapes(updates);
          }
        }
      },
      {
        id: "toggle-focus-mode",
        label: {
          default: "action.toggle-focus-mode",
          menu: "action.toggle-focus-mode.menu"
        },
        readonlyOk: true,
        kbd: "$.",
        checkbox: true,
        onSelect(source) {
          requestAnimationFrame(() => {
            editor.batch(() => {
              trackEvent("toggle-focus-mode", { source });
              clearDialogs();
              clearToasts();
              editor.updateInstanceState({ isFocusMode: !editor.getInstanceState().isFocusMode });
            });
          });
        }
      },
      {
        id: "toggle-grid",
        label: {
          default: "action.toggle-grid",
          menu: "action.toggle-grid.menu"
        },
        readonlyOk: true,
        kbd: "$'",
        onSelect(source) {
          trackEvent("toggle-grid-mode", { source });
          editor.updateInstanceState({ isGridMode: !editor.getInstanceState().isGridMode });
        },
        checkbox: true
      },
      {
        id: "toggle-debug-mode",
        label: {
          default: "action.toggle-debug-mode",
          menu: "action.toggle-debug-mode.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-debug-mode", { source });
          editor.updateInstanceState({
            isDebugMode: !editor.getInstanceState().isDebugMode
          });
        },
        checkbox: true
      },
      {
        id: "print",
        label: "action.print",
        kbd: "$p",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("print", { source });
          printSelectionOrPages();
        }
      },
      {
        id: "exit-pen-mode",
        label: "action.exit-pen-mode",
        icon: "cross-2",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("exit-pen-mode", { source });
          editor.updateInstanceState({ isPenMode: false });
        }
      },
      {
        id: "stop-following",
        label: "action.stop-following",
        icon: "cross-2",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("stop-following", { source });
          editor.stopFollowingUser();
        }
      },
      {
        id: "back-to-content",
        label: "action.back-to-content",
        icon: "arrow-left",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-to-content", { source });
          editor.zoomToContent();
        }
      },
      {
        id: "toggle-lock",
        label: "action.toggle-lock",
        kbd: "!l",
        onSelect(source) {
          editor.mark("locking");
          trackEvent("toggle-lock", { source });
          editor.toggleLock(editor.getSelectedShapeIds());
        }
      },
      {
        id: "new-page",
        label: "context.pages.new-page",
        onSelect(source) {
          const newPageId = PageRecordType.createId();
          const ids = editor.getSelectedShapeIds();
          editor.batch(() => {
            editor.mark("move_shapes_to_page");
            editor.createPage({ name: msg2("page-menu.new-page-initial-name"), id: newPageId });
            editor.moveShapesToPage(ids, newPageId);
          });
          trackEvent("new-page", { source });
        }
      },
      {
        id: "select-white-color",
        label: "color-style.white",
        kbd: "?t",
        onSelect(source) {
          const style = DefaultColorStyle;
          editor.batch(() => {
            editor.mark("change-color");
            if (editor.isIn("select")) {
              editor.setStyleForSelectedShapes(style, "white", { squashing: false });
            }
            editor.setStyleForNextShapes(style, "white", { squashing: false });
            editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
          });
          trackEvent("set-style", { source, id: style.id, value: "white" });
        }
      }
    ];
    const actions2 = makeActions(actionItems);
    if (overrides) {
      return overrides(editor, actions2, void 0);
    }
    return actions2;
  }, [
    editor,
    trackEvent,
    overrides,
    addDialog,
    insertMedia,
    exportAs2,
    copyAs2,
    cut,
    copy,
    paste,
    clearDialogs,
    clearToasts,
    printSelectionOrPages,
    msg2,
    defaultDocumentName
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(ActionsContext.Provider, { value: asActions(actions), children });
}
function useActions() {
  const ctx = React42.useContext(ActionsContext);
  if (!ctx) {
    throw new Error("useTools must be used within a ToolProvider");
  }
  return ctx;
}
function asActions(actions) {
  return actions;
}
function unwrapLabel(label, menuType) {
  var _a2;
  return label ? typeof label === "string" ? label : menuType ? (_a2 = label[menuType]) != null ? _a2 : label["default"] : void 0 : void 0;
}

// node_modules/tldraw/dist-esm/lib/ui/context/components.mjs
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
var import_react128 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenu.mjs
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var import_react102 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiPopover.mjs
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);

// node_modules/@radix-ui/react-popover/dist/index.mjs
var import_react93 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-popper/dist/index.mjs
var import_react92 = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var min2 = Math.min;
var max = Math.max;
var round2 = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp2(start, value, end) {
  return max(start, min2(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min2(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min2(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset4 = clamp2(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min3 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp2(min3, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min3 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp2(min3, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset4 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset4, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min2(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min2(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        availableWidth = alignment || noShift ? min2(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        availableHeight = alignment || noShift ? min2(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = node.assignedSlot || node.parentNode || isShadowRoot(node) && node.host || getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round2(rect.width) : rect.width) / width;
  let y = ($ ? round2(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
var topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element) {
  return topLayerSelectors.some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min2(rect.right, accRect.right);
    accRect.bottom = min2(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min2(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var hide2 = hide;
var arrow2 = arrow;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React43 = __toESM(require_react(), 1);
var import_react90 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var index = typeof document !== "undefined" ? import_react90.useLayoutEffect : import_react90.useEffect;
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length)
        return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React43.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React43.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React43.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React43.useState(null);
  const [_floating, _setFloating] = React43.useState(null);
  const setReference = React43.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React43.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React43.useRef(null);
  const floatingRef = React43.useRef(null);
  const dataRef = React43.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = React43.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React43.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React43.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React43.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React43.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React43.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var limitShift3 = (options, deps) => ({
  ...limitShift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});
var hide3 = (options, deps) => ({
  ...hide2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@radix-ui/react-use-size/dist/index.mjs
var import_react91 = __toESM(require_react(), 1);
function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
  const [size4, setSize] = (0, import_react91.useState)(void 0);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries))
          return;
        if (!entries.length)
          return;
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({
          width,
          height
        });
      });
      resizeObserver.observe(element, {
        box: "border-box"
      });
      return () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]);
  return size4;
}

// node_modules/@radix-ui/react-popper/dist/index.mjs
var $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper";
var [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME);
var [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
  const { __scopePopper, children } = props;
  const [anchor, setAnchor] = (0, import_react92.useState)(null);
  return /* @__PURE__ */ (0, import_react92.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
};
var $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor";
var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
  const { __scopePopper, virtualRef, ...anchorProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
  const ref = (0, import_react92.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  (0, import_react92.useEffect)(() => {
    context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
  });
  return virtualRef ? null : /* @__PURE__ */ (0, import_react92.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
});
var $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent";
var [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
  const { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, avoidCollisions = true, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, updatePositionStrategy = "optimized", onPlaced, ...contentProps } = props;
  const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
  const [content, setContent] = (0, import_react92.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setContent(node));
  const [arrow4, setArrow] = (0, import_react92.useState)(null);
  const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow4);
  const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
  const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
  const desiredPlacement = side + (align !== "center" ? "-" + align : "");
  const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  };
  const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ];
  const hasExplicitBoundaries = boundary.length > 0;
  const detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
    altBoundary: hasExplicitBoundaries
  };
  const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: (...args) => {
      const cleanup = autoUpdate(...args, {
        animationFrame: updatePositionStrategy === "always"
      });
      return cleanup;
    },
    elements: {
      reference: context.anchor
    },
    middleware: [
      offset3({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions && shift3({
        mainAxis: true,
        crossAxis: false,
        limiter: sticky === "partial" ? limitShift3() : void 0,
        ...detectOverflowOptions
      }),
      avoidCollisions && flip3({
        ...detectOverflowOptions
      }),
      size3({
        ...detectOverflowOptions,
        apply: ({ elements, rects, availableWidth, availableHeight }) => {
          const { width: anchorWidth, height: anchorHeight } = rects.reference;
          const contentStyle = elements.floating.style;
          contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
          contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
          contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
          contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
        }
      }),
      arrow4 && arrow3({
        element: arrow4,
        padding: arrowPadding
      }),
      $cf1ac5d9fe0e8206$var$transformOrigin({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached && hide3({
        strategy: "referenceHidden",
        ...detectOverflowOptions
      })
    ]
  });
  const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
  const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (isPositioned)
      handlePlaced === null || handlePlaced === void 0 || handlePlaced();
  }, [
    isPositioned,
    handlePlaced
  ]);
  const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
  const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
  const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
  const [contentZIndex, setContentZIndex] = (0, import_react92.useState)();
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]);
  return /* @__PURE__ */ (0, import_react92.createElement)("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    },
    dir: props.dir
  }, /* @__PURE__ */ (0, import_react92.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, /* @__PURE__ */ (0, import_react92.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-side": placedSide,
    "data-align": placedAlign
  }, contentProps, {
    ref: composedRefs,
    style: {
      ...contentProps.style,
      animation: !isPositioned ? "none" : void 0,
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  }))));
});
function $cf1ac5d9fe0e8206$var$isNotNull(value) {
  return value !== null;
}
var $cf1ac5d9fe0e8206$var$transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
    const noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign];
    const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
    const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
    let x = "";
    let y = "";
    if (placedSide === "bottom") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x = `${-arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x = `${rects.floating.width + arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return {
      data: {
        x,
        y
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
var $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;

// node_modules/@radix-ui/react-popover/dist/index.mjs
var $cb5cc270b50c6fcd$var$POPOVER_NAME = "Popover";
var [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cb5cc270b50c6fcd$var$POPOVER_NAME, [
  $cf1ac5d9fe0e8206$export$722aac194ae923
]);
var $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
var [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
var $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props) => {
  const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const triggerRef = (0, import_react93.useRef)(null);
  const [hasCustomAnchor, setHasCustomAnchor] = (0, import_react93.useState)(false);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react93.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PopoverProvider, {
    scope: __scopePopover,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerRef,
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react93.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    hasCustomAnchor,
    onCustomAnchorAdd: (0, import_react93.useCallback)(() => setHasCustomAnchor(true), []),
    onCustomAnchorRemove: (0, import_react93.useCallback)(() => setHasCustomAnchor(false), []),
    modal
  }, children));
};
var $cb5cc270b50c6fcd$var$TRIGGER_NAME = "PopoverTrigger";
var $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /* @__PURE__ */ (0, import_react93.forwardRef)((props, forwardedRef) => {
  const { __scopePopover, ...triggerProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
  const trigger2 = /* @__PURE__ */ (0, import_react93.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": context.open,
    "aria-controls": context.contentId,
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
  }, triggerProps, {
    ref: composedTriggerRef,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, context.onOpenToggle)
  }));
  return context.hasCustomAnchor ? trigger2 : /* @__PURE__ */ (0, import_react93.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({
    asChild: true
  }, popperScope), trigger2);
});
var $cb5cc270b50c6fcd$var$PORTAL_NAME = "PopoverPortal";
var [$cb5cc270b50c6fcd$var$PortalProvider, $cb5cc270b50c6fcd$var$usePortalContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, {
  forceMount: void 0
});
var $cb5cc270b50c6fcd$export$dd679ffb4362d2d4 = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, __scopePopover);
  return /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PortalProvider, {
    scope: __scopePopover,
    forceMount
  }, /* @__PURE__ */ (0, import_react93.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react93.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: true,
    container
  }, children)));
};
var $cb5cc270b50c6fcd$var$CONTENT_NAME = "PopoverContent";
var $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /* @__PURE__ */ (0, import_react93.forwardRef)((props, forwardedRef) => {
  const portalContext = $cb5cc270b50c6fcd$var$usePortalContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  return /* @__PURE__ */ (0, import_react93.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, context.modal ? /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PopoverContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PopoverContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })));
});
var $cb5cc270b50c6fcd$var$PopoverContentModal = /* @__PURE__ */ (0, import_react93.forwardRef)((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const contentRef = (0, import_react93.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
  const isRightClickOutsideRef = (0, import_react93.useRef)(false);
  (0, import_react93.useEffect)(() => {
    const content = contentRef.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react93.createElement)(Combination_default, {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
    allowPinchZoom: true
  }, /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      event.preventDefault();
      if (!isRightClickOutsideRef.current)
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
    }),
    onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      isRightClickOutsideRef.current = isRightClick;
    }, {
      checkForDefaultPrevented: false
    }),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event) => event.preventDefault(), {
      checkForDefaultPrevented: false
    })
  })));
});
var $cb5cc270b50c6fcd$var$PopoverContentNonModal = /* @__PURE__ */ (0, import_react93.forwardRef)((props, forwardedRef) => {
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
  const hasInteractedOutsideRef = (0, import_react93.useRef)(false);
  const hasPointerDownOutsideRef = (0, import_react93.useRef)(false);
  return /* @__PURE__ */ (0, import_react93.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented) {
        var _context$triggerRef$c2;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = false;
      hasPointerDownOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts, _context$triggerRef$c3;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented) {
        hasInteractedOutsideRef.current = true;
        if (event.detail.originalEvent.type === "pointerdown")
          hasPointerDownOutsideRef.current = true;
      }
      const target = event.target;
      const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
      if (targetIsTrigger)
        event.preventDefault();
      if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
        event.preventDefault();
    }
  }));
});
var $cb5cc270b50c6fcd$var$PopoverContentImpl = /* @__PURE__ */ (0, import_react93.forwardRef)((props, forwardedRef) => {
  const { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, ...contentProps } = props;
  const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
  const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  return /* @__PURE__ */ (0, import_react93.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    loop: true,
    trapped: trapFocus,
    onMountAutoFocus: onOpenAutoFocus,
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react93.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    asChild: true,
    disableOutsidePointerEvents,
    onInteractOutside,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onDismiss: () => context.onOpenChange(false)
  }, /* @__PURE__ */ (0, import_react93.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
    "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
    role: "dialog",
    id: context.contentId
  }, popperScope, contentProps, {
    ref: forwardedRef,
    style: {
      ...contentProps.style,
      "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
      "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
      "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }))));
});
function $cb5cc270b50c6fcd$var$getState(open) {
  return open ? "open" : "closed";
}
var $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
var $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
var $cb5cc270b50c6fcd$export$602eac185826482c = $cb5cc270b50c6fcd$export$dd679ffb4362d2d4;
var $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;

// node_modules/tldraw/dist-esm/lib/ui/hooks/useMenuIsOpen.mjs
var import_react94 = __toESM(require_react(), 1);
function useMenuIsOpen(id, cb) {
  const editor = useEditor();
  const rIsOpen = (0, import_react94.useRef)(false);
  const trackEvent = useUiEvents();
  const onOpenChange = (0, import_react94.useCallback)((isOpen2) => {
    rIsOpen.current = isOpen2;
    editor.batch(() => {
      if (isOpen2) {
        editor.complete();
        editor.addOpenMenu(id);
      } else {
        editor.updateInstanceState({
          openMenus: editor.getOpenMenus().filter((m) => !m.startsWith(id))
        });
      }
      cb == null ? void 0 : cb(isOpen2);
    });
  }, [editor, id, cb]);
  const isOpen = useValue("is menu open", () => editor.getOpenMenus().includes(id), [editor, id]);
  (0, import_react94.useEffect)(() => {
    if (rIsOpen.current) {
      trackEvent("open-menu", { source: "unknown", id });
      editor.addOpenMenu(id);
    }
    return () => {
      if (rIsOpen.current) {
        editor.deleteOpenMenu(id);
        editor.getOpenMenus().forEach((menuId) => {
          if (menuId.startsWith(id)) {
            trackEvent("close-menu", { source: "unknown", id });
            editor.deleteOpenMenu(menuId);
          }
        });
        rIsOpen.current = false;
      }
    };
  }, [editor, id, trackEvent]);
  return [isOpen, onOpenChange];
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiPopover.mjs
function TldrawUiPopover({ id, children, onOpenChange, open }) {
  const [isOpen, handleOpenChange] = useMenuIsOpen(id, onOpenChange);
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)($cb5cc270b50c6fcd$export$be92b6f5f03c0fe9, {
    onOpenChange: handleOpenChange,
    open: open || isOpen,
    children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { className: "tlui-popover", children })
  });
}
function TldrawUiPopoverTrigger({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)($cb5cc270b50c6fcd$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children });
}
function TldrawUiPopoverContent({
  side,
  children,
  align = "center",
  sideOffset = 8,
  alignOffset = 0
}) {
  const container = useContainer();
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)($cb5cc270b50c6fcd$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)($cb5cc270b50c6fcd$export$7c6e2c02157bb7d2, {
    className: "tlui-popover__content",
    side,
    sideOffset,
    align,
    alignOffset,
    dir: "ltr",
    children
  }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuContext.mjs
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var import_react95 = __toESM(require_react(), 1);
var menuContext = (0, import_react95.createContext)({ type: "menu", sourceId: "main-menu" });
function useTldrawUiMenuContext() {
  return (0, import_react95.useContext)(menuContext);
}
function TldrawUiMenuContextProvider({
  type,
  sourceId,
  children
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(menuContext.Provider, { value: { type, sourceId }, children });
}

// node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenuContent.mjs
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);

// node_modules/@radix-ui/react-context-menu/dist/index.mjs
var import_react99 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-menu/dist/index.mjs
var import_react98 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-direction/dist/index.mjs
var import_react96 = __toESM(require_react(), 1);
var $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ (0, import_react96.createContext)(void 0);
function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
  const globalDir = (0, import_react96.useContext)($f631663db3294ace$var$DirectionContext);
  return localDir || globalDir || "ltr";
}

// node_modules/@radix-ui/react-roving-focus/dist/index.mjs
var import_react97 = __toESM(require_react(), 1);
var $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup";
var [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
var [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
  $d7bdfb9eb0fdf311$var$createCollectionScope
]);
var [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
var $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ (0, import_react97.forwardRef)((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_react97.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ (0, import_react97.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
    scope: props.__scopeRovingFocusGroup
  }, /* @__PURE__ */ (0, import_react97.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
    ref: forwardedRef
  }))));
});
var $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ (0, import_react97.forwardRef)((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, ...groupProps } = props;
  const ref = (0, import_react97.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId,
    onChange: onCurrentTabStopIdChange
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = (0, import_react97.useState)(false);
  const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  const isClickFocusRef = (0, import_react97.useRef)(false);
  const [focusableItemsCount, setFocusableItemsCount] = (0, import_react97.useState)(0);
  (0, import_react97.useEffect)(() => {
    const node = ref.current;
    if (node) {
      node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
      return () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
    }
  }, [
    handleEntryFocus
  ]);
  return /* @__PURE__ */ (0, import_react97.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: (0, import_react97.useCallback)((tabStopId) => setCurrentTabStopId(tabStopId), [
      setCurrentTabStopId
    ]),
    onItemShiftTab: (0, import_react97.useCallback)(() => setIsTabbingBackOut(true), []),
    onFocusableItemAdd: (0, import_react97.useCallback)(() => setFocusableItemsCount((prevCount) => prevCount + 1), []),
    onFocusableItemRemove: (0, import_react97.useCallback)(() => setFocusableItemsCount((prevCount) => prevCount - 1), [])
  }, /* @__PURE__ */ (0, import_react97.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
    "data-orientation": orientation
  }, groupProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...props.style
    },
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, () => {
      isClickFocusRef.current = true;
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event) => {
      const isKeyboardFocus = !isClickFocusRef.current;
      if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
        const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
        event.currentTarget.dispatchEvent(entryFocusEvent);
        if (!entryFocusEvent.defaultPrevented) {
          const items = getItems().filter((item) => item.focusable);
          const activeItem = items.find((item) => item.active);
          const currentItem = items.find((item) => item.id === currentTabStopId);
          const candidateItems = [
            activeItem,
            currentItem,
            ...items
          ].filter(Boolean);
          const candidateNodes = candidateItems.map((item) => item.ref.current);
          $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
        }
      }
      isClickFocusRef.current = false;
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, () => setIsTabbingBackOut(false))
  })));
});
var $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem";
var $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ (0, import_react97.forwardRef)((props, forwardedRef) => {
  const { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId, ...itemProps } = props;
  const autoId = $1746a345f3d73bb7$export$f680877a34711e37();
  const id = tabStopId || autoId;
  const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
  const isCurrentTabStop = context.currentTabStopId === id;
  const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
  const { onFocusableItemAdd, onFocusableItemRemove } = context;
  (0, import_react97.useEffect)(() => {
    if (focusable) {
      onFocusableItemAdd();
      return () => onFocusableItemRemove();
    }
  }, [
    focusable,
    onFocusableItemAdd,
    onFocusableItemRemove
  ]);
  return /* @__PURE__ */ (0, import_react97.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
    scope: __scopeRovingFocusGroup,
    id,
    focusable,
    active
  }, /* @__PURE__ */ (0, import_react97.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    tabIndex: isCurrentTabStop ? 0 : -1,
    "data-orientation": context.orientation
  }, itemProps, {
    ref: forwardedRef,
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
      if (!focusable)
        event.preventDefault();
      else
        context.onItemFocus(id);
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => context.onItemFocus(id)),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key === "Tab" && event.shiftKey) {
        context.onItemShiftTab();
        return;
      }
      if (event.target !== event.currentTarget)
        return;
      const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
      if (focusIntent !== void 0) {
        event.preventDefault();
        const items = getItems().filter((item) => item.focusable);
        let candidateNodes = items.map((item) => item.ref.current);
        if (focusIntent === "last")
          candidateNodes.reverse();
        else if (focusIntent === "prev" || focusIntent === "next") {
          if (focusIntent === "prev")
            candidateNodes.reverse();
          const currentIndex = candidateNodes.indexOf(event.currentTarget);
          candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
        }
        setTimeout(() => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes));
      }
    })
  })));
});
var $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
  if (dir !== "rtl")
    return key;
  return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
  const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
  if (orientation === "vertical" && [
    "ArrowLeft",
    "ArrowRight"
  ].includes(key))
    return void 0;
  if (orientation === "horizontal" && [
    "ArrowUp",
    "ArrowDown"
  ].includes(key))
    return void 0;
  return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
}
function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function $d7bdfb9eb0fdf311$var$wrapArray(array2, startIndex) {
  return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
}
var $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
var $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;

// node_modules/@radix-ui/react-menu/dist/index.mjs
var $6cc32821e9371a1c$var$SELECTION_KEYS = [
  "Enter",
  " "
];
var $6cc32821e9371a1c$var$FIRST_KEYS = [
  "ArrowDown",
  "PageUp",
  "Home"
];
var $6cc32821e9371a1c$var$LAST_KEYS = [
  "ArrowUp",
  "PageDown",
  "End"
];
var $6cc32821e9371a1c$var$FIRST_LAST_KEYS = [
  ...$6cc32821e9371a1c$var$FIRST_KEYS,
  ...$6cc32821e9371a1c$var$LAST_KEYS
];
var $6cc32821e9371a1c$var$SUB_OPEN_KEYS = {
  ltr: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowRight"
  ],
  rtl: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowLeft"
  ]
};
var $6cc32821e9371a1c$var$SUB_CLOSE_KEYS = {
  ltr: [
    "ArrowLeft"
  ],
  rtl: [
    "ArrowRight"
  ]
};
var $6cc32821e9371a1c$var$MENU_NAME = "Menu";
var [$6cc32821e9371a1c$var$Collection, $6cc32821e9371a1c$var$useCollection, $6cc32821e9371a1c$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($6cc32821e9371a1c$var$MENU_NAME);
var [$6cc32821e9371a1c$var$createMenuContext, $6cc32821e9371a1c$export$4027731b685e72eb] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($6cc32821e9371a1c$var$MENU_NAME, [
  $6cc32821e9371a1c$var$createCollectionScope,
  $cf1ac5d9fe0e8206$export$722aac194ae923,
  $d7bdfb9eb0fdf311$export$c7109489551a4f4
]);
var $6cc32821e9371a1c$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
var $6cc32821e9371a1c$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
var [$6cc32821e9371a1c$var$MenuProvider, $6cc32821e9371a1c$var$useMenuContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
var [$6cc32821e9371a1c$var$MenuRootProvider, $6cc32821e9371a1c$var$useMenuRootContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
var $6cc32821e9371a1c$export$d9b273488cd8ce6f = (props) => {
  const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const [content, setContent] = (0, import_react98.useState)(null);
  const isUsingKeyboardRef = (0, import_react98.useRef)(false);
  const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  (0, import_react98.useEffect)(() => {
    const handleKeyDown = () => {
      isUsingKeyboardRef.current = true;
      document.addEventListener("pointerdown", handlePointer, {
        capture: true,
        once: true
      });
      document.addEventListener("pointermove", handlePointer, {
        capture: true,
        once: true
      });
    };
    const handlePointer = () => isUsingKeyboardRef.current = false;
    document.addEventListener("keydown", handleKeyDown, {
      capture: true
    });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, {
        capture: true
      });
      document.removeEventListener("pointerdown", handlePointer, {
        capture: true
      });
      document.removeEventListener("pointermove", handlePointer, {
        capture: true
      });
    };
  }, []);
  return /* @__PURE__ */ (0, import_react98.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuProvider, {
    scope: __scopeMenu,
    open,
    onOpenChange: handleOpenChange,
    content,
    onContentChange: setContent
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuRootProvider, {
    scope: __scopeMenu,
    onClose: (0, import_react98.useCallback)(() => handleOpenChange(false), [
      handleOpenChange
    ]),
    isUsingKeyboardRef,
    dir: direction,
    modal
  }, children)));
};
var $6cc32821e9371a1c$export$9fa5ebd18bee4d43 = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...anchorProps } = props;
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  return /* @__PURE__ */ (0, import_react98.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({}, popperScope, anchorProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$PORTAL_NAME = "MenuPortal";
var [$6cc32821e9371a1c$var$PortalProvider, $6cc32821e9371a1c$var$usePortalContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, {
  forceMount: void 0
});
var $6cc32821e9371a1c$export$793392f970497feb = (props) => {
  const { __scopeMenu, forceMount, children, container } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, __scopeMenu);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$PortalProvider, {
    scope: __scopeMenu,
    forceMount
  }, /* @__PURE__ */ (0, import_react98.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react98.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: true,
    container
  }, children)));
};
var $6cc32821e9371a1c$var$CONTENT_NAME = "MenuContent";
var [$6cc32821e9371a1c$var$MenuContentProvider, $6cc32821e9371a1c$var$useMenuContentContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$CONTENT_NAME);
var $6cc32821e9371a1c$export$479f0f2f71193efe = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...contentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react98.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
    scope: props.__scopeMenu
  }, rootContext.modal ? /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuRootContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuRootContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })))));
});
var $6cc32821e9371a1c$var$MenuRootContentModal = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const ref = (0, import_react98.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  (0, import_react98.useEffect)(() => {
    const content = ref.current;
    if (content)
      return hideOthers(content);
  }, []);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: context.open,
    disableOutsideScroll: true,
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event) => event.preventDefault(), {
      checkForDefaultPrevented: false
    }),
    onDismiss: () => context.onOpenChange(false)
  }));
});
var $6cc32821e9371a1c$var$MenuRootContentNonModal = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    disableOutsideScroll: false,
    onDismiss: () => context.onOpenChange(false)
  }));
});
var $6cc32821e9371a1c$var$MenuContentImpl = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, loop = false, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEntryFocus, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll, ...contentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
  const getItems = $6cc32821e9371a1c$var$useCollection(__scopeMenu);
  const [currentItemId, setCurrentItemId] = (0, import_react98.useState)(null);
  const contentRef = (0, import_react98.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef, context.onContentChange);
  const timerRef = (0, import_react98.useRef)(0);
  const searchRef = (0, import_react98.useRef)("");
  const pointerGraceTimerRef = (0, import_react98.useRef)(0);
  const pointerGraceIntentRef = (0, import_react98.useRef)(null);
  const pointerDirRef = (0, import_react98.useRef)("right");
  const lastPointerXRef = (0, import_react98.useRef)(0);
  const ScrollLockWrapper = disableOutsideScroll ? Combination_default : import_react98.Fragment;
  const scrollLockWrapperProps = disableOutsideScroll ? {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
    allowPinchZoom: true
  } : void 0;
  const handleTypeaheadSearch = (key) => {
    var _items$find, _items$find2;
    const search = searchRef.current + key;
    const items = getItems().filter((item) => !item.disabled);
    const currentItem = document.activeElement;
    const currentMatch = (_items$find = items.find((item) => item.ref.current === currentItem)) === null || _items$find === void 0 ? void 0 : _items$find.textValue;
    const values = items.map((item) => item.textValue);
    const nextMatch = $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch);
    const newItem = (_items$find2 = items.find((item) => item.textValue === nextMatch)) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;
    (function updateSearch(value) {
      searchRef.current = value;
      window.clearTimeout(timerRef.current);
      if (value !== "")
        timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
    })(search);
    if (newItem)
      setTimeout(() => newItem.focus());
  };
  (0, import_react98.useEffect)(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  const isPointerMovingToSubmenu = (0, import_react98.useCallback)((event) => {
    var _pointerGraceIntentRe, _pointerGraceIntentRe2;
    const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);
    return isMovingTowards && $6cc32821e9371a1c$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
  }, []);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuContentProvider, {
    scope: __scopeMenu,
    searchRef,
    onItemEnter: (0, import_react98.useCallback)((event) => {
      if (isPointerMovingToSubmenu(event))
        event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    onItemLeave: (0, import_react98.useCallback)((event) => {
      var _contentRef$current;
      if (isPointerMovingToSubmenu(event))
        return;
      (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
      setCurrentItemId(null);
    }, [
      isPointerMovingToSubmenu
    ]),
    onTriggerLeave: (0, import_react98.useCallback)((event) => {
      if (isPointerMovingToSubmenu(event))
        event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    pointerGraceTimerRef,
    onPointerGraceIntentChange: (0, import_react98.useCallback)((intent) => {
      pointerGraceIntentRef.current = intent;
    }, [])
  }, /* @__PURE__ */ (0, import_react98.createElement)(ScrollLockWrapper, scrollLockWrapperProps, /* @__PURE__ */ (0, import_react98.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: true,
    trapped: trapFocus,
    onMountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onOpenAutoFocus, (event) => {
      var _contentRef$current2;
      event.preventDefault();
      (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
    }),
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react98.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    asChild: true,
    disableOutsidePointerEvents,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss
  }, /* @__PURE__ */ (0, import_react98.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    dir: rootContext.dir,
    orientation: "vertical",
    loop,
    currentTabStopId: currentItemId,
    onCurrentTabStopIdChange: setCurrentItemId,
    onEntryFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEntryFocus, (event) => {
      if (!rootContext.isUsingKeyboardRef.current)
        event.preventDefault();
    })
  }), /* @__PURE__ */ (0, import_react98.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
    role: "menu",
    "aria-orientation": "vertical",
    "data-state": $6cc32821e9371a1c$var$getOpenState(context.open),
    "data-radix-menu-content": "",
    dir: rootContext.dir
  }, popperScope, contentProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...contentProps.style
    },
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event) => {
      const target = event.target;
      const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
      const isCharacterKey = event.key.length === 1;
      if (isKeyDownInside) {
        if (event.key === "Tab")
          event.preventDefault();
        if (!isModifierKey && isCharacterKey)
          handleTypeaheadSearch(event.key);
      }
      const content = contentRef.current;
      if (event.target !== content)
        return;
      if (!$6cc32821e9371a1c$var$FIRST_LAST_KEYS.includes(event.key))
        return;
      event.preventDefault();
      const items = getItems().filter((item) => !item.disabled);
      const candidateNodes = items.map((item) => item.ref.current);
      if ($6cc32821e9371a1c$var$LAST_KEYS.includes(event.key))
        candidateNodes.reverse();
      $6cc32821e9371a1c$var$focusFirst(candidateNodes);
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, (event) => {
      if (!event.currentTarget.contains(event.target)) {
        window.clearTimeout(timerRef.current);
        searchRef.current = "";
      }
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      const target = event.target;
      const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
      if (event.currentTarget.contains(target) && pointerXHasChanged) {
        const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
        pointerDirRef.current = newDir;
        lastPointerXRef.current = event.clientX;
      }
    }))
  })))))));
});
var $6cc32821e9371a1c$export$22a631d1f72787bb = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, ...groupProps } = props;
  return /* @__PURE__ */ (0, import_react98.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "group"
  }, groupProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$ITEM_NAME = "MenuItem";
var $6cc32821e9371a1c$var$ITEM_SELECT = "menu.itemSelect";
var $6cc32821e9371a1c$export$2ce376c2cc3355c8 = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { disabled = false, onSelect, ...itemProps } = props;
  const ref = (0, import_react98.useRef)(null);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const isPointerDownRef = (0, import_react98.useRef)(false);
  const handleSelect = () => {
    const menuItem = ref.current;
    if (!disabled && menuItem) {
      const itemSelectEvent = new CustomEvent($6cc32821e9371a1c$var$ITEM_SELECT, {
        bubbles: true,
        cancelable: true
      });
      menuItem.addEventListener($6cc32821e9371a1c$var$ITEM_SELECT, (event) => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event), {
        once: true
      });
      $8927f6f2acc4f386$export$6d1a0317bde7de7f(menuItem, itemSelectEvent);
      if (itemSelectEvent.defaultPrevented)
        isPointerDownRef.current = false;
      else
        rootContext.onClose();
    }
  };
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({}, itemProps, {
    ref: composedRefs,
    disabled,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, handleSelect),
    onPointerDown: (event) => {
      var _props$onPointerDown;
      (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);
      isPointerDownRef.current = true;
    },
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
      var _event$currentTarget;
      if (!isPointerDownRef.current)
        (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      const isTypingAhead = contentContext.searchRef.current !== "";
      if (disabled || isTypingAhead && event.key === " ")
        return;
      if ($6cc32821e9371a1c$var$SELECTION_KEYS.includes(event.key)) {
        event.currentTarget.click();
        event.preventDefault();
      }
    })
  }));
});
var $6cc32821e9371a1c$var$MenuItemImpl = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, __scopeMenu);
  const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
  const ref = (0, import_react98.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const [isFocused, setIsFocused] = (0, import_react98.useState)(false);
  const [textContent, setTextContent] = (0, import_react98.useState)("");
  (0, import_react98.useEffect)(() => {
    const menuItem = ref.current;
    if (menuItem) {
      var _menuItem$textContent;
      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : "").trim());
    }
  }, [
    itemProps.children
  ]);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$Collection.ItemSlot, {
    scope: __scopeMenu,
    disabled,
    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent
  }, /* @__PURE__ */ (0, import_react98.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
    asChild: true
  }, rovingFocusGroupScope, {
    focusable: !disabled
  }), /* @__PURE__ */ (0, import_react98.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "menuitem",
    "data-highlighted": isFocused ? "" : void 0,
    "aria-disabled": disabled || void 0,
    "data-disabled": disabled ? "" : void 0
  }, itemProps, {
    ref: composedRefs,
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      if (disabled)
        contentContext.onItemLeave(event);
      else {
        contentContext.onItemEnter(event);
        if (!event.defaultPrevented) {
          const item = event.currentTarget;
          item.focus();
        }
      }
    })),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event) => contentContext.onItemLeave(event))),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => setIsFocused(true)),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, () => setIsFocused(false))
  }))));
});
var $6cc32821e9371a1c$export$f6f243521332502d = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
    role: "menuitemcheckbox",
    "aria-checked": $6cc32821e9371a1c$var$isIndeterminate(checked) ? "mixed" : checked
  }, checkboxItemProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
    onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(checkboxItemProps.onSelect, () => onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange($6cc32821e9371a1c$var$isIndeterminate(checked) ? true : !checked), {
      checkForDefaultPrevented: false
    })
  })));
});
var $6cc32821e9371a1c$var$RADIO_GROUP_NAME = "MenuRadioGroup";
var [$6cc32821e9371a1c$var$RadioGroupProvider, $6cc32821e9371a1c$var$useRadioGroupContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$RADIO_GROUP_NAME, {
  value: void 0,
  onValueChange: () => {
  }
});
var $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME = "MenuItemIndicator";
var [$6cc32821e9371a1c$var$ItemIndicatorProvider, $6cc32821e9371a1c$var$useItemIndicatorContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, {
  checked: false
});
var $6cc32821e9371a1c$var$SUB_NAME = "MenuSub";
var [$6cc32821e9371a1c$var$MenuSubProvider, $6cc32821e9371a1c$var$useMenuSubContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$SUB_NAME);
var $6cc32821e9371a1c$export$71bdb9d1e2909932 = (props) => {
  const { __scopeMenu, children, open = false, onOpenChange } = props;
  const parentMenuContext = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_NAME, __scopeMenu);
  const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  const [trigger2, setTrigger] = (0, import_react98.useState)(null);
  const [content, setContent] = (0, import_react98.useState)(null);
  const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  (0, import_react98.useEffect)(() => {
    if (parentMenuContext.open === false)
      handleOpenChange(false);
    return () => handleOpenChange(false);
  }, [
    parentMenuContext.open,
    handleOpenChange
  ]);
  return /* @__PURE__ */ (0, import_react98.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuProvider, {
    scope: __scopeMenu,
    open,
    onOpenChange: handleOpenChange,
    content,
    onContentChange: setContent
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuSubProvider, {
    scope: __scopeMenu,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
    trigger: trigger2,
    onTriggerChange: setTrigger
  }, children)));
};
var $6cc32821e9371a1c$var$SUB_TRIGGER_NAME = "MenuSubTrigger";
var $6cc32821e9371a1c$export$5fbbb3ba7297405f = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
  const openTimerRef = (0, import_react98.useRef)(null);
  const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
  const scope = {
    __scopeMenu: props.__scopeMenu
  };
  const clearOpenTimer = (0, import_react98.useCallback)(() => {
    if (openTimerRef.current)
      window.clearTimeout(openTimerRef.current);
    openTimerRef.current = null;
  }, []);
  (0, import_react98.useEffect)(() => clearOpenTimer, [
    clearOpenTimer
  ]);
  (0, import_react98.useEffect)(() => {
    const pointerGraceTimer = pointerGraceTimerRef.current;
    return () => {
      window.clearTimeout(pointerGraceTimer);
      onPointerGraceIntentChange(null);
    };
  }, [
    pointerGraceTimerRef,
    onPointerGraceIntentChange
  ]);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$export$9fa5ebd18bee4d43, _extends({
    asChild: true
  }, scope), /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({
    id: subContext.triggerId,
    "aria-haspopup": "menu",
    "aria-expanded": context.open,
    "aria-controls": subContext.contentId,
    "data-state": $6cc32821e9371a1c$var$getOpenState(context.open)
  }, props, {
    ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, subContext.onTriggerChange),
    onClick: (event) => {
      var _props$onClick;
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
      if (props.disabled || event.defaultPrevented)
        return;
      event.currentTarget.focus();
      if (!context.open)
        context.onOpenChange(true);
    },
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      contentContext.onItemEnter(event);
      if (event.defaultPrevented)
        return;
      if (!props.disabled && !context.open && !openTimerRef.current) {
        contentContext.onPointerGraceIntentChange(null);
        openTimerRef.current = window.setTimeout(() => {
          context.onOpenChange(true);
          clearOpenTimer();
        }, 100);
      }
    })),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event) => {
      var _context$content;
      clearOpenTimer();
      const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();
      if (contentRect) {
        var _context$content2;
        const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;
        const rightSide = side === "right";
        const bleed = rightSide ? -5 : 5;
        const contentNearEdge = contentRect[rightSide ? "left" : "right"];
        const contentFarEdge = contentRect[rightSide ? "right" : "left"];
        contentContext.onPointerGraceIntentChange({
          area: [
            {
              x: event.clientX + bleed,
              y: event.clientY
            },
            {
              x: contentNearEdge,
              y: contentRect.top
            },
            {
              x: contentFarEdge,
              y: contentRect.top
            },
            {
              x: contentFarEdge,
              y: contentRect.bottom
            },
            {
              x: contentNearEdge,
              y: contentRect.bottom
            }
          ],
          side
        });
        window.clearTimeout(pointerGraceTimerRef.current);
        pointerGraceTimerRef.current = window.setTimeout(() => contentContext.onPointerGraceIntentChange(null), 300);
      } else {
        contentContext.onTriggerLeave(event);
        if (event.defaultPrevented)
          return;
        contentContext.onPointerGraceIntentChange(null);
      }
    })),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      const isTypingAhead = contentContext.searchRef.current !== "";
      if (props.disabled || isTypingAhead && event.key === " ")
        return;
      if ($6cc32821e9371a1c$var$SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
        var _context$content3;
        context.onOpenChange(true);
        (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus();
        event.preventDefault();
      }
    })
  })));
});
var $6cc32821e9371a1c$var$SUB_CONTENT_NAME = "MenuSubContent";
var $6cc32821e9371a1c$export$e7142ab31822bde6 = /* @__PURE__ */ (0, import_react98.forwardRef)((props, forwardedRef) => {
  const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const { forceMount = portalContext.forceMount, ...subContentProps } = props;
  const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_CONTENT_NAME, props.__scopeMenu);
  const ref = (0, import_react98.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  return /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react98.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react98.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({
    id: subContext.contentId,
    "aria-labelledby": subContext.triggerId
  }, subContentProps, {
    ref: composedRefs,
    align: "start",
    side: rootContext.dir === "rtl" ? "left" : "right",
    disableOutsidePointerEvents: false,
    disableOutsideScroll: false,
    trapFocus: false,
    onOpenAutoFocus: (event) => {
      var _ref$current;
      if (rootContext.isUsingKeyboardRef.current)
        (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
      event.preventDefault();
    },
    onCloseAutoFocus: (event) => event.preventDefault(),
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event) => {
      if (event.target !== subContext.trigger)
        context.onOpenChange(false);
    }),
    onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onEscapeKeyDown, (event) => {
      rootContext.onClose();
      event.preventDefault();
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      const isKeyDownInside = event.currentTarget.contains(event.target);
      const isCloseKey = $6cc32821e9371a1c$var$SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
      if (isKeyDownInside && isCloseKey) {
        var _subContext$trigger;
        context.onOpenChange(false);
        (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus();
        event.preventDefault();
      }
    })
  })))));
});
function $6cc32821e9371a1c$var$getOpenState(open) {
  return open ? "open" : "closed";
}
function $6cc32821e9371a1c$var$isIndeterminate(checked) {
  return checked === "indeterminate";
}
function $6cc32821e9371a1c$var$getCheckedState(checked) {
  return $6cc32821e9371a1c$var$isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
function $6cc32821e9371a1c$var$focusFirst(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function $6cc32821e9371a1c$var$wrapArray(array2, startIndex) {
  return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
}
function $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
  let wrappedValues = $6cc32821e9371a1c$var$wrapArray(values, Math.max(currentMatchIndex, 0));
  const excludeCurrentMatch = normalizedSearch.length === 1;
  if (excludeCurrentMatch)
    wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
  const nextMatch = wrappedValues.find((value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase()));
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function $6cc32821e9371a1c$var$isPointInPolygon(point, polygon) {
  const { x, y } = point;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const xi = polygon[i].x;
    const yi = polygon[i].y;
    const xj = polygon[j].x;
    const yj = polygon[j].y;
    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function $6cc32821e9371a1c$var$isPointerInGraceArea(event, area) {
  if (!area)
    return false;
  const cursorPos = {
    x: event.clientX,
    y: event.clientY
  };
  return $6cc32821e9371a1c$var$isPointInPolygon(cursorPos, area);
}
function $6cc32821e9371a1c$var$whenMouse(handler) {
  return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
}
var $6cc32821e9371a1c$export$be92b6f5f03c0fe9 = $6cc32821e9371a1c$export$d9b273488cd8ce6f;
var $6cc32821e9371a1c$export$b688253958b8dfe7 = $6cc32821e9371a1c$export$9fa5ebd18bee4d43;
var $6cc32821e9371a1c$export$602eac185826482c = $6cc32821e9371a1c$export$793392f970497feb;
var $6cc32821e9371a1c$export$7c6e2c02157bb7d2 = $6cc32821e9371a1c$export$479f0f2f71193efe;
var $6cc32821e9371a1c$export$eb2fcfdbd7ba97d4 = $6cc32821e9371a1c$export$22a631d1f72787bb;
var $6cc32821e9371a1c$export$6d08773d2e66f8f2 = $6cc32821e9371a1c$export$2ce376c2cc3355c8;
var $6cc32821e9371a1c$export$16ce288f89fa631c = $6cc32821e9371a1c$export$f6f243521332502d;
var $6cc32821e9371a1c$export$d7a01e11500dfb6f = $6cc32821e9371a1c$export$71bdb9d1e2909932;
var $6cc32821e9371a1c$export$2ea8a7a591ac5eac = $6cc32821e9371a1c$export$5fbbb3ba7297405f;
var $6cc32821e9371a1c$export$6d4de93b380beddf = $6cc32821e9371a1c$export$e7142ab31822bde6;

// node_modules/@radix-ui/react-context-menu/dist/index.mjs
var $1b0217ee4a91d156$var$CONTEXT_MENU_NAME = "ContextMenu";
var [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$1059331f43ddcc82] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($1b0217ee4a91d156$var$CONTEXT_MENU_NAME, [
  $6cc32821e9371a1c$export$4027731b685e72eb
]);
var $1b0217ee4a91d156$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
var [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
var $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props) => {
  const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
  const [open1, setOpen] = (0, import_react99.useState)(false);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const handleOpenChangeProp = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
  const handleOpenChange = (0, import_react99.useCallback)((open) => {
    setOpen(open);
    handleOpenChangeProp(open);
  }, [
    handleOpenChangeProp
  ]);
  return /* @__PURE__ */ (0, import_react99.createElement)($1b0217ee4a91d156$var$ContextMenuProvider, {
    scope: __scopeContextMenu,
    open: open1,
    onOpenChange: handleOpenChange,
    modal
  }, /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
    dir,
    open: open1,
    onOpenChange: handleOpenChange,
    modal
  }), children));
};
var $1b0217ee4a91d156$var$TRIGGER_NAME = "ContextMenuTrigger";
var $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, disabled = false, ...triggerProps } = props;
  const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$TRIGGER_NAME, __scopeContextMenu);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const pointRef = (0, import_react99.useRef)({
    x: 0,
    y: 0
  });
  const virtualRef = (0, import_react99.useRef)({
    getBoundingClientRect: () => DOMRect.fromRect({
      width: 0,
      height: 0,
      ...pointRef.current
    })
  });
  const longPressTimerRef = (0, import_react99.useRef)(0);
  const clearLongPress = (0, import_react99.useCallback)(() => window.clearTimeout(longPressTimerRef.current), []);
  const handleOpen = (event) => {
    pointRef.current = {
      x: event.clientX,
      y: event.clientY
    };
    context.onOpenChange(true);
  };
  (0, import_react99.useEffect)(() => clearLongPress, [
    clearLongPress
  ]);
  (0, import_react99.useEffect)(() => void (disabled && clearLongPress()), [
    disabled,
    clearLongPress
  ]);
  return /* @__PURE__ */ (0, import_react99.createElement)(import_react99.Fragment, null, /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({}, menuScope, {
    virtualRef
  })), /* @__PURE__ */ (0, import_react99.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-state": context.open ? "open" : "closed",
    "data-disabled": disabled ? "" : void 0
  }, triggerProps, {
    ref: forwardedRef,
    style: {
      WebkitTouchCallout: "none",
      ...props.style
    },
    onContextMenu: disabled ? props.onContextMenu : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onContextMenu, (event) => {
      clearLongPress();
      handleOpen(event);
      event.preventDefault();
    }),
    onPointerDown: disabled ? props.onPointerDown : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event) => {
      clearLongPress();
      longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);
    })),
    onPointerMove: disabled ? props.onPointerMove : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
    onPointerCancel: disabled ? props.onPointerCancel : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
    onPointerUp: disabled ? props.onPointerUp : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
  })));
});
var $1b0217ee4a91d156$export$14afd0be83e45060 = (props) => {
  const { __scopeContextMenu, ...portalProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
};
var $1b0217ee4a91d156$var$CONTENT_NAME = "ContextMenuContent";
var $1b0217ee4a91d156$export$572205900c9369e = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...contentProps } = props;
  const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$CONTENT_NAME, __scopeContextMenu);
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const hasInteractedOutsideRef = (0, import_react99.useRef)(false);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({}, menuScope, contentProps, {
    ref: forwardedRef,
    side: "right",
    sideOffset: 2,
    align: "start",
    onCloseAutoFocus: (event) => {
      var _props$onCloseAutoFoc;
      (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
      if (!event.defaultPrevented && hasInteractedOutsideRef.current)
        event.preventDefault();
      hasInteractedOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _props$onInteractOuts;
      (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
      if (!event.defaultPrevented && !context.modal)
        hasInteractedOutsideRef.current = true;
    },
    style: {
      ...props.style,
      "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
      "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
      "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }));
});
var $1b0217ee4a91d156$export$9860523b0fcdd664 = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...groupProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, _extends({}, menuScope, groupProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$16a26dc176a49100 = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...itemProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$b6adbe51d5d8b7ec = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...checkboxItemProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$5bc21d1c00c4b201 = (props) => {
  const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  const [open, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen
  }), children);
};
var $1b0217ee4a91d156$export$30b2b5c64556d316 = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...triggerItemProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, triggerItemProps, {
    ref: forwardedRef
  }));
});
var $1b0217ee4a91d156$export$2c967063bd2dc512 = /* @__PURE__ */ (0, import_react99.forwardRef)((props, forwardedRef) => {
  const { __scopeContextMenu, ...subContentProps } = props;
  const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
  return /* @__PURE__ */ (0, import_react99.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
    ref: forwardedRef,
    style: {
      ...props.style,
      "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
      "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
      "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }));
});
function $1b0217ee4a91d156$var$whenTouchOrPen(handler) {
  return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
}
var $1b0217ee4a91d156$export$be92b6f5f03c0fe9 = $1b0217ee4a91d156$export$8dc6765e8be191c7;
var $1b0217ee4a91d156$export$41fb9f06171c75f4 = $1b0217ee4a91d156$export$be6fc7b1d5b0beb9;
var $1b0217ee4a91d156$export$602eac185826482c = $1b0217ee4a91d156$export$14afd0be83e45060;
var $1b0217ee4a91d156$export$7c6e2c02157bb7d2 = $1b0217ee4a91d156$export$572205900c9369e;
var $1b0217ee4a91d156$export$16ce288f89fa631c = $1b0217ee4a91d156$export$b6adbe51d5d8b7ec;

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs
var import_react101 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/kbd-utils.mjs
var isDarwin = typeof window === "undefined" ? false : window.navigator.userAgent.toLowerCase().indexOf("mac") > -1;
var cmdKey = isDarwin ? "\u2318" : "Ctrl";
var altKey = isDarwin ? "\u2325" : "Alt";
function kbd(str) {
  return str.split(",")[0].split("").map((sub) => {
    const subStr = sub.replace(/\$/g, cmdKey).replace(/\?/g, altKey).replace(/!/g, "\u21E7");
    return subStr[0].toUpperCase() + subStr.slice(1);
  });
}
function kbdStr(str) {
  return "\u2014 " + kbd(str).join("\u2009");
}

// node_modules/tldraw/dist-esm/lib/ui/components/Spinner.mjs
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
function Spinner(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
    /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "currentColor" }),
    /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("animateTransform", {
      attributeName: "transform",
      type: "rotate",
      from: "0 8 8",
      to: "360 8 8",
      dur: "1s",
      repeatCount: "indefinite"
    }) })
  ] }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDropdownMenu.mjs
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);

// node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var import_react100 = __toESM(require_react(), 1);
var $d08ef79370b62062$var$DROPDOWN_MENU_NAME = "DropdownMenu";
var [$d08ef79370b62062$var$createDropdownMenuContext, $d08ef79370b62062$export$c0623cd925aeb687] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d08ef79370b62062$var$DROPDOWN_MENU_NAME, [
  $6cc32821e9371a1c$export$4027731b685e72eb
]);
var $d08ef79370b62062$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
var [$d08ef79370b62062$var$DropdownMenuProvider, $d08ef79370b62062$var$useDropdownMenuContext] = $d08ef79370b62062$var$createDropdownMenuContext($d08ef79370b62062$var$DROPDOWN_MENU_NAME);
var $d08ef79370b62062$export$e44a253a59704894 = (props) => {
  const { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const triggerRef = (0, import_react100.useRef)(null);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react100.createElement)($d08ef79370b62062$var$DropdownMenuProvider, {
    scope: __scopeDropdownMenu,
    triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react100.useCallback)(() => setOpen((prevOpen) => !prevOpen), [
      setOpen
    ]),
    modal
  }, /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen,
    dir,
    modal
  }), children));
};
var $d08ef79370b62062$var$TRIGGER_NAME = "DropdownMenuTrigger";
var $d08ef79370b62062$export$d2469213b3befba9 = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
  const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$TRIGGER_NAME, __scopeDropdownMenu);
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({
    asChild: true
  }, menuScope), /* @__PURE__ */ (0, import_react100.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    id: context.triggerId,
    "aria-haspopup": "menu",
    "aria-expanded": context.open,
    "aria-controls": context.open ? context.contentId : void 0,
    "data-state": context.open ? "open" : "closed",
    "data-disabled": disabled ? "" : void 0,
    disabled
  }, triggerProps, {
    ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, context.triggerRef),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      if (!disabled && event.button === 0 && event.ctrlKey === false) {
        context.onOpenToggle();
        if (!context.open)
          event.preventDefault();
      }
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (disabled)
        return;
      if ([
        "Enter",
        " "
      ].includes(event.key))
        context.onOpenToggle();
      if (event.key === "ArrowDown")
        context.onOpenChange(true);
      if ([
        "Enter",
        " ",
        "ArrowDown"
      ].includes(event.key))
        event.preventDefault();
    })
  })));
});
var $d08ef79370b62062$export$cd369b4d4d54efc9 = (props) => {
  const { __scopeDropdownMenu, ...portalProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
};
var $d08ef79370b62062$var$CONTENT_NAME = "DropdownMenuContent";
var $d08ef79370b62062$export$6e76d93a37c01248 = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...contentProps } = props;
  const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$CONTENT_NAME, __scopeDropdownMenu);
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const hasInteractedOutsideRef = (0, import_react100.useRef)(false);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({
    id: context.contentId,
    "aria-labelledby": context.triggerId
  }, menuScope, contentProps, {
    ref: forwardedRef,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      if (!hasInteractedOutsideRef.current)
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
      hasInteractedOutsideRef.current = false;
      event.preventDefault();
    }),
    onInteractOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onInteractOutside, (event) => {
      const originalEvent = event.detail.originalEvent;
      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      if (!context.modal || isRightClick)
        hasInteractedOutsideRef.current = true;
    }),
    style: {
      ...props.style,
      "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
      "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
      "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }));
});
var $d08ef79370b62062$export$246bebaba3a2f70e = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...groupProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, _extends({}, menuScope, groupProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$ed97964d1871885d = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$53a69729da201fa9 = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...checkboxItemProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$2f307d81a64f5442 = (props) => {
  const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen
  }), children);
};
var $d08ef79370b62062$export$21dcb7ec56f874cf = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subTriggerProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, subTriggerProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$f34ec8bc2482cc5f = /* @__PURE__ */ (0, import_react100.forwardRef)((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subContentProps } = props;
  const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react100.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
    ref: forwardedRef,
    style: {
      ...props.style,
      "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
      "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
      "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }));
});
var $d08ef79370b62062$export$be92b6f5f03c0fe9 = $d08ef79370b62062$export$e44a253a59704894;
var $d08ef79370b62062$export$41fb9f06171c75f4 = $d08ef79370b62062$export$d2469213b3befba9;
var $d08ef79370b62062$export$602eac185826482c = $d08ef79370b62062$export$cd369b4d4d54efc9;
var $d08ef79370b62062$export$7c6e2c02157bb7d2 = $d08ef79370b62062$export$6e76d93a37c01248;
var $d08ef79370b62062$export$eb2fcfdbd7ba97d4 = $d08ef79370b62062$export$246bebaba3a2f70e;
var $d08ef79370b62062$export$6d08773d2e66f8f2 = $d08ef79370b62062$export$ed97964d1871885d;
var $d08ef79370b62062$export$16ce288f89fa631c = $d08ef79370b62062$export$53a69729da201fa9;
var $d08ef79370b62062$export$d7a01e11500dfb6f = $d08ef79370b62062$export$2f307d81a64f5442;
var $d08ef79370b62062$export$2ea8a7a591ac5eac = $d08ef79370b62062$export$21dcb7ec56f874cf;
var $d08ef79370b62062$export$6d4de93b380beddf = $d08ef79370b62062$export$f34ec8bc2482cc5f;

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDropdownMenu.mjs
function TldrawUiDropdownMenuRoot({
  id,
  children,
  modal = false,
  debugOpen = false
}) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$be92b6f5f03c0fe9, {
    open: debugOpen || open,
    dir: "ltr",
    modal,
    onOpenChange,
    children
  });
}
function TldrawUiDropdownMenuTrigger({ children, ...rest }) {
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, {
    dir: "ltr",
    asChild: true,
    onTouchEnd: (e) => preventDefault(e),
    ...rest,
    children
  });
}
function TldrawUiDropdownMenuContent({
  side = "bottom",
  align = "start",
  sideOffset = 8,
  alignOffset = 8,
  children
}) {
  const container = useContainer();
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$7c6e2c02157bb7d2, {
    className: "tlui-menu",
    side,
    sideOffset,
    align,
    alignOffset,
    collisionPadding: 4,
    children
  }) });
}
function TldrawUiDropdownMenuSub({ id, children }) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$d7a01e11500dfb6f, { open, onOpenChange, children });
}
function TldrawUiDropdownMenuSubTrigger({
  id,
  label,
  title,
  disabled
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$2ea8a7a591ac5eac, { dir: "ltr", asChild: true, disabled, children: /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(TldrawUiButton, {
    "data-testid": id,
    type: "menu",
    className: "tlui-menu__submenu__trigger",
    disabled,
    title,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(TldrawUiButtonLabel, { children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
    ]
  }) });
}
function TldrawUiDropdownMenuSubContent({
  id,
  alignOffset = -1,
  sideOffset = -4,
  size: size4 = "small",
  children
}) {
  const container = useContainer();
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$6d4de93b380beddf, {
    "data-testid": id,
    className: "tlui-menu tlui-menu__submenu__content",
    alignOffset,
    sideOffset,
    collisionPadding: 4,
    "data-size": size4,
    children
  }) });
}
function TldrawUiDropdownMenuGroup({ children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$eb2fcfdbd7ba97d4, { dir: "ltr", className: "tlui-menu__group", children });
}
function TldrawUiDropdownMenuItem({ noClose, children }) {
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", asChild: true, onClick: noClose ? preventDefault : void 0, children });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiKbd.mjs
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
function TldrawUiKbd({ children, visibleOnMobileLayout = false }) {
  const breakpoint = useBreakpoint();
  if (!visibleOnMobileLayout && breakpoint < PORTRAIT_BREAKPOINT.MOBILE)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("kbd", { className: "tlui-kbd", children: kbd(children).map((k, i) => /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("span", { children: k }, i)) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs
function TldrawUiMenuItem({
  disabled = false,
  spinner = false,
  readonlyOk = false,
  id,
  kbd: kbd2,
  label,
  icon,
  onSelect,
  noClose,
  isSelected
}) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const msg2 = useTranslation();
  const [disableClicks, setDisableClicks] = (0, import_react101.useState)(false);
  const isReadonlyMode = useReadonly();
  if (isReadonlyMode && !readonlyOk)
    return null;
  const labelToUse = unwrapLabel(label, menuType);
  const kbdTouse = kbd2 ? kbdStr(kbd2) : void 0;
  const labelStr = labelToUse ? msg2(labelToUse) : void 0;
  const titleStr = labelStr && kbdTouse ? `${labelStr} ${kbdTouse}` : labelStr;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(TldrawUiButton, {
        type: "menu",
        "data-testid": `${sourceId}.${id}`,
        disabled,
        title: titleStr,
        onClick: (e) => {
          if (noClose) {
            preventDefault(e);
          }
          if (disableClicks) {
            setDisableClicks(false);
          } else {
            onSelect(sourceId);
          }
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonLabel, { children: labelStr }),
          kbd2 && /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiKbd, { children: kbd2 })
        ]
      }) });
    }
    case "context-menu": {
      if (disabled)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)($1b0217ee4a91d156$export$16a26dc176a49100, {
        dir: "ltr",
        title: titleStr,
        draggable: false,
        className: "tlui-button tlui-button__menu",
        "data-testid": `${sourceId}.${id}`,
        onSelect: (e) => {
          if (noClose)
            preventDefault(e);
          if (disableClicks) {
            setDisableClicks(false);
          } else {
            onSelect(sourceId);
          }
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
          kbd2 && /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiKbd, { children: kbd2 }),
          spinner && /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(Spinner, {})
        ]
      });
    }
    case "panel": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(TldrawUiButton, {
        "data-testid": `${sourceId}.${id}`,
        type: "menu",
        title: titleStr,
        disabled,
        onClick: () => onSelect(sourceId),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonLabel, { children: labelStr }),
          icon && /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonIcon, { icon })
        ]
      });
    }
    case "small-icons":
    case "icons": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButton, {
        "data-testid": `${sourceId}.${id}`,
        type: "icon",
        title: titleStr,
        disabled,
        onClick: () => onSelect(sourceId),
        children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonIcon, { icon, small: menuType === "small-icons" })
      });
    }
    case "keyboard-shortcuts": {
      if (!kbd2) {
        console.warn(`Menu item '${label}' isn't shown in the keyboard shortcuts dialog because it doesn't have a keyboard shortcut.`);
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)("div", { className: "tlui-shortcuts-dialog__key-pair", "data-testid": `${sourceId}.${id}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__key", children: labelStr }),
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__value", children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiKbd, { visibleOnMobileLayout: true, children: kbd2 }) })
      ] });
    }
    case "helper-buttons": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(TldrawUiButton, { type: "low", onClick: () => onSelect(sourceId), children: [
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonIcon, { icon }),
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonLabel, { children: labelStr })
      ] });
    }
    case "toolbar": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButton, {
        type: "tool",
        "data-testid": `tools.${id}`,
        "aria-label": labelToUse,
        "data-value": id,
        onClick: () => onSelect("toolbar"),
        title: titleStr,
        onTouchStart: (e) => {
          preventDefault(e);
          onSelect("toolbar");
        },
        role: "radio",
        "aria-checked": isSelected ? "true" : "false",
        children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonIcon, { icon })
      });
    }
    case "toolbar-overflow": {
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiDropdownMenuItem, { "aria-label": label, children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButton, {
        type: "icon",
        className: "tlui-button-grid__button",
        onClick: () => {
          onSelect("toolbar");
        },
        "data-testid": `tools.more.${id}`,
        title: titleStr,
        role: "radio",
        "aria-checked": isSelected ? "true" : "false",
        "data-value": id,
        children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(TldrawUiButtonIcon, { icon })
      }) });
    }
    default: {
      throw exhaustiveSwitchError(menuType);
    }
  }
}

// node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenuContent.mjs
function DefaultActionsMenuContent() {
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(AlignMenuItems, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(DistributeMenuItems, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(StackMenuItems, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ReorderMenuItems, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ZoomOrRotateMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(RotateCWMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(EditLinkMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(GroupOrUngroupMenuItem, {})
  ] });
}
function AlignMenuItems() {
  const actions = useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-left"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-center-horizontal"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-right"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["stretch-horizontal"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-top"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-center-vertical"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["align-bottom"], disabled: !twoSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["stretch-vertical"], disabled: !twoSelected })
  ] });
}
function DistributeMenuItems() {
  const actions = useActions();
  const threeSelected = useUnlockedSelectedShapesCount(3);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["distribute-horizontal"], disabled: !threeSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["distribute-vertical"], disabled: !threeSelected })
  ] });
}
function StackMenuItems() {
  const actions = useActions();
  const threeStackableItems = useThreeStackableItems();
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["stack-horizontal"], disabled: !threeStackableItems }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["stack-vertical"], disabled: !threeStackableItems })
  ] });
}
function ReorderMenuItems() {
  const actions = useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["send-to-back"], disabled: !oneSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["send-backward"], disabled: !oneSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["bring-forward"], disabled: !oneSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["bring-to-front"], disabled: !oneSelected })
  ] });
}
function ZoomOrRotateMenuItem() {
  const breakpoint = useBreakpoint();
  return breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ZoomTo100MenuItem, {}) : /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(RotateCCWMenuItem, {});
}
function ZoomTo100MenuItem() {
  const actions = useActions();
  const editor = useEditor();
  const isZoomedTo100 = useValue("zoom is 1", () => editor.getZoomLevel() === 1, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["zoom-to-100"], disabled: isZoomedTo100 });
}
function RotateCCWMenuItem() {
  const actions = useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["rotate-ccw"], disabled: !oneSelected });
}
function RotateCWMenuItem() {
  const actions = useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["rotate-cw"], disabled: !oneSelected });
}
function EditLinkMenuItem() {
  const actions = useActions();
  const showEditLink = useHasLinkShapeSelected();
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["edit-link"], disabled: !showEditLink });
}
function GroupOrUngroupMenuItem() {
  const allowGroup = useAllowGroup();
  const allowUngroup = useAllowUngroup();
  return allowGroup ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(GroupMenuItem, {}) : allowUngroup ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(UngroupMenuItem, {}) : /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(GroupMenuItem, {});
}
function GroupMenuItem() {
  const actions = useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["group"], disabled: !twoSelected });
}
function UngroupMenuItem() {
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TldrawUiMenuItem, { ...actions["ungroup"] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenu.mjs
var DefaultActionsMenu = (0, import_react102.memo)(function DefaultActionsMenu2({
  children
}) {
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const isReadonlyMode = useReadonly();
  const editor = useEditor();
  const isInAcceptableReadonlyState = useValue("should display quick actions when in readonly", () => editor.isInAny("hand", "zoom"), [editor]);
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DefaultActionsMenuContent, {});
  if (isReadonlyMode && !isInAcceptableReadonlyState)
    return;
  return /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(TldrawUiPopover, { id: "actions-menu", children: [
    /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(TldrawUiButton, {
      type: "icon",
      "data-testid": "actions-menu.button",
      title: msg2("actions-menu.title"),
      children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical", small: true })
    }) }),
    /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(TldrawUiPopoverContent, {
      side: breakpoint >= PORTRAIT_BREAKPOINT.TABLET ? "bottom" : "top",
      sideOffset: 6,
      children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: "tlui-actions-menu tlui-buttons__grid", "data-testid": "actions-menu.content", children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(TldrawUiMenuContextProvider, { type: "icons", sourceId: "actions-menu", children: content }) })
    })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenu.mjs
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var import_react103 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenuContent.mjs
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/menu-items.mjs
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuCheckboxItem.mjs
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
function TldrawUiMenuCheckboxItem({
  id,
  kbd: kbd2,
  label,
  readonlyOk,
  onSelect,
  disabled = false,
  checked = false
}) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const isReadonlyMode = useReadonly();
  const msg2 = useTranslation();
  if (isReadonlyMode && !readonlyOk)
    return null;
  const labelToUse = unwrapLabel(label, menuType);
  const labelStr = labelToUse ? msg2(labelToUse) : void 0;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)($d08ef79370b62062$export$16ce288f89fa631c, {
        dir: "ltr",
        className: "tlui-button tlui-button__menu tlui-button__checkbox",
        title: labelStr,
        onSelect: (e) => {
          onSelect == null ? void 0 : onSelect(sourceId);
          preventDefault(e);
        },
        disabled,
        checked,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TldrawUiIcon, { small: true, icon: checked ? "check" : "checkbox-empty" }),
          labelStr && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
          kbd2 && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TldrawUiKbd, { children: kbd2 })
        ]
      });
    }
    case "context-menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)($1b0217ee4a91d156$export$16ce288f89fa631c, {
        className: "tlui-button tlui-button__menu tlui-button__checkbox",
        dir: "ltr",
        title: labelStr,
        onSelect: (e) => {
          onSelect(sourceId);
          preventDefault(e);
        },
        disabled,
        checked,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TldrawUiIcon, { small: true, icon: checked ? "check" : "checkbox-empty" }),
          labelStr && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
          kbd2 && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(TldrawUiKbd, { children: kbd2 })
        ]
      }, id);
    }
    default: {
      return null;
    }
  }
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuGroup.mjs
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
function TldrawUiMenuGroup({ id, label, children }) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const msg2 = useTranslation();
  const labelToUse = unwrapLabel(label, menuType);
  const labelStr = labelToUse ? msg2(labelToUse) : void 0;
  switch (menuType) {
    case "panel": {
      return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("div", { className: "tlui-menu__group", "data-testid": `${sourceId}-group.${id}`, children });
    }
    case "menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(TldrawUiDropdownMenuGroup, { "data-testid": `${sourceId}-group.${id}`, children });
    }
    case "context-menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)($1b0217ee4a91d156$export$9860523b0fcdd664, {
        dir: "ltr",
        className: "tlui-menu__group",
        "data-testid": `${sourceId}-group.${id}`,
        children
      });
    }
    case "keyboard-shortcuts": {
      return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className: "tlui-shortcuts-dialog__group", "data-testid": `${sourceId}-group.${id}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("h2", { className: "tlui-shortcuts-dialog__group__title", children: labelStr }),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("div", { className: "tlui-shortcuts-dialog__group__content", children })
      ] });
    }
    default: {
      return children;
    }
  }
}

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuSubmenu.mjs
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
function TldrawUiMenuSubmenu({
  id,
  disabled = false,
  label,
  size: size4 = "small",
  children
}) {
  var _a2;
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const container = useContainer();
  const msg2 = useTranslation();
  const labelToUse = label ? typeof label === "string" ? label : (_a2 = label[menuType]) != null ? _a2 : label["default"] : void 0;
  const labelStr = labelToUse ? msg2(labelToUse) : void 0;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(TldrawUiDropdownMenuSub, { id: `${sourceId}-sub.${id}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TldrawUiDropdownMenuSubTrigger, {
          id: `${sourceId}-sub.${labelStr ? labelStr.toLowerCase() + "-button" : ""}`,
          disabled,
          label: labelStr,
          title: labelStr
        }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TldrawUiDropdownMenuSubContent, {
          id: `${sourceId}-sub.${labelStr ? labelStr.toLowerCase() + "-content" : ""}`,
          size: size4,
          children
        })
      ] });
    }
    case "context-menu": {
      if (disabled)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(ContextMenuSubWithMenu, { id: `${sourceId}-sub.${id}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)($1b0217ee4a91d156$export$30b2b5c64556d316, { dir: "ltr", disabled, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(TldrawUiButton, {
          "data-testid": `${sourceId}-sub-trigger.${id}`,
          type: "menu",
          className: "tlui-menu__submenu__trigger",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TldrawUiButtonLabel, { children: labelStr }),
            /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
          ]
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime99.jsx)($1b0217ee4a91d156$export$14afd0be83e45060, { container, children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)($1b0217ee4a91d156$export$2c967063bd2dc512, {
          "data-testid": `${sourceId}-sub-content.${id}`,
          className: "tlui-menu tlui-menu__submenu__content",
          alignOffset: -1,
          sideOffset: -4,
          collisionPadding: 4,
          "data-size": size4,
          children
        }) })
      ] });
    }
    default: {
      return children;
    }
  }
}
function ContextMenuSubWithMenu({ id, children }) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)($1b0217ee4a91d156$export$5bc21d1c00c4b201, { open, onOpenChange, children });
}

// node_modules/tldraw/dist-esm/lib/ui/components/menu-items.mjs
function ToggleAutoSizeMenuItem() {
  const actions = useActions();
  const shouldDisplay = useShowAutoSizeToggle();
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["toggle-auto-size"] });
}
function EditLinkMenuItem2() {
  const actions = useActions();
  const shouldDisplay = useHasLinkShapeSelected();
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["edit-link"] });
}
function DuplicateMenuItem() {
  const actions = useActions();
  const shouldDisplay = useUnlockedSelectedShapesCount(1);
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["duplicate"] });
}
function GroupMenuItem2() {
  const actions = useActions();
  const shouldDisplay = useAllowGroup();
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["group"] });
}
function UngroupMenuItem2() {
  const actions = useActions();
  const shouldDisplay = useAllowUngroup();
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["ungroup"] });
}
function RemoveFrameMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const shouldDisplay = useValue("allow unframe", () => {
    const selectedShapes = editor.getSelectedShapes();
    if (selectedShapes.length === 0)
      return false;
    return selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"));
  }, [editor]);
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["remove-frame"] });
}
function FitFrameToContentMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const shouldDisplay = useValue("allow fit frame to content", () => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return false;
    return editor.isShapeOfType(onlySelectedShape, "frame") && editor.getSortedChildIdsForParent(onlySelectedShape).length > 0;
  }, [editor]);
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["fit-frame-to-content"] });
}
function ToggleLockMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const shouldDisplay = useValue("selected shapes", () => editor.getSelectedShapes().length > 0, [
    editor
  ]);
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["toggle-lock"] });
}
function ToggleTransparentBgMenuItem() {
  const actions = useActions();
  const editor = useEditor();
  const isTransparentBg = useValue("isTransparentBg", () => !editor.getInstanceState().exportBackground, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-transparent"], checked: isTransparentBg });
}
function UnlockAllMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const shouldDisplay = useValue("any shapes", () => editor.getCurrentPageShapeIds().size > 0, [
    editor
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["unlock-all"], disabled: !shouldDisplay });
}
function ZoomTo100MenuItem2() {
  const editor = useEditor();
  const isZoomedTo100 = useValue("zoomed to 100", () => editor.getZoomLevel() === 1, [editor]);
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["zoom-to-100"], noClose: true, disabled: isZoomedTo100 });
}
function ZoomToFitMenuItem() {
  const editor = useEditor();
  const hasShapes = useValue("has shapes", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, {
    ...actions["zoom-to-fit"],
    disabled: !hasShapes,
    "data-testid": "minimap.zoom-menu.zoom-to-fit",
    noClose: true
  });
}
function ZoomToSelectionMenuItem() {
  const editor = useEditor();
  const hasSelected = useValue("has shapes", () => editor.getSelectedShapeIds().length > 0, [
    editor
  ]);
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, {
    ...actions["zoom-to-selection"],
    disabled: !hasSelected,
    "data-testid": "minimap.zoom-menu.zoom-to-selection",
    noClose: true
  });
}
function ClipboardMenuGroup() {
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "clipboard", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(CutMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(CopyMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(PasteMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DuplicateMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DeleteMenuItem, {})
  ] });
}
function CopyAsMenuGroup() {
  var _a2;
  const editor = useEditor();
  const actions = useActions();
  const atLeastOneShapeOnPage = useValue("atLeastOneShapeOnPage", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuSubmenu, {
    id: "copy-as",
    label: "context-menu.copy-as",
    size: "small",
    disabled: !atLeastOneShapeOnPage,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "copy-as-group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["copy-as-svg"] }),
        Boolean((_a2 = window.navigator.clipboard) == null ? void 0 : _a2.write) && /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["copy-as-png"] }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["copy-as-json"] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuGroup, { id: "copy-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(ToggleTransparentBgMenuItem, {}) })
    ]
  });
}
function CutMenuItem() {
  const actions = useActions();
  const shouldDisplay = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["cut"], disabled: !shouldDisplay });
}
function CopyMenuItem() {
  const actions = useActions();
  const shouldDisplay = useAnySelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["copy"], disabled: !shouldDisplay });
}
function PasteMenuItem() {
  const actions = useActions();
  const shouldDisplay = showMenuPaste;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["paste"], disabled: !shouldDisplay });
}
function ConversionsMenuGroup() {
  const editor = useEditor();
  const actions = useActions();
  const atLeastOneShapeOnPage = useValue("atLeastOneShapeOnPage", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
  if (!atLeastOneShapeOnPage)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "conversions", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(CopyAsMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuSubmenu, { id: "export-as", label: "context-menu.export-as", size: "small", children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "export-as-group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["export-as-svg"] }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["export-as-png"] }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["export-as-json"] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuGroup, { id: "export-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(ToggleTransparentBgMenuItem, {}) })
    ] })
  ] });
}
function SelectAllMenuItem() {
  const actions = useActions();
  const editor = useEditor();
  const atLeastOneShapeOnPage = useValue("atLeastOneShapeOnPage", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["select-all"], disabled: !atLeastOneShapeOnPage });
}
function DeleteMenuItem() {
  const actions = useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["delete"], disabled: !oneSelected });
}
function ArrangeMenuSubmenu() {
  const twoSelected = useUnlockedSelectedShapesCount(2);
  const onlyFlippableShapeSelected = useOnlyFlippableShape();
  const actions = useActions();
  if (!(twoSelected || onlyFlippableShapeSelected))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuSubmenu, { id: "arrange", label: "context-menu.arrange", size: "small", children: [
    twoSelected && /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "align", children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-left"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-center-horizontal"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-right"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-top"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-center-vertical"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["align-bottom"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DistributeMenuGroup, {}),
    twoSelected && /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "stretch", children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["stretch-horizontal"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["stretch-vertical"] })
    ] }),
    (twoSelected || onlyFlippableShapeSelected) && /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "flip", children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["flip-horizontal"] }),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["flip-vertical"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(OrderMenuGroup, {})
  ] });
}
function DistributeMenuGroup() {
  const actions = useActions();
  const threeSelected = useUnlockedSelectedShapesCount(3);
  if (!threeSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "distribute", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["distribute-horizontal"] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["distribute-vertical"] })
  ] });
}
function OrderMenuGroup() {
  const actions = useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  const threeStackableItems = useThreeStackableItems();
  if (!twoSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "order", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["pack"] }),
    threeStackableItems && /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["stack-horizontal"] }),
    threeStackableItems && /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["stack-vertical"] })
  ] });
}
function ReorderMenuSubmenu() {
  const actions = useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  if (!oneSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuSubmenu, { id: "reorder", label: "context-menu.reorder", size: "small", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuGroup, { id: "reorder", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["bring-to-front"] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["bring-forward"] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["send-backward"] }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["send-to-back"] })
  ] }) });
}
function MoveToPageMenu() {
  const editor = useEditor();
  const pages = useValue("pages", () => editor.getPages(), [editor]);
  const currentPageId = useValue("current page id", () => editor.getCurrentPageId(), [editor]);
  const { addToast } = useToasts();
  const actions = useActions();
  const trackEvent = useUiEvents();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  if (!oneSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(TldrawUiMenuSubmenu, { id: "move-to-page", label: "context-menu.move-to-page", size: "small", children: [
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuGroup, { id: "pages", children: pages.map((page) => /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, {
      id: page.id,
      disabled: currentPageId === page.id,
      label: page.name,
      onSelect: () => {
        editor.mark("move_shapes_to_page");
        editor.moveShapesToPage(editor.getSelectedShapeIds(), page.id);
        const toPage = editor.getPage(page.id);
        if (toPage) {
          addToast({
            title: "Changed Page",
            description: `Moved to ${toPage.name}.`,
            actions: [
              {
                label: "Go Back",
                type: "primary",
                onClick: () => {
                  editor.mark("change-page");
                  editor.setCurrentPage(currentPageId);
                }
              }
            ]
          });
        }
        trackEvent("move-to-page", { source: "context-menu" });
      }
    }, page.id)) }),
    /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuGroup, { id: "new-page", children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["new-page"] }) })
  ] });
}
function ConvertToBookmarkMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const oneEmbedSelected = useValue("oneEmbedSelected", () => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return false;
    return !!(editor.isShapeOfType(onlySelectedShape, "embed") && onlySelectedShape.props.url && !editor.isShapeOrAncestorLocked(onlySelectedShape));
  }, [editor]);
  if (!oneEmbedSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["convert-to-bookmark"] });
}
function ConvertToEmbedMenuItem() {
  const editor = useEditor();
  const actions = useActions();
  const oneEmbeddableBookmarkSelected = useValue("oneEmbeddableBookmarkSelected", () => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return false;
    return !!(editor.isShapeOfType(onlySelectedShape, "bookmark") && onlySelectedShape.props.url && getEmbedInfo(onlySelectedShape.props.url) && !editor.isShapeOrAncestorLocked(onlySelectedShape));
  }, [editor]);
  if (!oneEmbeddableBookmarkSelected)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuItem, { ...actions["convert-to-embed"] });
}
function ToggleSnapModeItem() {
  const actions = useActions();
  const editor = useEditor();
  const isSnapMode = useValue("isSnapMode", () => editor.user.getIsSnapMode(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-snap-mode"], checked: isSnapMode });
}
function ToggleToolLockItem() {
  const actions = useActions();
  const editor = useEditor();
  const isToolLock = useValue("isToolLock", () => editor.getInstanceState().isToolLocked, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-tool-lock"], checked: isToolLock });
}
function ToggleGridItem() {
  const actions = useActions();
  const editor = useEditor();
  const isGridMode = useValue("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-grid"], checked: isGridMode });
}
function ToggleWrapModeItem() {
  const actions = useActions();
  const editor = useEditor();
  const isWrapMode = useValue("isWrapMode", () => editor.user.getIsWrapMode(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-wrap-mode"], checked: isWrapMode });
}
function ToggleDarkModeItem() {
  const actions = useActions();
  const editor = useEditor();
  const isDarkMode = useValue("isDarkMode", () => editor.user.getIsDarkMode(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-dark-mode"], checked: isDarkMode });
}
function ToggleFocusModeItem() {
  const actions = useActions();
  const editor = useEditor();
  const isFocusMode = useValue("isFocusMode", () => editor.getInstanceState().isFocusMode, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-focus-mode"], checked: isFocusMode });
}
function ToggleEdgeScrollingItem() {
  const actions = useActions();
  const editor = useEditor();
  const edgeScrollSpeed = useValue("edgeScrollSpeed", () => editor.user.getEdgeScrollSpeed(), [
    editor
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, {
    ...actions["toggle-edge-scrolling"],
    checked: edgeScrollSpeed === 1
  });
}
function ToggleReduceMotionItem() {
  const actions = useActions();
  const editor = useEditor();
  const animationSpeed = useValue("animationSpeed", () => editor.user.getAnimationSpeed(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-reduce-motion"], checked: animationSpeed === 0 });
}
function ToggleDebugModeItem() {
  const actions = useActions();
  const editor = useEditor();
  const isDebugMode = useValue("isDebugMode", () => editor.getInstanceState().isDebugMode, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-debug-mode"], checked: isDebugMode });
}

// node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenuContent.mjs
function DefaultContextMenuContent() {
  const editor = useEditor();
  const selectToolActive = useValue("isSelectToolActive", () => editor.getCurrentToolId() === "select", [editor]);
  if (!selectToolActive)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(import_jsx_runtime101.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(TldrawUiMenuGroup, { id: "misc", children: [
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(GroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(UngroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(EditLinkMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ToggleAutoSizeMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(RemoveFrameMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(FitFrameToContentMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ConvertToEmbedMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ConvertToBookmarkMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ToggleLockMenuItem, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(TldrawUiMenuGroup, { id: "modify", children: [
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ArrangeMenuSubmenu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ReorderMenuSubmenu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(MoveToPageMenu, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ClipboardMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ConversionsMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(TldrawUiMenuGroup, { id: "select-all", children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(SelectAllMenuItem, {}) })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenu.mjs
var DefaultContextMenu = (0, import_react103.memo)(function DefaultContextMenu2({
  children
}) {
  const editor = useEditor();
  const { Canvas } = useEditorComponents();
  const cb = (0, import_react103.useCallback)((isOpen2) => {
    if (!isOpen2) {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (onlySelectedShape && editor.isShapeOrAncestorLocked(onlySelectedShape)) {
        editor.setSelectedShapes([]);
      }
    } else {
      if (editor.getInstanceState().isCoarsePointer) {
        const selectedShapes = editor.getSelectedShapes();
        const {
          inputs: { currentPagePoint }
        } = editor;
        const shapesAtPoint = editor.getShapesAtPoint(currentPagePoint);
        if (!editor.getSelectedShapes().length || !shapesAtPoint.some((s) => selectedShapes.includes(s))) {
          const lockedShapes = shapesAtPoint.filter((s) => editor.isShapeOrAncestorLocked(s));
          if (lockedShapes.length) {
            editor.select(...lockedShapes.map((s) => s.id));
          }
        }
      }
    }
  }, [editor]);
  const container = useContainer();
  const [isOpen, handleOpenChange] = useMenuIsOpen("context menu", cb);
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(DefaultContextMenuContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)($1b0217ee4a91d156$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: handleOpenChange, modal: false, children: [
    /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($1b0217ee4a91d156$export$41fb9f06171c75f4, { onContextMenu: void 0, dir: "ltr", children: Canvas ? /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(Canvas, {}) : null }),
    isOpen && /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($1b0217ee4a91d156$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($1b0217ee4a91d156$export$7c6e2c02157bb7d2, {
      className: "tlui-menu scrollable",
      "data-testid": "context-menu",
      alignOffset: -4,
      collisionPadding: 4,
      onContextMenu: preventDefault,
      children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(TldrawUiMenuContextProvider, { type: "context-menu", sourceId: "context-menu", children: content })
    }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenu.mjs
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenuContent.mjs
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var import_react104 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonCheck.mjs
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
function TldrawUiButtonCheck({ checked }) {
  return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(TldrawUiIcon, { icon: checked ? "check" : "checkbox-empty", className: "tlui-button__icon", small: true });
}

// node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenuContent.mjs
function DefaultDebugMenuContent() {
  const editor = useEditor();
  const { addToast } = useToasts();
  const { addDialog } = useDialogs();
  const [error, setError] = import_react104.default.useState(false);
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(TldrawUiMenuGroup, { id: "items", children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, {
        id: "add-toast",
        onSelect: () => {
          addToast({
            id: uniqueId(),
            title: "Something good happened",
            description: "Hey, attend to this thing over here. It might be important!",
            keepOpen: true,
            severity: "success"
          });
          addToast({
            id: uniqueId(),
            title: "Something happened",
            description: "Hey, attend to this thing over here. It might be important!",
            keepOpen: true,
            severity: "info",
            actions: [
              {
                label: "Primary",
                type: "primary",
                onClick: () => {
                }
              },
              {
                label: "Normal",
                type: "normal",
                onClick: () => {
                }
              },
              {
                label: "Danger",
                type: "danger",
                onClick: () => {
                }
              }
            ]
          });
          addToast({
            id: uniqueId(),
            title: "Something maybe bad happened",
            description: "Hey, attend to this thing over here. It might be important!",
            keepOpen: true,
            severity: "warning",
            actions: [
              {
                label: "Primary",
                type: "primary",
                onClick: () => {
                }
              },
              {
                label: "Normal",
                type: "normal",
                onClick: () => {
                }
              },
              {
                label: "Danger",
                type: "danger",
                onClick: () => {
                }
              }
            ]
          });
          addToast({
            id: uniqueId(),
            title: "Something bad happened",
            severity: "error",
            keepOpen: true
          });
        },
        label: untranslated("Show toast")
      }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, {
        id: "show-dialog",
        label: "Show dialog",
        onSelect: () => {
          addDialog({
            component: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(ExampleDialog, {
              displayDontShowAgain: true,
              onCancel: () => onClose(),
              onContinue: () => onClose()
            }),
            onClose: () => {
            }
          });
        }
      }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, {
        id: "create-shapes",
        label: "Create 100 shapes",
        onSelect: () => createNShapes(editor, 100)
      }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, {
        id: "count-nodes",
        label: "Count shapes / nodes",
        onSelect: () => {
          var _a2;
          const selectedShapes = editor.getSelectedShapes();
          const shapes = selectedShapes.length === 0 ? editor.getRenderingShapes() : selectedShapes;
          window.alert(`Shapes ${shapes.length}, DOM nodes:${(_a2 = document.querySelector(".tl-shapes").querySelectorAll("*")) == null ? void 0 : _a2.length}`);
        }
      }),
      (() => {
        if (error)
          throw Error("oh no!");
        return null;
      })(),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, { id: "throw-error", onSelect: () => setError(true), label: "Throw error" }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuItem, { id: "hard-reset", onSelect: hardResetEditor, label: "Hard reset" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(TldrawUiMenuGroup, { id: "flags", children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(DebugFlags, {}),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(FeatureFlags, {})
    ] })
  ] });
}
function DebugFlags() {
  const items = Object.values(debugFlags);
  if (!items.length)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuSubmenu, { id: "debug flags", label: "Debug Flags", children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuGroup, { id: "debug flags", children: items.map((flag) => /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
}
function FeatureFlags() {
  const items = Object.values(featureFlags);
  if (!items.length)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuSubmenu, { id: "feature flags", label: "Feature Flags", children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuGroup, { id: "feature flags", children: items.map((flag) => /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
}
function ExampleDialog({
  title = "title",
  body = "hello hello hello",
  cancel = "Cancel",
  confirm = "Continue",
  displayDontShowAgain = false,
  onCancel,
  onContinue
}) {
  const [dontShowAgain, setDontShowAgain] = import_react104.default.useState(false);
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiDialogTitle, { children: title }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiDialogBody, { style: { maxWidth: 350 }, children: body }),
    /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
      displayDontShowAgain && /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(TldrawUiButton, {
        type: "normal",
        onClick: () => setDontShowAgain(!dontShowAgain),
        style: { marginRight: "auto" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButtonCheck, { checked: dontShowAgain }),
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButtonLabel, { children: "Don't show again" })
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButton, { type: "normal", onClick: onCancel, children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButtonLabel, { children: cancel }) }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButton, { type: "primary", onClick: async () => onContinue(), children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiButtonLabel, { children: confirm }) })
    ] })
  ] });
}
var DebugFlagToggle = track(function DebugFlagToggle2({
  flag,
  onChange
}) {
  const value = flag.get();
  return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(TldrawUiMenuCheckboxItem, {
    id: flag.name,
    title: flag.name,
    label: flag.name.replace(/([a-z0-9])([A-Z])/g, (m) => `${m[0]} ${m[1].toLowerCase()}`).replace(/^[a-z]/, (m) => m.toUpperCase()),
    checked: value,
    onSelect: () => {
      flag.set(!value);
      onChange == null ? void 0 : onChange(!value);
    }
  });
});
var t = 0;
function createNShapes(editor, n) {
  const shapesToCreate = Array(n);
  const cols = Math.floor(Math.sqrt(n));
  for (let i = 0; i < n; i++) {
    t++;
    shapesToCreate[i] = {
      id: createShapeId("box" + t),
      type: "geo",
      x: i % cols * 132,
      y: Math.floor(i / cols) * 132
    };
  }
  editor.batch(() => {
    editor.createShapes(shapesToCreate).setSelectedShapes(shapesToCreate.map((s) => s.id));
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenu.mjs
function DefaultDebugMenu({ children }) {
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(DefaultDebugMenuContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(TldrawUiDropdownMenuRoot, { id: "debug", children: [
    /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TldrawUiButton, { type: "icon", title: "Debug menu", children: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TldrawUiButtonIcon, { icon: "dots-horizontal" }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "debug-panel", children: content }) })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/DefaultDebugPanel.mjs
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var import_react105 = __toESM(require_react(), 1);
var DefaultDebugPanel = (0, import_react105.memo)(function DefaultDebugPanel2() {
  const { DebugMenu } = useTldrawUiComponents();
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "tlui-debug-panel", children: [
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(CurrentState, {}),
    /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(FPS, {}),
    DebugMenu && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(DebugMenu, {})
  ] });
});
function useTick2(isEnabled = true) {
  const [_, setTick] = (0, import_react105.useState)(0);
  const editor = useEditor();
  (0, import_react105.useEffect)(() => {
    if (!isEnabled)
      return;
    const update = () => setTick((tick2) => tick2 + 1);
    editor.on("tick", update);
    return () => {
      editor.off("tick", update);
    };
  }, [editor, isEnabled]);
}
var CurrentState = track(function CurrentState2() {
  useTick2();
  const editor = useEditor();
  const path = editor.getPath();
  const hoverShape = editor.getHoveredShape();
  const selectedShape = editor.getOnlySelectedShape();
  const shape = path === "select.idle" || !path.includes("select.") ? hoverShape : selectedShape;
  const shapeInfo = shape && path.includes("select.") ? ` / ${shape.type || ""}${"geo" in shape.props ? " / " + shape.props.geo : ""} / [${Vec.ToFixed(editor.getPointInShapeSpace(shape, editor.inputs.currentPagePoint), 0)}]` : "";
  const ruler = path.startsWith("select.") && !path.includes(".idle") ? ` / [${Vec.ToFixed(editor.inputs.originPagePoint, 0)}] \u2192 [${Vec.ToFixed(editor.inputs.currentPagePoint, 0)}] = ${Vec.Dist(editor.inputs.originPagePoint, editor.inputs.currentPagePoint).toFixed(0)}` : "";
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { className: "tlui-debug-panel__current-state", children: `${path}${shapeInfo}${ruler}` });
});
function FPS() {
  const showFps = useValue("show_fps", () => debugFlags.showFps.get(), [debugFlags]);
  const fpsRef = (0, import_react105.useRef)(null);
  (0, import_react105.useEffect)(() => {
    if (!showFps)
      return;
    const TICK_LENGTH = 250;
    let maxKnownFps = 0;
    let cancelled2 = false;
    let start = performance.now();
    let currentTickLength = 0;
    let framesInCurrentTick = 0;
    let isSlow = false;
    function loop() {
      if (cancelled2)
        return;
      framesInCurrentTick++;
      currentTickLength = performance.now() - start;
      if (currentTickLength > TICK_LENGTH) {
        const fps = Math.round(framesInCurrentTick * (TICK_LENGTH / currentTickLength) * (1e3 / TICK_LENGTH));
        if (fps > maxKnownFps) {
          maxKnownFps = fps;
        }
        const slowFps = maxKnownFps * 0.75;
        if (fps < slowFps && !isSlow || fps >= slowFps && isSlow) {
          isSlow = !isSlow;
        }
        fpsRef.current.innerHTML = `FPS ${fps.toString()}`;
        fpsRef.current.className = `tlui-debug-panel__fps` + (isSlow ? ` tlui-debug-panel__fps__slow` : ``);
        currentTickLength -= TICK_LENGTH;
        framesInCurrentTick = 0;
        start = performance.now();
      }
      requestAnimationFrame(loop);
    }
    loop();
    return () => {
      cancelled2 = true;
    };
  }, [showFps]);
  if (!showFps)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { ref: fpsRef });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenu.mjs
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var import_react106 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenuContent.mjs
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/LanguageMenu.mjs
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
function LanguageMenu() {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  const currentLanguage = useValue("locale", () => editor.user.getLocale(), [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(TldrawUiMenuSubmenu, { id: "help menu language", label: "menu.language", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(TldrawUiMenuGroup, { id: "languages", children: LANGUAGES.map(({ locale, label }) => /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(TldrawUiMenuCheckboxItem, {
    id: `language-${locale}`,
    title: locale,
    label,
    checked: locale === currentLanguage,
    onSelect: () => {
      editor.user.updateUserPreferences({ locale });
      trackEvent("change-language", { source: "menu", locale });
    }
  }, locale)) }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenuContent.mjs
function DefaultHelpMenuContent() {
  return /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(import_jsx_runtime108.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(LanguageMenu, {}),
    /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(KeyboardShortcutsMenuItem, {})
  ] });
}
function KeyboardShortcutsMenuItem() {
  const { KeyboardShortcutsDialog } = useTldrawUiComponents();
  const { addDialog } = useDialogs();
  if (!KeyboardShortcutsDialog)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(TldrawUiMenuItem, {
    id: "keyboard-shortcuts-button",
    label: "help-menu.keyboard-shortcuts",
    readonlyOk: true,
    onSelect: () => {
      addDialog({ component: KeyboardShortcutsDialog });
    }
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenu.mjs
var DefaultHelpMenu = (0, import_react106.memo)(function DefaultHelpMenu2({ children }) {
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(DefaultHelpMenuContent, {});
  if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-help-menu", children: /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(TldrawUiDropdownMenuRoot, { id: "help menu", children: [
    /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TldrawUiButton, { type: "help", title: msg2("help-menu.title"), "data-testid": "help-menu.button", children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TldrawUiButtonIcon, { icon: "question-mark", small: true }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, sideOffset: 8, children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "help-menu", children: content }) })
  ] }) });
});

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtons.mjs
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtonsContent.mjs
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/BackToContent.mjs
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var import_react107 = __toESM(require_react(), 1);
function BackToContent() {
  const editor = useEditor();
  const actions = useActions();
  const [showBackToContent, setShowBackToContent] = (0, import_react107.useState)(false);
  const rIsShowing = (0, import_react107.useRef)(false);
  useQuickReactor("toggle showback to content", () => {
    const showBackToContentPrev = rIsShowing.current;
    const shapeIds = editor.getCurrentPageShapeIds();
    let showBackToContentNow = false;
    if (shapeIds.size) {
      showBackToContentNow = shapeIds.size === editor.getCulledShapes().size;
    }
    if (showBackToContentPrev !== showBackToContentNow) {
      setShowBackToContent(showBackToContentNow);
      rIsShowing.current = showBackToContentNow;
    }
  }, [editor]);
  if (!showBackToContent)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TldrawUiMenuItem, {
    ...actions["back-to-content"],
    onSelect: () => {
      actions["back-to-content"].onSelect("helper-buttons");
      setShowBackToContent(false);
    }
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/ExitPenMode.mjs
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
function ExitPenMode() {
  const editor = useEditor();
  const actions = useActions();
  const isPenMode = useValue("is pen mode", () => editor.getInstanceState().isPenMode, [editor]);
  if (!isPenMode)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(TldrawUiMenuItem, { ...actions["exit-pen-mode"] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/StopFollowing.mjs
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
function StopFollowing() {
  const editor = useEditor();
  const actions = useActions();
  const followingUser = useValue("is following user", () => !!editor.getInstanceState().followingUserId, [editor]);
  if (!followingUser)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(TldrawUiMenuItem, { ...actions["stop-following"] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtonsContent.mjs
function DefaultHelperButtonsContent() {
  return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(ExitPenMode, {}),
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(BackToContent, {}),
    /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(StopFollowing, {})
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtons.mjs
function DefaultHelperButtons({ children }) {
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(DefaultHelperButtonsContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "tlui-helper-buttons", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(TldrawUiMenuContextProvider, { type: "helper-buttons", sourceId: "helper-buttons", children: content }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialog.mjs
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var import_classnames22 = __toESM(require_classnames(), 1);
var import_react108 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialogContent.mjs
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
function DefaultKeyboardShortcutsDialogContent() {
  const actions = useActions();
  const tools = useTools();
  return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(import_jsx_runtime115.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.tools", id: "tools", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["toggle-tool-lock"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["insert-media"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["select"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["draw"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["eraser"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["hand"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["rectangle"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["ellipse"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["arrow"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["line"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["text"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["frame"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["note"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...tools["laser"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.preferences", id: "preferences", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["toggle-dark-mode"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["toggle-focus-mode"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["toggle-grid"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.edit", id: "edit", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["undo"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["redo"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["cut"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["copy"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["paste"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["select-all"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["delete"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["duplicate"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.view", id: "view", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["zoom-in"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["zoom-out"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["zoom-to-100"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["zoom-to-fit"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["zoom-to-selection"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.transform", id: "transform", children: [
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["bring-to-front"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["bring-forward"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["send-backward"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["send-to-back"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["group"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["ungroup"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["flip-horizontal"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["flip-vertical"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-top"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-center-vertical"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-bottom"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-left"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-center-horizontal"] }),
      /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawUiMenuItem, { ...actions["align-right"] })
    ] })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialog.mjs
var DefaultKeyboardShortcutsDialog = (0, import_react108.memo)(function DefaultKeyboardShortcutsDialog2({
  children
}) {
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(DefaultKeyboardShortcutsDialogContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(import_jsx_runtime116.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(TldrawUiDialogHeader, { className: "tlui-shortcuts-dialog__header", children: [
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TldrawUiDialogTitle, { children: msg2("shortcuts-dialog.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TldrawUiDialogBody, {
      className: (0, import_classnames22.default)("tlui-shortcuts-dialog__body", {
        "tlui-shortcuts-dialog__body__mobile": breakpoint <= PORTRAIT_BREAKPOINT.MOBILE_XS,
        "tlui-shortcuts-dialog__body__tablet": breakpoint <= PORTRAIT_BREAKPOINT.TABLET
      }),
      children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(TldrawUiMenuContextProvider, { type: "keyboard-shortcuts", sourceId: "kbd", children: content })
    }),
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("div", { className: "tlui-dialog__scrim" })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenu.mjs
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var import_react109 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenuContent.mjs
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
function DefaultMainMenuContent() {
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(EditSubmenu, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ViewSubmenu, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ExportFileContentSubMenu, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ExtrasGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(PreferencesGroup, {})
  ] });
}
function ExportFileContentSubMenu() {
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuSubmenu, { id: "export-all-as", label: "context-menu.export-all-as", size: "small", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "export-all-as-group", children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["export-all-as-svg"] }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["export-all-as-png"] }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["export-all-as-json"] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuGroup, { id: "export-all-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleTransparentBgMenuItem, {}) })
  ] });
}
function EditSubmenu() {
  const editor = useEditor();
  const selectToolActive = useValue("isSelectToolActive", () => editor.getCurrentToolId() === "select", [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuSubmenu, { id: "edit", label: "menu.edit", disabled: !selectToolActive, children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(UndoRedoGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ClipboardMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ConversionsMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(MiscMenuGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(LockGroup, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuGroup, { id: "select-all", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(SelectAllMenuItem, {}) })
  ] });
}
function MiscMenuGroup() {
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "misc", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(GroupMenuItem2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(UngroupMenuItem2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(EditLinkMenuItem2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleAutoSizeMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(RemoveFrameMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(FitFrameToContentMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ConvertToEmbedMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ConvertToBookmarkMenuItem, {})
  ] });
}
function LockGroup() {
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "lock", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleLockMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(UnlockAllMenuItem, {})
  ] });
}
function UndoRedoGroup() {
  const actions = useActions();
  const canUndo = useCanUndo();
  const canRedo = useCanRedo();
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "undo-redo", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["undo"], disabled: !canUndo }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["redo"], disabled: !canRedo })
  ] });
}
function ViewSubmenu() {
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuSubmenu, { id: "view", label: "menu.view", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "view-actions", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["zoom-in"] }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["zoom-out"] }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ZoomTo100MenuItem2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ZoomToFitMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ZoomToSelectionMenuItem, {})
  ] }) });
}
function ExtrasGroup() {
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "extras", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["insert-embed"] }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuItem, { ...actions["insert-media"] })
  ] });
}
function PreferencesGroup() {
  return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuGroup, { id: "preferences", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuSubmenu, { id: "preferences", label: "menu.preferences", children: [
    /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(TldrawUiMenuGroup, { id: "preferences-actions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleSnapModeItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleToolLockItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleGridItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleWrapModeItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleDarkModeItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleFocusModeItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleEdgeScrollingItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleReduceMotionItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ToggleDebugModeItem, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuGroup, { id: "language", children: /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(LanguageMenu, {}) })
  ] }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenu.mjs
var DefaultMainMenu = (0, import_react109.memo)(function DefaultMainMenu2({ children }) {
  const container = useContainer();
  const [isOpen, onOpenChange] = useMenuIsOpen("main menu");
  const msg2 = useTranslation();
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(DefaultMainMenuContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiButton, { type: "icon", "data-testid": "main-menu.button", title: msg2("menu.title"), children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiButtonIcon, { icon: "menu", small: true }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime118.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)($d08ef79370b62062$export$7c6e2c02157bb7d2, {
      className: "tlui-menu",
      side: "bottom",
      align: "start",
      collisionPadding: 4,
      alignOffset: 0,
      sideOffset: 6,
      children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "main-menu", children: content })
    }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/MenuPanel.mjs
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var import_react110 = __toESM(require_react(), 1);
var DefaultMenuPanel = (0, import_react110.memo)(function MenuPanel() {
  const breakpoint = useBreakpoint();
  const { MainMenu, QuickActions, ActionsMenu, PageMenu } = useTldrawUiComponents();
  if (!MainMenu && !PageMenu && breakpoint < 6)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)("div", { className: "tlui-menu-zone", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
    MainMenu && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(MainMenu, {}),
    PageMenu && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(PageMenu, {}),
    breakpoint < 6 ? null : /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(import_jsx_runtime119.Fragment, { children: [
      QuickActions && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(QuickActions, {}),
      ActionsMenu && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ActionsMenu, {})
    ] })
  ] }) });
});

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/DefaultMinimap.mjs
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var React45 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/getRgba.mjs
var memo26 = {};
function getRgba(colorString) {
  if (memo26[colorString]) {
    return memo26[colorString];
  }
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  context.fillStyle = colorString;
  context.fillRect(0, 0, 1, 1);
  const [r, g, b, a] = context.getImageData(0, 0, 1, 1).data;
  const result = new Float32Array([r / 255, g / 255, b / 255, a / 255]);
  memo26[colorString] = result;
  return result;
}

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/minimap-webgl-shapes.mjs
var numArcSegmentsPerCorner = 10;
var roundedRectangleDataSize = 4 * 6 * numArcSegmentsPerCorner + 12 + 4 * 12;
function pie(array2, {
  center,
  radius,
  numArcSegments = 20,
  startAngle = 0,
  endAngle = PI2,
  offset: offset4 = 0
}) {
  const angle = (endAngle - startAngle) / numArcSegments;
  let i = offset4;
  for (let a = startAngle; a < endAngle; a += angle) {
    array2[i++] = center.x;
    array2[i++] = center.y;
    array2[i++] = center.x + Math.cos(a) * radius;
    array2[i++] = center.y + Math.sin(a) * radius;
    array2[i++] = center.x + Math.cos(a + angle) * radius;
    array2[i++] = center.y + Math.sin(a + angle) * radius;
  }
  return array2;
}
function rectangle(array2, offset4, x, y, w, h) {
  array2[offset4++] = x;
  array2[offset4++] = y;
  array2[offset4++] = x;
  array2[offset4++] = y + h;
  array2[offset4++] = x + w;
  array2[offset4++] = y;
  array2[offset4++] = x + w;
  array2[offset4++] = y;
  array2[offset4++] = x;
  array2[offset4++] = y + h;
  array2[offset4++] = x + w;
  array2[offset4++] = y + h;
}
function roundedRectangle(data, box, radius) {
  const numArcSegments = numArcSegmentsPerCorner;
  radius = Math.min(radius, Math.min(box.w, box.h) / 2);
  const innerBox = Box.ExpandBy(box, -radius);
  if (innerBox.w <= 0 || innerBox.h <= 0) {
    pie(data, { center: box.center, radius, numArcSegments: numArcSegmentsPerCorner * 4 });
    return numArcSegmentsPerCorner * 4 * 6;
  }
  let offset4 = 0;
  rectangle(data, offset4, innerBox.minX, innerBox.minY, innerBox.w, innerBox.h);
  offset4 += 12;
  rectangle(data, offset4, innerBox.minX, box.minY, innerBox.w, radius);
  offset4 += 12;
  rectangle(data, offset4, innerBox.maxX, innerBox.minY, radius, innerBox.h);
  offset4 += 12;
  rectangle(data, offset4, innerBox.minX, innerBox.maxY, innerBox.w, radius);
  offset4 += 12;
  rectangle(data, offset4, box.minX, innerBox.minY, radius, innerBox.h);
  offset4 += 12;
  pie(data, {
    numArcSegments,
    offset: offset4,
    center: innerBox.point,
    radius,
    startAngle: PI,
    endAngle: PI * 1.5
  });
  offset4 += numArcSegments * 6;
  pie(data, {
    numArcSegments,
    offset: offset4,
    center: Vec.Add(innerBox.point, new Vec(innerBox.w, 0)),
    radius,
    startAngle: PI * 1.5,
    endAngle: PI2
  });
  offset4 += numArcSegments * 6;
  pie(data, {
    numArcSegments,
    offset: offset4,
    center: Vec.Add(innerBox.point, innerBox.size),
    radius,
    startAngle: 0,
    endAngle: HALF_PI
  });
  offset4 += numArcSegments * 6;
  pie(data, {
    numArcSegments,
    offset: offset4,
    center: Vec.Add(innerBox.point, new Vec(0, innerBox.h)),
    radius,
    startAngle: HALF_PI,
    endAngle: PI
  });
  return roundedRectangleDataSize;
}

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/minimap-webgl-setup.mjs
function setupWebGl(canvas) {
  if (!canvas)
    throw new Error("Canvas element not found");
  const context = canvas.getContext("webgl2", {
    premultipliedAlpha: false
  });
  if (!context)
    throw new Error("Failed to get webgl2 context");
  const vertexShaderSourceCode = `#version 300 es
  precision mediump float;
  
  in vec2 shapeVertexPosition;

	uniform vec4 canvasPageBounds;

	// taken (with thanks) from
	// https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html
  void main() {
		// convert the position from pixels to 0.0 to 1.0
		vec2 zeroToOne = (shapeVertexPosition - canvasPageBounds.xy) / canvasPageBounds.zw;
	
		// convert from 0->1 to 0->2
		vec2 zeroToTwo = zeroToOne * 2.0;
	
		// convert from 0->2 to -1->+1 (clipspace)
		vec2 clipSpace = zeroToTwo - 1.0;
	
		gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
  }`;
  const vertexShader = context.createShader(context.VERTEX_SHADER);
  if (!vertexShader) {
    throw new Error("Failed to create vertex shader");
  }
  context.shaderSource(vertexShader, vertexShaderSourceCode);
  context.compileShader(vertexShader);
  if (!context.getShaderParameter(vertexShader, context.COMPILE_STATUS)) {
    throw new Error("Failed to compile vertex shader");
  }
  const fragmentShaderSourceCode = `#version 300 es
  precision mediump float;
  
	uniform vec4 fillColor;
  out vec4 outputColor;

  void main() {
	outputColor = fillColor;
  }`;
  const fragmentShader = context.createShader(context.FRAGMENT_SHADER);
  if (!fragmentShader) {
    throw new Error("Failed to create fragment shader");
  }
  context.shaderSource(fragmentShader, fragmentShaderSourceCode);
  context.compileShader(fragmentShader);
  if (!context.getShaderParameter(fragmentShader, context.COMPILE_STATUS)) {
    throw new Error("Failed to compile fragment shader");
  }
  const program = context.createProgram();
  if (!program) {
    throw new Error("Failed to create program");
  }
  context.attachShader(program, vertexShader);
  context.attachShader(program, fragmentShader);
  context.linkProgram(program);
  if (!context.getProgramParameter(program, context.LINK_STATUS)) {
    throw new Error("Failed to link program");
  }
  context.useProgram(program);
  const shapeVertexPositionAttributeLocation = context.getAttribLocation(program, "shapeVertexPosition");
  if (shapeVertexPositionAttributeLocation < 0) {
    throw new Error("Failed to get shapeVertexPosition attribute location");
  }
  context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);
  const canvasPageBoundsLocation = context.getUniformLocation(program, "canvasPageBounds");
  const fillColorLocation = context.getUniformLocation(program, "fillColor");
  const selectedShapesBuffer = context.createBuffer();
  if (!selectedShapesBuffer)
    throw new Error("Failed to create buffer");
  const unselectedShapesBuffer = context.createBuffer();
  if (!unselectedShapesBuffer)
    throw new Error("Failed to create buffer");
  return {
    context,
    selectedShapes: allocateBuffer(context, 1024),
    unselectedShapes: allocateBuffer(context, 4096),
    viewport: allocateBuffer(context, roundedRectangleDataSize),
    collaborators: allocateBuffer(context, 1024),
    prepareTriangles(stuff, len) {
      context.bindBuffer(context.ARRAY_BUFFER, stuff.buffer);
      context.bufferData(context.ARRAY_BUFFER, stuff.vertices, context.STATIC_DRAW, 0, len);
      context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);
      context.vertexAttribPointer(shapeVertexPositionAttributeLocation, 2, context.FLOAT, false, 0, 0);
    },
    drawTrianglesTransparently(len) {
      context.enable(context.BLEND);
      context.blendFunc(context.SRC_ALPHA, context.ONE_MINUS_SRC_ALPHA);
      context.drawArrays(context.TRIANGLES, 0, len / 2);
      context.disable(context.BLEND);
    },
    drawTriangles(len) {
      context.drawArrays(context.TRIANGLES, 0, len / 2);
    },
    setFillColor(color) {
      context.uniform4fv(fillColorLocation, color);
    },
    setCanvasPageBounds(bounds) {
      context.uniform4fv(canvasPageBoundsLocation, bounds);
    }
  };
}
function allocateBuffer(context, size4) {
  const buffer = context.createBuffer();
  if (!buffer)
    throw new Error("Failed to create buffer");
  return { buffer, vertices: new Float32Array(size4) };
}
function appendVertices(bufferStuff, offset4, data) {
  let len = bufferStuff.vertices.length;
  while (len < offset4 + data.length) {
    len *= 2;
  }
  if (len != bufferStuff.vertices.length) {
    const newVertices = new Float32Array(len);
    newVertices.set(bufferStuff.vertices);
    bufferStuff.vertices = newVertices;
  }
  bufferStuff.vertices.set(data, offset4);
}

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/MinimapManager.mjs
var __defProp7 = Object.defineProperty;
var __getOwnPropDesc7 = Object.getOwnPropertyDescriptor;
var __decorateClass6 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc7(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp7(target, key, result);
  return result;
};
var MinimapManager = class {
  constructor(editor, elem) {
    __publicField(this, "disposables", []);
    __publicField(this, "close", () => this.disposables.forEach((d) => d()));
    __publicField(this, "gl");
    __publicField(this, "shapeGeometryCache");
    __publicField(this, "colors");
    __publicField(this, "id", uniqueId());
    __publicField(this, "canvasBoundingClientRect", atom("canvasBoundingClientRect", new Box()));
    __publicField(this, "originPagePoint", new Vec());
    __publicField(this, "originPageCenter", new Vec());
    __publicField(this, "isInViewport", false);
    __publicField(this, "getMinimapPagePoint", (clientX, clientY) => {
      const canvasPageBounds = this.getCanvasPageBounds();
      const canvasScreenBounds = this.getCanvasScreenBounds();
      let x = clientX - canvasScreenBounds.x;
      let y = clientY - canvasScreenBounds.y;
      x *= canvasPageBounds.width / canvasScreenBounds.width;
      y *= canvasPageBounds.height / canvasScreenBounds.height;
      x += canvasPageBounds.minX;
      y += canvasPageBounds.minY;
      return new Vec(x, y, 1);
    });
    __publicField(this, "minimapScreenPointToPagePoint", (x, y, shiftKey = false, clampToBounds = false) => {
      var _a2;
      const { editor } = this;
      const viewportPageBounds = editor.getViewportPageBounds();
      let { x: px, y: py } = this.getMinimapPagePoint(x, y);
      if (clampToBounds) {
        const shapesPageBounds = (_a2 = this.editor.getCurrentPageBounds()) != null ? _a2 : new Box();
        const vpPageBounds = viewportPageBounds;
        const minX = shapesPageBounds.minX - vpPageBounds.width / 2;
        const maxX = shapesPageBounds.maxX + vpPageBounds.width / 2;
        const minY = shapesPageBounds.minY - vpPageBounds.height / 2;
        const maxY = shapesPageBounds.maxY + vpPageBounds.height / 2;
        const lx = Math.max(0, minX + vpPageBounds.width - px);
        const rx = Math.max(0, -(maxX - vpPageBounds.width - px));
        const ly = Math.max(0, minY + vpPageBounds.height - py);
        const ry = Math.max(0, -(maxY - vpPageBounds.height - py));
        const ql = Math.max(0, lx - rx);
        const qr = Math.max(0, rx - lx);
        const qt = Math.max(0, ly - ry);
        const qb = Math.max(0, ry - ly);
        if (ql && ql > qr) {
          px += ql / 2;
        } else if (qr) {
          px -= qr / 2;
        }
        if (qt && qt > qb) {
          py += qt / 2;
        } else if (qb) {
          py -= qb / 2;
        }
        px = clamp(px, minX, maxX);
        py = clamp(py, minY, maxY);
      }
      if (shiftKey) {
        const { originPagePoint } = this;
        const dx = Math.abs(px - originPagePoint.x);
        const dy = Math.abs(py - originPagePoint.y);
        if (dx > dy) {
          py = originPagePoint.y;
        } else {
          px = originPagePoint.x;
        }
      }
      return new Vec(px, py);
    });
    __publicField(this, "render", () => {
      const context = this.gl.context;
      const canvasSize2 = this.getCanvasSize();
      this.gl.setCanvasPageBounds(this.getCanvasPageBoundsArray());
      this.elem.width = canvasSize2.x;
      this.elem.height = canvasSize2.y;
      context.viewport(0, 0, canvasSize2.x, canvasSize2.y);
      context.clearColor(this.colors.background[0], this.colors.background[1], this.colors.background[2], 1);
      context.clear(context.COLOR_BUFFER_BIT);
      const selectedShapes = new Set(this.editor.getSelectedShapeIds());
      const colors2 = this.colors;
      let selectedShapeOffset = 0;
      let unselectedShapeOffset = 0;
      const ids = this.editor.getCurrentPageShapeIdsSorted();
      for (let i = 0, len = ids.length; i < len; i++) {
        const shapeId = ids[i];
        const geometry = this.shapeGeometryCache.get(shapeId);
        if (!geometry)
          continue;
        const len2 = geometry.length;
        if (selectedShapes.has(shapeId)) {
          appendVertices(this.gl.selectedShapes, selectedShapeOffset, geometry);
          selectedShapeOffset += len2;
        } else {
          appendVertices(this.gl.unselectedShapes, unselectedShapeOffset, geometry);
          unselectedShapeOffset += len2;
        }
      }
      this.drawShapes(this.gl.unselectedShapes, unselectedShapeOffset, colors2.shapeFill);
      this.drawShapes(this.gl.selectedShapes, selectedShapeOffset, colors2.selectFill);
      this.drawViewport();
      this.drawCollaborators();
    });
    this.editor = editor;
    this.elem = elem;
    this.gl = setupWebGl(elem);
    this.shapeGeometryCache = editor.store.createComputedCache("webgl-geometry", (r) => {
      const bounds = editor.getShapeMaskedPageBounds(r.id);
      if (!bounds)
        return null;
      const arr = new Float32Array(12);
      rectangle(arr, 0, bounds.x, bounds.y, bounds.w, bounds.h);
      return arr;
    });
    this.colors = this._getColors();
    this.disposables.push(this._listenForCanvasResize(), react("minimap render", this.render));
  }
  _getColors() {
    const style = getComputedStyle(this.editor.getContainer());
    return {
      shapeFill: getRgba(style.getPropertyValue("--color-text-3").trim()),
      selectFill: getRgba(style.getPropertyValue("--color-selected").trim()),
      viewportFill: getRgba(style.getPropertyValue("--color-muted-1").trim()),
      background: getRgba(style.getPropertyValue("--color-low").trim())
    };
  }
  updateColors() {
    this.colors = this._getColors();
  }
  getDpr() {
    return this.editor.getInstanceState().devicePixelRatio;
  }
  getContentPageBounds() {
    const viewportPageBounds = this.editor.getViewportPageBounds();
    const commonShapeBounds = this.editor.getCurrentPageBounds();
    return commonShapeBounds ? Box.Expand(commonShapeBounds, viewportPageBounds) : viewportPageBounds;
  }
  getContentScreenBounds() {
    const contentPageBounds = this.getContentPageBounds();
    const topLeft = this.editor.pageToScreen(contentPageBounds.point);
    const bottomRight = this.editor.pageToScreen(new Vec(contentPageBounds.maxX, contentPageBounds.maxY));
    return new Box(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
  }
  _getCanvasBoundingRect() {
    const { x, y, width, height } = this.elem.getBoundingClientRect();
    return new Box(x, y, width, height);
  }
  getCanvasScreenBounds() {
    return this.canvasBoundingClientRect.get();
  }
  _listenForCanvasResize() {
    const observer = new ResizeObserver(() => {
      const rect = this._getCanvasBoundingRect();
      this.canvasBoundingClientRect.set(rect);
    });
    observer.observe(this.elem);
    return () => observer.disconnect();
  }
  getCanvasSize() {
    const rect = this.canvasBoundingClientRect.get();
    const dpr = this.getDpr();
    return new Vec(rect.width * dpr, rect.height * dpr);
  }
  getCanvasClientPosition() {
    return this.canvasBoundingClientRect.get().point;
  }
  getCanvasPageBounds() {
    const canvasScreenBounds = this.getCanvasScreenBounds();
    const contentPageBounds = this.getContentPageBounds();
    const aspectRatio = canvasScreenBounds.width / canvasScreenBounds.height;
    let targetWidth = contentPageBounds.width;
    let targetHeight = targetWidth / aspectRatio;
    if (targetHeight < contentPageBounds.height) {
      targetHeight = contentPageBounds.height;
      targetWidth = targetHeight * aspectRatio;
    }
    const box = new Box(0, 0, targetWidth, targetHeight);
    box.center = contentPageBounds.center;
    return box;
  }
  getZoom() {
    return this.getCanvasPageBounds().width / this.getCanvasScreenBounds().width;
  }
  getCanvasPageBoundsArray() {
    const { x, y, w, h } = this.getCanvasPageBounds();
    return new Float32Array([x, y, w, h]);
  }
  drawShapes(stuff, len, color) {
    this.gl.prepareTriangles(stuff, len);
    this.gl.setFillColor(color);
    this.gl.drawTriangles(len);
  }
  drawViewport() {
    const viewport = this.editor.getViewportPageBounds();
    const len = roundedRectangle(this.gl.viewport.vertices, viewport, 4 * this.getZoom());
    this.gl.prepareTriangles(this.gl.viewport, len);
    this.gl.setFillColor(this.colors.viewportFill);
    this.gl.drawTrianglesTransparently(len);
  }
  drawCollaborators() {
    const collaborators = this.editor.getCollaboratorsOnCurrentPage();
    if (!collaborators.length)
      return;
    const numSegmentsPerCircle = 20;
    const dataSizePerCircle = numSegmentsPerCircle * 6;
    const totalSize = dataSizePerCircle * collaborators.length;
    if (this.gl.collaborators.vertices.length < totalSize) {
      this.gl.collaborators.vertices = new Float32Array(totalSize);
    }
    const vertices = this.gl.collaborators.vertices;
    let offset4 = 0;
    const zoom = this.getZoom();
    for (const { cursor } of collaborators) {
      pie(vertices, {
        center: Vec.From(cursor),
        radius: 3 * zoom,
        offset: offset4,
        numArcSegments: numSegmentsPerCircle
      });
      offset4 += dataSizePerCircle;
    }
    this.gl.prepareTriangles(this.gl.collaborators, totalSize);
    offset4 = 0;
    for (const { color } of collaborators) {
      this.gl.setFillColor(getRgba(color));
      this.gl.context.drawArrays(this.gl.context.TRIANGLES, offset4 / 2, dataSizePerCircle / 2);
      offset4 += dataSizePerCircle;
    }
  }
};
__decorateClass6([
  computed
], MinimapManager.prototype, "getDpr", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getContentPageBounds", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getContentScreenBounds", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getCanvasSize", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getCanvasClientPosition", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getCanvasPageBounds", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getZoom", 1);
__decorateClass6([
  computed
], MinimapManager.prototype, "getCanvasPageBoundsArray", 1);

// node_modules/tldraw/dist-esm/lib/ui/components/Minimap/DefaultMinimap.mjs
function DefaultMinimap() {
  const editor = useEditor();
  const rCanvas = React45.useRef(null);
  const rPointing = React45.useRef(false);
  const minimapRef = React45.useRef();
  React45.useEffect(() => {
    const minimap = new MinimapManager(editor, rCanvas.current);
    minimapRef.current = minimap;
    return minimapRef.current.close;
  }, [editor]);
  const onDoubleClick = React45.useCallback((e) => {
    if (!editor.getCurrentPageShapeIds().size)
      return;
    if (!minimapRef.current)
      return;
    const point = minimapRef.current.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
    const clampedPoint = minimapRef.current.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
    minimapRef.current.originPagePoint.setTo(clampedPoint);
    minimapRef.current.originPageCenter.setTo(editor.getViewportPageBounds().center);
    editor.centerOnPoint(point, { duration: ANIMATION_MEDIUM_MS });
  }, [editor]);
  const onPointerDown = React45.useCallback((e) => {
    if (!minimapRef.current)
      return;
    const elm = e.currentTarget;
    setPointerCapture(elm, e);
    if (!editor.getCurrentPageShapeIds().size)
      return;
    rPointing.current = true;
    minimapRef.current.isInViewport = false;
    const point = minimapRef.current.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
    const clampedPoint = minimapRef.current.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
    const _vpPageBounds = editor.getViewportPageBounds();
    minimapRef.current.isInViewport = _vpPageBounds.containsPoint(clampedPoint);
    if (minimapRef.current.isInViewport) {
      minimapRef.current.originPagePoint.setTo(clampedPoint);
      minimapRef.current.originPageCenter.setTo(_vpPageBounds.center);
    } else {
      const delta = Vec.Sub(_vpPageBounds.center, _vpPageBounds.point);
      const pagePoint = Vec.Add(point, delta);
      minimapRef.current.originPagePoint.setTo(pagePoint);
      minimapRef.current.originPageCenter.setTo(point);
      editor.centerOnPoint(point, { duration: ANIMATION_MEDIUM_MS });
    }
    function release(e2) {
      if (elm) {
        releasePointerCapture(elm, e2);
      }
      rPointing.current = false;
      document.body.removeEventListener("pointerup", release);
    }
    document.body.addEventListener("pointerup", release);
  }, [editor]);
  const onPointerMove = React45.useCallback((e) => {
    if (!minimapRef.current)
      return;
    const point = minimapRef.current.minimapScreenPointToPagePoint(e.clientX, e.clientY, e.shiftKey, true);
    if (rPointing.current) {
      if (minimapRef.current.isInViewport) {
        const delta = minimapRef.current.originPagePoint.clone().sub(minimapRef.current.originPageCenter);
        editor.centerOnPoint(Vec.Sub(point, delta));
        return;
      }
      editor.centerOnPoint(point);
    }
    const pagePoint = minimapRef.current.getMinimapPagePoint(e.clientX, e.clientY);
    const screenPoint = editor.pageToScreen(pagePoint);
    const info = {
      type: "pointer",
      target: "canvas",
      name: "pointer_move",
      ...getPointerInfo(e),
      point: screenPoint,
      isPen: editor.getInstanceState().isPenMode
    };
    editor.dispatch(info);
  }, [editor]);
  const onWheel = React45.useCallback((e) => {
    const offset4 = normalizeWheel(e);
    editor.dispatch({
      type: "wheel",
      name: "wheel",
      delta: offset4,
      point: new Vec(e.clientX, e.clientY),
      shiftKey: e.shiftKey,
      altKey: e.altKey,
      ctrlKey: e.metaKey || e.ctrlKey
    });
  }, [editor]);
  const isDarkMode = useIsDarkMode();
  React45.useEffect(() => {
    setTimeout(() => {
      var _a2, _b2;
      (_a2 = minimapRef.current) == null ? void 0 : _a2.updateColors();
      (_b2 = minimapRef.current) == null ? void 0 : _b2.render();
    });
  }, [isDarkMode]);
  return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", { className: "tlui-minimap", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("canvas", {
    role: "img",
    "aria-label": "minimap",
    ref: rCanvas,
    className: "tlui-minimap__canvas",
    onDoubleClick,
    onPointerMove,
    onPointerDown,
    onWheel
  }) });
}

// node_modules/tldraw/dist-esm/lib/ui/components/NavigationPanel/DefaultNavigationPanel.mjs
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var import_react112 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/useLocalStorageState.mjs
var import_react111 = __toESM(require_react(), 1);
function useLocalStorageState(key, defaultValue) {
  const [state, setState] = import_react111.default.useState(defaultValue);
  import_react111.default.useLayoutEffect(() => {
    const value = getFromLocalStorage(key);
    if (value) {
      try {
        setState(JSON.parse(value));
      } catch (e) {
        console.error(`Could not restore value ${key} from local storage.`);
      }
    }
  }, [key]);
  const updateValue = import_react111.default.useCallback((setter) => {
    setState((s) => {
      const value = typeof setter === "function" ? setter(s) : setter;
      setInLocalStorage(key, JSON.stringify(value));
      return value;
    });
  }, [key]);
  return [state, updateValue];
}

// node_modules/tldraw/dist-esm/lib/ui/components/NavigationPanel/DefaultNavigationPanel.mjs
var DefaultNavigationPanel = (0, import_react112.memo)(function DefaultNavigationPanel2() {
  const actions = useActions();
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const [collapsed, setCollapsed] = useLocalStorageState("minimap", true);
  const toggleMinimap = (0, import_react112.useCallback)(() => {
    setCollapsed((s) => !s);
  }, [setCollapsed]);
  const { ZoomMenu, Minimap } = useTldrawUiComponents();
  if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { className: "tlui-navigation-panel", children: [
    /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("div", { className: "tlui-buttons__horizontal", children: ZoomMenu && breakpoint < PORTRAIT_BREAKPOINT.TABLET ? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ZoomMenu, {}) : collapsed ? /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(import_jsx_runtime121.Fragment, { children: [
      ZoomMenu && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ZoomMenu, {}),
      Minimap && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButton, {
        type: "icon",
        "data-testid": "minimap.toggle-button",
        title: msg2("navigation-zone.toggle-minimap"),
        className: "tlui-navigation-panel__toggle",
        onClick: toggleMinimap,
        children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
      })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(import_jsx_runtime121.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButton, {
        type: "icon",
        "data-testid": "minimap.zoom-out",
        title: `${msg2(unwrapLabel(actions["zoom-out"].label))} ${kbdStr(actions["zoom-out"].kbd)}`,
        onClick: () => actions["zoom-out"].onSelect("navigation-zone"),
        children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButtonIcon, { icon: "minus" })
      }),
      ZoomMenu && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(ZoomMenu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButton, {
        type: "icon",
        "data-testid": "minimap.zoom-in",
        title: `${msg2(unwrapLabel(actions["zoom-in"].label))} ${kbdStr(actions["zoom-in"].kbd)}`,
        onClick: () => actions["zoom-in"].onSelect("navigation-zone"),
        children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButtonIcon, { icon: "plus" })
      }),
      Minimap && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButton, {
        type: "icon",
        "data-testid": "minimap.toggle-button",
        title: msg2("navigation-zone.toggle-minimap"),
        className: "tlui-navigation-panel__toggle",
        onClick: toggleMinimap,
        children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
      })
    ] }) }),
    Minimap && breakpoint >= PORTRAIT_BREAKPOINT.TABLET && !collapsed && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Minimap, {})
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/DefaultPageMenu.mjs
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var import_react115 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemInput.mjs
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var import_react113 = __toESM(require_react(), 1);
var PageItemInput = function PageItemInput2({
  name,
  id,
  isCurrentPage
}) {
  const editor = useEditor();
  const rInput = (0, import_react113.useRef)(null);
  const handleChange = (0, import_react113.useCallback)((value) => {
    editor.renamePage(id, value ? value : "New Page", { ephemeral: true });
  }, [editor, id]);
  const handleComplete = (0, import_react113.useCallback)((value) => {
    editor.mark("rename page");
    editor.renamePage(id, value || "New Page", { ephemeral: false });
  }, [editor, id]);
  return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(TldrawUiInput, {
    className: "tlui-page-menu__item__input",
    ref: (el) => rInput.current = el,
    defaultValue: name,
    onValueChange: handleChange,
    onComplete: handleComplete,
    onCancel: handleComplete,
    shouldManuallyMaintainScrollPositionWhenFocused: true,
    autofocus: isCurrentPage,
    autoselect: true
  });
};

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemSubmenu.mjs
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var import_react114 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/edit-pages-shared.mjs
var onMovePage = (editor, id, from, to) => {
  let index2;
  const pages = editor.getPages();
  const below = from > to ? pages[to - 1] : pages[to];
  const above = from > to ? pages[to] : pages[to + 1];
  if (below && !above) {
    index2 = getIndexAbove(below.index);
  } else if (!below && above) {
    index2 = getIndexBelow(pages[0].index);
  } else {
    index2 = getIndexBetween(below.index, above.index);
  }
  if (index2 !== pages[from].index) {
    editor.mark("moving page");
    editor.updatePage({
      id,
      index: index2
    });
  }
};

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemSubmenu.mjs
var PageItemSubmenu = track(function PageItemSubmenu2({
  index: index2,
  listSize,
  item,
  onRename
}) {
  const editor = useEditor();
  const msg2 = useTranslation();
  const pages = editor.getPages();
  const onDuplicate = (0, import_react114.useCallback)(() => {
    editor.mark("creating page");
    const newId = PageRecordType.createId();
    editor.duplicatePage(item.id, newId);
  }, [editor, item]);
  const onMoveUp = (0, import_react114.useCallback)(() => {
    onMovePage(editor, item.id, index2, index2 - 1);
  }, [editor, item, index2]);
  const onMoveDown = (0, import_react114.useCallback)(() => {
    onMovePage(editor, item.id, index2, index2 + 1);
  }, [editor, item, index2]);
  const onDelete = (0, import_react114.useCallback)(() => {
    editor.mark("deleting page");
    editor.deletePage(item.id);
  }, [editor, item]);
  return /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(TldrawUiDropdownMenuRoot, { id: `page item submenu ${index2}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiButton, { type: "icon", title: msg2("page-menu.submenu.title"), children: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical" }) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiDropdownMenuContent, { alignOffset: 0, side: "right", sideOffset: -4, children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "page-menu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(TldrawUiMenuGroup, { id: "modify", children: [
        onRename && /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuItem, { id: "rename", label: "page-menu.submenu.rename", onSelect: onRename }),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuItem, {
          id: "duplicate",
          label: "page-menu.submenu.duplicate-page",
          onSelect: onDuplicate,
          disabled: pages.length >= MAX_PAGES
        }),
        index2 > 0 && /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuItem, {
          id: "move-up",
          onSelect: onMoveUp,
          label: "page-menu.submenu.move-up"
        }),
        index2 < listSize - 1 && /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuItem, {
          id: "move-down",
          label: "page-menu.submenu.move-down",
          onSelect: onMoveDown
        })
      ] }),
      listSize > 1 && /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuGroup, { id: "delete", children: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiMenuItem, { id: "delete", onSelect: onDelete, label: "page-menu.submenu.delete" }) })
    ] }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/DefaultPageMenu.mjs
var DefaultPageMenu = (0, import_react115.memo)(function DefaultPageMenu2() {
  const editor = useEditor();
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const handleOpenChange = (0, import_react115.useCallback)(() => setIsEditing(false), []);
  const [isOpen, onOpenChange] = useMenuIsOpen("page-menu", handleOpenChange);
  const ITEM_HEIGHT = 36;
  const rSortableContainer = (0, import_react115.useRef)(null);
  const pages = useValue("pages", () => editor.getPages(), [editor]);
  const currentPage = useValue("currentPage", () => editor.getCurrentPage(), [editor]);
  const currentPageId = useValue("currentPageId", () => editor.getCurrentPageId(), [editor]);
  const isReadonlyMode = useReadonly();
  const maxPageCountReached = useValue("maxPageCountReached", () => editor.getPages().length >= MAX_PAGES, [editor]);
  const isCoarsePointer = useValue("isCoarsePointer", () => editor.getInstanceState().isCoarsePointer, [editor]);
  const [isEditing, setIsEditing] = (0, import_react115.useState)(false);
  const toggleEditing = (0, import_react115.useCallback)(() => {
    if (isReadonlyMode)
      return;
    setIsEditing((s) => !s);
  }, [isReadonlyMode]);
  const rMutables = (0, import_react115.useRef)({
    isPointing: false,
    status: "idle",
    pointing: null,
    startY: 0,
    startIndex: 0,
    dragIndex: 0
  });
  const [sortablePositionItems, setSortablePositionItems] = (0, import_react115.useState)(Object.fromEntries(pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])));
  (0, import_react115.useLayoutEffect)(() => {
    setSortablePositionItems(Object.fromEntries(pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])));
  }, [ITEM_HEIGHT, pages]);
  (0, import_react115.useEffect)(() => {
    if (!isOpen)
      return;
    requestAnimationFrame(() => {
      const elm = document.querySelector(`[data-testid="page-menu-item-${currentPageId}"]`);
      if (elm) {
        const container = rSortableContainer.current;
        if (!container)
          return;
        const elmTopPosition = elm.offsetTop;
        const containerScrollTopPosition = container.scrollTop;
        if (elmTopPosition < containerScrollTopPosition) {
          container.scrollTo({ top: elmTopPosition });
        }
        const elmBottomPosition = elmTopPosition + ITEM_HEIGHT;
        const containerScrollBottomPosition = container.scrollTop + container.offsetHeight;
        if (elmBottomPosition > containerScrollBottomPosition) {
          container.scrollTo({ top: elmBottomPosition - container.offsetHeight });
        }
      }
    });
  }, [ITEM_HEIGHT, currentPageId, isOpen]);
  const handlePointerDown = (0, import_react115.useCallback)((e) => {
    const { clientY, currentTarget } = e;
    const {
      dataset: { id, index: index2 }
    } = currentTarget;
    if (!id || !index2)
      return;
    const mut = rMutables.current;
    setPointerCapture(e.currentTarget, e);
    mut.status = "pointing";
    mut.pointing = { id, index: +index2 };
    const current2 = sortablePositionItems[id];
    const dragY = current2.y;
    mut.startY = clientY;
    mut.startIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
  }, [ITEM_HEIGHT, pages.length, sortablePositionItems]);
  const handlePointerMove = (0, import_react115.useCallback)((e) => {
    const mut = rMutables.current;
    if (mut.status === "pointing") {
      const { clientY } = e;
      const offset4 = clientY - mut.startY;
      if (Math.abs(offset4) > 5) {
        mut.status = "dragging";
      }
    }
    if (mut.status === "dragging") {
      const { clientY } = e;
      const offsetY = clientY - mut.startY;
      const current2 = sortablePositionItems[mut.pointing.id];
      const { startIndex, pointing } = mut;
      const dragY = current2.y + offsetY;
      const dragIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
      const next = { ...sortablePositionItems };
      next[pointing.id] = {
        y: current2.y,
        offsetY,
        isSelected: true
      };
      if (dragIndex !== mut.dragIndex) {
        mut.dragIndex = dragIndex;
        for (let i = 0; i < pages.length; i++) {
          const item = pages[i];
          if (item.id === mut.pointing.id) {
            continue;
          }
          let { y } = next[item.id];
          if (dragIndex === startIndex) {
            y = i * ITEM_HEIGHT;
          } else if (dragIndex < startIndex) {
            if (dragIndex <= i && i < startIndex) {
              y = (i + 1) * ITEM_HEIGHT;
            } else {
              y = i * ITEM_HEIGHT;
            }
          } else if (dragIndex > startIndex) {
            if (dragIndex >= i && i > startIndex) {
              y = (i - 1) * ITEM_HEIGHT;
            } else {
              y = i * ITEM_HEIGHT;
            }
          }
          if (y !== next[item.id].y) {
            next[item.id] = { y, offsetY: 0, isSelected: true };
          }
        }
      }
      setSortablePositionItems(next);
    }
  }, [ITEM_HEIGHT, pages, sortablePositionItems]);
  const handlePointerUp = (0, import_react115.useCallback)((e) => {
    const mut = rMutables.current;
    if (mut.status === "dragging") {
      const { id, index: index2 } = mut.pointing;
      onMovePage(editor, id, index2, mut.dragIndex);
    }
    releasePointerCapture(e.currentTarget, e);
    mut.status = "idle";
  }, [editor]);
  const handleKeyDown = (0, import_react115.useCallback)((e) => {
    const mut = rMutables.current;
    if (e.key === "Escape") {
      if (mut.status === "dragging") {
        setSortablePositionItems(Object.fromEntries(pages.map((page, i) => [
          page.id,
          { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }
        ])));
      }
      mut.status = "idle";
    }
  }, [ITEM_HEIGHT, pages]);
  const handleCreatePageClick = (0, import_react115.useCallback)(() => {
    if (isReadonlyMode)
      return;
    editor.batch(() => {
      editor.mark("creating page");
      const newPageId = PageRecordType.createId();
      editor.createPage({ name: msg2("page-menu.new-page-initial-name"), id: newPageId });
      editor.setCurrentPage(newPageId);
      setIsEditing(true);
    });
  }, [editor, msg2, isReadonlyMode]);
  return /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiPopover, { id: "pages", onOpenChange, open: isOpen, children: [
    /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiPopoverTrigger, { "data-testid": "main.page-menu", children: /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiButton, {
      type: "menu",
      title: currentPage.name,
      "data-testid": "page-menu.button",
      className: "tlui-page-menu__trigger",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", { className: "tlui-page-menu__name", children: currentPage.name }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonIcon, { icon: "chevron-down", small: true })
      ]
    }) }),
    /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiPopoverContent, { side: "bottom", align: "start", sideOffset: 6, children: /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", { className: "tlui-page-menu__wrapper", children: [
      /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", { className: "tlui-page-menu__header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", { className: "tlui-page-menu__header__title", children: msg2("page-menu.title") }),
        !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
          /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButton, {
            type: "icon",
            "data-testid": "page-menu.edit",
            title: msg2(isEditing ? "page-menu.edit-done" : "page-menu.edit-start"),
            onClick: toggleEditing,
            children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonIcon, { icon: isEditing ? "check" : "edit" })
          }),
          /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButton, {
            type: "icon",
            "data-testid": "page-menu.create",
            title: msg2(maxPageCountReached ? "page-menu.max-page-count-reached" : "page-menu.create-new-page"),
            disabled: maxPageCountReached,
            onClick: handleCreatePageClick,
            children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonIcon, { icon: "plus" })
          })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", {
        "data-testid": "page-menu.list",
        className: "tlui-page-menu__list tlui-menu__group",
        style: { height: ITEM_HEIGHT * pages.length + 4 },
        ref: rSortableContainer,
        children: pages.map((page, index2) => {
          var _a2;
          const position = (_a2 = sortablePositionItems[page.id]) != null ? _a2 : {
            position: index2 * 40,
            offsetY: 0
          };
          return isEditing ? /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", {
            "data-testid": "page-menu.item",
            className: "tlui-page_menu__item__sortable",
            style: {
              zIndex: page.id === currentPage.id ? 888 : index2,
              transform: `translate(0px, ${position.y + position.offsetY}px)`
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButton, {
                type: "icon",
                tabIndex: -1,
                className: "tlui-page_menu__item__sortable__handle",
                onPointerDown: handlePointerDown,
                onPointerUp: handlePointerUp,
                onPointerMove: handlePointerMove,
                onKeyDown: handleKeyDown,
                "data-id": page.id,
                "data-index": index2,
                children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonIcon, { icon: "drag-handle-dots" })
              }),
              breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && isCoarsePointer ? /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiButton, {
                type: "normal",
                className: "tlui-page-menu__item__button",
                onClick: () => {
                  const name = window.prompt("Rename page", page.name);
                  if (name && name !== page.name) {
                    editor.renamePage(page.id, name);
                  }
                },
                onDoubleClick: toggleEditing,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                  /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonLabel, { children: page.name })
                ]
              }) : /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", {
                className: "tlui-page_menu__item__sortable__title",
                style: { height: ITEM_HEIGHT },
                children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageItemInput, {
                  id: page.id,
                  name: page.name,
                  isCurrentPage: page.id === currentPage.id
                })
              }),
              !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", { className: "tlui-page_menu__item__submenu", "data-isediting": isEditing, children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageItemSubmenu, { index: index2, item: page, listSize: pages.length }) })
            ]
          }, page.id + "_editing") : /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", { "data-testid": "page-menu.item", className: "tlui-page-menu__item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiButton, {
              type: "normal",
              className: "tlui-page-menu__item__button",
              onClick: () => editor.setCurrentPage(page.id),
              onDoubleClick: toggleEditing,
              title: msg2("page-menu.go-to-page"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonLabel, { children: page.name })
              ]
            }),
            !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("div", { className: "tlui-page_menu__item__submenu", children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PageItemSubmenu, {
              index: index2,
              item: page,
              listSize: pages.length,
              onRename: () => {
                if (editor.environment.isIos) {
                  const name = window.prompt("Rename page", page.name);
                  if (name && name !== page.name) {
                    editor.renamePage(page.id, name);
                  }
                } else {
                  editor.batch(() => {
                    setIsEditing(true);
                    editor.setCurrentPage(page.id);
                  });
                }
              }
            }) })
          ] }, page.id);
        })
      })
    ] }) })
  ] });
});

// node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActions.mjs
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var import_react116 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActionsContent.mjs
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
function DefaultQuickActionsContent() {
  const actions = useActions();
  const editor = useEditor();
  const canUndo = useCanUndo();
  const canRedo = useCanRedo();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  const isReadonlyMode = useReadonly();
  const isInAcceptableReadonlyState = useValue("should display quick actions", () => editor.isInAny("select", "hand", "zoom"), [editor]);
  if (isReadonlyMode && !isInAcceptableReadonlyState)
    return;
  return /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)(import_jsx_runtime125.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiMenuItem, { ...actions["undo"], disabled: !canUndo }),
    /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiMenuItem, { ...actions["redo"], disabled: !canRedo }),
    /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiMenuItem, { ...actions["delete"], disabled: !oneSelected }),
    /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiMenuItem, { ...actions["duplicate"], disabled: !oneSelected })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActions.mjs
var DefaultQuickActions = (0, import_react116.memo)(function DefaultQuickActions2({
  children
}) {
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DefaultQuickActionsContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(TldrawUiMenuContextProvider, { type: "small-icons", sourceId: "quick-actions", children: content });
});

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanel.mjs
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var import_classnames24 = __toESM(require_classnames(), 1);
var import_react122 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/useRelevantStyles.mjs
var selectToolStyles = Object.freeze([
  DefaultColorStyle,
  DefaultDashStyle,
  DefaultFillStyle,
  DefaultSizeStyle
]);
function useRelevantStyles(stylesToCheck = selectToolStyles) {
  const editor = useEditor();
  return useValue("getRelevantStyles", () => {
    var _a2;
    const styles = new SharedStyleMap(editor.getSharedStyles());
    const isInShapeSpecificTool = !!((_a2 = editor.root.getCurrent()) == null ? void 0 : _a2.shapeType);
    const hasShapesSelected = editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
    if (styles.size === 0 && editor.isIn("select") && editor.getSelectedShapeIds().length === 0) {
      for (const style of stylesToCheck) {
        styles.applyValue(style, editor.getStyleForNextShape(style));
      }
    }
    if (isInShapeSpecificTool || hasShapesSelected || styles.size > 0) {
      return styles;
    }
    return null;
  }, [editor]);
}

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanelContent.mjs
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var import_react121 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/styles.mjs
var STYLES = {
  color: [
    { value: "black", icon: "color" },
    { value: "grey", icon: "color" },
    { value: "light-violet", icon: "color" },
    { value: "violet", icon: "color" },
    { value: "blue", icon: "color" },
    { value: "light-blue", icon: "color" },
    { value: "yellow", icon: "color" },
    { value: "orange", icon: "color" },
    { value: "green", icon: "color" },
    { value: "light-green", icon: "color" },
    { value: "light-red", icon: "color" },
    { value: "red", icon: "color" }
  ],
  fill: [
    { value: "none", icon: "fill-none" },
    { value: "semi", icon: "fill-semi" },
    { value: "solid", icon: "fill-solid" },
    { value: "pattern", icon: "fill-pattern" }
  ],
  dash: [
    { value: "draw", icon: "dash-draw" },
    { value: "dashed", icon: "dash-dashed" },
    { value: "dotted", icon: "dash-dotted" },
    { value: "solid", icon: "dash-solid" }
  ],
  size: [
    { value: "s", icon: "size-small" },
    { value: "m", icon: "size-medium" },
    { value: "l", icon: "size-large" },
    { value: "xl", icon: "size-extra-large" }
  ],
  font: [
    { value: "draw", icon: "font-draw" },
    { value: "sans", icon: "font-sans" },
    { value: "serif", icon: "font-serif" },
    { value: "mono", icon: "font-mono" }
  ],
  horizontalAlign: [
    { value: "start", icon: "text-align-left" },
    { value: "middle", icon: "text-align-center" },
    { value: "end", icon: "text-align-right" }
  ],
  verticalAlign: [
    { value: "start", icon: "vertical-align-start" },
    { value: "middle", icon: "vertical-align-center" },
    { value: "end", icon: "vertical-align-end" }
  ],
  geo: [
    { value: "rectangle", icon: "geo-rectangle" },
    { value: "ellipse", icon: "geo-ellipse" },
    { value: "cloud", icon: "geo-cloud" },
    { value: "triangle", icon: "geo-triangle" },
    { value: "diamond", icon: "geo-diamond" },
    { value: "pentagon", icon: "geo-pentagon" },
    { value: "hexagon", icon: "geo-hexagon" },
    { value: "octagon", icon: "geo-octagon" },
    { value: "star", icon: "geo-star" },
    { value: "rhombus", icon: "geo-rhombus" },
    { value: "rhombus-2", icon: "geo-rhombus-2" },
    { value: "oval", icon: "geo-oval" },
    { value: "trapezoid", icon: "geo-trapezoid" },
    { value: "arrow-right", icon: "geo-arrow-right" },
    { value: "arrow-left", icon: "geo-arrow-left" },
    { value: "arrow-up", icon: "geo-arrow-up" },
    { value: "arrow-down", icon: "geo-arrow-down" },
    { value: "x-box", icon: "geo-x-box" },
    { value: "check-box", icon: "geo-check-box" }
  ],
  arrowheadStart: [
    { value: "none", icon: "arrowhead-none" },
    { value: "arrow", icon: "arrowhead-arrow" },
    { value: "triangle", icon: "arrowhead-triangle" },
    { value: "square", icon: "arrowhead-square" },
    { value: "dot", icon: "arrowhead-dot" },
    { value: "diamond", icon: "arrowhead-diamond" },
    { value: "inverted", icon: "arrowhead-triangle-inverted" },
    { value: "bar", icon: "arrowhead-bar" }
  ],
  arrowheadEnd: [
    { value: "none", icon: "arrowhead-none" },
    { value: "arrow", icon: "arrowhead-arrow" },
    { value: "triangle", icon: "arrowhead-triangle" },
    { value: "square", icon: "arrowhead-square" },
    { value: "dot", icon: "arrowhead-dot" },
    { value: "diamond", icon: "arrowhead-diamond" },
    { value: "inverted", icon: "arrowhead-triangle-inverted" },
    { value: "bar", icon: "arrowhead-bar" }
  ],
  spline: [
    { value: "line", icon: "spline-line" },
    { value: "cubic", icon: "spline-cubic" }
  ]
};

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var import_classnames23 = __toESM(require_classnames(), 1);
var import_react117 = __toESM(require_react(), 1);
function _TldrawUiButtonPicker(props) {
  const {
    uiType,
    items,
    title,
    style,
    value,
    onValueChange,
    theme
  } = props;
  const editor = useEditor();
  const msg2 = useTranslation();
  const rPointing = (0, import_react117.useRef)(false);
  const {
    handleButtonClick,
    handleButtonPointerDown,
    handleButtonPointerEnter,
    handleButtonPointerUp
  } = (0, import_react117.useMemo)(() => {
    const handlePointerUp = () => {
      rPointing.current = false;
      window.removeEventListener("pointerup", handlePointerUp);
    };
    const handleButtonClick2 = (e) => {
      const { id } = e.currentTarget.dataset;
      if (value.type === "shared" && value.value === id)
        return;
      editor.mark("point picker item");
      onValueChange(style, id, false);
    };
    const handleButtonPointerDown2 = (e) => {
      const { id } = e.currentTarget.dataset;
      editor.mark("point picker item");
      onValueChange(style, id, true);
      rPointing.current = true;
      window.addEventListener("pointerup", handlePointerUp);
    };
    const handleButtonPointerEnter2 = (e) => {
      if (!rPointing.current)
        return;
      const { id } = e.currentTarget.dataset;
      onValueChange(style, id, true);
    };
    const handleButtonPointerUp2 = (e) => {
      const { id } = e.currentTarget.dataset;
      if (value.type === "shared" && value.value === id)
        return;
      onValueChange(style, id, false);
    };
    return {
      handleButtonClick: handleButtonClick2,
      handleButtonPointerDown: handleButtonPointerDown2,
      handleButtonPointerEnter: handleButtonPointerEnter2,
      handleButtonPointerUp: handleButtonPointerUp2
    };
  }, [value, editor, onValueChange, style]);
  return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("div", { "data-testid": `style.${uiType}`, className: (0, import_classnames23.default)("tlui-buttons__grid"), children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(TldrawUiButton, {
    type: "icon",
    "data-id": item.value,
    "data-testid": `style.${uiType}.${item.value}`,
    "aria-label": item.value,
    "data-state": value.type === "shared" && value.value === item.value ? "hinted" : void 0,
    title: title + " \u2014 " + msg2(`${uiType}-style.${item.value}`),
    className: (0, import_classnames23.default)("tlui-button-grid__button"),
    style: style === DefaultColorStyle ? { color: theme[item.value].solid } : void 0,
    onPointerEnter: handleButtonPointerEnter,
    onPointerDown: handleButtonPointerDown,
    onPointerUp: handleButtonPointerUp,
    onClick: handleButtonClick,
    children: /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(TldrawUiButtonIcon, { icon: item.icon })
  }, item.value)) });
}
var TldrawUiButtonPicker = (0, import_react117.memo)(_TldrawUiButtonPicker);

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiSlider.mjs
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);

// node_modules/@radix-ui/react-slider/dist/index.mjs
var import_react119 = __toESM(require_react(), 1);

// node_modules/@radix-ui/number/dist/index.mjs
function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min3, max2]) {
  return Math.min(max2, Math.max(min3, value));
}

// node_modules/@radix-ui/react-use-previous/dist/index.mjs
var import_react118 = __toESM(require_react(), 1);
function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
  const ref = (0, import_react118.useRef)({
    value,
    previous: value
  });
  return (0, import_react118.useMemo)(() => {
    if (ref.current.value !== value) {
      ref.current.previous = ref.current.value;
      ref.current.value = value;
    }
    return ref.current.previous;
  }, [
    value
  ]);
}

// node_modules/@radix-ui/react-slider/dist/index.mjs
var $faa2e61a3361514f$var$PAGE_KEYS = [
  "PageUp",
  "PageDown"
];
var $faa2e61a3361514f$var$ARROW_KEYS = [
  "ArrowUp",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight"
];
var $faa2e61a3361514f$var$BACK_KEYS = {
  "from-left": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowLeft"
  ],
  "from-right": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowRight"
  ],
  "from-bottom": [
    "Home",
    "PageDown",
    "ArrowDown",
    "ArrowLeft"
  ],
  "from-top": [
    "Home",
    "PageDown",
    "ArrowUp",
    "ArrowLeft"
  ]
};
var $faa2e61a3361514f$var$SLIDER_NAME = "Slider";
var [$faa2e61a3361514f$var$Collection, $faa2e61a3361514f$var$useCollection, $faa2e61a3361514f$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($faa2e61a3361514f$var$SLIDER_NAME);
var [$faa2e61a3361514f$var$createSliderContext, $faa2e61a3361514f$export$ef72632d7b901f97] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($faa2e61a3361514f$var$SLIDER_NAME, [
  $faa2e61a3361514f$var$createCollectionScope
]);
var [$faa2e61a3361514f$var$SliderProvider, $faa2e61a3361514f$var$useSliderContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME);
var $faa2e61a3361514f$export$472062a354075cee = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { name, min: min3 = 0, max: max2 = 100, step = 1, orientation = "horizontal", disabled = false, minStepsBetweenThumbs = 0, defaultValue = [
    min3
  ], value: value1, onValueChange = () => {
  }, onValueCommit = () => {
  }, inverted = false, ...sliderProps } = props;
  const [slider, setSlider] = (0, import_react119.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setSlider(node));
  const thumbRefs = (0, import_react119.useRef)(/* @__PURE__ */ new Set());
  const valueIndexToChangeRef = (0, import_react119.useRef)(0);
  const isHorizontal = orientation === "horizontal";
  const isFormControl = slider ? Boolean(slider.closest("form")) : true;
  const SliderOrientation = isHorizontal ? $faa2e61a3361514f$var$SliderHorizontal : $faa2e61a3361514f$var$SliderVertical;
  const [values = [], setValues] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: value1,
    defaultProp: defaultValue,
    onChange: (value) => {
      var _thumbs$valueIndexToC;
      const thumbs = [
        ...thumbRefs.current
      ];
      (_thumbs$valueIndexToC = thumbs[valueIndexToChangeRef.current]) === null || _thumbs$valueIndexToC === void 0 || _thumbs$valueIndexToC.focus();
      onValueChange(value);
    }
  });
  const valuesBeforeSlideStartRef = (0, import_react119.useRef)(values);
  function handleSlideStart(value) {
    const closestIndex = $faa2e61a3361514f$var$getClosestValueIndex(values, value);
    updateValues(value, closestIndex);
  }
  function handleSlideMove(value) {
    updateValues(value, valueIndexToChangeRef.current);
  }
  function handleSlideEnd() {
    const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
    const nextValue = values[valueIndexToChangeRef.current];
    const hasChanged = nextValue !== prevValue;
    if (hasChanged)
      onValueCommit(values);
  }
  function updateValues(value, atIndex, { commit } = {
    commit: false
  }) {
    const decimalCount = $faa2e61a3361514f$var$getDecimalCount(step);
    const snapToStep = $faa2e61a3361514f$var$roundValue(Math.round((value - min3) / step) * step + min3, decimalCount);
    const nextValue = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(snapToStep, [
      min3,
      max2
    ]);
    setValues((prevValues = []) => {
      const nextValues = $faa2e61a3361514f$var$getNextSortedValues(prevValues, nextValue, atIndex);
      if ($faa2e61a3361514f$var$hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
        valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
        const hasChanged = String(nextValues) !== String(prevValues);
        if (hasChanged && commit)
          onValueCommit(nextValues);
        return hasChanged ? nextValues : prevValues;
      } else
        return prevValues;
    });
  }
  return /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderProvider, {
    scope: props.__scopeSlider,
    disabled,
    min: min3,
    max: max2,
    valueIndexToChangeRef,
    thumbs: thumbRefs.current,
    values,
    orientation
  }, /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$Collection.Provider, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$Collection.Slot, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ (0, import_react119.createElement)(SliderOrientation, _extends({
    "aria-disabled": disabled,
    "data-disabled": disabled ? "" : void 0
  }, sliderProps, {
    ref: composedRefs,
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(sliderProps.onPointerDown, () => {
      if (!disabled)
        valuesBeforeSlideStartRef.current = values;
    }),
    min: min3,
    max: max2,
    inverted,
    onSlideStart: disabled ? void 0 : handleSlideStart,
    onSlideMove: disabled ? void 0 : handleSlideMove,
    onSlideEnd: disabled ? void 0 : handleSlideEnd,
    onHomeKeyDown: () => !disabled && updateValues(min3, 0, {
      commit: true
    }),
    onEndKeyDown: () => !disabled && updateValues(max2, values.length - 1, {
      commit: true
    }),
    onStepKeyDown: ({ event, direction: stepDirection }) => {
      if (!disabled) {
        const isPageKey = $faa2e61a3361514f$var$PAGE_KEYS.includes(event.key);
        const isSkipKey = isPageKey || event.shiftKey && $faa2e61a3361514f$var$ARROW_KEYS.includes(event.key);
        const multiplier = isSkipKey ? 10 : 1;
        const atIndex = valueIndexToChangeRef.current;
        const value = values[atIndex];
        const stepInDirection = step * multiplier * stepDirection;
        updateValues(value + stepInDirection, atIndex, {
          commit: true
        });
      }
    }
  })))), isFormControl && values.map((value, index2) => /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$BubbleInput, {
    key: index2,
    name: name ? name + (values.length > 1 ? "[]" : "") : void 0,
    value
  })));
});
var [$faa2e61a3361514f$var$SliderOrientationProvider, $faa2e61a3361514f$var$useSliderOrientationContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  size: "width",
  direction: 1
});
var $faa2e61a3361514f$var$SliderHorizontal = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { min: min3, max: max2, dir, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown, ...sliderProps } = props;
  const [slider, setSlider] = (0, import_react119.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setSlider(node));
  const rectRef = (0, import_react119.useRef)();
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  const isDirectionLTR = direction === "ltr";
  const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
  function getValueFromPointer(pointerPosition) {
    const rect = rectRef.current || slider.getBoundingClientRect();
    const input = [
      0,
      rect.width
    ];
    const output = isSlidingFromLeft ? [
      min3,
      max2
    ] : [
      max2,
      min3
    ];
    const value = $faa2e61a3361514f$var$linearScale(input, output);
    rectRef.current = rect;
    return value(pointerPosition - rect.left);
  }
  return /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: isSlidingFromLeft ? "left" : "right",
    endEdge: isSlidingFromLeft ? "right" : "left",
    direction: isSlidingFromLeft ? 1 : -1,
    size: "width"
  }, /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderImpl, _extends({
    dir: direction,
    "data-orientation": "horizontal"
  }, sliderProps, {
    ref: composedRefs,
    style: {
      ...sliderProps.style,
      ["--radix-slider-thumb-transform"]: "translateX(-50%)"
    },
    onSlideStart: (event) => {
      const value = getValueFromPointer(event.clientX);
      onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
    },
    onSlideMove: (event) => {
      const value = getValueFromPointer(event.clientX);
      onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
    },
    onSlideEnd: () => {
      rectRef.current = void 0;
      onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
    },
    onStepKeyDown: (event) => {
      const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
      const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
      onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
        event,
        direction: isBackKey ? -1 : 1
      });
    }
  })));
});
var $faa2e61a3361514f$var$SliderVertical = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { min: min3, max: max2, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown, ...sliderProps } = props;
  const sliderRef = (0, import_react119.useRef)(null);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, sliderRef);
  const rectRef = (0, import_react119.useRef)();
  const isSlidingFromBottom = !inverted;
  function getValueFromPointer(pointerPosition) {
    const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
    const input = [
      0,
      rect.height
    ];
    const output = isSlidingFromBottom ? [
      max2,
      min3
    ] : [
      min3,
      max2
    ];
    const value = $faa2e61a3361514f$var$linearScale(input, output);
    rectRef.current = rect;
    return value(pointerPosition - rect.top);
  }
  return /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: isSlidingFromBottom ? "bottom" : "top",
    endEdge: isSlidingFromBottom ? "top" : "bottom",
    size: "height",
    direction: isSlidingFromBottom ? 1 : -1
  }, /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderImpl, _extends({
    "data-orientation": "vertical"
  }, sliderProps, {
    ref,
    style: {
      ...sliderProps.style,
      ["--radix-slider-thumb-transform"]: "translateY(50%)"
    },
    onSlideStart: (event) => {
      const value = getValueFromPointer(event.clientY);
      onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
    },
    onSlideMove: (event) => {
      const value = getValueFromPointer(event.clientY);
      onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
    },
    onSlideEnd: () => {
      rectRef.current = void 0;
      onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
    },
    onStepKeyDown: (event) => {
      const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
      const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
      onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
        event,
        direction: isBackKey ? -1 : 1
      });
    }
  })));
});
var $faa2e61a3361514f$var$SliderImpl = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { __scopeSlider, onSlideStart, onSlideMove, onSlideEnd, onHomeKeyDown, onEndKeyDown, onStepKeyDown, ...sliderProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$SLIDER_NAME, __scopeSlider);
  return /* @__PURE__ */ (0, import_react119.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, sliderProps, {
    ref: forwardedRef,
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key === "Home") {
        onHomeKeyDown(event);
        event.preventDefault();
      } else if (event.key === "End") {
        onEndKeyDown(event);
        event.preventDefault();
      } else if ($faa2e61a3361514f$var$PAGE_KEYS.concat($faa2e61a3361514f$var$ARROW_KEYS).includes(event.key)) {
        onStepKeyDown(event);
        event.preventDefault();
      }
    }),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      const target = event.target;
      target.setPointerCapture(event.pointerId);
      event.preventDefault();
      if (context.thumbs.has(target))
        target.focus();
      else
        onSlideStart(event);
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event) => {
      const target = event.target;
      if (target.hasPointerCapture(event.pointerId))
        onSlideMove(event);
    }),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
      const target = event.target;
      if (target.hasPointerCapture(event.pointerId)) {
        target.releasePointerCapture(event.pointerId);
        onSlideEnd(event);
      }
    })
  }));
});
var $faa2e61a3361514f$var$TRACK_NAME = "SliderTrack";
var $faa2e61a3361514f$export$105594979f116971 = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { __scopeSlider, ...trackProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$TRACK_NAME, __scopeSlider);
  return /* @__PURE__ */ (0, import_react119.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-disabled": context.disabled ? "" : void 0,
    "data-orientation": context.orientation
  }, trackProps, {
    ref: forwardedRef
  }));
});
var $faa2e61a3361514f$var$RANGE_NAME = "SliderRange";
var $faa2e61a3361514f$export$a5cf38a7a000fe77 = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { __scopeSlider, ...rangeProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
  const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
  const ref = (0, import_react119.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  const valuesCount = context.values.length;
  const percentages = context.values.map((value) => $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max));
  const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
  const offsetEnd = 100 - Math.max(...percentages);
  return /* @__PURE__ */ (0, import_react119.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-orientation": context.orientation,
    "data-disabled": context.disabled ? "" : void 0
  }, rangeProps, {
    ref: composedRefs,
    style: {
      ...props.style,
      [orientation.startEdge]: offsetStart + "%",
      [orientation.endEdge]: offsetEnd + "%"
    }
  }));
});
var $faa2e61a3361514f$var$THUMB_NAME = "SliderThumb";
var $faa2e61a3361514f$export$2c1b491743890dec = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const getItems = $faa2e61a3361514f$var$useCollection(props.__scopeSlider);
  const [thumb, setThumb] = (0, import_react119.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setThumb(node));
  const index2 = (0, import_react119.useMemo)(() => thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1, [
    getItems,
    thumb
  ]);
  return /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$SliderThumbImpl, _extends({}, props, {
    ref: composedRefs,
    index: index2
  }));
});
var $faa2e61a3361514f$var$SliderThumbImpl = /* @__PURE__ */ (0, import_react119.forwardRef)((props, forwardedRef) => {
  const { __scopeSlider, index: index2, ...thumbProps } = props;
  const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
  const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
  const [thumb, setThumb] = (0, import_react119.useState)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node) => setThumb(node));
  const size4 = $db6c3485150b8e66$export$1ab7ae714698c4b8(thumb);
  const value = context.values[index2];
  const percent = value === void 0 ? 0 : $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max);
  const label = $faa2e61a3361514f$var$getLabel(index2, context.values.length);
  const orientationSize = size4 === null || size4 === void 0 ? void 0 : size4[orientation.size];
  const thumbInBoundsOffset = orientationSize ? $faa2e61a3361514f$var$getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
  (0, import_react119.useEffect)(() => {
    if (thumb) {
      context.thumbs.add(thumb);
      return () => {
        context.thumbs.delete(thumb);
      };
    }
  }, [
    thumb,
    context.thumbs
  ]);
  return /* @__PURE__ */ (0, import_react119.createElement)("span", {
    style: {
      transform: "var(--radix-slider-thumb-transform)",
      position: "absolute",
      [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
    }
  }, /* @__PURE__ */ (0, import_react119.createElement)($faa2e61a3361514f$var$Collection.ItemSlot, {
    scope: props.__scopeSlider
  }, /* @__PURE__ */ (0, import_react119.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    role: "slider",
    "aria-label": props["aria-label"] || label,
    "aria-valuemin": context.min,
    "aria-valuenow": value,
    "aria-valuemax": context.max,
    "aria-orientation": context.orientation,
    "data-orientation": context.orientation,
    "data-disabled": context.disabled ? "" : void 0,
    tabIndex: context.disabled ? void 0 : 0
  }, thumbProps, {
    ref: composedRefs,
    style: value === void 0 ? {
      display: "none"
    } : props.style,
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => {
      context.valueIndexToChangeRef.current = index2;
    })
  }))));
});
var $faa2e61a3361514f$var$BubbleInput = (props) => {
  const { value, ...inputProps } = props;
  const ref = (0, import_react119.useRef)(null);
  const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value);
  (0, import_react119.useEffect)(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
    const setValue = descriptor.set;
    if (prevValue !== value && setValue) {
      const event = new Event("input", {
        bubbles: true
      });
      setValue.call(input, value);
      input.dispatchEvent(event);
    }
  }, [
    prevValue,
    value
  ]);
  return /* @__PURE__ */ (0, import_react119.createElement)("input", _extends({
    style: {
      display: "none"
    }
  }, inputProps, {
    ref,
    defaultValue: value
  }));
};
function $faa2e61a3361514f$var$getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [
    ...prevValues
  ];
  nextValues[atIndex] = nextValue;
  return nextValues.sort((a, b) => a - b);
}
function $faa2e61a3361514f$var$convertValueToPercentage(value, min3, max2) {
  const maxSteps = max2 - min3;
  const percentPerStep = 100 / maxSteps;
  const percentage = percentPerStep * (value - min3);
  return $ae6933e535247d3d$export$7d15b64cf5a3a4c4(percentage, [
    0,
    100
  ]);
}
function $faa2e61a3361514f$var$getLabel(index2, totalValues) {
  if (totalValues > 2)
    return `Value ${index2 + 1} of ${totalValues}`;
  else if (totalValues === 2)
    return [
      "Minimum",
      "Maximum"
    ][index2];
  else
    return void 0;
}
function $faa2e61a3361514f$var$getClosestValueIndex(values, nextValue) {
  if (values.length === 1)
    return 0;
  const distances = values.map((value) => Math.abs(value - nextValue));
  const closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function $faa2e61a3361514f$var$getThumbInBoundsOffset(width, left, direction) {
  const halfWidth = width / 2;
  const halfPercent = 50;
  const offset4 = $faa2e61a3361514f$var$linearScale([
    0,
    halfPercent
  ], [
    0,
    halfWidth
  ]);
  return (halfWidth - offset4(left) * direction) * direction;
}
function $faa2e61a3361514f$var$getStepsBetweenValues(values) {
  return values.slice(0, -1).map((value, index2) => values[index2 + 1] - value);
}
function $faa2e61a3361514f$var$hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = $faa2e61a3361514f$var$getStepsBetweenValues(values);
    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return true;
}
function $faa2e61a3361514f$var$linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function $faa2e61a3361514f$var$getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function $faa2e61a3361514f$var$roundValue(value, decimalCount) {
  const rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
var $faa2e61a3361514f$export$be92b6f5f03c0fe9 = $faa2e61a3361514f$export$472062a354075cee;
var $faa2e61a3361514f$export$13921ac0cc260818 = $faa2e61a3361514f$export$105594979f116971;
var $faa2e61a3361514f$export$9a58ef0d7ad3278c = $faa2e61a3361514f$export$a5cf38a7a000fe77;
var $faa2e61a3361514f$export$6521433ed15a34db = $faa2e61a3361514f$export$2c1b491743890dec;

// node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiSlider.mjs
var import_react120 = __toESM(require_react(), 1);
var TldrawUiSlider = (0, import_react120.memo)(function Slider(props) {
  const { title, steps, value, label, onValueChange } = props;
  const editor = useEditor();
  const msg2 = useTranslation();
  const handleValueChange = (0, import_react120.useCallback)((value2) => {
    onValueChange(value2[0], true);
  }, [onValueChange]);
  const handlePointerDown = (0, import_react120.useCallback)(() => {
    editor.mark("click slider");
  }, [editor]);
  const handlePointerUp = (0, import_react120.useCallback)(() => {
    if (!value)
      return;
    onValueChange(value, false);
  }, [value, onValueChange]);
  return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)("div", { className: "tlui-slider__container", children: /* @__PURE__ */ (0, import_jsx_runtime128.jsxs)($faa2e61a3361514f$export$be92b6f5f03c0fe9, {
    "data-testid": props["data-testid"],
    className: "tlui-slider",
    "area-label": "Opacity",
    dir: "ltr",
    min: 0,
    max: steps,
    step: 1,
    value: value ? [value] : void 0,
    onPointerDown: handlePointerDown,
    onValueChange: handleValueChange,
    onPointerUp: handlePointerUp,
    title: title + " \u2014 " + msg2(label),
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime128.jsx)($faa2e61a3361514f$export$13921ac0cc260818, { className: "tlui-slider__track", dir: "ltr", children: value !== null && /* @__PURE__ */ (0, import_jsx_runtime128.jsx)($faa2e61a3361514f$export$9a58ef0d7ad3278c, { className: "tlui-slider__range", dir: "ltr" }) }),
      value !== null && /* @__PURE__ */ (0, import_jsx_runtime128.jsx)($faa2e61a3361514f$export$6521433ed15a34db, { className: "tlui-slider__thumb", dir: "ltr" })
    ]
  }) });
});

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DoubleDropdownPicker.mjs
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var React47 = __toESM(require_react(), 1);
function _DoubleDropdownPicker({
  label,
  uiTypeA,
  uiTypeB,
  labelA,
  labelB,
  itemsA,
  itemsB,
  styleA,
  styleB,
  valueA,
  valueB,
  onValueChange
}) {
  const msg2 = useTranslation();
  const iconA = React47.useMemo(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = itemsA.find((item) => valueA.type === "shared" && valueA.value === item.value)) == null ? void 0 : _a2.icon) != null ? _b2 : "mixed";
  }, [itemsA, valueA]);
  const iconB = React47.useMemo(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = itemsB.find((item) => valueB.type === "shared" && valueB.value === item.value)) == null ? void 0 : _a2.icon) != null ? _b2 : "mixed";
  }, [itemsB, valueB]);
  if (valueA === void 0 && valueB === void 0)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "tlui-style-panel__double-select-picker", children: [
    /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { title: msg2(label), className: "tlui-style-panel__double-select-picker-label", children: msg2(label) }),
    /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
      /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeA} A`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButton, {
          type: "icon",
          "data-testid": `style.${uiTypeA}`,
          title: msg2(labelA) + " \u2014 " + (valueA === null || valueA.type === "mixed" ? msg2("style-panel.mixed") : msg2(`${uiTypeA}-style.${valueA.value}`)),
          children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButtonIcon, { icon: iconA, small: true, invertIcon: true })
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuContent, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "tlui-buttons__grid", children: itemsA.map((item, i) => {
          return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuItem, { "data-testid": `style.${uiTypeA}.${item.value}`, children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButton, {
            type: "icon",
            onClick: () => onValueChange(styleA, item.value, false),
            title: `${msg2(labelA)} \u2014 ${msg2(`${uiTypeA}-style.${item.value}`)}`,
            children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButtonIcon, { icon: item.icon, invertIcon: true })
          }, item.value) }, i);
        }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeB}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButton, {
          type: "icon",
          "data-testid": `style.${uiTypeB}`,
          title: msg2(labelB) + " \u2014 " + (valueB === null || valueB.type === "mixed" ? msg2("style-panel.mixed") : msg2(`${uiTypeB}-style.${valueB.value}`)),
          children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButtonIcon, { icon: iconB, small: true })
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuContent, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("div", { className: "tlui-buttons__grid", children: itemsB.map((item) => {
          return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButton, {
            type: "icon",
            title: `${msg2(labelB)} \u2014 ${msg2(`${uiTypeB}-style.${item.value}`)}`,
            "data-testid": `style.${uiTypeB}.${item.value}`,
            onClick: () => onValueChange(styleB, item.value, false),
            children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiButtonIcon, { icon: item.icon })
          }) }, item.value);
        }) }) })
      ] })
    ] })
  ] });
}
var DoubleDropdownPicker = React47.memo(_DoubleDropdownPicker);

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DropdownPicker.mjs
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var React48 = __toESM(require_react(), 1);
function _DropdownPicker({
  id,
  label,
  uiType,
  style,
  items,
  type,
  value,
  onValueChange
}) {
  const msg2 = useTranslation();
  const editor = useEditor();
  const icon = React48.useMemo(() => {
    var _a2;
    return (_a2 = items.find((item) => value.type === "shared" && item.value === value.value)) == null ? void 0 : _a2.icon;
  }, [items, value]);
  const titleStr = value.type === "mixed" ? msg2("style-panel.mixed") : msg2(`${uiType}-style.${value.value}`);
  const labelStr = label ? msg2(label) : "";
  return /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${id}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(TldrawUiButton, { type, "data-testid": `style.${uiType}`, title: titleStr, children: [
      /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiButtonLabel, { children: labelStr }),
      /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiButtonIcon, { icon: icon != null ? icon : "mixed" })
    ] }) }),
    /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiDropdownMenuContent, { side: "left", align: "center", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)("div", { className: "tlui-buttons__grid", children: items.map((item) => {
      return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiButton, {
        type: "icon",
        "data-testid": `style.${uiType}.${item.value}`,
        title: msg2(`${uiType}-style.${item.value}`),
        onClick: () => {
          editor.mark("select style dropdown item");
          onValueChange(style, item.value, false);
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiButtonIcon, { icon: item.icon })
      }) }, item.value);
    }) }) })
  ] });
}
var DropdownPicker = React48.memo(_DropdownPicker);

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanelContent.mjs
function DefaultStylePanelContent({ styles }) {
  const isDarkMode = useIsDarkMode();
  if (!styles)
    return null;
  const geo = styles.get(GeoShapeGeoStyle);
  const arrowheadEnd = styles.get(ArrowShapeArrowheadEndStyle);
  const arrowheadStart = styles.get(ArrowShapeArrowheadStartStyle);
  const spline = styles.get(LineShapeSplineStyle);
  const font = styles.get(DefaultFontStyle);
  const hideGeo = geo === void 0;
  const hideArrowHeads = arrowheadEnd === void 0 && arrowheadStart === void 0;
  const hideSpline = spline === void 0;
  const hideText = font === void 0;
  const theme = getDefaultColorTheme({ isDarkMode });
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(import_jsx_runtime131.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(CommonStylePickerSet, { theme, styles }),
    !hideText && /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TextStylePickerSet, { theme, styles }),
    !(hideGeo && hideArrowHeads && hideSpline) && /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(GeoStylePickerSet, { styles }),
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ArrowheadStylePickerSet, { styles }),
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(SplineStylePickerSet, { styles })
    ] })
  ] });
}
function useStyleChangeCallback() {
  const editor = useEditor();
  const trackEvent = useUiEvents();
  return import_react121.default.useMemo(() => function handleStyleChange(style, value, squashing) {
    editor.batch(() => {
      if (editor.isIn("select")) {
        editor.setStyleForSelectedShapes(style, value, { squashing });
      }
      editor.setStyleForNextShapes(style, value, { squashing });
      editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
    });
    trackEvent("set-style", { source: "style-panel", id: style.id, value });
  }, [editor, trackEvent]);
}
function CommonStylePickerSet({
  styles,
  theme
}) {
  const msg2 = useTranslation();
  const editor = useEditor();
  const handleValueChange = useStyleChangeCallback();
  const color = styles.get(DefaultColorStyle);
  const fill = styles.get(DefaultFillStyle);
  const dash = styles.get(DefaultDashStyle);
  const size4 = styles.get(DefaultSizeStyle);
  const showPickers = fill !== void 0 || dash !== void 0 || size4 !== void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(import_jsx_runtime131.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)("div", {
      tabIndex: -1,
      className: "tlui-style-panel__section__common",
      "aria-label": "style panel styles",
      "data-testid": "style.panel",
      children: [
        color === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
          title: msg2("style-panel.color"),
          uiType: "color",
          style: DefaultColorStyle,
          items: STYLES.color,
          value: color,
          onValueChange: handleValueChange,
          theme
        }),
        /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(OpacitySlider, {})
      ]
    }),
    showPickers && /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
      fill === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
        title: msg2("style-panel.fill"),
        uiType: "fill",
        style: DefaultFillStyle,
        items: STYLES.fill,
        value: fill,
        onValueChange: handleValueChange,
        theme
      }),
      dash === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
        title: msg2("style-panel.dash"),
        uiType: "dash",
        style: DefaultDashStyle,
        items: STYLES.dash,
        value: dash,
        onValueChange: handleValueChange,
        theme
      }),
      size4 === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
        title: msg2("style-panel.size"),
        uiType: "size",
        style: DefaultSizeStyle,
        items: STYLES.size,
        value: size4,
        onValueChange: (style, value, squashing) => {
          handleValueChange(style, value, squashing);
          const selectedShapeIds = editor.getSelectedShapeIds();
          if (selectedShapeIds.length > 0) {
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        theme
      })
    ] })
  ] });
}
function TextStylePickerSet({
  theme,
  styles
}) {
  const msg2 = useTranslation();
  const handleValueChange = useStyleChangeCallback();
  const font = styles.get(DefaultFontStyle);
  const align = styles.get(DefaultHorizontalAlignStyle);
  const verticalAlign = styles.get(DefaultVerticalAlignStyle);
  if (font === void 0 && align === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel text", children: [
    font === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
      title: msg2("style-panel.font"),
      uiType: "font",
      style: DefaultFontStyle,
      items: STYLES.font,
      value: font,
      onValueChange: handleValueChange,
      theme
    }),
    align === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)("div", { className: "tlui-style-panel__row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonPicker, {
        title: msg2("style-panel.align"),
        uiType: "align",
        style: DefaultHorizontalAlignStyle,
        items: STYLES.horizontalAlign,
        value: align,
        onValueChange: handleValueChange,
        theme
      }),
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)("div", { className: "tlui-style-panel__row__extra-button", children: verticalAlign === void 0 ? /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButton, {
        type: "icon",
        title: msg2("style-panel.vertical-align"),
        "data-testid": "vertical-align",
        disabled: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiButtonIcon, { icon: "vertical-align-center" })
      }) : /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(DropdownPicker, {
        type: "icon",
        id: "geo-vertical-alignment",
        uiType: "verticalAlign",
        style: DefaultVerticalAlignStyle,
        items: STYLES.verticalAlign,
        value: verticalAlign,
        onValueChange: handleValueChange
      }) })
    ] })
  ] });
}
function GeoStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const geo = styles.get(GeoShapeGeoStyle);
  if (geo === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(DropdownPicker, {
    id: "geo",
    type: "menu",
    label: "style-panel.geo",
    uiType: "geo",
    style: GeoShapeGeoStyle,
    items: STYLES.geo,
    value: geo,
    onValueChange: handleValueChange
  });
}
function SplineStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const spline = styles.get(LineShapeSplineStyle);
  if (spline === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(DropdownPicker, {
    id: "spline",
    type: "menu",
    label: "style-panel.spline",
    uiType: "spline",
    style: LineShapeSplineStyle,
    items: STYLES.spline,
    value: spline,
    onValueChange: handleValueChange
  });
}
function ArrowheadStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const arrowheadEnd = styles.get(ArrowShapeArrowheadEndStyle);
  const arrowheadStart = styles.get(ArrowShapeArrowheadStartStyle);
  if (!arrowheadEnd || !arrowheadStart) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(DoubleDropdownPicker, {
    label: "style-panel.arrowheads",
    uiTypeA: "arrowheadStart",
    styleA: ArrowShapeArrowheadStartStyle,
    itemsA: STYLES.arrowheadStart,
    valueA: arrowheadStart,
    uiTypeB: "arrowheadEnd",
    styleB: ArrowShapeArrowheadEndStyle,
    itemsB: STYLES.arrowheadEnd,
    valueB: arrowheadEnd,
    onValueChange: handleValueChange,
    labelA: "style-panel.arrowhead-start",
    labelB: "style-panel.arrowhead-end"
  });
}
var tldrawSupportedOpacities = [0.1, 0.25, 0.5, 0.75, 1];
function OpacitySlider() {
  const editor = useEditor();
  const opacity = useValue("opacity", () => editor.getSharedOpacity(), [editor]);
  const trackEvent = useUiEvents();
  const msg2 = useTranslation();
  const handleOpacityValueChange = import_react121.default.useCallback((value, squashing) => {
    const item = tldrawSupportedOpacities[value];
    editor.batch(() => {
      if (editor.isIn("select")) {
        editor.setOpacityForSelectedShapes(item, { squashing });
      }
      editor.setOpacityForNextShapes(item, { squashing });
      editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
    });
    trackEvent("set-style", { source: "style-panel", id: "opacity", value });
  }, [editor, trackEvent]);
  if (opacity === void 0)
    return null;
  const opacityIndex = opacity.type === "mixed" ? -1 : tldrawSupportedOpacities.indexOf(minBy(tldrawSupportedOpacities, (supportedOpacity) => Math.abs(supportedOpacity - opacity.value)));
  return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(TldrawUiSlider, {
    "data-testid": "style.opacity",
    value: opacityIndex >= 0 ? opacityIndex : tldrawSupportedOpacities.length - 1,
    label: opacity.type === "mixed" ? "style-panel.mixed" : `opacity-style.${opacity.value}`,
    onValueChange: handleOpacityValueChange,
    steps: tldrawSupportedOpacities.length - 1,
    title: msg2("style-panel.opacity")
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanel.mjs
var DefaultStylePanel = (0, import_react122.memo)(function DefaultStylePanel2({
  isMobile,
  children
}) {
  const editor = useEditor();
  const styles = useRelevantStyles();
  const handlePointerOut = (0, import_react122.useCallback)(() => {
    if (!isMobile) {
      editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
    }
  }, [editor, isMobile]);
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(DefaultStylePanelContent, { styles });
  return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("div", {
    className: (0, import_classnames24.default)("tlui-style-panel", { "tlui-style-panel__wrapper": !isMobile }),
    "data-ismobile": isMobile,
    onPointerLeave: handlePointerOut,
    children: content
  });
});

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbar.mjs
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var import_react126 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/MobileStylePanel.mjs
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var import_react123 = __toESM(require_react(), 1);
function MobileStylePanel() {
  const editor = useEditor();
  const msg2 = useTranslation();
  const relevantStyles = useRelevantStyles();
  const color = relevantStyles == null ? void 0 : relevantStyles.get(DefaultColorStyle);
  const theme = getDefaultColorTheme({ isDarkMode: editor.user.getIsDarkMode() });
  const currentColor = ((color == null ? void 0 : color.type) === "shared" ? theme[color.value] : theme.black).solid;
  const disableStylePanel = useValue("disable style panel", () => editor.isInAny("hand", "zoom", "eraser", "laser"), [editor]);
  const handleStylesOpenChange = (0, import_react123.useCallback)((isOpen) => {
    if (!isOpen) {
      editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
    }
  }, [editor]);
  const { StylePanel } = useTldrawUiComponents();
  if (!StylePanel)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiPopover, { id: "mobile style menu", onOpenChange: handleStylesOpenChange, children: [
    /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiButton, {
      type: "tool",
      "data-testid": "mobile-styles.button",
      style: {
        color: disableStylePanel ? "var(--color-muted-1)" : currentColor
      },
      title: msg2("style-panel.title"),
      disabled: disableStylePanel,
      children: /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiButtonIcon, {
        icon: disableStylePanel ? "blob" : (color == null ? void 0 : color.type) === "mixed" ? "mixed" : "blob"
      })
    }) }),
    /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiPopoverContent, { side: "top", align: "end", children: StylePanel && /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(StylePanel, { isMobile: true }) })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbarContent.mjs
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
function DefaultToolbarContent() {
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(import_jsx_runtime134.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(SelectToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(HandToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DrawToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(EraserToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ArrowToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TextToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(NoteToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(AssetToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(RectangleToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(EllipseToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DiamondToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TriangleToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TrapezoidToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(RhombusToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(HexagonToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(CloudToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(StarToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(OvalToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(XBoxToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(CheckBoxToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ArrowLeftToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ArrowUpToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ArrowDownToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(ArrowRightToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(LineToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(HighlightToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(FrameToolbarItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(LaserToolbarItem, {})
  ] });
}
function useIsToolSelected(tool2) {
  var _a2;
  const editor = useEditor();
  const geo = (_a2 = tool2.meta) == null ? void 0 : _a2.geo;
  return useValue("is tool selected", () => {
    const activeToolId = editor.getCurrentToolId();
    const geoState = editor.getSharedStyles().getAsKnownValue(GeoShapeGeoStyle);
    return geo ? activeToolId === "geo" && geoState === geo : activeToolId === tool2.id;
  }, [editor, tool2.id, geo]);
}
function SelectToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["select"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["select"], isSelected });
}
function HandToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["hand"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["hand"], isSelected });
}
function DrawToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["draw"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["draw"], isSelected });
}
function EraserToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["eraser"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["eraser"], isSelected });
}
function ArrowToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["arrow"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["arrow"], isSelected });
}
function TextToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["text"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["text"], isSelected });
}
function NoteToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["note"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["note"], isSelected });
}
function AssetToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["asset"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["asset"], isSelected });
}
function RectangleToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["rectangle"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["rectangle"], isSelected });
}
function EllipseToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["ellipse"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["ellipse"], isSelected });
}
function DiamondToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["diamond"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["diamond"], isSelected });
}
function TriangleToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["triangle"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["triangle"], isSelected });
}
function TrapezoidToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["trapezoid"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["trapezoid"], isSelected });
}
function RhombusToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["rhombus"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["rhombus"], isSelected });
}
function HexagonToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["hexagon"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["hexagon"], isSelected });
}
function CloudToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["cloud"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["cloud"], isSelected });
}
function StarToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["star"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["star"], isSelected });
}
function OvalToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["oval"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["oval"], isSelected });
}
function XBoxToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["x-box"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["x-box"], isSelected });
}
function CheckBoxToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["check-box"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["check-box"], isSelected });
}
function ArrowLeftToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["arrow-left"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["arrow-left"], isSelected });
}
function ArrowUpToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["arrow-up"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["arrow-up"], isSelected });
}
function ArrowDownToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["arrow-down"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["arrow-down"], isSelected });
}
function ArrowRightToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["arrow-right"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["arrow-right"], isSelected });
}
function LineToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["line"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["line"], isSelected });
}
function HighlightToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["highlight"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["highlight"], isSelected });
}
function FrameToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["frame"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["frame"], isSelected });
}
function LaserToolbarItem() {
  const tools = useTools();
  const isSelected = useIsToolSelected(tools["laser"]);
  return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuItem, { ...tools["laser"], isSelected });
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
var import_classnames25 = __toESM(require_classnames(), 1);

// node_modules/hotkeys-js/dist/hotkeys.esm.js
var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
function addEvent(object2, event, method, useCapture) {
  if (object2.addEventListener) {
    object2.addEventListener(event, method, useCapture);
  } else if (object2.attachEvent) {
    object2.attachEvent("on".concat(event), method);
  }
}
function removeEvent(object2, event, method, useCapture) {
  if (object2.removeEventListener) {
    object2.removeEventListener(event, method, useCapture);
  } else if (object2.detachEvent) {
    object2.detachEvent("on".concat(event), method);
  }
}
function getMods(modifier, key) {
  const mods = key.slice(0, key.length - 1);
  for (let i = 0; i < mods.length; i++)
    mods[i] = modifier[mods[i].toLowerCase()];
  return mods;
}
function getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  const keys = key.split(",");
  let index2 = keys.lastIndexOf("");
  for (; index2 >= 0; ) {
    keys[index2 - 1] += ",";
    keys.splice(index2, 1);
    index2 = keys.lastIndexOf("");
  }
  return keys;
}
function compareArray(a1, a2) {
  const arr1 = a1.length >= a2.length ? a1 : a2;
  const arr2 = a1.length >= a2.length ? a2 : a1;
  let isIndex = true;
  for (let i = 0; i < arr1.length; i++) {
    if (arr2.indexOf(arr1[i]) === -1)
      isIndex = false;
  }
  return isIndex;
}
var _keyMap = {
  backspace: 8,
  "\u232B": 8,
  tab: 9,
  clear: 12,
  enter: 13,
  "\u21A9": 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  "\u21EA": 20,
  ",": 188,
  ".": 190,
  "/": 191,
  "`": 192,
  "-": isff ? 173 : 189,
  "=": isff ? 61 : 187,
  ";": isff ? 59 : 186,
  "'": 222,
  "[": 219,
  "]": 221,
  "\\": 220
};
var _modifier = {
  "\u21E7": 16,
  shift: 16,
  "\u2325": 18,
  alt: 18,
  option: 18,
  "\u2303": 17,
  ctrl: 17,
  control: 17,
  "\u2318": 91,
  cmd: 91,
  command: 91
};
var modifierMap = {
  16: "shiftKey",
  18: "altKey",
  17: "ctrlKey",
  91: "metaKey",
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
var _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
var _handlers = {};
for (let k = 1; k < 20; k++) {
  _keyMap["f".concat(k)] = 111 + k;
}
var _downKeys = [];
var winListendFocus = null;
var _scope = "all";
var elementEventMap = /* @__PURE__ */ new Map();
var code = (x) => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
var getKey = (x) => Object.keys(_keyMap).find((k) => _keyMap[k] === x);
var getModifier = (x) => Object.keys(_modifier).find((k) => _modifier[k] === x);
function setScope(scope) {
  _scope = scope || "all";
}
function getScope() {
  return _scope || "all";
}
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function getPressedKeyString() {
  return _downKeys.map((c) => getKey(c) || getModifier(c) || String.fromCharCode(c));
}
function getAllKeyCodes() {
  const result = [];
  Object.keys(_handlers).forEach((k) => {
    _handlers[k].forEach((_ref) => {
      let {
        key,
        scope,
        mods,
        shortcut
      } = _ref;
      result.push({
        scope,
        shortcut,
        mods,
        keys: key.split("+").map((v) => code(v))
      });
    });
  });
  return result;
}
function filter(event) {
  const target = event.target || event.srcElement;
  const {
    tagName
  } = target;
  let flag = true;
  const isInput = tagName === "INPUT" && !["checkbox", "radio", "range", "button", "file", "reset", "submit", "color"].includes(target.type);
  if (target.isContentEditable || (isInput || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
    flag = false;
  }
  return flag;
}
function isPressed(keyCode) {
  if (typeof keyCode === "string") {
    keyCode = code(keyCode);
  }
  return _downKeys.indexOf(keyCode) !== -1;
}
function deleteScope(scope, newScope) {
  let handlers;
  let i;
  if (!scope)
    scope = getScope();
  for (const key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i = 0; i < handlers.length; ) {
        if (handlers[i].scope === scope) {
          const deleteItems = handlers.splice(i, 1);
          deleteItems.forEach((_ref2) => {
            let {
              element
            } = _ref2;
            return removeKeyEvent(element);
          });
        } else {
          i++;
        }
      }
    }
  }
  if (getScope() === scope)
    setScope(newScope || "all");
}
function clearModifier(event) {
  let key = event.keyCode || event.which || event.charCode;
  const i = _downKeys.indexOf(key);
  if (i >= 0) {
    _downKeys.splice(i, 1);
  }
  if (event.key && event.key.toLowerCase() === "meta") {
    _downKeys.splice(0, _downKeys.length);
  }
  if (key === 93 || key === 224)
    key = 91;
  if (key in _mods) {
    _mods[key] = false;
    for (const k in _modifier)
      if (_modifier[k] === key)
        hotkeys[k] = false;
  }
}
function unbind(keysInfo) {
  if (typeof keysInfo === "undefined") {
    Object.keys(_handlers).forEach((key) => {
      Array.isArray(_handlers[key]) && _handlers[key].forEach((info) => eachUnbind(info));
      delete _handlers[key];
    });
    removeKeyEvent(null);
  } else if (Array.isArray(keysInfo)) {
    keysInfo.forEach((info) => {
      if (info.key)
        eachUnbind(info);
    });
  } else if (typeof keysInfo === "object") {
    if (keysInfo.key)
      eachUnbind(keysInfo);
  } else if (typeof keysInfo === "string") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    let [scope, method] = args;
    if (typeof scope === "function") {
      method = scope;
      scope = "";
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: "+"
    });
  }
}
var eachUnbind = (_ref3) => {
  let {
    key,
    scope,
    method,
    splitKey = "+"
  } = _ref3;
  const multipleKeys = getKeys(key);
  multipleKeys.forEach((originKey) => {
    const unbindKeys = originKey.split(splitKey);
    const len = unbindKeys.length;
    const lastKey = unbindKeys[len - 1];
    const keyCode = lastKey === "*" ? "*" : code(lastKey);
    if (!_handlers[keyCode])
      return;
    if (!scope)
      scope = getScope();
    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    const unbindElements = [];
    _handlers[keyCode] = _handlers[keyCode].filter((record) => {
      const isMatchingMethod = method ? record.method === method : true;
      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
      if (isUnbind)
        unbindElements.push(record.element);
      return !isUnbind;
    });
    unbindElements.forEach((element) => removeKeyEvent(element));
  });
};
function eventHandler(event, handler, scope, element) {
  if (handler.element !== element) {
    return;
  }
  let modifiersMatch;
  if (handler.scope === scope || handler.scope === "all") {
    modifiersMatch = handler.mods.length > 0;
    for (const y in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y)) {
        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
          modifiersMatch = false;
        }
      }
    }
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
      handler.keys = [];
      handler.keys = handler.keys.concat(_downKeys);
      if (handler.method(event, handler) === false) {
        if (event.preventDefault)
          event.preventDefault();
        else
          event.returnValue = false;
        if (event.stopPropagation)
          event.stopPropagation();
        if (event.cancelBubble)
          event.cancelBubble = true;
      }
    }
  }
}
function dispatch(event, element) {
  const asterisk = _handlers["*"];
  let key = event.keyCode || event.which || event.charCode;
  if (!hotkeys.filter.call(this, event))
    return;
  if (key === 93 || key === 224)
    key = 91;
  if (_downKeys.indexOf(key) === -1 && key !== 229)
    _downKeys.push(key);
  ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach((keyName) => {
    const keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  if (key in _mods) {
    _mods[key] = true;
    for (const k in _modifier) {
      if (_modifier[k] === key)
        hotkeys[k] = true;
    }
    if (!asterisk)
      return;
  }
  for (const e in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e)) {
      _mods[e] = event[modifierMap[e]];
    }
  }
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }
  const scope = getScope();
  if (asterisk) {
    for (let i = 0; i < asterisk.length; i++) {
      if (asterisk[i].scope === scope && (event.type === "keydown" && asterisk[i].keydown || event.type === "keyup" && asterisk[i].keyup)) {
        eventHandler(event, asterisk[i], scope, element);
      }
    }
  }
  if (!(key in _handlers))
    return;
  const handlerKey = _handlers[key];
  const keyLen = handlerKey.length;
  for (let i = 0; i < keyLen; i++) {
    if (event.type === "keydown" && handlerKey[i].keydown || event.type === "keyup" && handlerKey[i].keyup) {
      if (handlerKey[i].key) {
        const record = handlerKey[i];
        const {
          splitKey
        } = record;
        const keyShortcut = record.key.split(splitKey);
        const _downKeysCurrent = [];
        for (let a = 0; a < keyShortcut.length; a++) {
          _downKeysCurrent.push(code(keyShortcut[a]));
        }
        if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
          eventHandler(event, record, scope, element);
        }
      }
    }
  }
}
function hotkeys(key, option, method) {
  _downKeys = [];
  const keys = getKeys(key);
  let mods = [];
  let scope = "all";
  let element = document;
  let i = 0;
  let keyup = false;
  let keydown = true;
  let splitKey = "+";
  let capture = false;
  let single = false;
  if (method === void 0 && typeof option === "function") {
    method = option;
  }
  if (Object.prototype.toString.call(option) === "[object Object]") {
    if (option.scope)
      scope = option.scope;
    if (option.element)
      element = option.element;
    if (option.keyup)
      keyup = option.keyup;
    if (option.keydown !== void 0)
      keydown = option.keydown;
    if (option.capture !== void 0)
      capture = option.capture;
    if (typeof option.splitKey === "string")
      splitKey = option.splitKey;
    if (option.single === true)
      single = true;
  }
  if (typeof option === "string")
    scope = option;
  if (single)
    unbind(key, scope);
  for (; i < keys.length; i++) {
    key = keys[i].split(splitKey);
    mods = [];
    if (key.length > 1)
      mods = getMods(_modifier, key);
    key = key[key.length - 1];
    key = key === "*" ? "*" : code(key);
    if (!(key in _handlers))
      _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i],
      method,
      key: keys[i],
      splitKey,
      element
    });
  }
  if (typeof element !== "undefined" && window) {
    if (!elementEventMap.has(element)) {
      const keydownListener = function() {
        let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
        return dispatch(event, element);
      };
      const keyupListenr = function() {
        let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
        dispatch(event, element);
        clearModifier(event);
      };
      elementEventMap.set(element, {
        keydownListener,
        keyupListenr,
        capture
      });
      addEvent(element, "keydown", keydownListener, capture);
      addEvent(element, "keyup", keyupListenr, capture);
    }
    if (!winListendFocus) {
      const listener2 = () => {
        _downKeys = [];
      };
      winListendFocus = {
        listener: listener2,
        capture
      };
      addEvent(window, "focus", listener2, capture);
    }
  }
}
function trigger(shortcut) {
  let scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
  Object.keys(_handlers).forEach((key) => {
    const dataList = _handlers[key].filter((item) => item.scope === scope && item.shortcut === shortcut);
    dataList.forEach((data) => {
      if (data && data.method) {
        data.method();
      }
    });
  });
}
function removeKeyEvent(element) {
  const values = Object.values(_handlers).flat();
  const findindex = values.findIndex((_ref4) => {
    let {
      element: el
    } = _ref4;
    return el === element;
  });
  if (findindex < 0) {
    const {
      keydownListener,
      keyupListenr,
      capture
    } = elementEventMap.get(element) || {};
    if (keydownListener && keyupListenr) {
      removeEvent(element, "keyup", keyupListenr, capture);
      removeEvent(element, "keydown", keydownListener, capture);
      elementEventMap.delete(element);
    }
  }
  if (values.length <= 0 || elementEventMap.size <= 0) {
    const eventKeys = Object.keys(elementEventMap);
    eventKeys.forEach((el) => {
      const {
        keydownListener,
        keyupListenr,
        capture
      } = elementEventMap.get(el) || {};
      if (keydownListener && keyupListenr) {
        removeEvent(el, "keyup", keyupListenr, capture);
        removeEvent(el, "keydown", keydownListener, capture);
        elementEventMap.delete(el);
      }
    });
    elementEventMap.clear();
    Object.keys(_handlers).forEach((key) => delete _handlers[key]);
    if (winListendFocus) {
      const {
        listener: listener2,
        capture
      } = winListendFocus;
      removeEvent(window, "focus", listener2, capture);
      winListendFocus = null;
    }
  }
}
var _api = {
  getPressedKeyString,
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  getAllKeyCodes,
  isPressed,
  filter,
  trigger,
  unbind,
  keyMap: _keyMap,
  modifier: _modifier,
  modifierMap
};
for (const a in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a)) {
    hotkeys[a] = _api[a];
  }
}
if (typeof window !== "undefined") {
  const _hotkeys = window.hotkeys;
  hotkeys.noConflict = (deep) => {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
var import_react125 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs
var import_react124 = __toESM(require_react(), 1);
var SKIP_KBDS = [
  "copy",
  "cut",
  "paste",
  "asset"
];
function useKeyboardShortcuts() {
  const editor = useEditor();
  const isReadonlyMode = useReadonly();
  const actions = useActions();
  const tools = useTools();
  const isFocused = useValue("is focused", () => editor.getInstanceState().isFocused, [editor]);
  (0, import_react124.useEffect)(() => {
    if (!isFocused)
      return;
    const container = editor.getContainer();
    hotkeys.setScope(editor.store.id);
    const hot = (keys, callback) => {
      hotkeys(keys, { element: document.body, scope: editor.store.id }, callback);
    };
    const hotUp = (keys, callback) => {
      hotkeys(keys, { element: document.body, keyup: true, keydown: false, scope: editor.store.id }, callback);
    };
    for (const action of Object.values(actions)) {
      if (!action.kbd)
        continue;
      if (isReadonlyMode && !action.readonlyOk)
        continue;
      if (SKIP_KBDS.includes(action.id))
        continue;
      hot(getHotkeysStringFromKbd(action.kbd), (event) => {
        if (areShortcutsDisabled(editor))
          return;
        preventDefault(event);
        action.onSelect("kbd");
      });
    }
    for (const tool2 of Object.values(tools)) {
      if (!tool2.kbd || !tool2.readonlyOk && editor.getInstanceState().isReadonly) {
        continue;
      }
      if (SKIP_KBDS.includes(tool2.id))
        continue;
      hot(getHotkeysStringFromKbd(tool2.kbd), (event) => {
        if (areShortcutsDisabled(editor))
          return;
        preventDefault(event);
        tool2.onSelect("kbd");
      });
    }
    hot(",", (e) => {
      if (areShortcutsDisabled(editor))
        return;
      if (editor.inputs.keys.has("Comma"))
        return;
      preventDefault(e);
      container.focus();
      editor.inputs.keys.add("Comma");
      const { x, y, z } = editor.inputs.currentScreenPoint;
      const info = {
        type: "pointer",
        name: "pointer_down",
        point: { x, y, z },
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey,
        pointerId: 0,
        button: 0,
        isPen: editor.getInstanceState().isPenMode,
        target: "canvas"
      };
      editor.dispatch(info);
    });
    hotUp(",", (e) => {
      if (areShortcutsDisabled(editor))
        return;
      if (!editor.inputs.keys.has("Comma"))
        return;
      editor.inputs.keys.delete("Comma");
      const { x, y, z } = editor.inputs.currentScreenPoint;
      const info = {
        type: "pointer",
        name: "pointer_up",
        point: { x, y, z },
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey,
        pointerId: 0,
        button: 0,
        isPen: editor.getInstanceState().isPenMode,
        target: "canvas"
      };
      editor.dispatch(info);
    });
    return () => {
      hotkeys.deleteScope(editor.store.id);
    };
  }, [actions, tools, isReadonlyMode, editor, isFocused]);
}
function getHotkeysStringFromKbd(kbd2) {
  return getKeys2(kbd2).map((kbd22) => {
    let str = "";
    const chars = kbd22.split("");
    if (chars.length === 1) {
      str = chars[0];
    } else {
      if (chars[0] === "!") {
        str = `shift+${chars[1]}`;
      } else if (chars[0] === "?") {
        if (chars.length === 3 && chars[1] === "!") {
          str = `alt+shift+${chars[2]}`;
        } else {
          str = `alt+${chars[1]}`;
        }
      } else if (chars[0] === "$") {
        if (chars[1] === "!") {
          str = `cmd+shift+${chars[2]},ctrl+shift+${chars[2]}`;
        } else if (chars[1] === "?") {
          str = `cmd+\u2325+${chars[2]},ctrl+alt+${chars[2]}`;
        } else {
          str = `cmd+${chars[1]},ctrl+${chars[1]}`;
        }
      } else {
        str = kbd22;
      }
    }
    return str;
  }).join(",");
}
function getKeys2(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  const keys = key.split(",");
  let index2 = keys.lastIndexOf("");
  for (; index2 >= 0; ) {
    keys[index2 - 1] += ",";
    keys.splice(index2, 1);
    index2 = keys.lastIndexOf("");
  }
  return keys;
}
function areShortcutsDisabled(editor) {
  return editor.getIsMenuOpen() || editor.getEditingShapeId() !== null || editor.getCrashingError();
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
var IsInOverflowContext = (0, import_react125.createContext)(false);
function OverflowingToolbar({ children }) {
  const editor = useEditor();
  const id = useSafeId();
  const breakpoint = useBreakpoint();
  const msg2 = useTranslation();
  const overflowIndex = Math.min(8, 5 + breakpoint);
  const [totalItems, setTotalItems] = (0, import_react125.useState)(0);
  const mainToolsRef = (0, import_react125.useRef)(null);
  const [lastActiveOverflowItem, setLastActiveOverflowItem] = (0, import_react125.useState)(null);
  const css = (0, import_react125.useMemo)(() => {
    const showInMainSelectors = [];
    const hideFromOverflowSelectors = [];
    if (lastActiveOverflowItem) {
      showInMainSelectors.push(`[data-value="${lastActiveOverflowItem}"]`);
    } else {
      showInMainSelectors.push(`:nth-child(${overflowIndex + 1})`);
    }
    for (let i = 0; i < overflowIndex; i++) {
      showInMainSelectors.push(`:nth-child(${i + 1})`);
      hideFromOverflowSelectors.push(`:nth-child(${i + 1})`);
    }
    return `
			#${id}_main > *:not(${showInMainSelectors.join(", ")}) {
				display: none;
			}
			${hideFromOverflowSelectors.map((s) => `#${id}_more > *${s}`).join(", ")} {
				display: none;
			}
        `;
  }, [lastActiveOverflowItem, id, overflowIndex]);
  const onDomUpdate = useEvent(() => {
    if (!mainToolsRef.current)
      return;
    const children2 = Array.from(mainToolsRef.current.children);
    setTotalItems(children2.length);
    const lastActiveElementIdx = children2.findIndex((el) => el.getAttribute("data-value") === lastActiveOverflowItem);
    if (lastActiveElementIdx <= overflowIndex) {
      setLastActiveOverflowItem(null);
    }
    const activeElementIdx = Array.from(mainToolsRef.current.children).findIndex((el) => el.getAttribute("aria-checked") === "true");
    if (activeElementIdx === -1)
      return;
    if (activeElementIdx >= overflowIndex) {
      setLastActiveOverflowItem(children2[activeElementIdx].getAttribute("data-value"));
    }
  });
  (0, import_react125.useLayoutEffect)(() => {
    onDomUpdate();
  });
  (0, import_react125.useLayoutEffect)(() => {
    if (!mainToolsRef.current)
      return;
    const mutationObserver = new MutationObserver(onDomUpdate);
    mutationObserver.observe(mainToolsRef.current, {
      childList: true,
      subtree: true,
      attributeFilter: ["data-value", "aria-checked"]
    });
    return () => {
      mutationObserver.disconnect();
    };
  }, [onDomUpdate]);
  (0, import_react125.useEffect)(() => {
    const keys = [
      ["1", 0],
      ["2", 1],
      ["3", 2],
      ["4", 3],
      ["5", 4],
      ["6", 5],
      ["7", 6],
      ["8", 7],
      ["9", 8],
      ["0", 9]
    ];
    for (const [key, index2] of keys) {
      hotkeys(key, (event) => {
        var _a2, _b2;
        if (areShortcutsDisabled(editor))
          return;
        preventDefault(event);
        const relevantEls = Array.from((_b2 = (_a2 = mainToolsRef.current) == null ? void 0 : _a2.children) != null ? _b2 : []).filter((el2) => {
          if (!(el2 instanceof HTMLElement))
            return false;
          if (el2.tagName.toLowerCase() !== "button")
            return false;
          return !!(el2.offsetWidth || el2.offsetHeight);
        });
        const el = relevantEls[index2];
        if (el)
          el.click();
      });
    }
    return () => {
      hotkeys.unbind("1,2,3,4,5,6,7,8,9,0");
    };
  }, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime135.jsxs)(import_jsx_runtime135.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime135.jsx)("style", { children: css }),
    /* @__PURE__ */ (0, import_jsx_runtime135.jsxs)("div", {
      className: (0, import_classnames25.default)("tlui-toolbar__tools", {
        "tlui-toolbar__tools__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
      }),
      role: "radiogroup",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime135.jsx)("div", { id: `${id}_main`, ref: mainToolsRef, className: "tlui-toolbar__tools__list", children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiMenuContextProvider, { type: "toolbar", sourceId: "toolbar", children }) }),
        totalItems > overflowIndex && /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(IsInOverflowContext.Provider, { value: true, children: /* @__PURE__ */ (0, import_jsx_runtime135.jsxs)(TldrawUiDropdownMenuRoot, { id: "toolbar overflow", modal: false, children: [
          /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiButton, {
            title: msg2("tool-panel.more"),
            type: "tool",
            className: "tlui-toolbar__overflow",
            "data-testid": "tools.more-button",
            children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiButtonIcon, { icon: "chevron-up" })
          }) }),
          /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)("div", {
            className: "tlui-buttons__grid",
            "data-testid": "tools.more-content",
            id: `${id}_more`,
            children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiMenuContextProvider, { type: "toolbar-overflow", sourceId: "toolbar", children })
          }) })
        ] }) })
      ]
    })
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/ToggleToolLockedButton.mjs
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var import_classnames26 = __toESM(require_classnames(), 1);
var NOT_LOCKABLE_TOOLS = [
  "select",
  "hand",
  "draw",
  "eraser",
  "text",
  "zoom",
  "laser",
  "highlight"
];
function ToggleToolLockedButton({ activeToolId }) {
  const editor = useEditor();
  const breakpoint = useBreakpoint();
  const msg2 = useTranslation();
  const isToolLocked = useValue("is tool locked", () => editor.getInstanceState().isToolLocked, [
    editor
  ]);
  if (!activeToolId || NOT_LOCKABLE_TOOLS.includes(activeToolId))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(TldrawUiButton, {
    type: "normal",
    title: msg2("action.toggle-tool-lock"),
    "data-testid": "tool-lock",
    className: (0, import_classnames26.default)("tlui-toolbar__lock-button", {
      "tlui-toolbar__lock-button__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
    }),
    onClick: () => editor.updateInstanceState({ isToolLocked: !isToolLocked }),
    children: /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(TldrawUiButtonIcon, { icon: isToolLocked ? "lock" : "unlock", small: true })
  });
}

// node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbar.mjs
var DefaultToolbar = (0, import_react126.memo)(function DefaultToolbar2({ children }) {
  const editor = useEditor();
  const breakpoint = useBreakpoint();
  const isReadonlyMode = useReadonly();
  const activeToolId = useValue("current tool id", () => editor.getCurrentToolId(), [editor]);
  const { ActionsMenu, QuickActions } = useTldrawUiComponents();
  return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)("div", { className: "tlui-toolbar", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "tlui-toolbar__inner", children: [
    /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "tlui-toolbar__left", children: [
      !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "tlui-toolbar__extras", children: [
        breakpoint < PORTRAIT_BREAKPOINT.TABLET && /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)("div", { className: "tlui-toolbar__extras__controls tlui-buttons__horizontal", children: [
          QuickActions && /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(QuickActions, {}),
          ActionsMenu && /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ActionsMenu, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleToolLockedButton, { activeToolId })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(OverflowingToolbar, { children: children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(DefaultToolbarContent, {}) })
    ] }),
    breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime137.jsx)("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(MobileStylePanel, {}) })
  ] }) });
});

// node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenu.mjs
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
var import_react127 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenuContent.mjs
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
function DefaultZoomMenuContent() {
  const actions = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)(import_jsx_runtime138.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TldrawUiMenuItem, { ...actions["zoom-in"], noClose: true }),
    /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TldrawUiMenuItem, { ...actions["zoom-out"], noClose: true }),
    /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(ZoomTo100MenuItem2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(ZoomToFitMenuItem, {}),
    /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(ZoomToSelectionMenuItem, {})
  ] });
}

// node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenu.mjs
var DefaultZoomMenu = (0, import_react127.memo)(function DefaultZoomMenu2({ children }) {
  const container = useContainer();
  const [isOpen, onOpenChange] = useMenuIsOpen("zoom menu");
  const content = children != null ? children : /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(DefaultZoomMenuContent, {});
  return /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
    /* @__PURE__ */ (0, import_jsx_runtime139.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(ZoomTriggerButton, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime139.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)($d08ef79370b62062$export$7c6e2c02157bb7d2, {
      className: "tlui-menu",
      side: "top",
      align: "start",
      alignOffset: 0,
      sideOffset: 8,
      collisionPadding: 4,
      children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "zoom-menu", children: content })
    }) })
  ] });
});
var ZoomTriggerButton = (0, import_react127.forwardRef)(function ZoomTriggerButton2(props, ref) {
  const editor = useEditor();
  const breakpoint = useBreakpoint();
  const zoom = useValue("zoom", () => editor.getZoomLevel(), [editor]);
  const msg2 = useTranslation();
  const handleDoubleClick = (0, import_react127.useCallback)(() => {
    editor.resetZoom(editor.getViewportScreenCenter(), { duration: ANIMATION_MEDIUM_MS });
  }, [editor]);
  return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(TldrawUiButton, {
    ref,
    ...props,
    type: "icon",
    title: `${msg2("navigation-zone.zoom")}`,
    "data-testid": "minimap.zoom-menu-button",
    className: breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? "tlui-zoom-menu__button" : "tlui-zoom-menu__button__pct",
    onDoubleClick: handleDoubleClick,
    icon: breakpoint < PORTRAIT_BREAKPOINT.MOBILE ? "zoom-in" : void 0,
    children: breakpoint < PORTRAIT_BREAKPOINT.MOBILE ? null : /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)("span", { style: { flexGrow: 0, textAlign: "center" }, children: [
      Math.floor(zoom * 100),
      "%"
    ] })
  });
});

// node_modules/tldraw/dist-esm/lib/ui/context/components.mjs
var TldrawUiComponentsContext = (0, import_react128.createContext)({});
function TldrawUiComponentsProvider({
  overrides = {},
  children
}) {
  const _overrides = useShallowObjectIdentity(overrides);
  return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TldrawUiComponentsContext.Provider, {
    value: (0, import_react128.useMemo)(() => ({
      ContextMenu: DefaultContextMenu,
      ActionsMenu: DefaultActionsMenu,
      HelpMenu: DefaultHelpMenu,
      ZoomMenu: DefaultZoomMenu,
      MainMenu: DefaultMainMenu,
      Minimap: DefaultMinimap,
      StylePanel: DefaultStylePanel,
      PageMenu: DefaultPageMenu,
      NavigationPanel: DefaultNavigationPanel,
      Toolbar: DefaultToolbar,
      KeyboardShortcutsDialog: DefaultKeyboardShortcutsDialog,
      QuickActions: DefaultQuickActions,
      HelperButtons: DefaultHelperButtons,
      DebugPanel: DefaultDebugPanel,
      DebugMenu: DefaultDebugMenu,
      MenuPanel: DefaultMenuPanel,
      ..._overrides
    }), [_overrides]),
    children
  });
}
function useTldrawUiComponents() {
  return (0, import_react128.useContext)(TldrawUiComponentsContext);
}

// node_modules/tldraw/dist-esm/lib/ui/context/TldrawUiContextProvider.mjs
function TldrawUiContextProvider({
  overrides,
  components,
  assetUrls,
  onUiEvent,
  forceMobile,
  children
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(AssetUrlsProvider, { assetUrls: useDefaultUiAssetUrlsWithOverrides(assetUrls), children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TranslationProvider, { overrides: useMergedTranslationOverrides(overrides), children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(UiEventsProvider, { onEvent: onUiEvent, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(ToastsProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(DialogsProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(BreakPointProvider, { forceMobile, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TldrawUiComponentsProvider, { overrides: components, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(InternalProviders, { overrides, children }) }) }) }) }) }) }) });
}
function InternalProviders({
  overrides,
  children
}) {
  const mergedOverrides = useMergedOverrides(overrides);
  return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(ActionsProvider, { overrides: mergedOverrides.actions, children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(ToolsProvider, { overrides: mergedOverrides.tools, children }) });
}

// node_modules/tldraw/dist-esm/lib/ui/hooks/useEditorEvents.mjs
var import_react129 = __toESM(require_react(), 1);
function useEditorEvents() {
  const editor = useEditor();
  const { addToast } = useToasts();
  (0, import_react129.useEffect)(() => {
    function handleMaxShapes({ name, count }) {
      addToast({
        title: "Maximum Shapes Reached",
        description: `You've reached the maximum number of shapes allowed on ${name} (${count}). Please delete some shapes or move to a different page to continue.`,
        severity: "warning"
      });
    }
    editor.addListener("max-shapes", handleMaxShapes);
    return () => {
      editor.removeListener("max-shapes", handleMaxShapes);
    };
  }, [editor, addToast]);
}

// node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs
var TldrawUi2 = import_react130.default.memo(function TldrawUi22({
  renderDebugMenuItems,
  children,
  hideUi,
  components,
  ...rest
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiContextProvider, { ...rest, components, children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiInner, { hideUi, renderDebugMenuItems, children }) });
});
var TldrawUiInner = import_react130.default.memo(function TldrawUiInner2({
  children,
  hideUi,
  ...rest
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(import_jsx_runtime142.Fragment, { children: [
    children,
    hideUi ? null : /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiContent, { ...rest })
  ] });
});
var TldrawUiContent = import_react130.default.memo(function TldrawUI() {
  const editor = useEditor();
  const msg2 = useTranslation();
  const breakpoint = useBreakpoint();
  const isReadonlyMode = useReadonly();
  const isFocusMode = useValue("focus", () => editor.getInstanceState().isFocusMode, [editor]);
  const isDebugMode = useValue("debug", () => editor.getInstanceState().isDebugMode, [editor]);
  const {
    SharePanel,
    TopPanel,
    MenuPanel: MenuPanel2,
    StylePanel,
    Toolbar,
    HelpMenu,
    NavigationPanel,
    HelperButtons,
    DebugPanel
  } = useTldrawUiComponents();
  useKeyboardShortcuts();
  useNativeClipboardEvents();
  useEditorEvents();
  const { "toggle-focus-mode": toggleFocus } = useActions();
  return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)($054eb8030ebde76e$export$f5d03d415824e0e, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", {
    className: (0, import_classnames27.default)("tlui-layout", {
      "tlui-layout__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
    }),
    "data-breakpoint": breakpoint,
    children: [
      isFocusMode ? /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "tlui-layout__top", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiButton, {
        type: "icon",
        className: "tlui-focus-button",
        title: msg2("focus-mode.toggle-focus-mode"),
        onClick: () => toggleFocus.onSelect("menu"),
        children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiButtonIcon, { icon: "dot" })
      }) }) : /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(import_jsx_runtime142.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "tlui-layout__top", children: [
          /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "tlui-layout__top__left", children: [
            MenuPanel2 && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(MenuPanel2, {}),
            HelperButtons && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(HelperButtons, {})
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("div", { className: "tlui-layout__top__center", children: TopPanel && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TopPanel, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "tlui-layout__top__right", children: [
            SharePanel && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(SharePanel, {}),
            StylePanel && breakpoint >= PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(StylePanel, {})
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "tlui-layout__bottom", children: [
          /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)("div", { className: "tlui-layout__bottom__main", children: [
            NavigationPanel && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(NavigationPanel, {}),
            Toolbar && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Toolbar, {}),
            HelpMenu && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(HelpMenu, {})
          ] }),
          isDebugMode && DebugPanel && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(DebugPanel, {})
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Toasts, {}),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Dialogs, {}),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(ToastViewport, {}),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(FollowingIndicator, {})
    ]
  }) });
});

// node_modules/tldraw/dist-esm/lib/ui/hooks/usePreloadAssets.mjs
var import_react131 = __toESM(require_react(), 1);
var usePreloadFont = (id, font) => {
  const [state, setState] = (0, import_react131.useState)(2);
  (0, import_react131.useEffect)(() => {
    let cancelled2 = false;
    setState(2);
    preloadFont(id, font).then(() => {
      if (cancelled2)
        return;
      setState(0);
    }).catch((err) => {
      if (cancelled2)
        return;
      console.error(err);
      setState(1);
    });
    return () => {
      cancelled2 = true;
    };
  }, [id, font]);
  return state;
};
function getTypefaces(assetUrls) {
  return {
    draw: {
      url: assetUrls.fonts.draw,
      format: assetUrls.fonts.draw.split(".").pop()
    },
    serif: {
      url: assetUrls.fonts.serif,
      format: assetUrls.fonts.serif.split(".").pop()
    },
    sansSerif: {
      url: assetUrls.fonts.sansSerif,
      format: assetUrls.fonts.sansSerif.split(".").pop()
    },
    monospace: {
      url: assetUrls.fonts.monospace,
      format: assetUrls.fonts.monospace.split(".").pop()
    }
  };
}
function usePreloadAssets(assetUrls) {
  const typefaces = (0, import_react131.useMemo)(() => getTypefaces(assetUrls), [assetUrls]);
  const results = [
    usePreloadFont("tldraw_draw", typefaces.draw),
    usePreloadFont("tldraw_serif", typefaces.serif),
    usePreloadFont("tldraw_sans", typefaces.sansSerif),
    usePreloadFont("tldraw_mono", typefaces.monospace)
  ];
  return {
    error: results.some((result) => result === 1),
    done: !results.some((result) => result === 2)
  };
}

// node_modules/tldraw/dist-esm/lib/Tldraw.mjs
function Tldraw(props) {
  const {
    children,
    maxImageDimension,
    maxAssetSize,
    acceptedImageMimeTypes,
    acceptedVideoMimeTypes,
    onMount,
    components = {},
    shapeUtils = [],
    tools = [],
    ...rest
  } = props;
  const _components = useShallowObjectIdentity(components);
  const componentsWithDefault = (0, import_react132.useMemo)(() => ({
    Scribble: TldrawScribble,
    CollaboratorScribble: TldrawScribble,
    SelectionForeground: TldrawSelectionForeground,
    SelectionBackground: TldrawSelectionBackground,
    Handles: TldrawHandles,
    ..._components
  }), [_components]);
  const _shapeUtils = useShallowArrayIdentity(shapeUtils);
  const shapeUtilsWithDefaults = (0, import_react132.useMemo)(() => [...defaultShapeUtils, ..._shapeUtils], [_shapeUtils]);
  const _tools = useShallowArrayIdentity(tools);
  const toolsWithDefaults = (0, import_react132.useMemo)(() => [...defaultTools, ...defaultShapeTools, ..._tools], [_tools]);
  const assets = useDefaultEditorAssetsWithOverrides(rest.assetUrls);
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
  if (preloadingError) {
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(ErrorScreen, { children: "Could not load assets. Please refresh the page." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(LoadingScreen, { children: "Loading assets..." });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawEditor, {
    initialState: "select",
    ...rest,
    components: componentsWithDefault,
    shapeUtils: shapeUtilsWithDefaults,
    tools: toolsWithDefaults,
    children: /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(TldrawUi2, { ...rest, components: componentsWithDefault, children: [
      /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(InsideOfEditorAndUiContext, {
        maxImageDimension,
        maxAssetSize,
        acceptedImageMimeTypes,
        acceptedVideoMimeTypes,
        onMount
      }),
      children
    ] })
  });
}
var defaultAcceptedImageMimeTypes = Object.freeze([
  "image/jpeg",
  "image/png",
  "image/gif",
  "image/svg+xml"
]);
var defaultAcceptedVideoMimeTypes = Object.freeze(["video/mp4", "video/quicktime"]);
function InsideOfEditorAndUiContext({
  maxImageDimension = 1e3,
  maxAssetSize = 10 * 1024 * 1024,
  acceptedImageMimeTypes = defaultAcceptedImageMimeTypes,
  acceptedVideoMimeTypes = defaultAcceptedVideoMimeTypes,
  onMount
}) {
  const editor = useEditor();
  const toasts = useToasts();
  const msg2 = useTranslation();
  const onMountEvent = useEvent((editor2) => {
    const unsubs = [];
    unsubs.push(...registerDefaultSideEffects(editor2));
    registerDefaultExternalContentHandlers(editor2, {
      maxImageDimension,
      maxAssetSize,
      acceptedImageMimeTypes,
      acceptedVideoMimeTypes
    }, {
      toasts,
      msg: msg2
    });
    unsubs.push(onMount == null ? void 0 : onMount(editor2));
    return () => {
      unsubs.forEach((fn) => fn == null ? void 0 : fn());
    };
  });
  (0, import_react132.useLayoutEffect)(() => {
    if (editor)
      return onMountEvent == null ? void 0 : onMountEvent(editor);
  }, [editor, onMountEvent]);
  const { Canvas } = useEditorComponents();
  const { ContextMenu } = useTldrawUiComponents();
  if (ContextMenu) {
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(ContextMenu, {});
  }
  if (Canvas) {
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(Canvas, {});
  }
  return null;
}

// node_modules/tldraw/dist-esm/lib/TldrawImage.mjs
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var import_react133 = __toESM(require_react(), 1);
var TldrawImage = (0, import_react133.memo)(function TldrawImage2(props) {
  var _a2;
  const [url, setUrl] = (0, import_react133.useState)(null);
  const [container, setContainer] = (0, import_react133.useState)(null);
  const shapeUtils = useShallowArrayIdentity((_a2 = props.shapeUtils) != null ? _a2 : []);
  const shapeUtilsWithDefaults = (0, import_react133.useMemo)(() => [...defaultShapeUtils, ...shapeUtils], [shapeUtils]);
  const store2 = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults });
  const assets = useDefaultEditorAssetsWithOverrides();
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
  const {
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    format = "svg"
  } = props;
  (0, import_react133.useLayoutEffect)(() => {
    if (!container)
      return;
    if (!store2)
      return;
    if (!preloadingComplete)
      return;
    let isCancelled = false;
    const tempElm = document.createElement("div");
    container.appendChild(tempElm);
    container.classList.add("tl-container", "tl-theme__light");
    const editor = new Editor({
      store: store2,
      shapeUtils: shapeUtilsWithDefaults != null ? shapeUtilsWithDefaults : [],
      tools: [],
      getContainer: () => tempElm
    });
    if (pageId)
      editor.setCurrentPage(pageId);
    const shapeIds = editor.getCurrentPageShapeIds();
    async function setSvg() {
      const svgResult = await editor.getSvgString([...shapeIds], {
        bounds,
        scale,
        background,
        padding,
        darkMode,
        preserveAspectRatio
      });
      if (svgResult && !isCancelled) {
        if (format === "svg") {
          if (!isCancelled) {
            const blob = new Blob([svgResult.svg], { type: "image/svg+xml" });
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        } else if (format === "png") {
          const blob = await getSvgAsImage(svgResult.svg, editor.environment.isSafari, {
            type: format,
            quality: 1,
            scale: 2,
            width: svgResult.width,
            height: svgResult.height
          });
          if (blob && !isCancelled) {
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        }
      }
      editor.dispose();
    }
    setSvg();
    return () => {
      isCancelled = true;
    };
  }, [
    format,
    container,
    store2,
    shapeUtilsWithDefaults,
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    preloadingComplete,
    preloadingError
  ]);
  if (preloadingError) {
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(ErrorScreen, { children: "Could not load assets." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(LoadingScreen, { children: "Loading assets..." });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("div", { ref: setContainer, style: { position: "relative", width: "100%", height: "100%" }, children: url && /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("img", { src: url, style: { width: "100%", height: "100%" } }) });
});

// node_modules/tldraw/dist-esm/lib/ui/components/OfflineIndicator/OfflineIndicator.mjs
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
var import_classnames28 = __toESM(require_classnames(), 1);
var import_react134 = __toESM(require_react(), 1);

// node_modules/tldraw/dist-esm/lib/utils/tldr/file.mjs
var schemaV1 = validation_exports.object({
  schemaVersion: validation_exports.literal(1),
  storeVersion: validation_exports.positiveInteger,
  recordVersions: validation_exports.dict(validation_exports.string, validation_exports.object({
    version: validation_exports.positiveInteger,
    subTypeVersions: validation_exports.dict(validation_exports.string, validation_exports.positiveInteger).optional(),
    subTypeKey: validation_exports.string.optional()
  }))
});
var schemaV2 = validation_exports.object({
  schemaVersion: validation_exports.literal(2),
  sequences: validation_exports.dict(validation_exports.string, validation_exports.positiveInteger)
});
var tldrawFileValidator = validation_exports.object({
  tldrawFileFormatVersion: validation_exports.nonZeroInteger,
  schema: validation_exports.numberUnion("schemaVersion", {
    1: schemaV1,
    2: schemaV2
  }),
  records: validation_exports.arrayOf(validation_exports.object({
    id: validation_exports.string,
    typeName: validation_exports.string
  }).allowUnknownProperties())
});

// src/tldraw/writing/tldraw-writing-editor.tsx
var import_react136 = __toESM(require_react());

// src/utils/tldraw-helpers.ts
var import_react135 = __toESM(require_react());

// src/notices/stroke-limit-notice.ts
var import_timers = require("timers");
function showStrokeLimitTips_maybe(plugin) {
  if (plugin.settings.onboardingTips.strokeLimitTipRead)
    return;
  showStrokeLimitTips_debounced(plugin);
}
var tips_timeouts = [];
var tipsShowingOrDismissed2 = false;
function showStrokeLimitTips_debounced(plugin) {
  while (tips_timeouts.length > 0) {
    (0, import_timers.clearTimeout)(tips_timeouts.pop());
  }
  const newTimeout = setTimeout(() => {
    showStrokeLimitTips(plugin);
  }, 5e3);
  tips_timeouts.push(newTimeout);
}
function showStrokeLimitTips(plugin) {
  if (tipsShowingOrDismissed2)
    return;
  tipsShowingOrDismissed2 = true;
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`Lines disappearing?`);
  noticeBody.createEl("p").setText(`You may have noticed that your handwriting lines have started disapearing...`);
  const {
    primaryBtnEl,
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    primaryLabel: "Learn why",
    tertiaryLabel: "Dismiss for now"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (tertiaryBtnEl) {
    tertiaryBtnEl.addEventListener("click", () => {
      notice.hide();
    });
  }
  if (primaryBtnEl) {
    primaryBtnEl.addEventListener("click", () => {
      notice.hide();
      showFullStrokeLimitTip(plugin);
    });
  }
}
function showFullStrokeLimitTip(plugin) {
  const noticeBody = createInkNoticeTemplate();
  noticeBody.createEl("h1").setText(`To help keep writing smooth...`);
  noticeBody.createEl("p").setText(`Hiding old strokes helps keep pen latency down and the writing experience smooth.`);
  noticeBody.createEl("p").setText(`Never fear though, all your strokes still exist and will become visible again later.`);
  noticeBody.createEl("p").setText(`You can adjust the stroke limit in the settings.`);
  const {
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    tertiaryLabel: "Dismiss"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (tertiaryBtnEl) {
    tertiaryBtnEl.addEventListener("click", () => {
      notice.hide();
      tipsShowingOrDismissed2 = false;
      plugin.settings.onboardingTips.strokeLimitTipRead = true;
      plugin.saveSettings();
    });
  }
}

// src/utils/tldraw-helpers.ts
function getActivityType(entry) {
  const activitySummary = getActivitySummary(entry);
  if (activitySummary.drawShapesCompleted)
    return 5 /* DrawingCompleted */;
  if (activitySummary.drawShapesStarted)
    return 3 /* DrawingStarted */;
  if (activitySummary.drawShapesContinued)
    return 4 /* DrawingContinued */;
  if (activitySummary.drawShapesRemoved)
    return 6 /* DrawingErased */;
  if (activitySummary.cameraMoved && activitySummary.pointerMoved)
    return 1 /* CameraMovedManually */;
  if (activitySummary.cameraMoved && !activitySummary.pointerMoved)
    return 2 /* CameraMovedAutomatically */;
  if (activitySummary.pointerMoved)
    return 0 /* PointerMoved */;
  return 8 /* Unclassified */;
}
function getActivitySummary(entry) {
  const summary = {
    pointerMoved: false,
    pointerScribbled: false,
    cameraMoved: false,
    drawShapesStarted: 0,
    drawShapesContinued: 0,
    drawShapesCompleted: 0,
    drawShapesRemoved: 0
  };
  const addedRecords = Object.values(entry.changes.added);
  if (addedRecords) {
    for (let i = 0; i < addedRecords.length; i++) {
      const record = addedRecords[i];
      if (record.typeName == "shape" && record.type == "draw") {
        summary.drawShapesStarted += 1;
        if (record.props.isComplete === true) {
          summary.drawShapesCompleted += 1;
        }
        ;
      }
    }
  }
  const updatedRecords = Object.values(entry.changes.updated);
  if (updatedRecords) {
    for (let i = 0; i < updatedRecords.length; i++) {
      const recordFinalState = updatedRecords[i][1];
      if (recordFinalState.typeName == "shape" && recordFinalState.type == "draw") {
        if (recordFinalState.props.isComplete === true) {
          summary.drawShapesCompleted += 1;
        } else {
          summary.drawShapesContinued += 1;
        }
      } else if (recordFinalState.typeName == "pointer") {
        summary.pointerMoved = true;
      } else if (recordFinalState.typeName == "camera") {
        summary.cameraMoved = true;
      } else if (recordFinalState.typeName == "instance") {
        if (recordFinalState.scribbles)
          summary.pointerScribbled = true;
      }
    }
  }
  const removedRecords = Object.values(entry.changes.removed);
  if (removedRecords) {
    for (let i = 0; i < removedRecords.length; i++) {
      const record = removedRecords[i];
      if (record.typeName == "shape" && record.type == "draw") {
        summary.drawShapesRemoved += 1;
      }
    }
  }
  return summary;
}
function preventTldrawCanvasesCausingObsidianGestures(tlEditor) {
  const tlContainer = tlEditor.getContainer();
  const tlCanvas = tlContainer.getElementsByClassName("tl-canvas")[0];
  if (!tlCanvas)
    return;
  tlCanvas.addEventListener("touchmove", (e) => {
    e.stopPropagation();
  });
}
function initWritingCamera(editor, topMarginPx = 0) {
  let canvasWidth = editor.getContainer().innerWidth;
  let containerMargin = 0;
  let containerWidth = 2e3;
  let visibleWidth = containerWidth + 2 * containerMargin;
  const zoom = canvasWidth / visibleWidth;
  let x = containerMargin;
  let y = topMarginPx;
  silentlyChangeStore(editor, () => {
    editor.setCamera({
      x,
      y,
      z: zoom
    });
  });
}
function initDrawingCamera(editor) {
  const allShapesBounds = editor.getCurrentPageBounds();
  if (!allShapesBounds)
    return;
  const targetZoom = 1;
  editor.zoomToBounds(allShapesBounds, { targetZoom });
}
function initWritingCameraLimits(editor) {
  return {
    x: {
      min: editor.getCamera().x,
      max: editor.getCamera().x
    },
    zoom: {
      min: editor.getCamera().z,
      max: editor.getCamera().z
    }
  };
}
function restrictWritingCamera(editor, cameraLimits) {
  const bounds = editor.getCurrentPageBounds();
  if (!bounds)
    return;
  const yMin = bounds.minY - 500;
  const yMax = bounds.maxY + 1e3;
  let x = editor.getCamera().x;
  let y = editor.getCamera().y;
  let zoom = editor.getZoomLevel();
  x = Math.max(x, cameraLimits.x.min);
  x = Math.min(x, cameraLimits.x.max);
  y = Math.max(y, yMin);
  y = Math.min(y, yMax);
  zoom = Math.max(zoom, cameraLimits.zoom.min);
  zoom = Math.min(zoom, cameraLimits.zoom.max);
  silentlyChangeStore(editor, () => {
    editor.setCamera({
      x,
      y,
      z: zoom
    });
  });
}
function adaptTldrawToObsidianThemeMode(editor) {
  const isDarkMode = document.body.classList.contains("theme-dark");
  if (isDarkMode) {
    setUserPreferences({
      id: "dummy-id",
      isDarkMode: true
    });
  } else {
    setUserPreferences({
      id: "dummy-id",
      isDarkMode: false
    });
  }
}
function getCompleteShapes(editor) {
  const allShapes = editor.getCurrentPageShapes();
  let completeShapes = [];
  for (let i = 0; i < allShapes.length; i++) {
    const shape = allShapes[i];
    if (shape.props.isComplete === true)
      completeShapes.push(shape);
  }
  completeShapes.sort((a, b) => {
    return a.y - b.y;
  });
  return completeShapes;
}
var useStash = (plugin) => {
  const stash = (0, import_react135.useRef)([]);
  const stashStaleContent = (editor) => {
    const completeShapes = getCompleteShapes(editor);
    const staleShapeIds = [];
    const staleShapes = [];
    for (let i = 0; i <= completeShapes.length - plugin.settings.writingStrokeLimit; i++) {
      const record = completeShapes[i];
      if (record.type !== "draw")
        return;
      staleShapeIds.push(record.id);
      staleShapes.push(record);
    }
    stash.current.push(...staleShapes);
    silentlyChangeStore(editor, () => {
      editor.store.remove(staleShapeIds);
    });
    try {
      if (staleShapeIds.length >= 5)
        showStrokeLimitTips_maybe(plugin);
    } catch (error) {
      console.log("StatchStaleContent when calling showStrokeLimitTips_maybe", error);
    }
  };
  const unstashStaleContent = (editor) => {
    silentlyChangeStore(editor, () => {
      editor.store.put(stash.current);
    });
    stash.current.length = 0;
  };
  return { stashStaleContent, unstashStaleContent };
};
var hideWritingTemplate = (editor) => {
  hideWritingContainer(editor);
  hideWritingLines(editor);
};
var unhideWritingTemplate = (editor) => {
  unhideWritingContainer(editor);
  unhideWritingLines(editor);
};
var hideWritingContainer = (editor) => {
  const writingContainerShape = editor.getShape("shape:writing-container");
  if (!writingContainerShape)
    return;
  const savedH = writingContainerShape.props.h;
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingContainerShape);
    editor.updateShape({
      id: writingContainerShape.id,
      type: writingContainerShape.type,
      props: {
        h: 0
      },
      meta: {
        savedH
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingContainerShape);
  });
};
var hideWritingLines = (editor) => {
  const writingLinesShape = editor.getShape("shape:writing-lines");
  if (!writingLinesShape)
    return;
  const savedH = writingLinesShape.props.h;
  editor.store.update(writingLinesShape.id, (record) => {
    record.isLocked = false;
    return record;
  });
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingLinesShape);
    editor.updateShape({
      id: writingLinesShape.id,
      type: writingLinesShape.type,
      props: {
        h: 0
      },
      meta: {
        savedH
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingLinesShape);
  });
};
var unhideWritingContainer = (editor) => {
  const writingContainerShape = editor.getShape("shape:writing-container");
  if (!writingContainerShape)
    return;
  const h = writingContainerShape.meta.savedH;
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingContainerShape);
    editor.updateShape({
      id: writingContainerShape.id,
      type: writingContainerShape.type,
      props: {
        h
      },
      meta: {
        savedH: void 0
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingContainerShape);
  });
};
var unhideWritingLines = (editor) => {
  const writingLinesShape = editor.getShape("shape:writing-lines");
  if (!writingLinesShape)
    return;
  const h = writingLinesShape.meta.savedH;
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingLinesShape);
    editor.updateShape({
      id: writingLinesShape.id,
      type: writingLinesShape.type,
      props: {
        h
      },
      meta: {
        savedH: void 0
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingLinesShape);
  });
};
var silentlyChangeStore = (editor, func) => {
  editor.store.mergeRemoteChanges(func);
};
function prepareWritingSnapshot(snapshot) {
  return deleteObsoleteTemplateShapes(snapshot);
}
function prepareDrawingSnapshot(snapshot) {
  return snapshot;
}
function deleteObsoleteTemplateShapes(snapshot) {
  let obsoleteShapeIds = [
    "shape:primary_container",
    "shape:handwriting_lines"
  ];
  const filteredStore = Object.entries(snapshot.store).filter(([key, tlRecord]) => {
    const isObsoleteObj = obsoleteShapeIds.some((obsId) => tlRecord.id === obsId);
    if (isObsoleteObj) {
      console.log("Removing old ink element to update file:", tlRecord);
      return false;
    }
    return true;
  });
  const updatedSnapshot = JSON.parse(JSON.stringify(snapshot));
  updatedSnapshot.store = Object.fromEntries(filteredStore);
  return updatedSnapshot;
}
var updateWritingStoreIfNeeded = (editor) => {
  addNewTemplateShapes(editor);
};
function addNewTemplateShapes(editor) {
  const hasLines = editor.store.has("shape:writing-lines");
  if (!hasLines) {
    editor.createShape({
      id: "shape:writing-lines",
      type: "writing-lines"
    });
  }
  const hasContainer = editor.store.has("shape:writing-container");
  if (!hasContainer) {
    editor.createShape({
      id: "shape:writing-container",
      type: "writing-container"
    });
  }
}
function unlockShape(editor, shape) {
  editor.store.update(shape.id, (record) => {
    const newRecord = JSON.parse(JSON.stringify(record));
    newRecord.isLocked = false;
    return newRecord;
  });
}
function lockShape(editor, shape) {
  editor.store.update(shape.id, (record) => {
    const newRecord = JSON.parse(JSON.stringify(record));
    newRecord.isLocked = true;
    return newRecord;
  });
}

// src/tldraw/writing-shapes/writing-container.tsx
var React51 = __toESM(require_react());
var WritingContainerUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    this.canBind = (shape) => false;
    this.hideRotateHandle = (shape) => true;
    this.onTranslate = (initShape, newShape) => {
      return initShape;
    };
    this.onResize = (shape, info) => {
      return resizeBox(shape, info, {
        minWidth: WRITING_PAGE_WIDTH,
        maxWidth: WRITING_PAGE_WIDTH,
        minHeight: WRITING_MIN_PAGE_HEIGHT,
        maxHeight: 5e4
      });
    };
  }
  getDefaultProps() {
    return {
      w: WRITING_PAGE_WIDTH,
      h: WRITING_MIN_PAGE_HEIGHT
    };
  }
  getGeometry(shape) {
    return new Rectangle2d({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: false
    });
  }
  component(shape) {
    return /* @__PURE__ */ React51.createElement(SVGContainer, null, this.createSvg(shape));
  }
  indicator(shape) {
    return /* @__PURE__ */ React51.createElement(React51.Fragment, null, /* @__PURE__ */ React51.createElement("rect", {
      width: shape.props.w,
      height: shape.props.h,
      rx: 20,
      ry: 20
    }));
  }
  toSvg(shape, ctx) {
    return this.createSvg(shape);
  }
  createSvg(shape) {
    this.isAspectRatioLocked(shape);
    return /* @__PURE__ */ React51.createElement(React51.Fragment, null, /* @__PURE__ */ React51.createElement("rect", {
      width: shape.props.w,
      height: shape.props.h,
      opacity: 0
    }));
  }
};
WritingContainerUtil.type = "writing-container";

// src/tldraw/writing-menu/writing-menu.tsx
var React57 = __toESM(require_react());

// src/graphics/icons/write-icon.tsx
var React52 = __toESM(require_react());
var WriteIcon = (props) => /* @__PURE__ */ React52.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React52.createElement("path", {
  d: "m499-287 335-335-52-52-335 335 52 52Zm-379-62q0 29 20 45t66 21q16 2 25.5 14.5T240-240q-1 17-12 28t-27 9q-81-10-121-46.5T40-349q0-65 53.5-105.5T242-503q39-3 58.5-12.5T320-542q0-22-21-34.5T230-596q-16-2-25.5-15t-7.5-29q2-17 14-27.5t28-8.5q83 12 122 44.5t39 89.5q0 53-38.5 83T248-423q-64 5-96 23.5T120-349Zm398 156L353-358l382-382q20-20 47.5-20t47.5 20l70 70q20 20 20 47.5T900-575L518-193Zm-159 33q-17 4-30-9t-9-30l33-159 165 165-159 33Z"
}));

// src/graphics/icons/erase-icon.tsx
var React53 = __toESM(require_react());
var EraseIcon = (props) => /* @__PURE__ */ React53.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React53.createElement("path", {
  d: "M690-240h150q17 0 28.5 11.5T880-200q0 17-11.5 28.5T840-160H610l80-80Zm-483 80q-8 0-15.5-3t-13.5-9l-73-73q-23-23-23.5-57t22.5-58l440-456q23-24 56.5-24t56.5 23l199 199q23 23 23 57t-23 57L532-172q-6 6-13.5 9t-15.5 3H207Zm279-80 314-322-198-198-442 456 64 64h262Zm-6-240Z"
}));

// src/graphics/icons/select-icon.tsx
var React54 = __toESM(require_react());
var SelectIcon = (props) => /* @__PURE__ */ React54.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React54.createElement("path", {
  d: "m320-410 79-110h170L320-716v306Zm286 305q-23 11-46 2.5T526-134L406-392l-93 130q-17 24-45 15t-28-38v-513q0-25 22.5-36t42.5 5l404 318q23 17 13.5 44T684-440H516l119 255q11 23 2.5 46T606-105ZM399-520Z"
}));

// src/graphics/icons/undo-icon.tsx
var React55 = __toESM(require_react());
var UndoIcon = (props) => /* @__PURE__ */ React55.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React55.createElement("path", {
  d: "M320-200q-17 0-28.5-11.5T280-240q0-17 11.5-28.5T320-280h244q63 0 109.5-40T720-420q0-60-46.5-100T564-560H312l76 76q11 11 11 28t-11 28q-11 11-28 11t-28-11L188-572q-6-6-8.5-13t-2.5-15q0-8 2.5-15t8.5-13l144-144q11-11 28-11t28 11q11 11 11 28t-11 28l-76 76h252q97 0 166.5 63T800-420q0 94-69.5 157T564-200H320Z"
}));

// src/graphics/icons/redo-icon.tsx
var React56 = __toESM(require_react());
var RedoIcon = (props) => /* @__PURE__ */ React56.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React56.createElement("path", {
  d: "M648-560H396q-63 0-109.5 40T240-420q0 60 46.5 100T396-280h244q17 0 28.5 11.5T680-240q0 17-11.5 28.5T640-200H396q-97 0-166.5-63T160-420q0-94 69.5-157T396-640h252l-76-76q-11-11-11-28t11-28q11-11 28-11t28 11l144 144q6 6 8.5 13t2.5 15q0 8-2.5 15t-8.5 13L628-428q-11 11-28 11t-28-11q-11-11-11-28t11-28l76-76Z"
}));

// src/tldraw/writing-menu/writing-menu.tsx
var WritingMenu = (props) => {
  return /* @__PURE__ */ React57.createElement(React57.Fragment, null, /* @__PURE__ */ React57.createElement("div", {
    className: "ink_menu-bar"
  }, /* @__PURE__ */ React57.createElement("div", {
    className: "ink_quick-menu"
  }, /* @__PURE__ */ React57.createElement("button", {
    onPointerDown: props.onUndoClick,
    disabled: !props.canUndo
  }, /* @__PURE__ */ React57.createElement(UndoIcon, null)), /* @__PURE__ */ React57.createElement("button", {
    onPointerDown: props.onRedoClick,
    disabled: !props.canRedo
  }, /* @__PURE__ */ React57.createElement(RedoIcon, null))), /* @__PURE__ */ React57.createElement("div", {
    className: "ink_tool-menu"
  }, /* @__PURE__ */ React57.createElement("button", {
    onPointerDown: props.onSelectClick,
    disabled: props.curTool === "select" /* select */
  }, /* @__PURE__ */ React57.createElement(SelectIcon, null)), /* @__PURE__ */ React57.createElement("button", {
    onPointerDown: props.onDrawClick,
    disabled: props.curTool === "draw" /* draw */
  }, /* @__PURE__ */ React57.createElement(WriteIcon, null)), /* @__PURE__ */ React57.createElement("button", {
    onPointerDown: props.onEraseClick,
    disabled: props.curTool === "eraser" /* eraser */
  }, /* @__PURE__ */ React57.createElement(EraseIcon, null))), /* @__PURE__ */ React57.createElement("div", {
    className: "ink_other-menu"
  })));
};

// src/tldraw/writing/tldraw-writing-editor.tsx
var React64 = __toESM(require_react());

// src/tldraw/primary-menu-bar/primary-menu-bar.tsx
var React58 = __toESM(require_react());
var PrimaryMenuBar = (props) => {
  const scrollContainerElRef = React58.useRef(null);
  const primaryMenuBarElRef = React58.useRef(null);
  React58.useEffect(() => {
    initScrollHandler();
    return () => {
      cleanUpScrollHandler();
    };
  });
  return /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement("div", {
    ref: primaryMenuBarElRef,
    className: "ink_write_primary-menu-bar"
  }, props.children));
  function initScrollHandler() {
    const primaryMenuBar = primaryMenuBarElRef.current;
    const scrollEl = primaryMenuBar == null ? void 0 : primaryMenuBar.closest(".cm-scroller");
    if (!scrollEl)
      return;
    scrollEl.addEventListener("scroll", handleScrolling);
    scrollEl.dispatchEvent(new CustomEvent("scroll"));
  }
  function cleanUpScrollHandler() {
    const scrollEl = scrollContainerElRef.current;
    scrollEl == null ? void 0 : scrollEl.removeEventListener("scroll", handleScrolling);
  }
  function handleScrolling(e) {
    const scrollEl = e.target;
    const pageScrollY = scrollEl.scrollTop;
    const primaryMenuBar = primaryMenuBarElRef.current;
    const containerEl = primaryMenuBar == null ? void 0 : primaryMenuBar.parentElement;
    if (!primaryMenuBar)
      return;
    if (!containerEl)
      return;
    let containerPosY = containerEl.getBoundingClientRect().top - scrollEl.getBoundingClientRect().top || 0;
    const menuBarHeight = primaryMenuBar.getBoundingClientRect().height;
    const containerHeight = containerEl.getBoundingClientRect().height;
    containerPosY -= Number(menuBarHeight);
    const containerOffsetY = containerPosY;
    const scrolledOffTopEdge = containerOffsetY < 0;
    const scrolledOffBottomEdge = containerOffsetY + containerHeight < 0;
    if (scrolledOffBottomEdge) {
      const top = containerHeight + "px";
      primaryMenuBar.style.top = top;
    } else if (scrolledOffTopEdge) {
      const top = Math.abs(containerOffsetY) + "px";
      primaryMenuBar.style.top = top;
    } else {
      primaryMenuBar.style.removeProperty("top");
    }
  }
};

// src/graphics/icons/lock-icon.tsx
var React59 = __toESM(require_react());
var LockIcon = (props) => /* @__PURE__ */ React59.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React59.createElement("path", {
  d: "M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm0-80h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80ZM240-160v-400 400Z"
}));

// src/tldraw/extended-writing-menu/extended-writing-menu.tsx
var React62 = __toESM(require_react());

// src/tldraw/overflow-menu/overflow-menu.tsx
var import_obsidian6 = require("obsidian");
var React61 = __toESM(require_react());

// src/graphics/icons/overflow-icon.tsx
var React60 = __toESM(require_react());
var OverflowIcon = (props) => /* @__PURE__ */ React60.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: 24,
  viewBox: "0 -960 960 960",
  width: 24,
  ...props
}, /* @__PURE__ */ React60.createElement("path", {
  d: "M480-160q-33 0-56.5-23.5T400-240q0-33 23.5-56.5T480-320q33 0 56.5 23.5T560-240q0 33-23.5 56.5T480-160Zm0-240q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm0-240q-33 0-56.5-23.5T400-720q0-33 23.5-56.5T480-800q33 0 56.5 23.5T560-720q0 33-23.5 56.5T480-640Z"
}));

// src/tldraw/overflow-menu/overflow-menu.tsx
var OverflowMenu = (props) => {
  const menu = new import_obsidian6.Menu();
  props.menuOptions.forEach((menuOption) => {
    menu.addItem((item) => item.setTitle(menuOption.text).onClick(() => {
      menuOption.action();
    }));
  });
  return /* @__PURE__ */ React61.createElement(React61.Fragment, null, /* @__PURE__ */ React61.createElement("div", {
    className: "ddc_ink_overflow-button-and-menu"
  }, /* @__PURE__ */ React61.createElement("button", {
    className: "ddc_ink_btn-slim",
    onClick: (e) => {
      menu.showAtMouseEvent(e.nativeEvent);
    }
  }, /* @__PURE__ */ React61.createElement(OverflowIcon, null))));
  {
  }
  {
  }
};
var overflow_menu_default = OverflowMenu;

// src/tldraw/extended-writing-menu/extended-writing-menu.tsx
var ExtendedWritingMenu = (props) => {
  return /* @__PURE__ */ React62.createElement(React62.Fragment, null, /* @__PURE__ */ React62.createElement("div", {
    className: "ink_extended-writing-menu"
  }, /* @__PURE__ */ React62.createElement("button", {
    onPointerDown: () => props.onLockClick()
  }, /* @__PURE__ */ React62.createElement(LockIcon, null)), /* @__PURE__ */ React62.createElement(overflow_menu_default, {
    menuOptions: props.menuOptions
  })));
};
var extended_writing_menu_default = ExtendedWritingMenu;

// src/tldraw/writing/tldraw-writing-editor.tsx
var import_classnames29 = __toESM(require_classnames());

// src/tldraw/writing-shapes/writing-lines.tsx
var React63 = __toESM(require_react());
var WritingLinesUtil = class extends ShapeUtil {
  constructor() {
    super(...arguments);
    this.canBind = (shape) => false;
    this.hideRotateHandle = (shape) => true;
    this.onTranslate = (initShape, newShape) => {
      return initShape;
    };
    this.onResize = (shape, info) => {
      return resizeBox(shape, info, {
        minWidth: WRITING_PAGE_WIDTH,
        maxWidth: WRITING_PAGE_WIDTH,
        minHeight: WRITING_MIN_PAGE_HEIGHT,
        maxHeight: 5e4
      });
    };
  }
  getDefaultProps() {
    return {
      x: 0,
      y: 0,
      w: WRITING_PAGE_WIDTH,
      h: WRITING_MIN_PAGE_HEIGHT
    };
  }
  getGeometry(shape) {
    return new Rectangle2d({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: false
    });
  }
  indicator(shape) {
    return /* @__PURE__ */ React63.createElement(React63.Fragment, null, /* @__PURE__ */ React63.createElement("rect", {
      width: shape.props.w,
      height: shape.props.h,
      rx: 20,
      ry: 20
    }));
  }
  component(shape) {
    return /* @__PURE__ */ React63.createElement(SVGContainer, null, this.createSvg(shape));
  }
  toSvg(shape, ctx) {
    return this.createSvg(shape);
  }
  createSvg(shape) {
    const numberOfLines = Math.floor(shape.props.h / WRITING_LINE_HEIGHT);
    const margin = 0.05 * shape.props.w;
    this.isAspectRatioLocked(shape);
    const lines = Array.from({ length: numberOfLines }, (_, index2) => /* @__PURE__ */ React63.createElement("line", {
      key: index2,
      x1: margin,
      y1: (index2 + 1) * WRITING_LINE_HEIGHT,
      x2: shape.props.w - margin,
      y2: (index2 + 1) * WRITING_LINE_HEIGHT
    }));
    return /* @__PURE__ */ React63.createElement(React63.Fragment, null, lines);
  }
};
WritingLinesUtil.type = "writing-lines";

// src/tldraw/writing/tldraw-writing-editor.tsx
var MyCustomShapes = [WritingContainerUtil, WritingLinesUtil];
var myOverrides = {};
function TldrawWritingEditor(props) {
  const shortDelayPostProcessTimeoutRef = (0, import_react136.useRef)();
  const longDelayPostProcessTimeoutRef = (0, import_react136.useRef)();
  const editorRef = (0, import_react136.useRef)();
  const [curTool, setCurTool] = React64.useState("draw" /* draw */);
  const [canUndo, setCanUndo] = React64.useState(false);
  const [canRedo, setCanRedo] = React64.useState(false);
  const [storeSnapshot] = React64.useState(prepareWritingSnapshot(props.pageData.tldraw));
  const { stashStaleContent, unstashStaleContent } = useStash(props.plugin);
  const cameraLimitsRef = (0, import_react136.useRef)();
  const [embedHeight, setEmbedHeight] = React64.useState();
  const [preventTransitions, setPreventTransitions] = React64.useState(true);
  function undo() {
    const editor = editorRef.current;
    if (!editor)
      return;
    silentlyChangeStore(editor, () => {
      editor.undo();
    });
    instantInputPostProcess(editor);
    smallDelayInputPostProcess(editor);
    longDelayInputPostProcess(editor);
  }
  function redo() {
    const editor = editorRef.current;
    if (!editor)
      return;
    silentlyChangeStore(editor, () => {
      editor.redo();
    });
    instantInputPostProcess(editor);
    smallDelayInputPostProcess(editor);
    longDelayInputPostProcess(editor);
  }
  function activateSelectTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("select");
    setCurTool("select" /* select */);
  }
  function activateDrawTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("draw");
    setCurTool("draw" /* draw */);
  }
  function activateEraseTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("eraser");
    setCurTool("eraser" /* eraser */);
  }
  const handleMount = (_editor) => {
    const editor = editorRef.current = _editor;
    updateWritingStoreIfNeeded(editor);
    if (isEmptyWritingFile(editor)) {
      setPreventTransitions(false);
    } else {
      setTimeout(() => {
        setPreventTransitions(false);
      }, 50);
    }
    preventTldrawCanvasesCausingObsidianGestures(editor);
    adaptTldrawToObsidianThemeMode(editor);
    resizeWritingTemplateInvitingly(editor);
    resizeContainerIfEmbed(editor);
    editor.updateInstanceState({ isDebugMode: false });
    if (props.embedded) {
      initWritingCamera(editor);
      editor.updateInstanceState({ canMoveCamera: false });
    } else {
      initWritingCamera(editor, MENUBAR_HEIGHT_PX);
      cameraLimitsRef.current = initWritingCameraLimits(editor);
    }
    activateDrawTool();
    const removeUserActionListener = editor.store.listen((entry) => {
      const activity = getActivityType(entry);
      switch (activity) {
        case 0 /* PointerMoved */:
          break;
        case 2 /* CameraMovedAutomatically */:
        case 1 /* CameraMovedManually */:
          if (cameraLimitsRef.current)
            restrictWritingCamera(editor, cameraLimitsRef.current);
          unstashStaleContent(editor);
          break;
        case 3 /* DrawingStarted */:
          resetInputPostProcessTimers();
          stashStaleContent(editor);
          break;
        case 4 /* DrawingContinued */:
          resetInputPostProcessTimers();
          break;
        case 5 /* DrawingCompleted */:
          instantInputPostProcess(editor, entry);
          smallDelayInputPostProcess(editor);
          longDelayInputPostProcess(editor);
          break;
        case 6 /* DrawingErased */:
          instantInputPostProcess(editor, entry);
          smallDelayInputPostProcess(editor);
          longDelayInputPostProcess(editor);
          break;
        default:
      }
    }, {
      source: "user",
      scope: "all"
    });
    const removeStoreChangeListener = editor.store.listen((entry) => {
      setCanUndo(editor.getCanUndo());
      setCanRedo(editor.getCanRedo());
    });
    const unmountActions = () => {
      resetInputPostProcessTimers();
      removeUserActionListener();
      removeStoreChangeListener();
    };
    if (props.registerControls) {
      props.registerControls({
        saveAndHalt: async () => {
          await completeSave(editor);
          unmountActions();
        },
        resize: () => {
          const camera = editor.getCamera();
          const cameraY = camera.y;
          initWritingCamera(editor);
          editor.setCamera({ x: camera.x, y: cameraY });
        }
      });
    }
    if (props.onReady)
      props.onReady();
    return () => {
      unmountActions();
    };
  };
  const resizeContainerIfEmbed = (editor) => {
    if (!props.embedded)
      return;
    const embedBounds = editor.getViewportScreenBounds();
    const contentBounds = getTemplateBounds(editor);
    if (contentBounds) {
      const contentRatio = contentBounds.w / contentBounds.h;
      const newEmbedHeight = embedBounds.w / contentRatio;
      setEmbedHeight(newEmbedHeight);
    }
  };
  const getTemplateBounds = (editor) => {
    const bounds = editor.getShapePageBounds("shape:writing-container");
    if (bounds) {
      return bounds;
    } else {
      return new Box();
    }
  };
  const instantInputPostProcess = (editor, entry) => {
    resizeWritingTemplateInvitingly(editor);
    resizeContainerIfEmbed(editor);
    entry && simplifyLines(editor, entry);
  };
  const smallDelayInputPostProcess = (editor) => {
    resetShortPostProcessTimer();
    shortDelayPostProcessTimeoutRef.current = setTimeout(() => {
      incrementalSave(editor);
    }, WRITE_SHORT_DELAY_MS);
  };
  const longDelayInputPostProcess = (editor) => {
    resetLongPostProcessTimer();
    longDelayPostProcessTimeoutRef.current = setTimeout(() => {
      completeSave(editor);
    }, WRITE_LONG_DELAY_MS);
  };
  const resetShortPostProcessTimer = () => {
    clearTimeout(shortDelayPostProcessTimeoutRef.current);
  };
  const resetLongPostProcessTimer = () => {
    clearTimeout(longDelayPostProcessTimeoutRef.current);
  };
  const resetInputPostProcessTimers = () => {
    resetShortPostProcessTimer();
    resetLongPostProcessTimer();
  };
  const incrementalSave = async (editor) => {
    unstashStaleContent(editor);
    const tldrawData = editor.store.getSnapshot();
    stashStaleContent(editor);
    const pageData = buildWritingFileData({
      tldrawData,
      previewIsOutdated: true
    });
    props.save(pageData);
  };
  const completeSave = async (editor) => {
    let previewUri;
    unstashStaleContent(editor);
    const tldrawData = editor.store.getSnapshot();
    const svgObj = await getWritingSvg(editor);
    stashStaleContent(editor);
    if (svgObj) {
      previewUri = svgObj.svg;
    }
    if (previewUri) {
      const pageData = buildWritingFileData({
        tldrawData,
        previewUri
      });
      props.save(pageData);
    } else {
      const pageData = buildWritingFileData({
        tldrawData
      });
      props.save(pageData);
    }
    return;
  };
  return /* @__PURE__ */ React64.createElement(React64.Fragment, null, /* @__PURE__ */ React64.createElement("div", {
    className: (0, import_classnames29.default)([
      "ddc_ink_writing-editor",
      preventTransitions && "preventTransitions"
    ]),
    style: {
      height: props.embedded ? embedHeight + "px" : "100%",
      position: "relative"
    }
  }, /* @__PURE__ */ React64.createElement(Tldraw, {
    snapshot: storeSnapshot,
    onMount: handleMount,
    shapeUtils: MyCustomShapes,
    overrides: myOverrides,
    hideUi: true,
    autoFocus: props.embedded ? false : true
  }), /* @__PURE__ */ React64.createElement(PrimaryMenuBar, null, /* @__PURE__ */ React64.createElement(WritingMenu, {
    canUndo,
    canRedo,
    curTool,
    onUndoClick: undo,
    onRedoClick: redo,
    onSelectClick: activateSelectTool,
    onDrawClick: activateDrawTool,
    onEraseClick: activateEraseTool
  }), props.embedded && props.commonExtendedOptions && /* @__PURE__ */ React64.createElement(extended_writing_menu_default, {
    onLockClick: async () => {
      if (props.closeEditor)
        props.closeEditor();
    },
    menuOptions: props.commonExtendedOptions
  }))));
}
async function getWritingSvg(editor) {
  let svgObj;
  resizeWritingTemplateTightly(editor);
  const allShapeIds = Array.from(editor.getCurrentPageShapeIds().values());
  svgObj = await editor.getSvgString(allShapeIds);
  resizeWritingTemplateInvitingly(editor);
  return svgObj;
}
function getAllStrokeBounds(editor) {
  const allStrokeBounds = getDrawShapeBounds(editor);
  allStrokeBounds.x = 0;
  allStrokeBounds.w = WRITING_PAGE_WIDTH;
  allStrokeBounds.h += allStrokeBounds.y;
  allStrokeBounds.y = 0;
  return allStrokeBounds;
}
function getDrawShapeBounds(editor) {
  hideWritingTemplate(editor);
  let bounds = editor.getCurrentPageBounds() || new Box(0, 0);
  unhideWritingTemplate(editor);
  return bounds;
}
function simplifyLines(editor, entry) {
}
function isEmptyWritingFile(editor) {
  let contentBounds = getDrawShapeBounds(editor);
  if (contentBounds.height === 0) {
    return true;
  } else {
    return false;
  }
}
function cropWritingStrokeHeightTightly(height) {
  const numOfLines = Math.ceil(height / WRITING_LINE_HEIGHT);
  const newLineHeight = (numOfLines + 0.5) * WRITING_LINE_HEIGHT;
  return Math.max(newLineHeight, WRITING_MIN_PAGE_HEIGHT);
}
function cropWritingStrokeHeightInvitingly(height) {
  const numOfLines = Math.ceil(height / WRITING_LINE_HEIGHT);
  const newLineHeight = (numOfLines + 1.5) * WRITING_LINE_HEIGHT;
  return Math.max(newLineHeight, WRITING_MIN_PAGE_HEIGHT);
}
var resizeWritingTemplateInvitingly = (editor) => {
  let contentBounds = getAllStrokeBounds(editor);
  if (!contentBounds)
    return;
  contentBounds.h = cropWritingStrokeHeightInvitingly(contentBounds.h);
  const writingLinesShape = editor.getShape("shape:writing-lines");
  const writingContainerShape = editor.getShape("shape:writing-container");
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingContainerShape);
    unlockShape(editor, writingLinesShape);
    editor.updateShape({
      id: writingContainerShape.id,
      type: writingContainerShape.type,
      props: {
        h: contentBounds.h
      }
    }, {
      ephemeral: true
    });
    editor.updateShape({
      id: writingLinesShape.id,
      type: writingLinesShape.type,
      props: {
        h: contentBounds.h
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingContainerShape);
    lockShape(editor, writingLinesShape);
  });
};
var resizeWritingTemplateTightly = (editor) => {
  let contentBounds = getAllStrokeBounds(editor);
  if (!contentBounds)
    return;
  contentBounds.h = cropWritingStrokeHeightTightly(contentBounds.h);
  const writingLinesShape = editor.getShape("shape:writing-lines");
  const writingContainerShape = editor.getShape("shape:writing-container");
  silentlyChangeStore(editor, () => {
    unlockShape(editor, writingContainerShape);
    unlockShape(editor, writingLinesShape);
    editor.updateShape({
      id: writingContainerShape.id,
      type: writingContainerShape.type,
      props: {
        h: contentBounds.h
      }
    }, {
      ephemeral: true
    });
    editor.updateShape({
      id: writingLinesShape.id,
      type: writingLinesShape.type,
      props: {
        h: contentBounds.h
      }
    }, {
      ephemeral: true
    });
    lockShape(editor, writingContainerShape);
    lockShape(editor, writingLinesShape);
  });
};

// src/utils/needsTranscriptUpdate.ts
var needsTranscriptUpdate = (pageData) => {
  return false;
};
var saveWriteFileTranscript = async (plugin, fileRef, transcript) => {
  if (fileRef.extension !== WRITE_FILE_EXT)
    return;
  const v = plugin.app.vault;
  const pageDataStr = await v.read(fileRef);
  const pageData = JSON.parse(pageDataStr);
  pageData.meta.transcript = "The new transcript";
  const newPageDataStr = JSON.stringify(pageData, null, "	");
  await v.modify(fileRef, newPageDataStr, { mtime: fileRef.stat.mtime });
};

// src/utils/rememberDrawingFile.ts
var import_obsidian9 = require("obsidian");

// src/utils/storage.ts
var saveLocally = (key, value) => {
  if (typeof value === "boolean") {
    value = value.toString();
  }
  localStorage.setItem(`${PLUGIN_KEY}_${key}`, value);
};
var fetchLocally = (key) => {
  let value = localStorage.getItem(`${PLUGIN_KEY}_${key}`);
  if (value === null)
    return null;
  if (value === "true")
    value = true;
  if (value === "false")
    value = false;
  return value;
};
var deleteLocally = (key) => {
  localStorage.removeItem(`${PLUGIN_KEY}_${key}`);
};
var activateNextEmbed = () => {
  saveLocally("activateNextEmbed", true);
};
var embedShouldActivateImmediately = () => {
  const result = fetchLocally("activateNextEmbed");
  deleteLocally("activateNextEmbed");
  return result;
};

// src/utils/file-manipulation.ts
var import_obsidian8 = require("obsidian");

// src/utils/getDateFilename.ts
function getDateFilename() {
  const date = new Date();
  let monthStr = (date.getMonth() + 1).toString();
  let dateStr = date.getDate().toString();
  let hours = date.getHours();
  let minutesStr = date.getMinutes().toString();
  let suffix = hours < 12 ? "am" : "pm";
  if (minutesStr.length < 2)
    minutesStr = "0" + minutesStr;
  let filename = date.getFullYear() + "." + monthStr + "." + dateStr + " - " + hours + "." + minutesStr + suffix;
  return filename;
}

// src/utils/getVersionedFilepath.ts
var import_obsidian7 = require("obsidian");

// src/utils/parseFilepath.ts
function parseFilepath(filepath) {
  const segments = filepath.split("/");
  let folderpath = segments[0] === "" ? "/" : "";
  const filename = segments.pop() || "";
  const extIndex = filename.lastIndexOf(".");
  const ext = extIndex >= 0 ? filename.slice(extIndex) : "";
  const basename = extIndex >= 0 ? filename.slice(0, extIndex) : filename;
  folderpath = segments.join("/");
  return { folderpath, basename, ext: ext.startsWith(".") ? ext.slice(1) : ext };
}

// src/utils/getVersionedFilepath.ts
var getVersionedFilepath = async (plugin, seedFilepath) => {
  try {
    const {
      folderpath,
      basename,
      ext
    } = parseFilepath(seedFilepath);
    let pathAndBasename = folderpath + "/" + basename;
    let pathAndVersionedBasename = pathAndBasename;
    let version2 = 1;
    while (await plugin.app.vault.adapter.exists(`${pathAndVersionedBasename}.${ext}`)) {
      version2++;
      pathAndVersionedBasename = pathAndBasename + " (" + version2 + ")";
    }
    return `${pathAndVersionedBasename}.${ext}`;
  } catch (err) {
    console.warn(err);
    new import_obsidian7.Notice(`There was an error finding a non-conflicting filename.`, 0);
    return "";
  }
};

// src/utils/getBaseAttachmentPath.ts
var getBaseAttachmentPath = async (plugin, options) => {
  let baseAttachmentPath = "";
  let attachmentFolderLocation;
  if (options.instigatingFileFolderPath) {
    if (plugin.settings.customAttachmentFolders) {
      attachmentFolderLocation = plugin.settings.noteAttachmentFolderLocation;
    } else {
      attachmentFolderLocation = DEFAULT_SETTINGS.noteAttachmentFolderLocation;
    }
  } else {
    if (plugin.settings.customAttachmentFolders) {
      attachmentFolderLocation = plugin.settings.notelessAttachmentFolderLocation;
    } else {
      attachmentFolderLocation = DEFAULT_SETTINGS.notelessAttachmentFolderLocation;
    }
  }
  if (attachmentFolderLocation === "obsidian") {
    if (options.obsAttachmentFolderPath) {
      baseAttachmentPath = options.obsAttachmentFolderPath;
    } else {
      console.warn(`Ink Plugin: There was an error accessing the default Obsidian attachment folder. Placing the new file in the vault's root instead.`);
      baseAttachmentPath = "";
    }
  } else if (attachmentFolderLocation === "note") {
    if (options.instigatingFileFolderPath) {
      baseAttachmentPath = options.instigatingFileFolderPath;
    } else {
      console.warn(`Ink Plugin: There was an error accessing the note's folder. Placing the new file in the vault's root instead.`);
      baseAttachmentPath = "";
    }
  } else {
    baseAttachmentPath = "";
  }
  console.log("baseAttachmentPath", baseAttachmentPath);
  return baseAttachmentPath;
};

// src/utils/getSubfolderPaths.ts
var getWritingSubfolderPath = (plugin) => {
  let subFolderPath = DEFAULT_SETTINGS.writingSubfolder;
  if (plugin.settings.customAttachmentFolders) {
    subFolderPath = plugin.settings.writingSubfolder || "";
  }
  return subFolderPath.trim();
};
var getDrawingSubfolderPath = (plugin) => {
  let subFolderPath = DEFAULT_SETTINGS.drawingSubfolder;
  if (plugin.settings.customAttachmentFolders) {
    subFolderPath = plugin.settings.drawingSubfolder || "";
  }
  return subFolderPath.trim();
};

// src/utils/obsidian-interfaces.ts
async function getObsidianAttachmentFolderPath(plugin) {
  let attachmentPath = null;
  try {
    const returnedObsPath = await plugin.app.fileManager.getAvailablePathForAttachment("dummy");
    if (returnedObsPath.contains("/")) {
      const { folderpath } = parseFilepath(returnedObsPath);
      attachmentPath = folderpath;
    }
  } catch (err) {
    return null;
  }
  return attachmentPath;
}

// src/utils/file-manipulation.ts
var getNewTimestampedWritingFilepath = async (plugin, instigatingFile) => {
  const obsAttachmentFolderPath = await getObsidianAttachmentFolderPath(plugin);
  const instigatingFileFolderPath = instigatingFile ? parseFilepath(instigatingFile == null ? void 0 : instigatingFile.path).folderpath : null;
  let basePath = await getBaseAttachmentPath(plugin, {
    obsAttachmentFolderPath,
    instigatingFileFolderPath
  });
  let subFolderPath = getWritingSubfolderPath(plugin);
  return getNewTimestampedFilepath(plugin, WRITE_FILE_EXT, `${basePath}/${subFolderPath}`);
};
var getNewTimestampedDrawingFilepath = async (plugin, instigatingFile) => {
  const obsAttachmentFolderPath = await getObsidianAttachmentFolderPath(plugin);
  const instigatingFileFolderPath = instigatingFile ? parseFilepath(instigatingFile == null ? void 0 : instigatingFile.path).folderpath : null;
  let basePath = await getBaseAttachmentPath(plugin, {
    obsAttachmentFolderPath,
    instigatingFileFolderPath
  });
  let subFolderPath = getDrawingSubfolderPath(plugin);
  return getNewTimestampedFilepath(plugin, DRAW_FILE_EXT, `${basePath}/${subFolderPath}`);
};
var getNewTimestampedFilepath = async (plugin, ext, folderPath) => {
  const filename = getDateFilename() + "." + ext;
  const versionedFilepath = await getVersionedFilepath(plugin, `${folderPath}/${filename}`);
  return (0, import_obsidian8.normalizePath)(versionedFilepath);
};

// src/utils/rememberDrawingFile.ts
var rememberDrawingFile = async (plugin, existingFileRef) => {
  const v = plugin.app.vault;
  if (!(existingFileRef instanceof import_obsidian9.TFile)) {
    new import_obsidian9.Notice("No file found to copy");
    return;
  }
  saveLocally("rememberedDrawingFile", existingFileRef.path);
  new import_obsidian9.Notice(`Drawing file copied.
Run 'Insert drawing file' where desired.`);
};
var rememberWritingFile = async (plugin, existingFileRef) => {
  const v = plugin.app.vault;
  if (!(existingFileRef instanceof import_obsidian9.TFile)) {
    new import_obsidian9.Notice("No file found to copy");
    return null;
  }
  saveLocally("rememberedWritingFile", existingFileRef.path);
  new import_obsidian9.Notice(`Writing file copied.
Run 'Insert writing file' where desired.`);
};
var duplicateDrawingFile = async (plugin, existingFileRef, instigatingFile) => {
  const v = plugin.app.vault;
  const newFilePath = await getNewTimestampedDrawingFilepath(plugin, instigatingFile);
  const newFile = await v.copy(existingFileRef, newFilePath);
  return newFile;
};
var duplicateWritingFile = async (plugin, existingFileRef, instigatingFile) => {
  const v = plugin.app.vault;
  const newFilePath = await getNewTimestampedWritingFilepath(plugin, instigatingFile);
  const newFile = await v.copy(existingFileRef, newFilePath);
  return newFile;
};

// src/logic/ocr-service.ts
async function fetchWriteFileTranscript() {
  return "transcript";
}

// node_modules/react-redux/dist/react-redux.mjs
var React210 = __toESM(require_react(), 1);
var import_with_selector = __toESM(require_with_selector(), 1);
var ReactOriginal = __toESM(require_react(), 1);
var React65 = "default" in ReactOriginal ? ReactOriginal["default"] : ReactOriginal;
var ContextKey = Symbol.for(`react-redux-context`);
var gT = typeof globalThis !== "undefined" ? globalThis : {};
function getContext() {
  var _a2;
  if (!React65.createContext)
    return {};
  const contextMap = (_a2 = gT[ContextKey]) != null ? _a2 : gT[ContextKey] = /* @__PURE__ */ new Map();
  let realContext = contextMap.get(React65.createContext);
  if (!realContext) {
    realContext = React65.createContext(null);
    if (true) {
      realContext.displayName = "ReactRedux";
    }
    contextMap.set(React65.createContext, realContext);
  }
  return realContext;
}
var ReactReduxContext = /* @__PURE__ */ getContext();
var notInitialized = () => {
  throw new Error("uSES not initialized!");
};
function createReduxContextHook(context = ReactReduxContext) {
  return function useReduxContext2() {
    const contextValue = React65.useContext(context);
    if (!contextValue) {
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    }
    return contextValue;
  };
}
var useReduxContext = /* @__PURE__ */ createReduxContextHook();
var useSyncExternalStoreWithSelector = notInitialized;
var initializeUseSelector = (fn) => {
  useSyncExternalStoreWithSelector = fn;
};
var refEquality = (a, b) => a === b;
function createSelectorHook(context = ReactReduxContext) {
  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
  const useSelector2 = (selector, equalityFnOrOptions = {}) => {
    const { equalityFn = refEquality, devModeChecks = {} } = typeof equalityFnOrOptions === "function" ? { equalityFn: equalityFnOrOptions } : equalityFnOrOptions;
    if (true) {
      if (!selector) {
        throw new Error(`You must pass a selector to useSelector`);
      }
      if (typeof selector !== "function") {
        throw new Error(`You must pass a function as a selector to useSelector`);
      }
      if (typeof equalityFn !== "function") {
        throw new Error(`You must pass a function as an equality function to useSelector`);
      }
    }
    const {
      store: store2,
      subscription,
      getServerState,
      stabilityCheck,
      identityFunctionCheck
    } = useReduxContext2();
    const firstRun = React65.useRef(true);
    const wrappedSelector = React65.useCallback({
      [selector.name](state) {
        const selected = selector(state);
        if (true) {
          const {
            identityFunctionCheck: finalIdentityFunctionCheck,
            stabilityCheck: finalStabilityCheck
          } = {
            stabilityCheck,
            identityFunctionCheck,
            ...devModeChecks
          };
          if (finalStabilityCheck === "always" || finalStabilityCheck === "once" && firstRun.current) {
            const toCompare = selector(state);
            if (!equalityFn(selected, toCompare)) {
              let stack2 = void 0;
              try {
                throw new Error();
              } catch (e) {
                ;
                ({ stack: stack2 } = e);
              }
              console.warn("Selector " + (selector.name || "unknown") + " returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization", {
                state,
                selected,
                selected2: toCompare,
                stack: stack2
              });
            }
          }
          if (finalIdentityFunctionCheck === "always" || finalIdentityFunctionCheck === "once" && firstRun.current) {
            if (selected === state) {
              let stack2 = void 0;
              try {
                throw new Error();
              } catch (e) {
                ;
                ({ stack: stack2 } = e);
              }
              console.warn("Selector " + (selector.name || "unknown") + " returned the root state when called. This can lead to unnecessary rerenders.\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.", { stack: stack2 });
            }
          }
          if (firstRun.current)
            firstRun.current = false;
        }
        return selected;
      }
    }[selector.name], [selector, stabilityCheck, devModeChecks.stabilityCheck]);
    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store2.getState, getServerState || store2.getState, wrappedSelector, equalityFn);
    React65.useDebugValue(selectedState);
    return selectedState;
  };
  Object.assign(useSelector2, {
    withTypes: () => useSelector2
  });
  return useSelector2;
}
var useSelector = /* @__PURE__ */ createSelectorHook();
var REACT_ELEMENT_TYPE = Symbol.for("react.element");
var REACT_PORTAL_TYPE = Symbol.for("react.portal");
var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
var REACT_CONTEXT_TYPE = Symbol.for("react.context");
var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
var REACT_MEMO_TYPE = Symbol.for("react.memo");
var REACT_LAZY_TYPE = Symbol.for("react.lazy");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Memo = REACT_MEMO_TYPE;
function defaultNoopBatch(callback) {
  callback();
}
function createListenerCollection() {
  let first = null;
  let last3 = null;
  return {
    clear() {
      first = null;
      last3 = null;
    },
    notify() {
      defaultNoopBatch(() => {
        let listener2 = first;
        while (listener2) {
          listener2.callback();
          listener2 = listener2.next;
        }
      });
    },
    get() {
      const listeners = [];
      let listener2 = first;
      while (listener2) {
        listeners.push(listener2);
        listener2 = listener2.next;
      }
      return listeners;
    },
    subscribe(callback) {
      let isSubscribed = true;
      const listener2 = last3 = {
        callback,
        next: null,
        prev: last3
      };
      if (listener2.prev) {
        listener2.prev.next = listener2;
      } else {
        first = listener2;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null)
          return;
        isSubscribed = false;
        if (listener2.next) {
          listener2.next.prev = listener2.prev;
        } else {
          last3 = listener2.prev;
        }
        if (listener2.prev) {
          listener2.prev.next = listener2.next;
        } else {
          first = listener2.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify() {
  },
  get: () => []
};
function createSubscription(store2, parentSub) {
  let unsubscribe;
  let listeners = nullListeners;
  let subscriptionsAmount = 0;
  let selfSubscribed = false;
  function addNestedSub(listener2) {
    trySubscribe();
    const cleanupListener = listeners.subscribe(listener2);
    let removed = false;
    return () => {
      if (!removed) {
        removed = true;
        cleanupListener();
        tryUnsubscribe();
      }
    };
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return selfSubscribed;
  }
  function trySubscribe() {
    subscriptionsAmount++;
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store2.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    subscriptionsAmount--;
    if (unsubscribe && subscriptionsAmount === 0) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  function trySubscribeSelf() {
    if (!selfSubscribed) {
      selfSubscribed = true;
      trySubscribe();
    }
  }
  function tryUnsubscribeSelf() {
    if (selfSubscribed) {
      selfSubscribed = false;
      tryUnsubscribe();
    }
  }
  const subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe: trySubscribeSelf,
    tryUnsubscribe: tryUnsubscribeSelf,
    getListeners: () => listeners
  };
  return subscription;
}
var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
var useIsomorphicLayoutEffect2 = canUseDOM ? React65.useLayoutEffect : React65.useEffect;
var FORWARD_REF_STATICS = {
  $$typeof: true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  $$typeof: true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {
  [ForwardRef]: FORWARD_REF_STATICS,
  [Memo]: MEMO_STATICS
};
var objectPrototype = Object.prototype;
var useSyncExternalStore4 = notInitialized;
var initializeConnect = (fn) => {
  useSyncExternalStore4 = fn;
};
function Provider({
  store: store2,
  context,
  children,
  serverState,
  stabilityCheck = "once",
  identityFunctionCheck = "once"
}) {
  const contextValue = React65.useMemo(() => {
    const subscription = createSubscription(store2);
    return {
      store: store2,
      subscription,
      getServerState: serverState ? () => serverState : void 0,
      stabilityCheck,
      identityFunctionCheck
    };
  }, [store2, serverState, stabilityCheck, identityFunctionCheck]);
  const previousState = React65.useMemo(() => store2.getState(), [store2]);
  useIsomorphicLayoutEffect2(() => {
    const { subscription } = contextValue;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store2.getState()) {
      subscription.notifyNestedSubs();
    }
    return () => {
      subscription.tryUnsubscribe();
      subscription.onStateChange = void 0;
    };
  }, [contextValue, previousState]);
  const Context2 = context || ReactReduxContext;
  return /* @__PURE__ */ React65.createElement(Context2.Provider, { value: contextValue }, children);
}
var Provider_default = Provider;
function createStoreHook(context = ReactReduxContext) {
  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
  const useStore2 = () => {
    const { store: store2 } = useReduxContext2();
    return store2;
  };
  Object.assign(useStore2, {
    withTypes: () => useStore2
  });
  return useStore2;
}
var useStore = /* @__PURE__ */ createStoreHook();
function createDispatchHook(context = ReactReduxContext) {
  const useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
  const useDispatch2 = () => {
    const store2 = useStore2();
    return store2.dispatch;
  };
  Object.assign(useDispatch2, {
    withTypes: () => useDispatch2
  });
  return useDispatch2;
}
var useDispatch = /* @__PURE__ */ createDispatchHook();
initializeUseSelector(import_with_selector.useSyncExternalStoreWithSelector);
initializeConnect(React210.useSyncExternalStore);

// src/tldraw/writing/writing-embed-preview/writing-embed-preview.tsx
var import_classnames30 = __toESM(require_classnames());
var React69 = __toESM(require_react());

// node_modules/react-inlinesvg/dist/index.mjs
var import_react137 = __toESM(require_react(), 1);

// node_modules/react-from-dom/dist/index.mjs
var React66 = __toESM(require_react(), 1);
var styleToObject = (input) => {
  if (typeof input !== "string") {
    return {};
  }
  return input.split(/ ?; ?/).reduce((acc, item) => {
    const [key, value] = item.split(/ ?: ?/).map((d, index2) => index2 === 0 ? d.replace(/\s+/g, "") : d.trim());
    if (key && value) {
      const nextKey = key.replace(/(\w)-(\w)/g, (_$0, $1, $2) => `${$1}${$2.toUpperCase()}`);
      let nextValue = value.trim();
      if (!Number.isNaN(Number(value))) {
        nextValue = Number(value);
      }
      acc[key.startsWith("-") ? key : nextKey] = nextValue;
    }
    return acc;
  }, {});
};
function randomString(length = 6) {
  const characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  let result = "";
  for (let index2 = length; index2 > 0; --index2) {
    result += characters[Math.round(Math.random() * (characters.length - 1))];
  }
  return result;
}
var noTextChildNodes = [
  "br",
  "col",
  "colgroup",
  "dl",
  "hr",
  "iframe",
  "img",
  "input",
  "link",
  "menuitem",
  "meta",
  "ol",
  "param",
  "select",
  "table",
  "tbody",
  "tfoot",
  "thead",
  "tr",
  "ul",
  "wbr"
];
var possibleStandardNames = {
  "accept-charset": "acceptCharset",
  acceptcharset: "acceptCharset",
  accesskey: "accessKey",
  allowfullscreen: "allowFullScreen",
  autocapitalize: "autoCapitalize",
  autocomplete: "autoComplete",
  autocorrect: "autoCorrect",
  autofocus: "autoFocus",
  autoplay: "autoPlay",
  autosave: "autoSave",
  cellpadding: "cellPadding",
  cellspacing: "cellSpacing",
  charset: "charSet",
  class: "className",
  classid: "classID",
  classname: "className",
  colspan: "colSpan",
  contenteditable: "contentEditable",
  contextmenu: "contextMenu",
  controlslist: "controlsList",
  crossorigin: "crossOrigin",
  dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
  datetime: "dateTime",
  defaultchecked: "defaultChecked",
  defaultvalue: "defaultValue",
  enctype: "encType",
  for: "htmlFor",
  formmethod: "formMethod",
  formaction: "formAction",
  formenctype: "formEncType",
  formnovalidate: "formNoValidate",
  formtarget: "formTarget",
  frameborder: "frameBorder",
  hreflang: "hrefLang",
  htmlfor: "htmlFor",
  httpequiv: "httpEquiv",
  "http-equiv": "httpEquiv",
  icon: "icon",
  innerhtml: "innerHTML",
  inputmode: "inputMode",
  itemid: "itemID",
  itemprop: "itemProp",
  itemref: "itemRef",
  itemscope: "itemScope",
  itemtype: "itemType",
  keyparams: "keyParams",
  keytype: "keyType",
  marginwidth: "marginWidth",
  marginheight: "marginHeight",
  maxlength: "maxLength",
  mediagroup: "mediaGroup",
  minlength: "minLength",
  nomodule: "noModule",
  novalidate: "noValidate",
  playsinline: "playsInline",
  radiogroup: "radioGroup",
  readonly: "readOnly",
  referrerpolicy: "referrerPolicy",
  rowspan: "rowSpan",
  spellcheck: "spellCheck",
  srcdoc: "srcDoc",
  srclang: "srcLang",
  srcset: "srcSet",
  tabindex: "tabIndex",
  typemustmatch: "typeMustMatch",
  usemap: "useMap",
  accentheight: "accentHeight",
  "accent-height": "accentHeight",
  alignmentbaseline: "alignmentBaseline",
  "alignment-baseline": "alignmentBaseline",
  allowreorder: "allowReorder",
  arabicform: "arabicForm",
  "arabic-form": "arabicForm",
  attributename: "attributeName",
  attributetype: "attributeType",
  autoreverse: "autoReverse",
  basefrequency: "baseFrequency",
  baselineshift: "baselineShift",
  "baseline-shift": "baselineShift",
  baseprofile: "baseProfile",
  calcmode: "calcMode",
  capheight: "capHeight",
  "cap-height": "capHeight",
  clippath: "clipPath",
  "clip-path": "clipPath",
  clippathunits: "clipPathUnits",
  cliprule: "clipRule",
  "clip-rule": "clipRule",
  colorinterpolation: "colorInterpolation",
  "color-interpolation": "colorInterpolation",
  colorinterpolationfilters: "colorInterpolationFilters",
  "color-interpolation-filters": "colorInterpolationFilters",
  colorprofile: "colorProfile",
  "color-profile": "colorProfile",
  colorrendering: "colorRendering",
  "color-rendering": "colorRendering",
  contentscripttype: "contentScriptType",
  contentstyletype: "contentStyleType",
  diffuseconstant: "diffuseConstant",
  dominantbaseline: "dominantBaseline",
  "dominant-baseline": "dominantBaseline",
  edgemode: "edgeMode",
  enablebackground: "enableBackground",
  "enable-background": "enableBackground",
  externalresourcesrequired: "externalResourcesRequired",
  fillopacity: "fillOpacity",
  "fill-opacity": "fillOpacity",
  fillrule: "fillRule",
  "fill-rule": "fillRule",
  filterres: "filterRes",
  filterunits: "filterUnits",
  floodopacity: "floodOpacity",
  "flood-opacity": "floodOpacity",
  floodcolor: "floodColor",
  "flood-color": "floodColor",
  fontfamily: "fontFamily",
  "font-family": "fontFamily",
  fontsize: "fontSize",
  "font-size": "fontSize",
  fontsizeadjust: "fontSizeAdjust",
  "font-size-adjust": "fontSizeAdjust",
  fontstretch: "fontStretch",
  "font-stretch": "fontStretch",
  fontstyle: "fontStyle",
  "font-style": "fontStyle",
  fontvariant: "fontVariant",
  "font-variant": "fontVariant",
  fontweight: "fontWeight",
  "font-weight": "fontWeight",
  glyphname: "glyphName",
  "glyph-name": "glyphName",
  glyphorientationhorizontal: "glyphOrientationHorizontal",
  "glyph-orientation-horizontal": "glyphOrientationHorizontal",
  glyphorientationvertical: "glyphOrientationVertical",
  "glyph-orientation-vertical": "glyphOrientationVertical",
  glyphref: "glyphRef",
  gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits",
  horizadvx: "horizAdvX",
  "horiz-adv-x": "horizAdvX",
  horizoriginx: "horizOriginX",
  "horiz-origin-x": "horizOriginX",
  imagerendering: "imageRendering",
  "image-rendering": "imageRendering",
  kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength",
  keypoints: "keyPoints",
  keysplines: "keySplines",
  keytimes: "keyTimes",
  lengthadjust: "lengthAdjust",
  letterspacing: "letterSpacing",
  "letter-spacing": "letterSpacing",
  lightingcolor: "lightingColor",
  "lighting-color": "lightingColor",
  limitingconeangle: "limitingConeAngle",
  markerend: "markerEnd",
  "marker-end": "markerEnd",
  markerheight: "markerHeight",
  markermid: "markerMid",
  "marker-mid": "markerMid",
  markerstart: "markerStart",
  "marker-start": "markerStart",
  markerunits: "markerUnits",
  markerwidth: "markerWidth",
  maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits",
  numoctaves: "numOctaves",
  overlineposition: "overlinePosition",
  "overline-position": "overlinePosition",
  overlinethickness: "overlineThickness",
  "overline-thickness": "overlineThickness",
  paintorder: "paintOrder",
  "paint-order": "paintOrder",
  "panose-1": "panose1",
  pathlength: "pathLength",
  patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform",
  patternunits: "patternUnits",
  pointerevents: "pointerEvents",
  "pointer-events": "pointerEvents",
  pointsatx: "pointsAtX",
  pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ",
  preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits",
  refx: "refX",
  refy: "refY",
  renderingintent: "renderingIntent",
  "rendering-intent": "renderingIntent",
  repeatcount: "repeatCount",
  repeatdur: "repeatDur",
  requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  shaperendering: "shapeRendering",
  "shape-rendering": "shapeRendering",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent",
  spreadmethod: "spreadMethod",
  startoffset: "startOffset",
  stddeviation: "stdDeviation",
  stitchtiles: "stitchTiles",
  stopcolor: "stopColor",
  "stop-color": "stopColor",
  stopopacity: "stopOpacity",
  "stop-opacity": "stopOpacity",
  strikethroughposition: "strikethroughPosition",
  "strikethrough-position": "strikethroughPosition",
  strikethroughthickness: "strikethroughThickness",
  "strikethrough-thickness": "strikethroughThickness",
  strokedasharray: "strokeDasharray",
  "stroke-dasharray": "strokeDasharray",
  strokedashoffset: "strokeDashoffset",
  "stroke-dashoffset": "strokeDashoffset",
  strokelinecap: "strokeLinecap",
  "stroke-linecap": "strokeLinecap",
  strokelinejoin: "strokeLinejoin",
  "stroke-linejoin": "strokeLinejoin",
  strokemiterlimit: "strokeMiterlimit",
  "stroke-miterlimit": "strokeMiterlimit",
  strokewidth: "strokeWidth",
  "stroke-width": "strokeWidth",
  strokeopacity: "strokeOpacity",
  "stroke-opacity": "strokeOpacity",
  suppresscontenteditablewarning: "suppressContentEditableWarning",
  suppresshydrationwarning: "suppressHydrationWarning",
  surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage",
  tablevalues: "tableValues",
  targetx: "targetX",
  targety: "targetY",
  textanchor: "textAnchor",
  "text-anchor": "textAnchor",
  textdecoration: "textDecoration",
  "text-decoration": "textDecoration",
  textlength: "textLength",
  textrendering: "textRendering",
  "text-rendering": "textRendering",
  underlineposition: "underlinePosition",
  "underline-position": "underlinePosition",
  underlinethickness: "underlineThickness",
  "underline-thickness": "underlineThickness",
  unicodebidi: "unicodeBidi",
  "unicode-bidi": "unicodeBidi",
  unicoderange: "unicodeRange",
  "unicode-range": "unicodeRange",
  unitsperem: "unitsPerEm",
  "units-per-em": "unitsPerEm",
  unselectable: "unselectable",
  valphabetic: "vAlphabetic",
  "v-alphabetic": "vAlphabetic",
  vectoreffect: "vectorEffect",
  "vector-effect": "vectorEffect",
  vertadvy: "vertAdvY",
  "vert-adv-y": "vertAdvY",
  vertoriginx: "vertOriginX",
  "vert-origin-x": "vertOriginX",
  vertoriginy: "vertOriginY",
  "vert-origin-y": "vertOriginY",
  vhanging: "vHanging",
  "v-hanging": "vHanging",
  videographic: "vIdeographic",
  "v-ideographic": "vIdeographic",
  viewbox: "viewBox",
  viewtarget: "viewTarget",
  vmathematical: "vMathematical",
  "v-mathematical": "vMathematical",
  wordspacing: "wordSpacing",
  "word-spacing": "wordSpacing",
  writingmode: "writingMode",
  "writing-mode": "writingMode",
  xchannelselector: "xChannelSelector",
  xheight: "xHeight",
  "x-height": "xHeight",
  xlinkactuate: "xlinkActuate",
  "xlink:actuate": "xlinkActuate",
  xlinkarcrole: "xlinkArcrole",
  "xlink:arcrole": "xlinkArcrole",
  xlinkhref: "xlinkHref",
  "xlink:href": "xlinkHref",
  xlinkrole: "xlinkRole",
  "xlink:role": "xlinkRole",
  xlinkshow: "xlinkShow",
  "xlink:show": "xlinkShow",
  xlinktitle: "xlinkTitle",
  "xlink:title": "xlinkTitle",
  xlinktype: "xlinkType",
  "xlink:type": "xlinkType",
  xmlbase: "xmlBase",
  "xml:base": "xmlBase",
  xmllang: "xmlLang",
  "xml:lang": "xmlLang",
  "xml:space": "xmlSpace",
  xmlnsxlink: "xmlnsXlink",
  "xmlns:xlink": "xmlnsXlink",
  xmlspace: "xmlSpace",
  ychannelselector: "yChannelSelector",
  zoomandpan: "zoomAndPan",
  onblur: "onBlur",
  onchange: "onChange",
  onclick: "onClick",
  oncontextmenu: "onContextMenu",
  ondoubleclick: "onDoubleClick",
  ondrag: "onDrag",
  ondragend: "onDragEnd",
  ondragenter: "onDragEnter",
  ondragexit: "onDragExit",
  ondragleave: "onDragLeave",
  ondragover: "onDragOver",
  ondragstart: "onDragStart",
  ondrop: "onDrop",
  onerror: "onError",
  onfocus: "onFocus",
  oninput: "onInput",
  oninvalid: "onInvalid",
  onkeydown: "onKeyDown",
  onkeypress: "onKeyPress",
  onkeyup: "onKeyUp",
  onload: "onLoad",
  onmousedown: "onMouseDown",
  onmouseenter: "onMouseEnter",
  onmouseleave: "onMouseLeave",
  onmousemove: "onMouseMove",
  onmouseout: "onMouseOut",
  onmouseover: "onMouseOver",
  onmouseup: "onMouseUp",
  onscroll: "onScroll",
  onsubmit: "onSubmit",
  ontouchcancel: "onTouchCancel",
  ontouchend: "onTouchEnd",
  ontouchmove: "onTouchMove",
  ontouchstart: "onTouchStart",
  onwheel: "onWheel"
};
function getReactNode(node, options) {
  var _a2, _b2;
  const { key, level, ...rest } = options;
  switch (node.nodeType) {
    case 1: {
      return React66.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, rest));
    }
    case 3: {
      const nodeText = (_b2 = (_a2 = node.nodeValue) == null ? void 0 : _a2.toString()) != null ? _b2 : "";
      if (!rest.allowWhiteSpaces && /^\s+$/.test(nodeText) && !/[\u00A0\u202F]/.test(nodeText)) {
        return null;
      }
      if (!node.parentNode) {
        return nodeText;
      }
      const parentNodeName = node.parentNode.nodeName.toLowerCase();
      if (noTextChildNodes.includes(parentNodeName)) {
        if (/\S/.test(nodeText)) {
          console.warn(`A textNode is not allowed inside '${parentNodeName}'. Your text "${nodeText}" will be ignored`);
        }
        return null;
      }
      return nodeText;
    }
    case 8: {
      return null;
    }
    case 11: {
      return parseChildren(node.childNodes, level, options);
    }
    default: {
      return null;
    }
  }
}
function parseAttributes(node, reactKey) {
  const attributes = {
    key: reactKey
  };
  if (node instanceof Element) {
    const nodeClassNames = node.getAttribute("class");
    if (nodeClassNames) {
      attributes.className = nodeClassNames;
    }
    [...node.attributes].forEach((d) => {
      switch (d.name) {
        case "class":
          break;
        case "style":
          attributes[d.name] = styleToObject(d.value);
          break;
        case "allowfullscreen":
        case "allowpaymentrequest":
        case "async":
        case "autofocus":
        case "autoplay":
        case "checked":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "formnovalidate":
        case "hidden":
        case "ismap":
        case "itemscope":
        case "loop":
        case "multiple":
        case "muted":
        case "nomodule":
        case "novalidate":
        case "open":
        case "readonly":
        case "required":
        case "reversed":
        case "selected":
        case "typemustmatch":
          attributes[possibleStandardNames[d.name] || d.name] = true;
          break;
        default:
          attributes[possibleStandardNames[d.name] || d.name] = d.value;
      }
    });
  }
  return attributes;
}
function parseChildren(childNodeList, level, options) {
  const children = [...childNodeList].map((node, index2) => convertFromNode(node, {
    ...options,
    index: index2,
    level: level + 1
  })).filter(Boolean);
  if (!children.length) {
    return null;
  }
  return children;
}
function parseName(nodeName) {
  if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {
    return nodeName;
  }
  return nodeName.toLowerCase();
}
function convertFromNode(input, options = {}) {
  if (!input || !(input instanceof Node)) {
    return null;
  }
  const { actions = [], index: index2 = 0, level = 0, randomKey } = options;
  let node = input;
  let key = `${level}-${index2}`;
  const result = [];
  if (randomKey && level === 0) {
    key = `${randomString()}-${key}`;
  }
  if (Array.isArray(actions)) {
    actions.forEach((action) => {
      if (action.condition(node, key, level)) {
        if (typeof action.pre === "function") {
          node = action.pre(node, key, level);
          if (!(node instanceof Node)) {
            node = input;
            if (true) {
              console.warn("The `pre` method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `post` method instead)");
            }
          }
        }
        if (typeof action.post === "function") {
          result.push(action.post(node, key, level));
        }
      }
    });
  }
  if (result.length) {
    return result;
  }
  return getReactNode(node, { key, level, ...options });
}
function convertFromString(input, options = {}) {
  if (!input || typeof input !== "string") {
    return null;
  }
  const {
    includeAllNodes = false,
    nodeOnly = false,
    selector = "body > *",
    type = "text/html"
  } = options;
  try {
    const parser = new DOMParser();
    const document2 = parser.parseFromString(input, type);
    if (includeAllNodes) {
      const { childNodes } = document2.body;
      if (nodeOnly) {
        return childNodes;
      }
      return [...childNodes].map((node2) => convertFromNode(node2, options));
    }
    const node = document2.querySelector(selector) || document2.body.childNodes[0];
    if (!(node instanceof Node)) {
      throw new TypeError("Error parsing input");
    }
    if (nodeOnly) {
      return node;
    }
    return convertFromNode(node, options);
  } catch (error) {
    if (true) {
      console.error(error);
    }
  }
  return null;
}
function convert(input, options = {}) {
  if (typeof input === "string") {
    return convertFromString(input, options);
  }
  if (input instanceof Node) {
    return convertFromNode(input, options);
  }
  return null;
}

// node_modules/react-inlinesvg/dist/index.mjs
var import_react138 = __toESM(require_react(), 1);
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
"use client";
var __defProp8 = Object.defineProperty;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var CACHE_NAME = "react-inlinesvg";
var CACHE_MAX_RETRIES = 10;
var STATUS = {
  IDLE: "idle",
  LOADING: "loading",
  LOADED: "loaded",
  FAILED: "failed",
  READY: "ready",
  UNSUPPORTED: "unsupported"
};
function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function isSupportedEnvironment() {
  return supportsInlineSVG() && typeof window !== "undefined" && window !== null;
}
async function request(url, options) {
  const response = await fetch(url, options);
  const contentType = response.headers.get("content-type");
  const [fileType] = (contentType != null ? contentType : "").split(/ ?; ?/);
  if (response.status > 299) {
    throw new Error("Not found");
  }
  if (!["image/svg+xml", "text/plain"].some((d) => fileType.includes(d))) {
    throw new Error(`Content type isn't valid: ${fileType}`);
  }
  return response.text();
}
function sleep(seconds = 1) {
  return new Promise((resolve) => {
    setTimeout(resolve, seconds * 1e3);
  });
}
function supportsInlineSVG() {
  if (!document) {
    return false;
  }
  const div = document.createElement("div");
  div.innerHTML = "<svg />";
  const svg = div.firstChild;
  return !!svg && svg.namespaceURI === "http://www.w3.org/2000/svg";
}
function randomCharacter(character) {
  return character[Math.floor(Math.random() * character.length)];
}
function randomString2(length) {
  const letters = "abcdefghijklmnopqrstuvwxyz";
  const numbers = "1234567890";
  const charset = `${letters}${letters.toUpperCase()}${numbers}`;
  let R = "";
  for (let index2 = 0; index2 < length; index2++) {
    R += randomCharacter(charset);
  }
  return R;
}
function omit(input, ...filter2) {
  const output = {};
  for (const key in input) {
    if ({}.hasOwnProperty.call(input, key)) {
      if (!filter2.includes(key)) {
        output[key] = input[key];
      }
    }
  }
  return output;
}
var CacheStore = class {
  constructor() {
    var _a2;
    __publicField2(this, "cacheApi");
    __publicField2(this, "cacheStore");
    __publicField2(this, "subscribers", []);
    __publicField2(this, "isReady", false);
    this.cacheStore = /* @__PURE__ */ new Map();
    let cacheName = CACHE_NAME;
    let usePersistentCache = false;
    if (canUseDOM2()) {
      cacheName = (_a2 = window.REACT_INLINESVG_CACHE_NAME) != null ? _a2 : CACHE_NAME;
      usePersistentCache = !!window.REACT_INLINESVG_PERSISTENT_CACHE && "caches" in window;
    }
    if (usePersistentCache) {
      caches.open(cacheName).then((cache) => {
        this.cacheApi = cache;
        this.isReady = true;
        this.subscribers.forEach((callback) => callback());
      }).catch((error) => {
        this.isReady = true;
        console.error(`Failed to open cache: ${error.message}`);
      });
    } else {
      this.isReady = true;
    }
  }
  onReady(callback) {
    if (this.isReady) {
      callback();
    } else {
      this.subscribers.push(callback);
    }
  }
  async get(url, fetchOptions) {
    var _a2, _b2;
    await (this.cacheApi ? this.fetchAndAddToPersistentCache(url, fetchOptions) : this.fetchAndAddToInternalCache(url, fetchOptions));
    return (_b2 = (_a2 = this.cacheStore.get(url)) == null ? void 0 : _a2.content) != null ? _b2 : "";
  }
  set(url, data) {
    this.cacheStore.set(url, data);
  }
  isCached(url) {
    var _a2;
    return ((_a2 = this.cacheStore.get(url)) == null ? void 0 : _a2.status) === STATUS.LOADED;
  }
  async fetchAndAddToInternalCache(url, fetchOptions) {
    const cache = this.cacheStore.get(url);
    if ((cache == null ? void 0 : cache.status) === STATUS.LOADING) {
      await this.handleLoading(url, async () => {
        this.cacheStore.set(url, { content: "", status: STATUS.IDLE });
        await this.fetchAndAddToInternalCache(url, fetchOptions);
      });
      return;
    }
    if (!(cache == null ? void 0 : cache.content)) {
      this.cacheStore.set(url, { content: "", status: STATUS.LOADING });
      try {
        const content = await request(url, fetchOptions);
        this.cacheStore.set(url, { content, status: STATUS.LOADED });
      } catch (error) {
        this.cacheStore.set(url, { content: "", status: STATUS.FAILED });
        throw error;
      }
    }
  }
  async fetchAndAddToPersistentCache(url, fetchOptions) {
    var _a2, _b2, _c, _d;
    const cache = this.cacheStore.get(url);
    if ((cache == null ? void 0 : cache.status) === STATUS.LOADED) {
      return;
    }
    if ((cache == null ? void 0 : cache.status) === STATUS.LOADING) {
      await this.handleLoading(url, async () => {
        this.cacheStore.set(url, { content: "", status: STATUS.IDLE });
        await this.fetchAndAddToPersistentCache(url, fetchOptions);
      });
      return;
    }
    this.cacheStore.set(url, { content: "", status: STATUS.LOADING });
    const data = await ((_a2 = this.cacheApi) == null ? void 0 : _a2.match(url));
    if (data) {
      const content = await data.text();
      this.cacheStore.set(url, { content, status: STATUS.LOADED });
      return;
    }
    try {
      await ((_b2 = this.cacheApi) == null ? void 0 : _b2.add(new Request(url, fetchOptions)));
      const response = await ((_c = this.cacheApi) == null ? void 0 : _c.match(url));
      const content = (_d = await (response == null ? void 0 : response.text())) != null ? _d : "";
      this.cacheStore.set(url, { content, status: STATUS.LOADED });
    } catch (error) {
      this.cacheStore.set(url, { content: "", status: STATUS.FAILED });
      throw error;
    }
  }
  async handleLoading(url, callback) {
    var _a2;
    let retryCount = 0;
    while (((_a2 = this.cacheStore.get(url)) == null ? void 0 : _a2.status) === STATUS.LOADING && retryCount < CACHE_MAX_RETRIES) {
      await sleep(0.1);
      retryCount += 1;
    }
    if (retryCount >= CACHE_MAX_RETRIES) {
      await callback();
    }
  }
  keys() {
    return [...this.cacheStore.keys()];
  }
  data() {
    return [...this.cacheStore.entries()].map(([key, value]) => ({ [key]: value }));
  }
  async delete(url) {
    if (this.cacheApi) {
      await this.cacheApi.delete(url);
    }
    this.cacheStore.delete(url);
  }
  async clear() {
    if (this.cacheApi) {
      const keys = await this.cacheApi.keys();
      for (const key of keys) {
        await this.cacheApi.delete(key);
      }
    }
    this.cacheStore.clear();
  }
};
function usePrevious(state) {
  const ref = (0, import_react138.useRef)();
  (0, import_react138.useEffect)(() => {
    ref.current = state;
  });
  return ref.current;
}
function getNode(options) {
  const {
    baseURL,
    content,
    description,
    handleError,
    hash,
    preProcessor,
    title,
    uniquifyIDs = false
  } = options;
  try {
    const svgText = processSVG(content, preProcessor);
    const node = convert(svgText, { nodeOnly: true });
    if (!node || !(node instanceof SVGSVGElement)) {
      throw new Error("Could not convert the src to a DOM Node");
    }
    const svg = updateSVGAttributes(node, { baseURL, hash, uniquifyIDs });
    if (description) {
      const originalDesc = svg.querySelector("desc");
      if (originalDesc == null ? void 0 : originalDesc.parentNode) {
        originalDesc.parentNode.removeChild(originalDesc);
      }
      const descElement = document.createElementNS("http://www.w3.org/2000/svg", "desc");
      descElement.innerHTML = description;
      svg.prepend(descElement);
    }
    if (typeof title !== "undefined") {
      const originalTitle = svg.querySelector("title");
      if (originalTitle == null ? void 0 : originalTitle.parentNode) {
        originalTitle.parentNode.removeChild(originalTitle);
      }
      if (title) {
        const titleElement = document.createElementNS("http://www.w3.org/2000/svg", "title");
        titleElement.innerHTML = title;
        svg.prepend(titleElement);
      }
    }
    return svg;
  } catch (error) {
    return handleError(error);
  }
}
function processSVG(content, preProcessor) {
  if (preProcessor) {
    return preProcessor(content);
  }
  return content;
}
function updateSVGAttributes(node, options) {
  const { baseURL = "", hash, uniquifyIDs } = options;
  const replaceableAttributes = ["id", "href", "xlink:href", "xlink:role", "xlink:arcrole"];
  const linkAttributes = ["href", "xlink:href"];
  const isDataValue = (name, value) => linkAttributes.includes(name) && (value ? !value.includes("#") : false);
  if (!uniquifyIDs) {
    return node;
  }
  [...node.children].forEach((d) => {
    var _a2;
    if ((_a2 = d.attributes) == null ? void 0 : _a2.length) {
      const attributes = Object.values(d.attributes).map((a) => {
        const attribute = a;
        const match = /url\((.*?)\)/.exec(a.value);
        if (match == null ? void 0 : match[1]) {
          attribute.value = a.value.replace(match[0], `url(${baseURL}${match[1]}__${hash})`);
        }
        return attribute;
      });
      replaceableAttributes.forEach((r) => {
        const attribute = attributes.find((a) => a.name === r);
        if (attribute && !isDataValue(r, attribute.value)) {
          attribute.value = `${attribute.value}__${hash}`;
        }
      });
    }
    if (d.children.length) {
      return updateSVGAttributes(d, options);
    }
    return d;
  });
  return node;
}
var cacheStore;
function ReactInlineSVG(props) {
  const {
    cacheRequests = true,
    children = null,
    description,
    fetchOptions,
    innerRef,
    loader = null,
    onError,
    onLoad,
    src,
    title,
    uniqueHash
  } = props;
  const [state, setState] = (0, import_react137.useReducer)((previousState2, nextState) => ({
    ...previousState2,
    ...nextState
  }), {
    content: "",
    element: null,
    isCached: cacheRequests && cacheStore.isCached(props.src),
    status: STATUS.IDLE
  });
  const { content, element, isCached, status } = state;
  const previousProps = usePrevious(props);
  const previousState = usePrevious(state);
  const hash = (0, import_react137.useRef)(uniqueHash != null ? uniqueHash : randomString2(8));
  const isActive = (0, import_react137.useRef)(false);
  const isInitialized = (0, import_react137.useRef)(false);
  const handleError = (0, import_react137.useCallback)((error) => {
    if (isActive.current) {
      setState({
        status: error.message === "Browser does not support SVG" ? STATUS.UNSUPPORTED : STATUS.FAILED
      });
      onError == null ? void 0 : onError(error);
    }
  }, [onError]);
  const handleLoad = (0, import_react137.useCallback)((loadedContent, hasCache = false) => {
    if (isActive.current) {
      setState({
        content: loadedContent,
        isCached: hasCache,
        status: STATUS.LOADED
      });
    }
  }, []);
  const fetchContent = (0, import_react137.useCallback)(async () => {
    const responseContent = await request(src, fetchOptions);
    handleLoad(responseContent);
  }, [fetchOptions, handleLoad, src]);
  const getElement = (0, import_react137.useCallback)(() => {
    try {
      const node = getNode({ ...props, handleError, hash: hash.current, content });
      const convertedElement = convert(node);
      if (!convertedElement || !(0, import_react137.isValidElement)(convertedElement)) {
        throw new Error("Could not convert the src to a React element");
      }
      setState({
        element: convertedElement,
        status: STATUS.READY
      });
    } catch (error) {
      handleError(new Error(error.message));
    }
  }, [content, handleError, props]);
  const getContent = (0, import_react137.useCallback)(async () => {
    const dataURI = /^data:image\/svg[^,]*?(;base64)?,(.*)/u.exec(src);
    let inlineSrc;
    if (dataURI) {
      inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);
    } else if (src.includes("<svg")) {
      inlineSrc = src;
    }
    if (inlineSrc) {
      handleLoad(inlineSrc);
      return;
    }
    try {
      if (cacheRequests) {
        const cachedContent = await cacheStore.get(src, fetchOptions);
        handleLoad(cachedContent, true);
      } else {
        await fetchContent();
      }
    } catch (error) {
      handleError(error);
    }
  }, [cacheRequests, fetchContent, fetchOptions, handleError, handleLoad, src]);
  const load = (0, import_react137.useCallback)(async () => {
    if (isActive.current) {
      setState({
        content: "",
        element: null,
        isCached: false,
        status: STATUS.LOADING
      });
    }
  }, []);
  (0, import_react137.useEffect)(() => {
    isActive.current = true;
    if (!canUseDOM2() || isInitialized.current) {
      return () => void 0;
    }
    try {
      if (status === STATUS.IDLE) {
        if (!isSupportedEnvironment()) {
          throw new Error("Browser does not support SVG");
        }
        if (!src) {
          throw new Error("Missing src");
        }
        load();
      }
    } catch (error) {
      handleError(error);
    }
    isInitialized.current = true;
    return () => {
      isActive.current = false;
    };
  }, []);
  (0, import_react137.useEffect)(() => {
    if (!canUseDOM2()) {
      return;
    }
    if (!previousProps) {
      return;
    }
    if (previousProps.src !== src) {
      if (!src) {
        handleError(new Error("Missing src"));
        return;
      }
      load();
    } else if (previousProps.title !== title || previousProps.description !== description) {
      getElement();
    }
  }, [description, getElement, handleError, load, previousProps, src, title]);
  (0, import_react137.useEffect)(() => {
    if (!previousState) {
      return;
    }
    if (previousState.status !== STATUS.LOADING && status === STATUS.LOADING) {
      getContent();
    }
    if (previousState.status !== STATUS.LOADED && status === STATUS.LOADED) {
      getElement();
    }
    if (previousState.status !== STATUS.READY && status === STATUS.READY) {
      onLoad == null ? void 0 : onLoad(src, isCached);
    }
  }, [getContent, getElement, isCached, onLoad, previousState, src, status]);
  const elementProps = omit(props, "baseURL", "cacheRequests", "children", "description", "fetchOptions", "innerRef", "loader", "onError", "onLoad", "preProcessor", "src", "title", "uniqueHash", "uniquifyIDs");
  if (!canUseDOM2()) {
    return loader;
  }
  if (element) {
    return (0, import_react137.cloneElement)(element, { ref: innerRef, ...elementProps });
  }
  if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {
    return children;
  }
  return loader;
}
function InlineSVG(props) {
  if (!cacheStore) {
    cacheStore = new CacheStore();
  }
  const { loader } = props;
  const hasCallback = (0, import_react137.useRef)(false);
  const [isReady, setReady] = (0, import_react137.useState)(cacheStore.isReady);
  (0, import_react137.useEffect)(() => {
    if (!hasCallback.current) {
      cacheStore.onReady(() => {
        setReady(true);
      });
      hasCallback.current = true;
    }
  }, []);
  if (!isReady) {
    return loader;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(ReactInlineSVG, { ...props });
}

// src/graphics/icons/unlock-icon.tsx
var React67 = __toESM(require_react());
var UnlockIcon = (props) => /* @__PURE__ */ React67.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: "1.5em",
  viewBox: "0 -960 960 960",
  width: "1.5em",
  ...props
}, /* @__PURE__ */ React67.createElement("path", {
  d: "M200-200h57l391-391-57-57-391 391v57Zm-40 80q-17 0-28.5-11.5T120-160v-97q0-16 6-30.5t17-25.5l505-504q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L313-143q-11 11-25.5 17t-30.5 6h-97Zm600-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z"
}));

// src/tldraw/transition-menu/transition-menu.tsx
var React68 = __toESM(require_react());
var TransitionMenu = (props) => {
  return /* @__PURE__ */ React68.createElement(React68.Fragment, null, /* @__PURE__ */ React68.createElement("div", {
    className: "ink_transition_menu"
  }, /* @__PURE__ */ React68.createElement("button", {
    onPointerDown: () => props.onEditClick()
  }, /* @__PURE__ */ React68.createElement(UnlockIcon, null)), /* @__PURE__ */ React68.createElement(overflow_menu_default, {
    menuOptions: props.menuOptions
  })));
};
var transition_menu_default = TransitionMenu;

// src/tldraw/writing/writing-embed-preview/writing-embed-preview.tsx
var WritingEmbedPreview = (props) => {
  const svgRef = React69.useRef(null);
  const isImg = props.src.slice(0, 4) === "data";
  return /* @__PURE__ */ React69.createElement(React69.Fragment, null, /* @__PURE__ */ React69.createElement("div", {
    ref: svgRef,
    className: (0, import_classnames30.default)([
      "ddc_ink_writing-embed-preview",
      props.plugin.settings.writingLinesWhenLocked && "ddc_ink_visible-lines",
      props.plugin.settings.writingBackgroundWhenLocked && "ddc_ink_visible-background"
    ]),
    style: {
      position: "relative"
    },
    onClick: props.onClick
  }, isImg && /* @__PURE__ */ React69.createElement(React69.Fragment, null, /* @__PURE__ */ React69.createElement("img", {
    src: props.src,
    style: {
      width: "100%",
      cursor: "pointer",
      pointerEvents: "all"
    },
    onLoad: () => props.onReady()
  })), !isImg && /* @__PURE__ */ React69.createElement(React69.Fragment, null, /* @__PURE__ */ React69.createElement(InlineSVG, {
    src: props.src,
    style: {
      width: "100%",
      height: "unset",
      cursor: "pointer"
    },
    pointerEvents: "visible",
    onLoad: () => props.onReady()
  })), props.isActive && /* @__PURE__ */ React69.createElement(PrimaryMenuBar, null, /* @__PURE__ */ React69.createElement(transition_menu_default, {
    onEditClick: props.onEditClick,
    menuOptions: props.commonExtendedOptions
  }))));
};

// node_modules/nanoid/url-alphabet/index.js
var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

// node_modules/nanoid/index.browser.js
var nanoid4 = (size4 = 21) => {
  let id = "";
  let bytes = crypto.getRandomValues(new Uint8Array(size4));
  while (size4--) {
    id += urlAlphabet[bytes[size4] & 63];
  }
  return id;
};

// src/tldraw/writing/writing-embed.tsx
var emptyWritingSvg = require_empty_writing_embed();
function WritingEmbed(props) {
  const embedContainerRef = (0, import_react139.useRef)(null);
  const [state, setState] = (0, import_react139.useState)("preview");
  const [curPageData, setCurPageData] = (0, import_react139.useState)(props.pageData);
  const editorControlsRef = (0, import_react139.useRef)();
  const [embedId] = (0, import_react139.useState)(nanoid4());
  const activeEmbedId = useSelector((state2) => state2.activeEmbedId);
  const dispatch2 = useDispatch();
  const [staticEmbedHeight, setStaticEmbedHeight] = (0, import_react139.useState)(null);
  React70.useEffect(() => {
    if (embedShouldActivateImmediately()) {
      dispatch2({ type: "global-session/setActiveEmbedId", payload: embedId });
      switchToEditMode();
    }
  });
  React70.useEffect(() => {
    if (state === "preview") {
      fetchTranscriptIfNeeded(props.plugin, props.fileRef, curPageData);
    }
  }, [state]);
  const registerEditorControls = (handlers) => {
    editorControlsRef.current = handlers;
  };
  let isActive = embedId === activeEmbedId;
  if (!isActive && state === "edit") {
    saveAndSwitchToPreviewMode();
  }
  const commonExtendedOptions = [
    {
      text: "Copy writing",
      action: async () => {
        await rememberWritingFile(props.plugin, props.fileRef);
      }
    },
    {
      text: "Remove embed",
      action: () => {
        props.remove();
      }
    }
  ];
  return /* @__PURE__ */ React70.createElement(React70.Fragment, null, /* @__PURE__ */ React70.createElement("div", {
    ref: embedContainerRef,
    className: "ink_writing-embed",
    style: {
      paddingTop: state == "edit" ? "3em" : "1em",
      paddingBottom: state == "edit" ? "2em" : "0.5em",
      height: staticEmbedHeight ? staticEmbedHeight : "unset"
    }
  }, state === "preview" && /* @__PURE__ */ React70.createElement(WritingEmbedPreview, {
    plugin: props.plugin,
    onReady: () => {
      setStaticEmbedHeight(null);
    },
    isActive,
    src: curPageData.previewUri || emptyWritingSvg,
    onClick: (event) => {
      event.preventDefault();
      dispatch2({ type: "global-session/setActiveEmbedId", payload: embedId });
    },
    onEditClick: async () => {
      const newPageData = await refreshPageData(props.plugin, props.fileRef);
      setCurPageData(newPageData);
      switchToEditMode();
    },
    commonExtendedOptions
  }), state === "edit" && /* @__PURE__ */ React70.createElement(TldrawWritingEditor, {
    onReady: () => setStaticEmbedHeight(null),
    plugin: props.plugin,
    fileRef: props.fileRef,
    pageData: curPageData,
    save: props.save,
    embedded: true,
    registerControls: registerEditorControls,
    closeEditor: saveAndSwitchToPreviewMode,
    commonExtendedOptions
  })));
  function switchToEditMode() {
    var _a2;
    setStaticEmbedHeight(((_a2 = embedContainerRef.current) == null ? void 0 : _a2.offsetHeight) || null);
    setState("edit");
  }
  async function saveAndSwitchToPreviewMode() {
    var _a2;
    if (editorControlsRef.current) {
      await editorControlsRef.current.saveAndHalt();
    }
    const newPageData = await refreshPageData(props.plugin, props.fileRef);
    setCurPageData(newPageData);
    setStaticEmbedHeight(((_a2 = embedContainerRef.current) == null ? void 0 : _a2.offsetHeight) || null);
    setState("preview");
  }
}
var writing_embed_default = WritingEmbed;
var fetchTranscriptIfNeeded = (plugin, fileRef, pageData) => {
  if (needsTranscriptUpdate(pageData)) {
    fetchWriteFileTranscript().then((transcript) => {
      saveWriteFileTranscript(plugin, fileRef, transcript);
    });
  }
};
async function refreshPageData(plugin, file) {
  const v = plugin.app.vault;
  const pageDataStr = await v.read(file);
  const pageData = JSON.parse(pageDataStr);
  return pageData;
}

// node_modules/redux/dist/redux.mjs
var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
var symbol_observable_default = $$observable;
var randomString3 = () => Math.random().toString(36).substring(7).split("").join(".");
var ActionTypes = {
  INIT: `@@redux/INIT${/* @__PURE__ */ randomString3()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString3()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString3()}`
};
var actionTypes_default = ActionTypes;
function isPlainObject2(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  let proto2 = obj;
  while (Object.getPrototypeOf(proto2) !== null) {
    proto2 = Object.getPrototypeOf(proto2);
  }
  return Object.getPrototypeOf(obj) === proto2 || Object.getPrototypeOf(obj) === null;
}
function miniKindOf(val) {
  if (val === void 0)
    return "undefined";
  if (val === null)
    return "null";
  const type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val))
    return "array";
  if (isDate(val))
    return "date";
  if (isError(val))
    return "error";
  const constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
  if (val instanceof Date)
    return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  let typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore2(reducer, preloadedState, enhancer) {
  if (typeof reducer !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);
  }
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
    }
    return enhancer(createStore2)(reducer, preloadedState);
  }
  let currentReducer = reducer;
  let currentState = preloadedState;
  let currentListeners = /* @__PURE__ */ new Map();
  let nextListeners = currentListeners;
  let listenerIdCounter = 0;
  let isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = /* @__PURE__ */ new Map();
      currentListeners.forEach((listener2, key) => {
        nextListeners.set(key, listener2);
      });
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener2) {
    if (typeof listener2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener2)}'`);
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    let isSubscribed = true;
    ensureCanMutateNextListeners();
    const listenerId = listenerIdCounter++;
    nextListeners.set(listenerId, listener2);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      nextListeners.delete(listenerId);
      currentListeners = null;
    };
  }
  function dispatch2(action) {
    if (!isPlainObject2(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (typeof action.type !== "string") {
      throw new Error(false ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    const listeners = currentListeners = nextListeners;
    listeners.forEach((listener2) => {
      listener2();
    });
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
    }
    currentReducer = nextReducer;
    dispatch2({
      type: actionTypes_default.REPLACE
    });
  }
  function observable() {
    const outerSubscribe = subscribe;
    return {
      subscribe(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
        }
        function observeState() {
          const observerAsObserver = observer;
          if (observerAsObserver.next) {
            observerAsObserver.next(getState());
          }
        }
        observeState();
        const unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      },
      [symbol_observable_default]() {
        return this;
      }
    };
  }
  dispatch2({
    type: actionTypes_default.INIT
  });
  const store2 = {
    dispatch: dispatch2,
    subscribe,
    getState,
    replaceReducer,
    [symbol_observable_default]: observable
  };
  return store2;
}
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {
  }
}
function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  const reducerKeys = Object.keys(reducers);
  const argumentName = action && action.type === actionTypes_default.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (reducerKeys.length === 0) {
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  }
  if (!isPlainObject2(inputState)) {
    return `The ${argumentName} has unexpected type of "${kindOf(inputState)}". Expected argument to be an object with the following keys: "${reducerKeys.join('", "')}"`;
  }
  const unexpectedKeys = Object.keys(inputState).filter((key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);
  unexpectedKeys.forEach((key) => {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === actionTypes_default.REPLACE)
    return;
  if (unexpectedKeys.length > 0) {
    return `Unexpected ${unexpectedKeys.length > 1 ? "keys" : "key"} "${unexpectedKeys.join('", "')}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
  }
}
function assertReducerShape(reducers) {
  Object.keys(reducers).forEach((key) => {
    const reducer = reducers[key];
    const initialState2 = reducer(void 0, {
      type: actionTypes_default.INIT
    });
    if (typeof initialState2 === "undefined") {
      throw new Error(false ? formatProdErrorMessage(12) : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    }
    if (typeof reducer(void 0, {
      type: actionTypes_default.PROBE_UNKNOWN_ACTION()
    }) === "undefined") {
      throw new Error(false ? formatProdErrorMessage(13) : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
    }
  });
}
function combineReducers(reducers) {
  const reducerKeys = Object.keys(reducers);
  const finalReducers = {};
  for (let i = 0; i < reducerKeys.length; i++) {
    const key = reducerKeys[i];
    if (true) {
      if (typeof reducers[key] === "undefined") {
        warning(`No reducer provided for key "${key}"`);
      }
    }
    if (typeof reducers[key] === "function") {
      finalReducers[key] = reducers[key];
    }
  }
  const finalReducerKeys = Object.keys(finalReducers);
  let unexpectedKeyCache;
  if (true) {
    unexpectedKeyCache = {};
  }
  let shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }
  return function combination(state = {}, action) {
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    if (true) {
      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }
    let hasChanged = false;
    const nextState = {};
    for (let i = 0; i < finalReducerKeys.length; i++) {
      const key = finalReducerKeys[i];
      const reducer = finalReducers[key];
      const previousStateForKey = state[key];
      const nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === "undefined") {
        const actionType = action && action.type;
        throw new Error(false ? formatProdErrorMessage(14) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
      }
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function compose(...funcs) {
  if (funcs.length === 0) {
    return (arg) => arg;
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce((a, b) => (...args) => a(b(...args)));
}
function applyMiddleware(...middlewares) {
  return (createStore22) => (reducer, preloadedState) => {
    const store2 = createStore22(reducer, preloadedState);
    let dispatch2 = () => {
      throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
    };
    const middlewareAPI = {
      getState: store2.getState,
      dispatch: (action, ...args) => dispatch2(action, ...args)
    };
    const chain = middlewares.map((middleware) => middleware(middlewareAPI));
    dispatch2 = compose(...chain)(store2.dispatch);
    return {
      ...store2,
      dispatch: dispatch2
    };
  };
}
function isAction(action) {
  return isPlainObject2(action) && "type" in action && typeof action.type === "string";
}

// node_modules/immer/dist/immer.mjs
var NOTHING = Symbol.for("immer-nothing");
var DRAFTABLE = Symbol.for("immer-draftable");
var DRAFT_STATE = Symbol.for("immer-state");
var errors = true ? [
  function(plugin) {
    return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \`enable${plugin}()\` when initializing your application.`;
  },
  function(thing) {
    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;
  },
  "This object has been frozen and should not be mutated",
  function(data) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + data;
  },
  "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
  "Immer forbids circular references",
  "The first or second argument to `produce` must be a function",
  "The third argument to `produce` must be a function or undefined",
  "First argument to `createDraft` must be a plain object, an array, or an immerable object",
  "First argument to `finishDraft` must be a draft returned by `createDraft`",
  function(thing) {
    return `'current' expects a draft, got: ${thing}`;
  },
  "Object.defineProperty() cannot be used on an Immer draft",
  "Object.setPrototypeOf() cannot be used on an Immer draft",
  "Immer only supports deleting array indices",
  "Immer only supports setting array indices and the 'length' property",
  function(thing) {
    return `'original' expects a draft, got: ${thing}`;
  }
] : [];
function die(error, ...args) {
  if (true) {
    const e = errors[error];
    const msg2 = typeof e === "function" ? e.apply(null, args) : e;
    throw new Error(`[Immer] ${msg2}`);
  }
  throw new Error(`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`);
}
var getPrototypeOf = Object.getPrototypeOf;
function isDraft(value) {
  return !!value && !!value[DRAFT_STATE];
}
function isDraftable(value) {
  var _a2;
  if (!value)
    return false;
  return isPlainObject3(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_a2 = value.constructor) == null ? void 0 : _a2[DRAFTABLE]) || isMap(value) || isSet(value);
}
var objectCtorString = Object.prototype.constructor.toString();
function isPlainObject3(value) {
  if (!value || typeof value !== "object")
    return false;
  const proto2 = getPrototypeOf(value);
  if (proto2 === null) {
    return true;
  }
  const Ctor = Object.hasOwnProperty.call(proto2, "constructor") && proto2.constructor;
  if (Ctor === Object)
    return true;
  return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
}
function each(obj, iter) {
  if (getArchtype(obj) === 0) {
    Object.entries(obj).forEach(([key, value]) => {
      iter(key, value, obj);
    });
  } else {
    obj.forEach((entry, index2) => iter(index2, entry, obj));
  }
}
function getArchtype(thing) {
  const state = thing[DRAFT_STATE];
  return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
}
function has(thing, prop) {
  return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
}
function set(thing, propOrOldValue, value) {
  const t2 = getArchtype(thing);
  if (t2 === 2)
    thing.set(propOrOldValue, value);
  else if (t2 === 3) {
    thing.add(value);
  } else
    thing[propOrOldValue] = value;
}
function is(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function isMap(target) {
  return target instanceof Map;
}
function isSet(target) {
  return target instanceof Set;
}
function latest(state) {
  return state.copy_ || state.base_;
}
function shallowCopy(base, strict) {
  if (isMap(base)) {
    return new Map(base);
  }
  if (isSet(base)) {
    return new Set(base);
  }
  if (Array.isArray(base))
    return Array.prototype.slice.call(base);
  if (!strict && isPlainObject3(base)) {
    if (!getPrototypeOf(base)) {
      const obj = /* @__PURE__ */ Object.create(null);
      return Object.assign(obj, base);
    }
    return { ...base };
  }
  const descriptors = Object.getOwnPropertyDescriptors(base);
  delete descriptors[DRAFT_STATE];
  let keys = Reflect.ownKeys(descriptors);
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    const desc = descriptors[key];
    if (desc.writable === false) {
      desc.writable = true;
      desc.configurable = true;
    }
    if (desc.get || desc.set)
      descriptors[key] = {
        configurable: true,
        writable: true,
        enumerable: desc.enumerable,
        value: base[key]
      };
  }
  return Object.create(getPrototypeOf(base), descriptors);
}
function freeze(obj, deep = false) {
  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
    return obj;
  if (getArchtype(obj) > 1) {
    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
  }
  Object.freeze(obj);
  if (deep)
    each(obj, (_key, value) => freeze(value, true), true);
  return obj;
}
function dontMutateFrozenCollections() {
  die(2);
}
function isFrozen(obj) {
  return Object.isFrozen(obj);
}
var plugins = {};
function getPlugin(pluginKey) {
  const plugin = plugins[pluginKey];
  if (!plugin) {
    die(0, pluginKey);
  }
  return plugin;
}
var currentScope;
function getCurrentScope() {
  return currentScope;
}
function createScope(parent_, immer_) {
  return {
    drafts_: [],
    parent_,
    immer_,
    canAutoFreeze_: true,
    unfinalizedDrafts_: 0
  };
}
function usePatchesInScope(scope, patchListener) {
  if (patchListener) {
    getPlugin("Patches");
    scope.patches_ = [];
    scope.inversePatches_ = [];
    scope.patchListener_ = patchListener;
  }
}
function revokeScope(scope) {
  leaveScope(scope);
  scope.drafts_.forEach(revokeDraft);
  scope.drafts_ = null;
}
function leaveScope(scope) {
  if (scope === currentScope) {
    currentScope = scope.parent_;
  }
}
function enterScope(immer2) {
  return currentScope = createScope(currentScope, immer2);
}
function revokeDraft(draft) {
  const state = draft[DRAFT_STATE];
  if (state.type_ === 0 || state.type_ === 1)
    state.revoke_();
  else
    state.revoked_ = true;
}
function processResult(result, scope) {
  scope.unfinalizedDrafts_ = scope.drafts_.length;
  const baseDraft = scope.drafts_[0];
  const isReplaced = result !== void 0 && result !== baseDraft;
  if (isReplaced) {
    if (baseDraft[DRAFT_STATE].modified_) {
      revokeScope(scope);
      die(4);
    }
    if (isDraftable(result)) {
      result = finalize(scope, result);
      if (!scope.parent_)
        maybeFreeze(scope, result);
    }
    if (scope.patches_) {
      getPlugin("Patches").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);
    }
  } else {
    result = finalize(scope, baseDraft, []);
  }
  revokeScope(scope);
  if (scope.patches_) {
    scope.patchListener_(scope.patches_, scope.inversePatches_);
  }
  return result !== NOTHING ? result : void 0;
}
function finalize(rootScope, value, path) {
  if (isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  if (!state) {
    each(value, (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path), true);
    return value;
  }
  if (state.scope_ !== rootScope)
    return value;
  if (!state.modified_) {
    maybeFreeze(rootScope, state.base_, true);
    return state.base_;
  }
  if (!state.finalized_) {
    state.finalized_ = true;
    state.scope_.unfinalizedDrafts_--;
    const result = state.copy_;
    let resultEach = result;
    let isSet2 = false;
    if (state.type_ === 3) {
      resultEach = new Set(result);
      result.clear();
      isSet2 = true;
    }
    each(resultEach, (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2));
    maybeFreeze(rootScope, result, false);
    if (path && rootScope.patches_) {
      getPlugin("Patches").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);
    }
  }
  return state.copy_;
}
function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
  if (childValue === targetObject)
    die(5);
  if (isDraft(childValue)) {
    const path = rootPath && parentState && parentState.type_ !== 3 && !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
    const res = finalize(rootScope, childValue, path);
    set(targetObject, prop, res);
    if (isDraft(res)) {
      rootScope.canAutoFreeze_ = false;
    } else
      return;
  } else if (targetIsSet) {
    targetObject.add(childValue);
  }
  if (isDraftable(childValue) && !isFrozen(childValue)) {
    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
      return;
    }
    finalize(rootScope, childValue);
    if (!parentState || !parentState.scope_.parent_)
      maybeFreeze(rootScope, childValue);
  }
}
function maybeFreeze(scope, value, deep = false) {
  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
    freeze(value, deep);
  }
}
function createProxyProxy(base, parent) {
  const isArray = Array.isArray(base);
  const state = {
    type_: isArray ? 1 : 0,
    scope_: parent ? parent.scope_ : getCurrentScope(),
    modified_: false,
    finalized_: false,
    assigned_: {},
    parent_: parent,
    base_: base,
    draft_: null,
    copy_: null,
    revoke_: null,
    isManual_: false
  };
  let target = state;
  let traps = objectTraps;
  if (isArray) {
    target = [state];
    traps = arrayTraps;
  }
  const { revoke, proxy } = Proxy.revocable(target, traps);
  state.draft_ = proxy;
  state.revoke_ = revoke;
  return proxy;
}
var objectTraps = {
  get(state, prop) {
    if (prop === DRAFT_STATE)
      return state;
    const source = latest(state);
    if (!has(source, prop)) {
      return readPropFromProto(state, source, prop);
    }
    const value = source[prop];
    if (state.finalized_ || !isDraftable(value)) {
      return value;
    }
    if (value === peek(state.base_, prop)) {
      prepareCopy(state);
      return state.copy_[prop] = createProxy(value, state);
    }
    return value;
  },
  has(state, prop) {
    return prop in latest(state);
  },
  ownKeys(state) {
    return Reflect.ownKeys(latest(state));
  },
  set(state, prop, value) {
    const desc = getDescriptorFromProto(latest(state), prop);
    if (desc == null ? void 0 : desc.set) {
      desc.set.call(state.draft_, value);
      return true;
    }
    if (!state.modified_) {
      const current2 = peek(latest(state), prop);
      const currentState = current2 == null ? void 0 : current2[DRAFT_STATE];
      if (currentState && currentState.base_ === value) {
        state.copy_[prop] = value;
        state.assigned_[prop] = false;
        return true;
      }
      if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))
        return true;
      prepareCopy(state);
      markChanged(state);
    }
    if (state.copy_[prop] === value && (value !== void 0 || prop in state.copy_) || Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
      return true;
    state.copy_[prop] = value;
    state.assigned_[prop] = true;
    return true;
  },
  deleteProperty(state, prop) {
    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
      state.assigned_[prop] = false;
      prepareCopy(state);
      markChanged(state);
    } else {
      delete state.assigned_[prop];
    }
    if (state.copy_) {
      delete state.copy_[prop];
    }
    return true;
  },
  getOwnPropertyDescriptor(state, prop) {
    const owner = latest(state);
    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
    if (!desc)
      return desc;
    return {
      writable: true,
      configurable: state.type_ !== 1 || prop !== "length",
      enumerable: desc.enumerable,
      value: owner[prop]
    };
  },
  defineProperty() {
    die(11);
  },
  getPrototypeOf(state) {
    return getPrototypeOf(state.base_);
  },
  setPrototypeOf() {
    die(12);
  }
};
var arrayTraps = {};
each(objectTraps, (key, fn) => {
  arrayTraps[key] = function() {
    arguments[0] = arguments[0][0];
    return fn.apply(this, arguments);
  };
});
arrayTraps.deleteProperty = function(state, prop) {
  if (isNaN(parseInt(prop)))
    die(13);
  return arrayTraps.set.call(this, state, prop, void 0);
};
arrayTraps.set = function(state, prop, value) {
  if (prop !== "length" && isNaN(parseInt(prop)))
    die(14);
  return objectTraps.set.call(this, state[0], prop, value, state[0]);
};
function peek(draft, prop) {
  const state = draft[DRAFT_STATE];
  const source = state ? latest(state) : draft;
  return source[prop];
}
function readPropFromProto(state, source, prop) {
  var _a2;
  const desc = getDescriptorFromProto(source, prop);
  return desc ? `value` in desc ? desc.value : (_a2 = desc.get) == null ? void 0 : _a2.call(state.draft_) : void 0;
}
function getDescriptorFromProto(source, prop) {
  if (!(prop in source))
    return void 0;
  let proto2 = getPrototypeOf(source);
  while (proto2) {
    const desc = Object.getOwnPropertyDescriptor(proto2, prop);
    if (desc)
      return desc;
    proto2 = getPrototypeOf(proto2);
  }
  return void 0;
}
function markChanged(state) {
  if (!state.modified_) {
    state.modified_ = true;
    if (state.parent_) {
      markChanged(state.parent_);
    }
  }
}
function prepareCopy(state) {
  if (!state.copy_) {
    state.copy_ = shallowCopy(state.base_, state.scope_.immer_.useStrictShallowCopy_);
  }
}
var Immer2 = class {
  constructor(config) {
    this.autoFreeze_ = true;
    this.useStrictShallowCopy_ = false;
    this.produce = (base, recipe, patchListener) => {
      if (typeof base === "function" && typeof recipe !== "function") {
        const defaultBase = recipe;
        recipe = base;
        const self2 = this;
        return function curriedProduce(base2 = defaultBase, ...args) {
          return self2.produce(base2, (draft) => recipe.call(this, draft, ...args));
        };
      }
      if (typeof recipe !== "function")
        die(6);
      if (patchListener !== void 0 && typeof patchListener !== "function")
        die(7);
      let result;
      if (isDraftable(base)) {
        const scope = enterScope(this);
        const proxy = createProxy(base, void 0);
        let hasError = true;
        try {
          result = recipe(proxy);
          hasError = false;
        } finally {
          if (hasError)
            revokeScope(scope);
          else
            leaveScope(scope);
        }
        usePatchesInScope(scope, patchListener);
        return processResult(result, scope);
      } else if (!base || typeof base !== "object") {
        result = recipe(base);
        if (result === void 0)
          result = base;
        if (result === NOTHING)
          result = void 0;
        if (this.autoFreeze_)
          freeze(result, true);
        if (patchListener) {
          const p = [];
          const ip = [];
          getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
          patchListener(p, ip);
        }
        return result;
      } else
        die(1, base);
    };
    this.produceWithPatches = (base, recipe) => {
      if (typeof base === "function") {
        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
      }
      let patches, inversePatches;
      const result = this.produce(base, recipe, (p, ip) => {
        patches = p;
        inversePatches = ip;
      });
      return [result, patches, inversePatches];
    };
    if (typeof (config == null ? void 0 : config.autoFreeze) === "boolean")
      this.setAutoFreeze(config.autoFreeze);
    if (typeof (config == null ? void 0 : config.useStrictShallowCopy) === "boolean")
      this.setUseStrictShallowCopy(config.useStrictShallowCopy);
  }
  createDraft(base) {
    if (!isDraftable(base))
      die(8);
    if (isDraft(base))
      base = current(base);
    const scope = enterScope(this);
    const proxy = createProxy(base, void 0);
    proxy[DRAFT_STATE].isManual_ = true;
    leaveScope(scope);
    return proxy;
  }
  finishDraft(draft, patchListener) {
    const state = draft && draft[DRAFT_STATE];
    if (!state || !state.isManual_)
      die(9);
    const { scope_: scope } = state;
    usePatchesInScope(scope, patchListener);
    return processResult(void 0, scope);
  }
  setAutoFreeze(value) {
    this.autoFreeze_ = value;
  }
  setUseStrictShallowCopy(value) {
    this.useStrictShallowCopy_ = value;
  }
  applyPatches(base, patches) {
    let i;
    for (i = patches.length - 1; i >= 0; i--) {
      const patch = patches[i];
      if (patch.path.length === 0 && patch.op === "replace") {
        base = patch.value;
        break;
      }
    }
    if (i > -1) {
      patches = patches.slice(i + 1);
    }
    const applyPatchesImpl = getPlugin("Patches").applyPatches_;
    if (isDraft(base)) {
      return applyPatchesImpl(base, patches);
    }
    return this.produce(base, (draft) => applyPatchesImpl(draft, patches));
  }
};
function createProxy(value, parent) {
  const draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : createProxyProxy(value, parent);
  const scope = parent ? parent.scope_ : getCurrentScope();
  scope.drafts_.push(draft);
  return draft;
}
function current(value) {
  if (!isDraft(value))
    die(10, value);
  return currentImpl(value);
}
function currentImpl(value) {
  if (!isDraftable(value) || isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  let copy;
  if (state) {
    if (!state.modified_)
      return state.base_;
    state.finalized_ = true;
    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
  } else {
    copy = shallowCopy(value, true);
  }
  each(copy, (key, childValue) => {
    set(copy, key, currentImpl(childValue));
  });
  if (state) {
    state.finalized_ = false;
  }
  return copy;
}
var immer = new Immer2();
var produce = immer.produce;
var produceWithPatches = immer.produceWithPatches.bind(immer);
var setAutoFreeze = immer.setAutoFreeze.bind(immer);
var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
var applyPatches = immer.applyPatches.bind(immer);
var createDraft = immer.createDraft.bind(immer);
var finishDraft = immer.finishDraft.bind(immer);

// node_modules/reselect/dist/reselect.mjs
var runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {
  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {
    let isInputSameAsOutput = false;
    try {
      const emptyObject = {};
      if (resultFunc(emptyObject) === emptyObject)
        isInputSameAsOutput = true;
    } catch (e) {
    }
    if (isInputSameAsOutput) {
      let stack2 = void 0;
      try {
        throw new Error();
      } catch (e) {
        ;
        ({ stack: stack2 } = e);
      }
      console.warn("The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.", { stack: stack2 });
    }
  }
};
var runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {
  const { memoize, memoizeOptions } = options;
  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;
  const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);
  if (!areInputSelectorResultsEqual) {
    let stack2 = void 0;
    try {
      throw new Error();
    } catch (e) {
      ;
      ({ stack: stack2 } = e);
    }
    console.warn("An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`", {
      arguments: inputSelectorArgs,
      firstInputs: inputSelectorResults,
      secondInputs: inputSelectorResultsCopy,
      stack: stack2
    });
  }
};
var globalDevModeChecks = {
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
};
function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
  if (typeof func !== "function") {
    throw new TypeError(errorMessage);
  }
}
function assertIsObject(object2, errorMessage = `expected an object, instead received ${typeof object2}`) {
  if (typeof object2 !== "object") {
    throw new TypeError(errorMessage);
  }
}
function assertIsArrayOfFunctions(array2, errorMessage = `expected all items to be functions, instead received the following types: `) {
  if (!array2.every((item) => typeof item === "function")) {
    const itemTypes = array2.map((item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item).join(", ");
    throw new TypeError(`${errorMessage}[${itemTypes}]`);
  }
}
var ensureIsArray = (item) => {
  return Array.isArray(item) ? item : [item];
};
function getDependencies(createSelectorArgs) {
  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
  assertIsArrayOfFunctions(dependencies, `createSelector expects all input-selectors to be functions, but received the following types: `);
  return dependencies;
}
function collectInputSelectorResults(dependencies, inputSelectorArgs) {
  const inputSelectorResults = [];
  const { length } = dependencies;
  for (let i = 0; i < length; i++) {
    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
  }
  return inputSelectorResults;
}
var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
  const { identityFunctionCheck, inputStabilityCheck } = {
    ...globalDevModeChecks,
    ...devModeChecks
  };
  return {
    identityFunctionCheck: {
      shouldRun: identityFunctionCheck === "always" || identityFunctionCheck === "once" && firstRun,
      run: runIdentityFunctionCheck
    },
    inputStabilityCheck: {
      shouldRun: inputStabilityCheck === "always" || inputStabilityCheck === "once" && firstRun,
      run: runInputStabilityCheck
    }
  };
};
var REDUX_PROXY_LABEL = Symbol();
var proto = Object.getPrototypeOf({});
var StrongRef = class {
  constructor(value) {
    this.value = value;
  }
  deref() {
    return this.value;
  }
};
var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
var UNTERMINATED = 0;
var TERMINATED = 1;
function createCacheNode() {
  return {
    s: UNTERMINATED,
    v: void 0,
    o: null,
    p: null
  };
}
function weakMapMemoize(func, options = {}) {
  let fnNode = createCacheNode();
  const { resultEqualityCheck } = options;
  let lastResult;
  let resultsCount = 0;
  function memoized() {
    var _a2, _b2;
    let cacheNode = fnNode;
    const { length } = arguments;
    for (let i = 0, l = length; i < l; i++) {
      const arg = arguments[i];
      if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
        let objectCache = cacheNode.o;
        if (objectCache === null) {
          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
        }
        const objectNode = objectCache.get(arg);
        if (objectNode === void 0) {
          cacheNode = createCacheNode();
          objectCache.set(arg, cacheNode);
        } else {
          cacheNode = objectNode;
        }
      } else {
        let primitiveCache = cacheNode.p;
        if (primitiveCache === null) {
          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
        }
        const primitiveNode = primitiveCache.get(arg);
        if (primitiveNode === void 0) {
          cacheNode = createCacheNode();
          primitiveCache.set(arg, cacheNode);
        } else {
          cacheNode = primitiveNode;
        }
      }
    }
    const terminatedNode = cacheNode;
    let result;
    if (cacheNode.s === TERMINATED) {
      result = cacheNode.v;
    } else {
      result = func.apply(null, arguments);
      resultsCount++;
    }
    terminatedNode.s = TERMINATED;
    if (resultEqualityCheck) {
      const lastResultValue = (_b2 = (_a2 = lastResult == null ? void 0 : lastResult.deref) == null ? void 0 : _a2.call(lastResult)) != null ? _b2 : lastResult;
      if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
        result = lastResultValue;
        resultsCount !== 0 && resultsCount--;
      }
      const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
      lastResult = needsWeakRef ? new Ref(result) : result;
    }
    terminatedNode.v = result;
    return result;
  }
  memoized.clearCache = () => {
    fnNode = createCacheNode();
    memoized.resetResultsCount();
  };
  memoized.resultsCount = () => resultsCount;
  memoized.resetResultsCount = () => {
    resultsCount = 0;
  };
  return memoized;
}
function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
  const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
    memoize: memoizeOrOptions,
    memoizeOptions: memoizeOptionsFromArgs
  } : memoizeOrOptions;
  const createSelector2 = (...createSelectorArgs) => {
    let recomputations = 0;
    let dependencyRecomputations = 0;
    let lastResult;
    let directlyPassedOptions = {};
    let resultFunc = createSelectorArgs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = createSelectorArgs.pop();
    }
    assertIsFunction(resultFunc, `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`);
    const combinedOptions = {
      ...createSelectorCreatorOptions,
      ...directlyPassedOptions
    };
    const {
      memoize,
      memoizeOptions = [],
      argsMemoize = weakMapMemoize,
      argsMemoizeOptions = [],
      devModeChecks = {}
    } = combinedOptions;
    const finalMemoizeOptions = ensureIsArray(memoizeOptions);
    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
    const dependencies = getDependencies(createSelectorArgs);
    const memoizedResultFunc = memoize(function recomputationWrapper() {
      recomputations++;
      return resultFunc.apply(null, arguments);
    }, ...finalMemoizeOptions);
    let firstRun = true;
    const selector = argsMemoize(function dependenciesChecker() {
      dependencyRecomputations++;
      const inputSelectorResults = collectInputSelectorResults(dependencies, arguments);
      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
      if (true) {
        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);
        if (identityFunctionCheck.shouldRun) {
          identityFunctionCheck.run(resultFunc, inputSelectorResults, lastResult);
        }
        if (inputStabilityCheck.shouldRun) {
          const inputSelectorResultsCopy = collectInputSelectorResults(dependencies, arguments);
          inputStabilityCheck.run({ inputSelectorResults, inputSelectorResultsCopy }, { memoize, memoizeOptions: finalMemoizeOptions }, arguments);
        }
        if (firstRun)
          firstRun = false;
      }
      return lastResult;
    }, ...finalArgsMemoizeOptions);
    return Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      dependencyRecomputations: () => dependencyRecomputations,
      resetDependencyRecomputations: () => {
        dependencyRecomputations = 0;
      },
      lastResult: () => lastResult,
      recomputations: () => recomputations,
      resetRecomputations: () => {
        recomputations = 0;
      },
      memoize,
      argsMemoize
    });
  };
  Object.assign(createSelector2, {
    withTypes: () => createSelector2
  });
  return createSelector2;
}
var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
var createStructuredSelector = Object.assign((inputSelectorsObject, selectorCreator = createSelector) => {
  assertIsObject(inputSelectorsObject, `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`);
  const inputSelectorKeys = Object.keys(inputSelectorsObject);
  const dependencies = inputSelectorKeys.map((key) => inputSelectorsObject[key]);
  const structuredSelector = selectorCreator(dependencies, (...inputSelectorResults) => {
    return inputSelectorResults.reduce((composition, value, index2) => {
      composition[inputSelectorKeys[index2]] = value;
      return composition;
    }, {});
  });
  return structuredSelector;
}, { withTypes: () => createStructuredSelector });

// node_modules/redux-thunk/dist/redux-thunk.mjs
function createThunkMiddleware(extraArgument) {
  const middleware = ({ dispatch: dispatch2, getState }) => (next) => (action) => {
    if (typeof action === "function") {
      return action(dispatch2, getState, extraArgument);
    }
    return next(action);
  };
  return middleware;
}
var thunk = createThunkMiddleware();
var withExtraArgument = createThunkMiddleware;

// node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs
var createDraftSafeSelectorCreator = (...args) => {
  const createSelector2 = createSelectorCreator(...args);
  const createDraftSafeSelector2 = Object.assign((...args2) => {
    const selector = createSelector2(...args2);
    const wrappedSelector = (value, ...rest) => selector(isDraft(value) ? current(value) : value, ...rest);
    Object.assign(wrappedSelector, selector);
    return wrappedSelector;
  }, {
    withTypes: () => createDraftSafeSelector2
  });
  return createDraftSafeSelector2;
};
var createDraftSafeSelector = createDraftSafeSelectorCreator(weakMapMemoize);
var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
  if (arguments.length === 0)
    return void 0;
  if (typeof arguments[0] === "object")
    return compose;
  return compose.apply(null, arguments);
};
var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
  return function(noop32) {
    return noop32;
  };
};
var hasMatchFunction = (v) => {
  return v && typeof v.match === "function";
};
function createAction(type, prepareAction) {
  function actionCreator(...args) {
    if (prepareAction) {
      let prepared = prepareAction(...args);
      if (!prepared) {
        throw new Error(false ? formatProdErrorMessage(0) : "prepareAction did not return an object");
      }
      return {
        type,
        payload: prepared.payload,
        ..."meta" in prepared && {
          meta: prepared.meta
        },
        ..."error" in prepared && {
          error: prepared.error
        }
      };
    }
    return {
      type,
      payload: args[0]
    };
  }
  actionCreator.toString = () => `${type}`;
  actionCreator.type = type;
  actionCreator.match = (action) => isAction(action) && action.type === type;
  return actionCreator;
}
function isActionCreator(action) {
  return typeof action === "function" && "type" in action && hasMatchFunction(action);
}
function getMessage(type) {
  const splitType = type ? `${type}`.split("/") : [];
  const actionName = splitType[splitType.length - 1] || "actionCreator";
  return `Detected an action creator with type "${type || "unknown"}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${actionName}())\` instead of \`dispatch(${actionName})\`. This is necessary even if the action has no payload.`;
}
function createActionCreatorInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  }
  const {
    isActionCreator: isActionCreator2 = isActionCreator
  } = options;
  return () => (next) => (action) => {
    if (isActionCreator2(action)) {
      console.warn(getMessage(action.type));
    }
    return next(action);
  };
}
function getTimeMeasureUtils(maxDelay, fnName) {
  let elapsed = 0;
  return {
    measureTime(fn) {
      const started2 = Date.now();
      try {
        return fn();
      } finally {
        const finished = Date.now();
        elapsed += finished - started2;
      }
    },
    warnIfExceeded() {
      if (elapsed > maxDelay) {
        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
      }
    }
  };
}
var Tuple = class _Tuple extends Array {
  constructor(...items) {
    super(...items);
    Object.setPrototypeOf(this, _Tuple.prototype);
  }
  static get [Symbol.species]() {
    return _Tuple;
  }
  concat(...arr) {
    return super.concat.apply(this, arr);
  }
  prepend(...arr) {
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new _Tuple(...arr[0].concat(this));
    }
    return new _Tuple(...arr.concat(this));
  }
};
function freezeDraftable(val) {
  return isDraftable(val) ? produce(val, () => {
  }) : val;
}
function emplace(map, key, handler) {
  if (map.has(key)) {
    let value = map.get(key);
    if (handler.update) {
      value = handler.update(value, key, map);
      map.set(key, value);
    }
    return value;
  }
  if (!handler.insert)
    throw new Error(false ? formatProdErrorMessage(10) : "No insert provided for key not already in map");
  const inserted = handler.insert(key, map);
  map.set(key, inserted);
  return inserted;
}
function isImmutableDefault(value) {
  return typeof value !== "object" || value == null || Object.isFrozen(value);
}
function trackForMutations(isImmutable, ignorePaths, obj) {
  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations() {
      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    }
  };
}
function trackProperties(isImmutable, ignorePaths = [], obj, path = "", checkedObjects = /* @__PURE__ */ new Set()) {
  const tracked = {
    value: obj
  };
  if (!isImmutable(obj) && !checkedObjects.has(obj)) {
    checkedObjects.add(obj);
    tracked.children = {};
    for (const key in obj) {
      const childPath = path ? path + "." + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
    }
  }
  return tracked;
}
function detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = "") {
  const prevObj = trackedProperty ? trackedProperty.value : void 0;
  const sameRef = prevObj === obj;
  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return {
      wasMutated: true,
      path
    };
  }
  if (isImmutable(prevObj) || isImmutable(obj)) {
    return {
      wasMutated: false
    };
  }
  const keysToDetect = {};
  for (let key in trackedProperty.children) {
    keysToDetect[key] = true;
  }
  for (let key in obj) {
    keysToDetect[key] = true;
  }
  const hasIgnoredPaths = ignoredPaths.length > 0;
  for (let key in keysToDetect) {
    const nestedPath = path ? path + "." + key : key;
    if (hasIgnoredPaths) {
      const hasMatches = ignoredPaths.some((ignored) => {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        continue;
      }
    }
    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);
    if (result.wasMutated) {
      return result;
    }
  }
  return {
    wasMutated: false
  };
}
function createImmutableStateInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  } else {
    let stringify2 = function(obj, serializer, indent, decycler) {
      return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);
    }, getSerialize2 = function(serializer, decycler) {
      let stack2 = [], keys = [];
      if (!decycler)
        decycler = function(_, value) {
          if (stack2[0] === value)
            return "[Circular ~]";
          return "[Circular ~." + keys.slice(0, stack2.indexOf(value)).join(".") + "]";
        };
      return function(key, value) {
        if (stack2.length > 0) {
          var thisPos = stack2.indexOf(this);
          ~thisPos ? stack2.splice(thisPos + 1) : stack2.push(this);
          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
          if (~stack2.indexOf(value))
            value = decycler.call(this, key, value);
        } else
          stack2.push(value);
        return serializer == null ? value : serializer.call(this, key, value);
      };
    };
    var stringify = stringify2, getSerialize = getSerialize2;
    let {
      isImmutable = isImmutableDefault,
      ignoredPaths,
      warnAfter = 32
    } = options;
    const track2 = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return ({
      getState
    }) => {
      let state = getState();
      let tracker = track2(state);
      let result;
      return (next) => (action) => {
        const measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
        measureUtils.measureTime(() => {
          state = getState();
          result = tracker.detectMutations();
          tracker = track2(state);
          if (result.wasMutated) {
            throw new Error(false ? formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || ""}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
          }
        });
        const dispatchedAction = next(action);
        measureUtils.measureTime(() => {
          state = getState();
          result = tracker.detectMutations();
          tracker = track2(state);
          if (result.wasMutated) {
            throw new Error(false ? formatProdErrorMessage(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || ""}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);
          }
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  }
}
function isPlain(val) {
  const type = typeof val;
  return val == null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject2(val);
}
function findNonSerializableValue(value, path = "", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {
  let foundNestedSerializable;
  if (!isSerializable(value)) {
    return {
      keyPath: path || "<root>",
      value
    };
  }
  if (typeof value !== "object" || value === null) {
    return false;
  }
  if (cache == null ? void 0 : cache.has(value))
    return false;
  const entries = getEntries != null ? getEntries(value) : Object.entries(value);
  const hasIgnoredPaths = ignoredPaths.length > 0;
  for (const [key, nestedValue] of entries) {
    const nestedPath = path ? path + "." + key : key;
    if (hasIgnoredPaths) {
      const hasMatches = ignoredPaths.some((ignored) => {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        continue;
      }
    }
    if (!isSerializable(nestedValue)) {
      return {
        keyPath: nestedPath,
        value: nestedValue
      };
    }
    if (typeof nestedValue === "object") {
      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);
      if (foundNestedSerializable) {
        return foundNestedSerializable;
      }
    }
  }
  if (cache && isNestedFrozen(value))
    cache.add(value);
  return false;
}
function isNestedFrozen(value) {
  if (!Object.isFrozen(value))
    return false;
  for (const nestedValue of Object.values(value)) {
    if (typeof nestedValue !== "object" || nestedValue === null)
      continue;
    if (!isNestedFrozen(nestedValue))
      return false;
  }
  return true;
}
function createSerializableStateInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  } else {
    const {
      isSerializable = isPlain,
      getEntries,
      ignoredActions = [],
      ignoredActionPaths = ["meta.arg", "meta.baseQueryMeta"],
      ignoredPaths = [],
      warnAfter = 32,
      ignoreState = false,
      ignoreActions = false,
      disableCache = false
    } = options;
    const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return (storeAPI) => (next) => (action) => {
      if (!isAction(action)) {
        return next(action);
      }
      const result = next(action);
      const measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
        measureUtils.measureTime(() => {
          const foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths, cache);
          if (foundActionNonSerializableValue) {
            const {
              keyPath,
              value
            } = foundActionNonSerializableValue;
            console.error(`A non-serializable value was detected in an action, in the path: \`${keyPath}\`. Value:`, value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
          }
        });
      }
      if (!ignoreState) {
        measureUtils.measureTime(() => {
          const state = storeAPI.getState();
          const foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths, cache);
          if (foundStateNonSerializableValue) {
            const {
              keyPath,
              value
            } = foundStateNonSerializableValue;
            console.error(`A non-serializable value was detected in the state, in the path: \`${keyPath}\`. Value:`, value, `
Take a look at the reducer(s) handling this action type: ${action.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);
          }
        });
        measureUtils.warnIfExceeded();
      }
      return result;
    };
  }
}
function isBoolean(x) {
  return typeof x === "boolean";
}
var buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {
  const {
    thunk: thunk2 = true,
    immutableCheck = true,
    serializableCheck = true,
    actionCreatorCheck = true
  } = options != null ? options : {};
  let middlewareArray = new Tuple();
  if (thunk2) {
    if (isBoolean(thunk2)) {
      middlewareArray.push(thunk);
    } else {
      middlewareArray.push(withExtraArgument(thunk2.extraArgument));
    }
  }
  if (true) {
    if (immutableCheck) {
      let immutableOptions = {};
      if (!isBoolean(immutableCheck)) {
        immutableOptions = immutableCheck;
      }
      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
    }
    if (serializableCheck) {
      let serializableOptions = {};
      if (!isBoolean(serializableCheck)) {
        serializableOptions = serializableCheck;
      }
      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
    }
    if (actionCreatorCheck) {
      let actionCreatorOptions = {};
      if (!isBoolean(actionCreatorCheck)) {
        actionCreatorOptions = actionCreatorCheck;
      }
      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));
    }
  }
  return middlewareArray;
};
var SHOULD_AUTOBATCH = "RTK_autoBatch";
var createQueueWithTimer = (timeout) => {
  return (notify) => {
    setTimeout(notify, timeout);
  };
};
var rAF = typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10);
var autoBatchEnhancer = (options = {
  type: "raf"
}) => (next) => (...args) => {
  const store2 = next(...args);
  let notifying = true;
  let shouldNotifyAtEndOfTick = false;
  let notificationQueued = false;
  const listeners = /* @__PURE__ */ new Set();
  const queueCallback = options.type === "tick" ? queueMicrotask : options.type === "raf" ? rAF : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);
  const notifyListeners = () => {
    notificationQueued = false;
    if (shouldNotifyAtEndOfTick) {
      shouldNotifyAtEndOfTick = false;
      listeners.forEach((l) => l());
    }
  };
  return Object.assign({}, store2, {
    subscribe(listener2) {
      const wrappedListener = () => notifying && listener2();
      const unsubscribe = store2.subscribe(wrappedListener);
      listeners.add(listener2);
      return () => {
        unsubscribe();
        listeners.delete(listener2);
      };
    },
    dispatch(action) {
      var _a2;
      try {
        notifying = !((_a2 = action == null ? void 0 : action.meta) == null ? void 0 : _a2[SHOULD_AUTOBATCH]);
        shouldNotifyAtEndOfTick = !notifying;
        if (shouldNotifyAtEndOfTick) {
          if (!notificationQueued) {
            notificationQueued = true;
            queueCallback(notifyListeners);
          }
        }
        return store2.dispatch(action);
      } finally {
        notifying = true;
      }
    }
  });
};
var buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {
  const {
    autoBatch = true
  } = options != null ? options : {};
  let enhancerArray = new Tuple(middlewareEnhancer);
  if (autoBatch) {
    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === "object" ? autoBatch : void 0));
  }
  return enhancerArray;
};
var IS_PRODUCTION = false;
function configureStore(options) {
  const getDefaultMiddleware = buildGetDefaultMiddleware();
  const {
    reducer = void 0,
    middleware,
    devTools = true,
    preloadedState = void 0,
    enhancers = void 0
  } = options || {};
  let rootReducer;
  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (isPlainObject2(reducer)) {
    rootReducer = combineReducers(reducer);
  } else {
    throw new Error(false ? formatProdErrorMessage(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
  }
  if (!IS_PRODUCTION && middleware && typeof middleware !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "`middleware` field must be a callback");
  }
  let finalMiddleware;
  if (typeof middleware === "function") {
    finalMiddleware = middleware(getDefaultMiddleware);
    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
      throw new Error(false ? formatProdErrorMessage(3) : "when using a middleware builder function, an array of middleware must be returned");
    }
  } else {
    finalMiddleware = getDefaultMiddleware();
  }
  if (!IS_PRODUCTION && finalMiddleware.some((item) => typeof item !== "function")) {
    throw new Error(false ? formatProdErrorMessage(4) : "each middleware provided to configureStore must be a function");
  }
  let finalCompose = compose;
  if (devTools) {
    finalCompose = composeWithDevTools({
      trace: !IS_PRODUCTION,
      ...typeof devTools === "object" && devTools
    });
  }
  const middlewareEnhancer = applyMiddleware(...finalMiddleware);
  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
  if (!IS_PRODUCTION && enhancers && typeof enhancers !== "function") {
    throw new Error(false ? formatProdErrorMessage(5) : "`enhancers` field must be a callback");
  }
  let storeEnhancers = typeof enhancers === "function" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();
  if (!IS_PRODUCTION && !Array.isArray(storeEnhancers)) {
    throw new Error(false ? formatProdErrorMessage(6) : "`enhancers` callback must return an array");
  }
  if (!IS_PRODUCTION && storeEnhancers.some((item) => typeof item !== "function")) {
    throw new Error(false ? formatProdErrorMessage(7) : "each enhancer provided to configureStore must be a function");
  }
  if (!IS_PRODUCTION && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {
    console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
  }
  const composedEnhancer = finalCompose(...storeEnhancers);
  return createStore2(rootReducer, preloadedState, composedEnhancer);
}
function executeReducerBuilderCallback(builderCallback) {
  const actionsMap = {};
  const actionMatchers = [];
  let defaultCaseReducer;
  const builder = {
    addCase(typeOrActionCreator, reducer) {
      if (true) {
        if (actionMatchers.length > 0) {
          throw new Error(false ? formatProdErrorMessage(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
        }
        if (defaultCaseReducer) {
          throw new Error(false ? formatProdErrorMessage(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }
      const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (!type) {
        throw new Error(false ? formatProdErrorMessage(28) : "`builder.addCase` cannot be called with an empty action type");
      }
      if (type in actionsMap) {
        throw new Error(false ? formatProdErrorMessage(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${type}'`);
      }
      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher(matcher, reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error(false ? formatProdErrorMessage(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }
      actionMatchers.push({
        matcher,
        reducer
      });
      return builder;
    },
    addDefaultCase(reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error(false ? formatProdErrorMessage(31) : "`builder.addDefaultCase` can only be called once");
        }
      }
      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
function isStateFunction(x) {
  return typeof x === "function";
}
function createReducer(initialState2, mapOrBuilderCallback) {
  if (true) {
    if (typeof mapOrBuilderCallback === "object") {
      throw new Error(false ? formatProdErrorMessage(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
    }
  }
  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);
  let getInitialState;
  if (isStateFunction(initialState2)) {
    getInitialState = () => freezeDraftable(initialState2());
  } else {
    const frozenInitialState = freezeDraftable(initialState2);
    getInitialState = () => frozenInitialState;
  }
  function reducer(state = getInitialState(), action) {
    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({
      matcher
    }) => matcher(action)).map(({
      reducer: reducer2
    }) => reducer2)];
    if (caseReducers.filter((cr) => !!cr).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce((previousState, caseReducer) => {
      if (caseReducer) {
        if (isDraft(previousState)) {
          const draft = previousState;
          const result = caseReducer(draft, action);
          if (result === void 0) {
            return previousState;
          }
          return result;
        } else if (!isDraftable(previousState)) {
          const result = caseReducer(previousState, action);
          if (result === void 0) {
            if (previousState === null) {
              return previousState;
            }
            throw new Error(false ? formatProdErrorMessage(9) : "A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return produce(previousState, (draft) => {
            return caseReducer(draft, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer.getInitialState = getInitialState;
  return reducer;
}
var urlAlphabet2 = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var nanoid5 = (size4 = 21) => {
  let id = "";
  let i = size4;
  while (i--) {
    id += urlAlphabet2[Math.random() * 64 | 0];
  }
  return id;
};
var matches = (matcher, action) => {
  if (hasMatchFunction(matcher)) {
    return matcher.match(action);
  } else {
    return matcher(action);
  }
};
function isAnyOf(...matchers) {
  return (action) => {
    return matchers.some((matcher) => matches(matcher, action));
  };
}
var commonProperties = ["name", "message", "stack", "code"];
var RejectWithValue = class {
  constructor(payload, meta) {
    __publicField(this, "_type");
    this.payload = payload;
    this.meta = meta;
  }
};
var FulfillWithMeta = class {
  constructor(payload, meta) {
    __publicField(this, "_type");
    this.payload = payload;
    this.meta = meta;
  }
};
var miniSerializeError = (value) => {
  if (typeof value === "object" && value !== null) {
    const simpleError = {};
    for (const property of commonProperties) {
      if (typeof value[property] === "string") {
        simpleError[property] = value[property];
      }
    }
    return simpleError;
  }
  return {
    message: String(value)
  };
};
var createAsyncThunk = /* @__PURE__ */ (() => {
  function createAsyncThunk2(typePrefix, payloadCreator, options) {
    const fulfilled = createAction(typePrefix + "/fulfilled", (payload, requestId, arg, meta) => ({
      payload,
      meta: {
        ...meta || {},
        arg,
        requestId,
        requestStatus: "fulfilled"
      }
    }));
    const pending = createAction(typePrefix + "/pending", (requestId, arg, meta) => ({
      payload: void 0,
      meta: {
        ...meta || {},
        arg,
        requestId,
        requestStatus: "pending"
      }
    }));
    const rejected = createAction(typePrefix + "/rejected", (error, requestId, arg, payload, meta) => ({
      payload,
      error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
      meta: {
        ...meta || {},
        arg,
        requestId,
        rejectedWithValue: !!payload,
        requestStatus: "rejected",
        aborted: (error == null ? void 0 : error.name) === "AbortError",
        condition: (error == null ? void 0 : error.name) === "ConditionError"
      }
    }));
    function actionCreator(arg) {
      return (dispatch2, getState, extra) => {
        const requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid5();
        const abortController = new AbortController();
        let abortHandler;
        let abortReason;
        function abort(reason) {
          abortReason = reason;
          abortController.abort();
        }
        const promise = async function() {
          var _a2, _b2;
          let finalAction;
          try {
            let conditionResult = (_a2 = options == null ? void 0 : options.condition) == null ? void 0 : _a2.call(options, arg, {
              getState,
              extra
            });
            if (isThenable(conditionResult)) {
              conditionResult = await conditionResult;
            }
            if (conditionResult === false || abortController.signal.aborted) {
              throw {
                name: "ConditionError",
                message: "Aborted due to condition callback returning false."
              };
            }
            const abortedPromise = new Promise((_, reject) => {
              abortHandler = () => {
                reject({
                  name: "AbortError",
                  message: abortReason || "Aborted"
                });
              };
              abortController.signal.addEventListener("abort", abortHandler);
            });
            dispatch2(pending(requestId, arg, (_b2 = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b2.call(options, {
              requestId,
              arg
            }, {
              getState,
              extra
            })));
            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
              dispatch: dispatch2,
              getState,
              extra,
              requestId,
              signal: abortController.signal,
              abort,
              rejectWithValue: (value, meta) => {
                return new RejectWithValue(value, meta);
              },
              fulfillWithValue: (value, meta) => {
                return new FulfillWithMeta(value, meta);
              }
            })).then((result) => {
              if (result instanceof RejectWithValue) {
                throw result;
              }
              if (result instanceof FulfillWithMeta) {
                return fulfilled(result.payload, requestId, arg, result.meta);
              }
              return fulfilled(result, requestId, arg);
            })]);
          } catch (err) {
            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);
          } finally {
            if (abortHandler) {
              abortController.signal.removeEventListener("abort", abortHandler);
            }
          }
          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
          if (!skipDispatch) {
            dispatch2(finalAction);
          }
          return finalAction;
        }();
        return Object.assign(promise, {
          abort,
          requestId,
          arg,
          unwrap() {
            return promise.then(unwrapResult);
          }
        });
      };
    }
    return Object.assign(actionCreator, {
      pending,
      rejected,
      fulfilled,
      settled: isAnyOf(rejected, fulfilled),
      typePrefix
    });
  }
  createAsyncThunk2.withTypes = () => createAsyncThunk2;
  return createAsyncThunk2;
})();
function unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }
  if (action.error) {
    throw action.error;
  }
  return action.payload;
}
function isThenable(value) {
  return value !== null && typeof value === "object" && typeof value.then === "function";
}
var asyncThunkSymbol = Symbol.for("rtk-slice-createasyncthunk");
var asyncThunkCreator = {
  [asyncThunkSymbol]: createAsyncThunk
};
function getType(slice, actionKey) {
  return `${slice}/${actionKey}`;
}
function buildCreateSlice({
  creators
} = {}) {
  var _a2;
  const cAT = (_a2 = creators == null ? void 0 : creators.asyncThunk) == null ? void 0 : _a2[asyncThunkSymbol];
  return function createSlice2(options) {
    const {
      name,
      reducerPath = name
    } = options;
    if (!name) {
      throw new Error(false ? formatProdErrorMessage(11) : "`name` is a required option for createSlice");
    }
    if (typeof process !== "undefined" && true) {
      if (options.initialState === void 0) {
        console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
      }
    }
    const reducers = (typeof options.reducers === "function" ? options.reducers(buildReducerCreators()) : options.reducers) || {};
    const reducerNames = Object.keys(reducers);
    const context = {
      sliceCaseReducersByName: {},
      sliceCaseReducersByType: {},
      actionCreators: {},
      sliceMatchers: []
    };
    const contextMethods = {
      addCase(typeOrActionCreator, reducer2) {
        const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (!type) {
          throw new Error(false ? formatProdErrorMessage(12) : "`context.addCase` cannot be called with an empty action type");
        }
        if (type in context.sliceCaseReducersByType) {
          throw new Error(false ? formatProdErrorMessage(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + type);
        }
        context.sliceCaseReducersByType[type] = reducer2;
        return contextMethods;
      },
      addMatcher(matcher, reducer2) {
        context.sliceMatchers.push({
          matcher,
          reducer: reducer2
        });
        return contextMethods;
      },
      exposeAction(name2, actionCreator) {
        context.actionCreators[name2] = actionCreator;
        return contextMethods;
      },
      exposeCaseReducer(name2, reducer2) {
        context.sliceCaseReducersByName[name2] = reducer2;
        return contextMethods;
      }
    };
    reducerNames.forEach((reducerName) => {
      const reducerDefinition = reducers[reducerName];
      const reducerDetails = {
        reducerName,
        type: getType(name, reducerName),
        createNotation: typeof options.reducers === "function"
      };
      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);
      } else {
        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);
      }
    });
    function buildReducer() {
      if (true) {
        if (typeof options.extraReducers === "object") {
          throw new Error(false ? formatProdErrorMessage(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
        }
      }
      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];
      const finalCaseReducers = {
        ...extraReducers,
        ...context.sliceCaseReducersByType
      };
      return createReducer(options.initialState, (builder) => {
        for (let key in finalCaseReducers) {
          builder.addCase(key, finalCaseReducers[key]);
        }
        for (let sM of context.sliceMatchers) {
          builder.addMatcher(sM.matcher, sM.reducer);
        }
        for (let m of actionMatchers) {
          builder.addMatcher(m.matcher, m.reducer);
        }
        if (defaultCaseReducer) {
          builder.addDefaultCase(defaultCaseReducer);
        }
      });
    }
    const selectSelf = (state) => state;
    const injectedSelectorCache = /* @__PURE__ */ new Map();
    let _reducer;
    function reducer(state, action) {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer(state, action);
    }
    function getInitialState() {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer.getInitialState();
    }
    function makeSelectorProps(reducerPath2, injected = false) {
      function selectSlice(state) {
        let sliceState = state[reducerPath2];
        if (typeof sliceState === "undefined") {
          if (injected) {
            sliceState = getInitialState();
          } else if (true) {
            throw new Error(false ? formatProdErrorMessage(15) : "selectSlice returned undefined for an uninjected slice reducer");
          }
        }
        return sliceState;
      }
      function getSelectors(selectState = selectSelf) {
        const selectorCache = emplace(injectedSelectorCache, injected, {
          insert: () => /* @__PURE__ */ new WeakMap()
        });
        return emplace(selectorCache, selectState, {
          insert: () => {
            var _a3;
            const map = {};
            for (const [name2, selector] of Object.entries((_a3 = options.selectors) != null ? _a3 : {})) {
              map[name2] = wrapSelector(selector, selectState, getInitialState, injected);
            }
            return map;
          }
        });
      }
      return {
        reducerPath: reducerPath2,
        getSelectors,
        get selectors() {
          return getSelectors(selectSlice);
        },
        selectSlice
      };
    }
    const slice = {
      name,
      reducer,
      actions: context.actionCreators,
      caseReducers: context.sliceCaseReducersByName,
      getInitialState,
      ...makeSelectorProps(reducerPath),
      injectInto(injectable, {
        reducerPath: pathOpt,
        ...config
      } = {}) {
        const newReducerPath = pathOpt != null ? pathOpt : reducerPath;
        injectable.inject({
          reducerPath: newReducerPath,
          reducer
        }, config);
        return {
          ...slice,
          ...makeSelectorProps(newReducerPath, true)
        };
      }
    };
    return slice;
  };
}
function wrapSelector(selector, selectState, getInitialState, injected) {
  function wrapper(rootState, ...args) {
    let sliceState = selectState(rootState);
    if (typeof sliceState === "undefined") {
      if (injected) {
        sliceState = getInitialState();
      } else if (true) {
        throw new Error(false ? formatProdErrorMessage(16) : "selectState returned undefined for an uninjected slice reducer");
      }
    }
    return selector(sliceState, ...args);
  }
  wrapper.unwrapped = selector;
  return wrapper;
}
var createSlice = buildCreateSlice();
function buildReducerCreators() {
  function asyncThunk(payloadCreator, config) {
    return {
      _reducerDefinitionType: "asyncThunk",
      payloadCreator,
      ...config
    };
  }
  asyncThunk.withTypes = () => asyncThunk;
  return {
    reducer(caseReducer) {
      return Object.assign({
        [caseReducer.name](...args) {
          return caseReducer(...args);
        }
      }[caseReducer.name], {
        _reducerDefinitionType: "reducer"
      });
    },
    preparedReducer(prepare, reducer) {
      return {
        _reducerDefinitionType: "reducerWithPrepare",
        prepare,
        reducer
      };
    },
    asyncThunk
  };
}
function handleNormalReducerDefinition({
  type,
  reducerName,
  createNotation
}, maybeReducerWithPrepare, context) {
  let caseReducer;
  let prepareCallback;
  if ("reducer" in maybeReducerWithPrepare) {
    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {
      throw new Error(false ? formatProdErrorMessage(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
    }
    caseReducer = maybeReducerWithPrepare.reducer;
    prepareCallback = maybeReducerWithPrepare.prepare;
  } else {
    caseReducer = maybeReducerWithPrepare;
  }
  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));
}
function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
  return reducerDefinition._reducerDefinitionType === "asyncThunk";
}
function isCaseReducerWithPrepareDefinition(reducerDefinition) {
  return reducerDefinition._reducerDefinitionType === "reducerWithPrepare";
}
function handleThunkCaseReducerDefinition({
  type,
  reducerName
}, reducerDefinition, context, cAT) {
  if (!cAT) {
    throw new Error(false ? formatProdErrorMessage(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
  }
  const {
    payloadCreator,
    fulfilled,
    pending,
    rejected,
    settled,
    options
  } = reducerDefinition;
  const thunk2 = cAT(type, payloadCreator, options);
  context.exposeAction(reducerName, thunk2);
  if (fulfilled) {
    context.addCase(thunk2.fulfilled, fulfilled);
  }
  if (pending) {
    context.addCase(thunk2.pending, pending);
  }
  if (rejected) {
    context.addCase(thunk2.rejected, rejected);
  }
  if (settled) {
    context.addMatcher(thunk2.settled, settled);
  }
  context.exposeCaseReducer(reducerName, {
    fulfilled: fulfilled || noop4,
    pending: pending || noop4,
    rejected: rejected || noop4,
    settled: settled || noop4
  });
}
function noop4() {
}
var listener = "listener";
var completed = "completed";
var cancelled = "cancelled";
var taskCancelled = `task-${cancelled}`;
var taskCompleted = `task-${completed}`;
var listenerCancelled = `${listener}-${cancelled}`;
var listenerCompleted = `${listener}-${completed}`;
var assertFunction = (func, expected) => {
  if (typeof func !== "function") {
    throw new Error(false ? formatProdErrorMessage(32) : `${expected} is not a function`);
  }
};
var {
  assign
} = Object;
var alm = "listenerMiddleware";
var getListenerEntryPropsFrom = (options) => {
  let {
    type,
    actionCreator,
    matcher,
    predicate,
    effect
  } = options;
  if (type) {
    predicate = createAction(type).match;
  } else if (actionCreator) {
    type = actionCreator.type;
    predicate = actionCreator.match;
  } else if (matcher) {
    predicate = matcher;
  } else if (predicate) {
  } else {
    throw new Error(false ? formatProdErrorMessage(21) : "Creating or removing a listener requires one of the known fields for matching an action");
  }
  assertFunction(effect, "options.listener");
  return {
    predicate,
    type,
    effect
  };
};
var createListenerEntry = Object.assign((options) => {
  const {
    type,
    predicate,
    effect
  } = getListenerEntryPropsFrom(options);
  const id = nanoid5();
  const entry = {
    id,
    effect,
    type,
    predicate,
    pending: /* @__PURE__ */ new Set(),
    unsubscribe: () => {
      throw new Error(false ? formatProdErrorMessage(22) : "Unsubscribe not initialized");
    }
  };
  return entry;
}, {
  withTypes: () => createListenerEntry
});
var addListener = Object.assign(createAction(`${alm}/add`), {
  withTypes: () => addListener
});
var clearAllListeners = createAction(`${alm}/removeAll`);
var removeListener = Object.assign(createAction(`${alm}/remove`), {
  withTypes: () => removeListener
});
var ORIGINAL_STATE = Symbol.for("rtk-state-proxy-original");

// src/logic/stores.ts
var globalSessionSlice = createSlice({
  name: "global-session",
  initialState: {
    activeEmbedId: null
  },
  reducers: {
    setActiveEmbedId: (state, data) => {
      state.activeEmbedId = data.payload;
    }
  }
});
var { setActiveEmbedId } = globalSessionSlice.actions;
var store = configureStore({
  reducer: globalSessionSlice.reducer
});

// src/extensions/widgets/writing-embed-widget.tsx
function registerWritingEmbed(plugin) {
  plugin.registerMarkdownCodeBlockProcessor(WRITE_EMBED_KEY, (source, el, ctx) => {
    const embedData = JSON.parse(source);
    const embedCtrls = {
      removeEmbed: () => removeEmbed(plugin, ctx, el)
    };
    if (embedData.filepath) {
      ctx.addChild(new WritingEmbedWidget(el, plugin, embedData, embedCtrls));
    }
  });
}
var WritingEmbedWidget = class extends import_obsidian10.MarkdownRenderChild {
  constructor(el, plugin, embedData, embedCtrls) {
    super(el);
    this.save = async (pageData) => {
      if (!this.fileRef)
        return;
      const pageDataStr = stringifyPageData(pageData);
      await this.plugin.app.vault.modify(this.fileRef, pageDataStr);
    };
    this.el = el;
    this.plugin = plugin;
    this.embedData = embedData;
    this.embedCtrls = embedCtrls;
  }
  async onload() {
    const v = this.plugin.app.vault;
    this.fileRef = v.getAbstractFileByPath(this.embedData.filepath);
    if (!this.fileRef || !(this.fileRef instanceof import_obsidian10.TFile)) {
      this.el.createEl("p").textContent = "Ink writing file not found: " + this.embedData.filepath;
      return;
    }
    const pageDataStr = await v.read(this.fileRef);
    const pageData = JSON.parse(pageDataStr);
    if (!this.root)
      this.root = (0, import_client2.createRoot)(this.el);
    this.root.render(/* @__PURE__ */ React71.createElement(Provider_default, {
      store
    }, /* @__PURE__ */ React71.createElement(writing_embed_default, {
      plugin: this.plugin,
      fileRef: this.fileRef,
      pageData,
      save: this.save,
      remove: this.embedCtrls.removeEmbed
    })));
    applyCommonAncestorStyling(this.el);
  }
  async onunload() {
    var _a2;
    (_a2 = this.root) == null ? void 0 : _a2.unmount();
  }
};

// src/commands/insert-existing-writing-file.ts
var import_obsidian11 = require("obsidian");
var insertExistingWritingFile = (plugin, editor) => {
  new SelectHandwritingFileModal(plugin.app, (filepath) => {
    let embedStr = buildWritingEmbed(filepath);
    editor.replaceRange(embedStr, editor.getCursor());
  }).open();
};
var SelectHandwritingFileModal = class extends import_obsidian11.FuzzySuggestModal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  getItems() {
    const allFiles = this.app.vault.getFiles();
    const files = [];
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      if (file.extension === WRITE_FILE_EXT)
        files.push(file);
    }
    return files;
  }
  getItemText(file) {
    return file.basename;
  }
  onChooseItem(file, evt) {
    this.onSubmit(file.path);
  }
};
var insert_existing_writing_file_default = insertExistingWritingFile;

// src/defaults/default-tldraw-writing-store.js
var defaultHandwritingTldrawStore = {
  "store": {
    "document:document": {
      "gridSize": 10,
      "name": "",
      "meta": {},
      "id": "document:document",
      "typeName": "document"
    },
    "page:3qj9EtNgqSCW_6knX2K9_": {
      "meta": {},
      "id": "page:3qj9EtNgqSCW_6knX2K9_",
      "name": "Handwritten Note",
      "index": "a1",
      "typeName": "page"
    },
    "shape:writing-lines": {
      "x": 0,
      "y": 0,
      "rotation": 0,
      "isLocked": true,
      "opacity": 1,
      "meta": {},
      "type": "writing-lines",
      "parentId": "page:3qj9EtNgqSCW_6knX2K9_",
      "index": "a1",
      "props": {
        "x": 0,
        "y": 0,
        "w": WRITING_PAGE_WIDTH,
        "h": WRITING_MIN_PAGE_HEIGHT
      },
      "id": "shape:writing-lines",
      "typeName": "shape"
    },
    "shape:writing-container": {
      "x": 0,
      "y": 0,
      "rotation": 0,
      "isLocked": true,
      "opacity": 1,
      "meta": {},
      "type": "writing-container",
      "parentId": "page:3qj9EtNgqSCW_6knX2K9_",
      "index": "a1",
      "props": {
        "x": 0,
        "y": 0,
        "w": WRITING_PAGE_WIDTH,
        "h": WRITING_MIN_PAGE_HEIGHT
      },
      "id": "shape:writing-container",
      "typeName": "shape"
    }
  },
  "schema": {
    "schemaVersion": 1,
    "storeVersion": 4,
    "recordVersions": {
      "asset": {
        "version": 1,
        "subTypeKey": "type",
        "subTypeVersions": {
          "image": 2,
          "video": 2,
          "bookmark": 0
        }
      },
      "camera": {
        "version": 1
      },
      "document": {
        "version": 2
      },
      "instance": {
        "version": 21
      },
      "instance_page_state": {
        "version": 5
      },
      "page": {
        "version": 1
      },
      "shape": {
        "version": 3,
        "subTypeKey": "type",
        "subTypeVersions": {
          "group": 0,
          "text": 1,
          "bookmark": 1,
          "draw": 1,
          "geo": 7,
          "note": 4,
          "line": 1,
          "frame": 0,
          "arrow": 1,
          "highlight": 0,
          "embed": 4,
          "image": 2,
          "video": 1,
          "writing-container": 0
        }
      },
      "instance_presence": {
        "version": 5
      },
      "pointer": {
        "version": 1
      }
    }
  }
};
var default_tldraw_writing_store_default = defaultHandwritingTldrawStore;

// src/utils/createFoldersForFilepath.ts
var createFoldersForFilepath = async (plugin, path) => {
  const folders = path.split("/");
  folders.pop();
  try {
    await plugin.app.vault.createFolder(folders.join("/"));
  } catch (e) {
  }
};

// src/commands/create-new-writing-file.ts
var createNewWritingFile = async (plugin, instigatingFile) => {
  const filepath = await getNewTimestampedWritingFilepath(plugin, instigatingFile);
  const pageData = buildWritingFileData({
    tldrawData: default_tldraw_writing_store_default
  });
  await createFoldersForFilepath(plugin, filepath);
  const fileRef = await plugin.app.vault.create(filepath, stringifyPageData(pageData));
  return fileRef;
};
var create_new_writing_file_default = createNewWritingFile;

// src/commands/insert-new-writing-file.ts
var insertNewWritingFile = async (plugin, editor) => {
  const activeFile = plugin.app.workspace.getActiveFile();
  const fileRef = await create_new_writing_file_default(plugin, activeFile);
  let embedStr = buildWritingEmbed(fileRef.path);
  activateNextEmbed();
  editor.replaceRange(embedStr, editor.getCursor());
};
var insert_new_writing_file_default = insertNewWritingFile;

// src/views/writing-view.tsx
var import_obsidian12 = require("obsidian");
var React72 = __toESM(require_react());
var import_client3 = __toESM(require_client());
var WRITING_VIEW_TYPE = "ink_writing-view";
function registerWritingView(plugin) {
  plugin.registerView(WRITING_VIEW_TYPE, (leaf) => new WritingView(leaf, plugin));
  plugin.registerExtensions([WRITE_FILE_EXT], WRITING_VIEW_TYPE);
}
var WritingView = class extends import_obsidian12.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.tldrawControls = {};
    this.getDisplayText = () => {
      var _a2;
      return ((_a2 = this.file) == null ? void 0 : _a2.basename) || "Handwritten note";
    };
    this.setViewData = (fileContents, clear) => {
      if (!this.file)
        return;
      const pageData = JSON.parse(fileContents);
      this.pageData = pageData;
      const viewContent = this.containerEl.children[1];
      viewContent.setAttr("style", "padding: 0;");
      if (this.root)
        this.clear();
      this.root = (0, import_client3.createRoot)(viewContent);
      this.root.render(/* @__PURE__ */ React72.createElement(TldrawWritingEditor, {
        plugin: this.plugin,
        fileRef: this.file,
        pageData: this.pageData,
        save: this.saveFile,
        registerControls: (controls) => {
          this.tldrawControls.resize = controls.resize;
        }
      }));
    };
    this.saveFile = (pageData) => {
      this.pageData = pageData;
      this.save(false);
    };
    this.getViewData = () => {
      return stringifyPageData(this.pageData);
    };
    this.clear = () => {
      var _a2;
      (_a2 = this.root) == null ? void 0 : _a2.unmount();
    };
    this.onResize = () => {
    };
    this.plugin = plugin;
  }
  getViewType() {
    return WRITING_VIEW_TYPE;
  }
};

// src/defaults/default-tldraw-drawing-store.js
var defaultHandwritingTldrawStore2 = {
  "store": {
    "document:document": {
      "gridSize": 10,
      "name": "",
      "meta": {},
      "id": "document:document",
      "typeName": "document"
    },
    "page:3qj9EtNgqSCW_6knX2K9_": {
      "meta": {},
      "id": "page:3qj9EtNgqSCW_6knX2K9_",
      "name": "Handwritten Note",
      "index": "a1",
      "typeName": "page"
    }
  },
  "schema": {
    "schemaVersion": 1,
    "storeVersion": 4,
    "recordVersions": {
      "asset": {
        "version": 1,
        "subTypeKey": "type",
        "subTypeVersions": {
          "image": 2,
          "video": 2,
          "bookmark": 0
        }
      },
      "camera": {
        "version": 1
      },
      "document": {
        "version": 2
      },
      "instance": {
        "version": 21
      },
      "instance_page_state": {
        "version": 5
      },
      "page": {
        "version": 1
      },
      "shape": {
        "version": 3,
        "subTypeKey": "type",
        "subTypeVersions": {
          "group": 0,
          "text": 1,
          "bookmark": 1,
          "draw": 1,
          "geo": 7,
          "note": 4,
          "line": 1,
          "frame": 0,
          "arrow": 1,
          "highlight": 0,
          "embed": 4,
          "image": 2,
          "video": 1,
          "writing-container": 0
        }
      },
      "instance_presence": {
        "version": 5
      },
      "pointer": {
        "version": 1
      }
    }
  }
};
var default_tldraw_drawing_store_default = defaultHandwritingTldrawStore2;

// src/commands/create-new-drawing-file.ts
var createNewDrawingFile = async (plugin, instigatingFile) => {
  const filepath = await getNewTimestampedDrawingFilepath(plugin, instigatingFile);
  const pageData = buildDrawingFileData({
    tldrawData: default_tldraw_drawing_store_default
  });
  await createFoldersForFilepath(plugin, filepath);
  const fileRef = await plugin.app.vault.create(filepath, stringifyPageData(pageData));
  return fileRef;
};
var create_new_drawing_file_default = createNewDrawingFile;

// src/commands/insert-new-drawing-file.ts
var insertNewDrawingFile = async (plugin, editor) => {
  const activeFile = plugin.app.workspace.getActiveFile();
  const fileRef = await create_new_drawing_file_default(plugin, activeFile);
  let embedStr = buildDrawingEmbed(fileRef.path);
  activateNextEmbed();
  editor.replaceRange(embedStr, editor.getCursor());
};
var insert_new_drawing_file_default = insertNewDrawingFile;

// src/commands/insert-existing-drawing-file.ts
var import_obsidian13 = require("obsidian");
var insertExistingDrawingFile = (plugin, editor) => {
  new SelectHandwritingFileModal2(plugin.app, (filepath) => {
    let embedStr = buildDrawingEmbed(filepath);
    editor.replaceRange(embedStr, editor.getCursor());
  }).open();
};
var SelectHandwritingFileModal2 = class extends import_obsidian13.FuzzySuggestModal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  getItems() {
    const allFiles = this.app.vault.getFiles();
    const files = [];
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      if (file.extension === DRAW_FILE_EXT)
        files.push(file);
    }
    return files;
  }
  getItemText(file) {
    return file.basename;
  }
  onChooseItem(file, evt) {
    this.onSubmit(file.path);
  }
};
var insert_existing_drawing_file_default = insertExistingDrawingFile;

// src/views/drawing-view.tsx
var import_obsidian14 = require("obsidian");
var React77 = __toESM(require_react());
var import_client4 = __toESM(require_client());

// src/tldraw/drawing/tldraw-drawing-editor.tsx
var import_react140 = __toESM(require_react());
var React76 = __toESM(require_react());

// src/tldraw/drawing-menu/drawing-menu.tsx
var React74 = __toESM(require_react());

// src/graphics/icons/draw-icon.tsx
var React73 = __toESM(require_react());
var DrawIcon = (props) => /* @__PURE__ */ React73.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: "1em",
  viewBox: "0 -960 960 960",
  width: "1em",
  ...props
}, /* @__PURE__ */ React73.createElement("path", {
  d: "M554-120q-54 0-91-37t-37-89q0-76 61.5-137.5T641-460q-3-36-18-54.5T582-533q-30 0-65 25t-83 82q-78 93-114.5 121T241-277q-51 0-86-38t-35-92q0-54 23.5-110.5T223-653q19-26 28-44t9-29q0-7-2.5-10.5T250-740q-5 0-12 3t-15 11q-15 14-34.5 15T155-724q-15-16-15.5-37.5T155-797q24-21 48-32t47-11q46 0 78 32t32 80q0 29-15 64t-50 84q-38 54-56.5 95T220-413q0 17 5.5 26.5T241-377q10 0 17.5-5.5T286-409q13-14 31-34.5t44-50.5q63-75 114-107t107-32q67 0 110 45t49 123h49q21 0 35.5 14.5T840-415q0 21-14.5 35.5T790-365h-49q-8 112-58.5 178.5T554-120Zm2-100q32 0 54-36.5T640-358q-46 11-80 43.5T526-250q0 14 8 22t22 8Z"
}));

// src/tldraw/drawing-menu/drawing-menu.tsx
var DrawingMenu = React74.forwardRef((props, ref) => {
  return /* @__PURE__ */ React74.createElement(React74.Fragment, null, /* @__PURE__ */ React74.createElement("div", {
    ref,
    className: "ink_menu-bar"
  }, /* @__PURE__ */ React74.createElement("div", {
    className: "ink_quick-menu"
  }, /* @__PURE__ */ React74.createElement("button", {
    onPointerDown: props.onUndoClick,
    disabled: !props.canUndo
  }, /* @__PURE__ */ React74.createElement(UndoIcon, null)), /* @__PURE__ */ React74.createElement("button", {
    onPointerDown: props.onRedoClick,
    disabled: !props.canRedo
  }, /* @__PURE__ */ React74.createElement(RedoIcon, null))), /* @__PURE__ */ React74.createElement("div", {
    className: "ink_tool-menu"
  }, /* @__PURE__ */ React74.createElement("button", {
    onPointerDown: props.onSelectClick,
    disabled: props.curTool === "select" /* select */
  }, /* @__PURE__ */ React74.createElement(SelectIcon, null)), /* @__PURE__ */ React74.createElement("button", {
    onPointerDown: props.onDrawClick,
    disabled: props.curTool === "draw" /* draw */
  }, /* @__PURE__ */ React74.createElement(DrawIcon, null)), /* @__PURE__ */ React74.createElement("button", {
    onPointerDown: props.onEraseClick,
    disabled: props.curTool === "eraser" /* eraser */
  }, /* @__PURE__ */ React74.createElement(EraseIcon, null))), /* @__PURE__ */ React74.createElement("div", {
    className: "ink_other-menu"
  })));
});
var drawing_menu_default = DrawingMenu;

// src/tldraw/extended-drawing-menu/extended-drawing-menu.tsx
var React75 = __toESM(require_react());
var ExtendedDrawingMenu = (props) => {
  return /* @__PURE__ */ React75.createElement(React75.Fragment, null, /* @__PURE__ */ React75.createElement("div", {
    className: "ink_extended-writing-menu"
  }, /* @__PURE__ */ React75.createElement("button", {
    onPointerDown: () => props.onLockClick()
  }, /* @__PURE__ */ React75.createElement(LockIcon, null)), /* @__PURE__ */ React75.createElement(overflow_menu_default, {
    menuOptions: props.menuOptions
  })));
};
var extended_drawing_menu_default = ExtendedDrawingMenu;

// src/tldraw/drawing/tldraw-drawing-editor.tsx
var myOverrides2 = {};
function TldrawDrawingEditor(props) {
  const shortDelayPostProcessTimeoutRef = (0, import_react140.useRef)();
  const longDelayPostProcessTimeoutRef = (0, import_react140.useRef)();
  const editorRef = (0, import_react140.useRef)();
  const [curTool, setCurTool] = React76.useState("draw" /* draw */);
  const [canUndo, setCanUndo] = React76.useState(false);
  const [canRedo, setCanRedo] = React76.useState(false);
  const [storeSnapshot] = React76.useState(prepareDrawingSnapshot(props.pageData.tldraw));
  function undo() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.undo();
  }
  function redo() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.redo();
  }
  function activateSelectTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("select");
    setCurTool("select" /* select */);
  }
  function activateDrawTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("draw");
    setCurTool("draw" /* draw */);
  }
  function activateEraseTool() {
    const editor = editorRef.current;
    if (!editor)
      return;
    editor.setCurrentTool("eraser");
    setCurTool("eraser" /* eraser */);
  }
  const handleMount = (_editor) => {
    const editor = editorRef.current = _editor;
    preventTldrawCanvasesCausingObsidianGestures(editor);
    adaptTldrawToObsidianThemeMode(editor);
    editor.updateInstanceState({
      isDebugMode: false
    });
    initDrawingCamera(editor);
    activateDrawTool();
    if (props.embedded) {
      editor.updateInstanceState({ canMoveCamera: false });
    }
    const removeUserActionListener = editor.store.listen((entry) => {
      const activity = getActivityType(entry);
      switch (activity) {
        case 0 /* PointerMoved */:
          break;
        case 2 /* CameraMovedAutomatically */:
        case 1 /* CameraMovedManually */:
          break;
        case 3 /* DrawingStarted */:
          resetInputPostProcessTimers();
          break;
        case 4 /* DrawingContinued */:
          resetInputPostProcessTimers();
          break;
        case 5 /* DrawingCompleted */:
          instantInputPostProcess(editor, entry);
          embedPostProcess(editor);
          smallDelayInputPostProcess(editor);
          longDelayInputPostProcess(editor);
          break;
        case 6 /* DrawingErased */:
          embedPostProcess(editor);
          instantInputPostProcess(editor, entry);
          smallDelayInputPostProcess(editor);
          longDelayInputPostProcess(editor);
          break;
        default:
          instantInputPostProcess(editor, entry);
          smallDelayInputPostProcess(editor);
          longDelayInputPostProcess(editor);
      }
    }, {
      source: "user",
      scope: "all"
    });
    const removeStoreChangeListener = editor.store.listen((entry) => {
      setCanUndo(editor.getCanUndo());
      setCanRedo(editor.getCanRedo());
    });
    const unmountActions = () => {
      resetInputPostProcessTimers();
      removeUserActionListener();
      removeStoreChangeListener();
    };
    if (props.registerControls) {
      props.registerControls({
        save: () => completeSave(editor),
        saveAndHalt: async () => {
          await completeSave(editor);
          unmountActions();
        }
      });
    }
    if (props.onReady)
      props.onReady();
    return () => {
      unmountActions();
    };
  };
  const embedPostProcess = (editor) => {
  };
  const instantInputPostProcess = (editor, entry) => {
  };
  const smallDelayInputPostProcess = (editor) => {
    resetShortPostProcessTimer();
    shortDelayPostProcessTimeoutRef.current = setTimeout(() => {
      incrementalSave(editor);
    }, DRAW_SHORT_DELAY_MS);
  };
  const longDelayInputPostProcess = (editor) => {
    resetLongPostProcessTimer();
    longDelayPostProcessTimeoutRef.current = setTimeout(() => {
      completeSave(editor);
    }, DRAW_LONG_DELAY_MS);
  };
  const resetShortPostProcessTimer = () => {
    clearTimeout(shortDelayPostProcessTimeoutRef.current);
  };
  const resetLongPostProcessTimer = () => {
    clearTimeout(longDelayPostProcessTimeoutRef.current);
  };
  const resetInputPostProcessTimers = () => {
    resetShortPostProcessTimer();
    resetLongPostProcessTimer();
  };
  const incrementalSave = async (editor) => {
    const tldrawData = editor.store.getSnapshot();
    const pageData = buildDrawingFileData({
      tldrawData,
      previewIsOutdated: true
    });
    props.save(pageData);
  };
  const completeSave = async (editor) => {
    let previewUri;
    const tldrawData = editor.store.getSnapshot();
    const svgObj = await getDrawingSvg(editor);
    if (svgObj) {
      previewUri = svgObj.svg;
    }
    if (previewUri) {
      const pageData = buildDrawingFileData({
        tldrawData,
        previewUri
      });
      props.save(pageData);
    } else {
      const pageData = buildDrawingFileData({
        tldrawData
      });
      props.save(pageData);
    }
    return;
  };
  return /* @__PURE__ */ React76.createElement(React76.Fragment, null, /* @__PURE__ */ React76.createElement("div", {
    className: "ddc_ink_drawing-editor",
    style: {
      height: "100%",
      position: "relative"
    }
  }, /* @__PURE__ */ React76.createElement(Tldraw, {
    snapshot: storeSnapshot,
    onMount: handleMount,
    overrides: myOverrides2,
    hideUi: true,
    autoFocus: props.embedded ? false : true
  }), /* @__PURE__ */ React76.createElement(PrimaryMenuBar, null, /* @__PURE__ */ React76.createElement(drawing_menu_default, {
    canUndo,
    canRedo,
    curTool,
    onUndoClick: undo,
    onRedoClick: redo,
    onSelectClick: activateSelectTool,
    onDrawClick: activateDrawTool,
    onEraseClick: activateEraseTool
  }), props.embedded && props.commonExtendedOptions && /* @__PURE__ */ React76.createElement(extended_drawing_menu_default, {
    onLockClick: async () => {
      if (props.closeEditor)
        props.closeEditor();
    },
    menuOptions: props.commonExtendedOptions
  }))));
}
async function getDrawingSvg(editor) {
  const allShapeIds = Array.from(editor.getCurrentPageShapeIds().values());
  const svgObj = await editor.getSvgString(allShapeIds);
  return svgObj;
}

// src/views/drawing-view.tsx
var DRAWING_VIEW_TYPE = "ink_drawing-view";
function registerDrawingView(plugin) {
  plugin.registerView(DRAWING_VIEW_TYPE, (leaf) => new DrawingView(leaf, plugin));
  plugin.registerExtensions([DRAW_FILE_EXT], DRAWING_VIEW_TYPE);
}
var DrawingView = class extends import_obsidian14.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.getDisplayText = () => {
      var _a2;
      return ((_a2 = this.file) == null ? void 0 : _a2.basename) || "Drawing";
    };
    this.setViewData = (fileContents, clear) => {
      if (!this.file)
        return;
      const pageData = JSON.parse(fileContents);
      this.pageData = pageData;
      const viewContent = this.containerEl.children[1];
      viewContent.setAttr("style", "padding: 0;");
      if (this.root)
        this.clear();
      this.root = (0, import_client4.createRoot)(viewContent);
      this.root.render(/* @__PURE__ */ React77.createElement(TldrawDrawingEditor, {
        plugin: this.plugin,
        fileRef: this.file,
        pageData: this.pageData,
        save: this.saveFile
      }));
    };
    this.saveFile = (pageData) => {
      this.pageData = pageData;
      this.save(false);
    };
    this.getViewData = () => {
      return stringifyPageData(this.pageData);
    };
    this.clear = () => {
      var _a2;
      (_a2 = this.root) == null ? void 0 : _a2.unmount();
    };
    this.plugin = plugin;
  }
  getViewType() {
    return DRAWING_VIEW_TYPE;
  }
};

// src/extensions/widgets/drawing-embed-widget.tsx
var import_obsidian15 = require("obsidian");
var React80 = __toESM(require_react());
var import_client5 = __toESM(require_client());

// src/tldraw/drawing/drawing-embed.tsx
var React79 = __toESM(require_react());
var import_react141 = __toESM(require_react());

// src/tldraw/drawing/drawing-embed-preview/drawing-embed-preview.tsx
var import_classnames31 = __toESM(require_classnames());
var React78 = __toESM(require_react());
var DrawingEmbedPreview = (props) => {
  const svgRef = React78.useRef(null);
  const isImg = props.src.slice(0, 4) === "data";
  return /* @__PURE__ */ React78.createElement(React78.Fragment, null, /* @__PURE__ */ React78.createElement("div", {
    ref: svgRef,
    className: (0, import_classnames31.default)([
      "ddc_ink_drawing-embed-preview",
      props.plugin.settings.drawingFrameWhenLocked && "ddc_ink_visible-frame",
      props.plugin.settings.drawingBackgroundWhenLocked && "ddc_ink_visible-background"
    ]),
    style: {
      position: "relative"
    },
    onClick: props.onClick
  }, props.src && /* @__PURE__ */ React78.createElement(React78.Fragment, null, isImg && /* @__PURE__ */ React78.createElement("img", {
    src: props.src,
    style: {
      width: "100%",
      cursor: "pointer",
      pointerEvents: "all"
    },
    onLoad: () => props.onReady()
  }), !isImg && /* @__PURE__ */ React78.createElement(InlineSVG, {
    src: props.src,
    style: {
      width: "100%",
      height: "unset",
      cursor: "pointer"
    },
    pointerEvents: "visible",
    onLoad: () => props.onReady()
  })), props.isActive && /* @__PURE__ */ React78.createElement(PrimaryMenuBar, null, /* @__PURE__ */ React78.createElement(transition_menu_default, {
    onEditClick: props.onEditClick,
    menuOptions: props.commonExtendedOptions
  }))));
};

// src/utils/open-file.ts
async function openInkFile(plugin, fileRef) {
  openInActiveView(plugin, fileRef);
}
async function openInActiveView(plugin, fileRef) {
  let { workspace } = plugin.app;
  let leaf = workspace.getLeaf();
  await leaf.openFile(fileRef);
}

// src/tldraw/drawing/drawing-embed.tsx
var emptyDrawingSvgStr = require_empty_drawing_embed();
function DrawingEmbed(props) {
  const embedContainerRef = (0, import_react141.useRef)(null);
  const [state, setState] = (0, import_react141.useState)("preview");
  const [curPageData, setCurPageData] = (0, import_react141.useState)(props.pageData);
  const editorControlsRef = (0, import_react141.useRef)();
  const [embedId] = (0, import_react141.useState)(nanoid4());
  const activeEmbedId = useSelector((state2) => state2.activeEmbedId);
  const dispatch2 = useDispatch();
  const [staticEmbedHeight, setStaticEmbedHeight] = (0, import_react141.useState)(null);
  React79.useEffect(() => {
    if (embedShouldActivateImmediately()) {
      dispatch2({ type: "global-session/setActiveEmbedId", payload: embedId });
      switchToEditMode();
    }
  });
  const registerEditorControls = (handlers) => {
    editorControlsRef.current = handlers;
  };
  let isActive = embedId === activeEmbedId;
  if (!isActive && state === "edit") {
    saveAndSwitchToPreviewMode();
  }
  const commonExtendedOptions = [
    {
      text: "Copy drawing",
      action: async () => {
        await rememberDrawingFile(props.plugin, props.fileRef);
      }
    },
    {
      text: "Open drawing",
      action: async () => {
        openInkFile(props.plugin, props.fileRef);
      }
    },
    {
      text: "Remove embed",
      action: () => {
        props.remove();
      }
    }
  ];
  return /* @__PURE__ */ React79.createElement(React79.Fragment, null, /* @__PURE__ */ React79.createElement("div", {
    ref: embedContainerRef,
    className: "ddc_ink_drawing-embed",
    style: {
      paddingTop: state == "edit" ? "3em" : "1em",
      paddingBottom: state == "edit" ? "2em" : "0.5em",
      height: state === "edit" ? "600px" : "auto"
    }
  }, state === "preview" && /* @__PURE__ */ React79.createElement(DrawingEmbedPreview, {
    plugin: props.plugin,
    onReady: () => setStaticEmbedHeight(null),
    isActive,
    src: curPageData.previewUri || emptyDrawingSvgStr,
    onClick: (event) => {
      event.preventDefault();
      dispatch2({ type: "global-session/setActiveEmbedId", payload: embedId });
    },
    onEditClick: async () => {
      const newPageData = await refreshPageData2(props.plugin, props.fileRef);
      setCurPageData(newPageData);
      switchToEditMode();
    },
    commonExtendedOptions
  }), state === "edit" && /* @__PURE__ */ React79.createElement(TldrawDrawingEditor, {
    onReady: () => setStaticEmbedHeight(null),
    plugin: props.plugin,
    fileRef: props.fileRef,
    pageData: curPageData,
    save: props.save,
    embedded: true,
    registerControls: registerEditorControls,
    closeEditor: saveAndSwitchToPreviewMode,
    commonExtendedOptions
  })));
  function switchToEditMode() {
    var _a2;
    setStaticEmbedHeight(((_a2 = embedContainerRef.current) == null ? void 0 : _a2.offsetHeight) || null);
    setState("edit");
  }
  async function saveAndSwitchToPreviewMode() {
    if (editorControlsRef.current) {
      await editorControlsRef.current.saveAndHalt();
    }
    const newPageData = await refreshPageData2(props.plugin, props.fileRef);
    setCurPageData(newPageData);
    setState("preview");
  }
}
var drawing_embed_default = DrawingEmbed;
async function refreshPageData2(plugin, file) {
  const v = plugin.app.vault;
  const pageDataStr = await v.read(file);
  const pageData = JSON.parse(pageDataStr);
  return pageData;
}

// src/extensions/widgets/drawing-embed-widget.tsx
function registerDrawingEmbed(plugin) {
  plugin.registerMarkdownCodeBlockProcessor(DRAW_EMBED_KEY, (source, el, ctx) => {
    const embedData = JSON.parse(source);
    const embedCtrls = {
      removeEmbed: () => removeEmbed(plugin, ctx, el)
    };
    if (embedData.filepath) {
      ctx.addChild(new DrawingEmbedWidget(el, plugin, embedData, embedCtrls));
    }
  });
}
var DrawingEmbedWidget = class extends import_obsidian15.MarkdownRenderChild {
  constructor(el, plugin, embedData, embedCtrls) {
    super(el);
    this.save = async (pageData) => {
      if (!this.fileRef)
        return;
      const pageDataStr = stringifyPageData(pageData);
      await this.plugin.app.vault.modify(this.fileRef, pageDataStr);
    };
    this.el = el;
    this.plugin = plugin;
    this.embedData = embedData;
    this.embedCtrls = embedCtrls;
  }
  async onload() {
    const v = this.plugin.app.vault;
    this.fileRef = v.getAbstractFileByPath(this.embedData.filepath);
    if (!this.fileRef || !(this.fileRef instanceof import_obsidian15.TFile)) {
      this.el.createEl("p").textContent = "Ink drawing file not found.";
      return;
    }
    const pageDataStr = await v.read(this.fileRef);
    const pageData = JSON.parse(pageDataStr);
    this.root = (0, import_client5.createRoot)(this.el);
    this.root.render(/* @__PURE__ */ React80.createElement(Provider_default, {
      store
    }, /* @__PURE__ */ React80.createElement(drawing_embed_default, {
      plugin: this.plugin,
      fileRef: this.fileRef,
      pageData,
      save: this.save,
      remove: this.embedCtrls.removeEmbed
    })));
    applyCommonAncestorStyling(this.el);
  }
  async onunload() {
    var _a2;
    (_a2 = this.root) == null ? void 0 : _a2.unmount();
  }
};

// src/commands/insert-remembered-drawing-file.ts
var import_obsidian17 = require("obsidian");

// src/modals/confirmation-modal/insert-copied-file-modal.ts
var import_obsidian16 = require("obsidian");
var InsertCopiedFileModal = class extends import_obsidian16.Modal {
  constructor(options) {
    super(options.plugin.app);
    this.filetype = options.filetype;
    this.instanceAction = options.instanceAction;
    this.duplicateAction = options.duplicateAction;
    this.cancelAction = options.cancelAction;
  }
  onOpen() {
    const { titleEl, contentEl } = this;
    titleEl.setText(`Insert copied ${this.filetype} file`);
    new import_obsidian16.Setting(contentEl).setClass("ddc_ink_primary-2-button-set").addButton((btn) => {
      btn.setClass("ddc_ink_button");
      btn.setCta();
      btn.setButtonText("Reference existing file");
      btn.onClick(() => {
        this.close();
        this.instanceAction();
      });
    }).addButton((btn) => {
      btn.setClass("ddc_ink_button");
      btn.setCta();
      btn.setButtonText("Make duplicate");
      btn.onClick(() => {
        this.close();
        this.duplicateAction();
      });
    });
    new import_obsidian16.Setting(contentEl).setClass("ddc_ink_modal-actions").addButton((btn) => {
      btn.setClass("ddc_ink_backward-button");
      btn.setButtonText("Cancel");
      btn.onClick(() => {
        this.close();
        this.cancelAction();
      });
    });
  }
  onClose() {
  }
};

// src/commands/insert-remembered-drawing-file.ts
var insertRememberedDrawingFile = async (plugin, editor) => {
  const v = plugin.app.vault;
  const existingFilePath = fetchLocally("rememberedDrawingFile");
  if (!existingFilePath) {
    new import_obsidian17.Notice("Copy a drawing embed first.");
    return;
  }
  const existingFileRef = v.getAbstractFileByPath(existingFilePath);
  if (!(existingFileRef instanceof import_obsidian17.TFile)) {
    new import_obsidian17.Notice("Cannot insert.\nCopied drawing file no longer exists.");
    return;
  }
  new InsertCopiedFileModal({
    plugin,
    filetype: "drawing",
    instanceAction: () => {
      let embedStr = buildDrawingEmbed(existingFileRef.path);
      editor.replaceRange(embedStr, editor.getCursor());
    },
    duplicateAction: async () => {
      const activeFile = plugin.app.workspace.getActiveFile();
      const duplicatedFileRef = await duplicateDrawingFile(plugin, existingFileRef, activeFile);
      if (!duplicatedFileRef)
        return;
      new import_obsidian17.Notice("Drawing file duplicated");
      let embedStr = buildDrawingEmbed(duplicatedFileRef.path);
      editor.replaceRange(embedStr, editor.getCursor());
    },
    cancelAction: () => {
      new import_obsidian17.Notice("Insert cancelled.");
    }
  }).open();
};
var insert_remembered_drawing_file_default = insertRememberedDrawingFile;

// src/commands/insert-remembered-writing-file.ts
var import_obsidian18 = require("obsidian");
var insertRememberedWritingFile = async (plugin, editor) => {
  const v = plugin.app.vault;
  const existingFilePath = fetchLocally("rememberedWritingFile");
  if (!existingFilePath) {
    new import_obsidian18.Notice("Copy a writing embed first.");
    return;
  }
  const existingFileRef = v.getAbstractFileByPath(existingFilePath);
  if (!(existingFileRef instanceof import_obsidian18.TFile)) {
    new import_obsidian18.Notice("Cannot insert.\nCopied writing file no longer exists.");
    return;
  }
  new InsertCopiedFileModal({
    plugin,
    filetype: "writing",
    instanceAction: () => {
      let embedStr = buildWritingEmbed(existingFileRef.path);
      editor.replaceRange(embedStr, editor.getCursor());
    },
    duplicateAction: async () => {
      const activeFile = plugin.app.workspace.getActiveFile();
      const duplicatedFileRef = await duplicateWritingFile(plugin, existingFileRef, activeFile);
      if (!duplicatedFileRef)
        return;
      new import_obsidian18.Notice("Writing file duplicated");
      let embedStr = buildWritingEmbed(duplicatedFileRef.path);
      editor.replaceRange(embedStr, editor.getCursor());
    },
    cancelAction: () => {
      new import_obsidian18.Notice("Insert cancelled.");
    }
  }).open();
};
var insert_remembered_writing_file_default = insertRememberedWritingFile;

// src/graphics/social-icons/social-icons.ts
var blueskySvgStr = require_bluesky();
var mastodonSvgStr = require_mastodon();
var threadsSvgStr = require_threads();
var twitterSvgStr = require_twitter();

// src/notices/version-notices.ts
var semVer = __toESM(require_semver2());
function showVersionNotice(plugin) {
  const curVersion = plugin.manifest.version;
  const lastVersionTipRead = plugin.settings.onboardingTips.lastVersionTipRead;
  const noLastVersionTipRead = !semVer.valid(lastVersionTipRead);
  const updatedToNewerVersion = noLastVersionTipRead || semVer.gt(curVersion, lastVersionTipRead);
  if (!updatedToNewerVersion)
    return;
  switch (curVersion) {
    case "0.2.4":
      show_0_2_4_changes(plugin);
      break;
  }
}
function show_0_2_4_changes(plugin) {
  const noticeBody = createInkNoticeTemplate(1, 3);
  noticeBody.createEl("h1").setText(`Changes in Ink v0.2.4`);
  const listEl = noticeBody.createEl("ul");
  listEl.createEl("li").setText(`Customise the attachment folder in Ink's settings.`);
  listEl.createEl("li").setText(`Remove an embed section through the menu next to the lock button.`);
  listEl.createEl("li").setText(`Additional problem solving tips added to Ink's settings.`);
  listEl.createEl("li").setText(`Drawing embeds enabled by default.`);
  const link = noticeBody.createEl("a");
  link.setAttribute("href", "https://youtube.com/live/nRAABxAG62o");
  link.setText(`View release video`);
  link.onClickEvent((e) => e.stopPropagation());
  const {
    tertiaryBtnEl
  } = createNoticeCtaBar(noticeBody, {
    tertiaryLabel: "Dismiss"
  });
  const notice = launchPersistentInkNotice(noticeBody);
  if (tertiaryBtnEl) {
    tertiaryBtnEl.addEventListener("click", () => {
      notice.hide();
      plugin.settings.onboardingTips.lastVersionTipRead = plugin.manifest.version;
      plugin.saveSettings();
    });
  }
}

// src/main.ts
var InkPlugin = class extends import_obsidian19.Plugin {
  async onload() {
    await this.loadSettings();
    (0, import_obsidian19.addIcon)("bluesky", blueskySvgStr);
    (0, import_obsidian19.addIcon)("mastodon", mastodonSvgStr);
    (0, import_obsidian19.addIcon)("threads", threadsSvgStr);
    (0, import_obsidian19.addIcon)("twitter", twitterSvgStr);
    if (this.settings.writingEnabled) {
      registerWritingView(this);
      registerWritingEmbed(this);
      implementWritingEmbedActions(this);
    }
    if (this.settings.drawingEnabled) {
      registerDrawingView(this);
      registerDrawingEmbed(this);
      implementDrawingEmbedActions(this);
    }
    registerSettingsTab(this);
    showOnboardingTips_maybe(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async resetSettings() {
    this.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
    this.saveSettings();
    new import_obsidian19.Notice("Ink plugin settings reset");
  }
};
function implementWritingEmbedActions(plugin) {
  plugin.addCommand({
    id: "create-handwritten-section",
    name: "Insert new handwriting section",
    editorCallback: (editor) => insert_new_writing_file_default(plugin, editor)
  });
  plugin.addCommand({
    id: "embed-writing-file",
    name: "Insert existing handwriting section",
    editorCallback: (editor) => insert_existing_writing_file_default(plugin, editor)
  });
  plugin.addCommand({
    id: "insert-copied-writing",
    name: "Insert copied handwriting section",
    editorCallback: (editor) => insert_remembered_writing_file_default(plugin, editor)
  });
}
function implementDrawingEmbedActions(plugin) {
  plugin.addCommand({
    id: "create-drawing-section",
    name: "Insert new drawing section",
    editorCallback: (editor) => insert_new_drawing_file_default(plugin, editor)
  });
  plugin.addCommand({
    id: "embed-drawing-file",
    name: "Insert existing drawing section",
    editorCallback: (editor) => insert_existing_drawing_file_default(plugin, editor)
  });
  plugin.addCommand({
    id: "insert-copied-drawing",
    name: "Insert copied drawing",
    editorCallback: (editor) => insert_remembered_drawing_file_default(plugin, editor)
  });
}
function showOnboardingTips_maybe(plugin) {
  const newInstall = showWelcomeTips_maybe(plugin);
  if (!newInstall) {
    showVersionNotice(plugin);
  }
}
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/*!
 * Author: excalidraw
 * MIT License: https://github.com/excalidraw/excalidraw/blob/master/LICENSE
 * https://github.com/excalidraw/excalidraw/blob/48c3465b19f10ec755b3eb84e21a01a468e96e43/packages/excalidraw/utils.ts#L600
 */
/*!
 * MIT License
 * Adapted (mostly copied) the work of https://github.com/fregante/text-field-edit
 * Copyright (c) Federico Brigante <opensource@bfred.it> (bfred.it)
 */
/*!
 * MIT License
 * Modified code originally from <https://github.com/qzb/is-animated>
 * Copyright (c) 2016 Józef Sokołowski <j.k.sokolowski@gmail.com>
 */
/*!
 * canvas-size
 * v1.2.6
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2015-2023 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * use-sync-external-store-with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */


/* nosourcemap */